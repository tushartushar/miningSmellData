Implementation smell,Namespace,Class,File,Method,Description
Long Method,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has 107 lines of code.
Complex Method,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,Cyclomatic complexity of the method is 8
Complex Method,SensorTag,BarometerMeasurement,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetUnit,Cyclomatic complexity of the method is 8
Complex Method,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ConnectAsync,Cyclomatic complexity of the method is 8
Complex Method,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,RegisterForValueChangeEvents,Cyclomatic complexity of the method is 16
Complex Method,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,Cyclomatic complexity of the method is 13
Complex Method,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,Cyclomatic complexity of the method is 36
Long Parameter List,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,CopyBytes,The method has 6 parameters.
Long Statement,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,GetConfig,The length of the statement  "			byte value = await ReadCharacteristicByte (LightIntensityCharacteristicConfigUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 138.
Long Statement,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,GetPeriod,The length of the statement  "	byte v = await ReadCharacteristicByte (LightIntensityCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 134.
Long Statement,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,StartReading,The length of the statement  "		// One bit for each gyro and accelerometer axis (6)' magnetometer (1)' wake-on-motion enable (1)' accelerometer range (2).  " is 122.
Long Statement,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,GetPeriod,The length of the statement  "	byte v = await ReadCharacteristicByte (MovementCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 128.
Long Statement,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,GetPeriod,The length of the statement  "	byte v = await ReadCharacteristicByte (AccelerometerCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 133.
Long Statement,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetPeriod,The length of the statement  "		byte v = await ReadCharacteristicByte (BarometerCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 129.
Long Statement,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The length of the statement  "		//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                 " is 159.
Long Statement,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The length of the statement  "		double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4); " is 131.
Long Statement,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,ReadCalibration,The length of the statement  "	byte[] data = await ReadCharacteristicBytes (BarometerCharacteristicCalibrationUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 140.
Long Statement,SensorTag,BleBatteryLevelService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBatteryLevelService.cs,FindMatchingDevices,The length of the statement  "	var devices = await DeviceInformation.FindAllAsync (GattDeviceService.GetDeviceSelectorFromUuid (GattCharacteristicUuids.BatteryLevel)' new string[] { " is 150.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,FindMatchingDevices,The length of the statement  "	var devices = await DeviceInformation.FindAllAsync (GattDeviceService.GetDeviceSelectorFromUuid (serviceGuid)' new string[] { " is 125.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The length of the statement  "				var task = characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask (); " is 152.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The length of the statement  "				Debug.WriteLine ("GattClientCharacteristicConfigurationDescriptorValue.Notify: " + status + " " + characteristic.Uuid.ToString ("b")); " is 134.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The length of the statement  "						OnError ("Registering to get notification from the device failed saying device is unreachable.  Perhaps the device is connected to another computer?"); " is 151.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,CanNotify,The length of the statement  "		return (characteristic != null && characteristic.CharacteristicProperties.HasFlag (GattCharacteristicProperties.Notify)); " is 121.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,UnregisterCharacteristic,The length of the statement  "		GattCommunicationStatus status = await characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.None); " is 168.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,RegisterForConnectionEvents,The length of the statement  "	PnpObject containerPnpObject = await PnpObject.CreateFromIdAsync (PnpObjectType.DeviceContainer' deviceContainerId' new string[] { " is 130.
Long Statement,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteCharacteristicBytes,The length of the statement  "			throw new Exception (string.Format ("Characteristic '{0}' does not support GattCharacteristicProperties.Write or WriteWithoutResponse"' characteristicGuid)); " is 157.
Long Statement,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ParseMacAddress,The length of the statement  "	ulong.TryParse (value' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.CurrentCulture' out addr); " is 127.
Long Statement,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetConfig,The length of the statement  "			byte value = await ReadCharacteristicByte (HumidityCharacteristicConfigUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 132.
Long Statement,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetPeriod,The length of the statement  "		byte v = await ReadCharacteristicByte (HumidityCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 128.
Long Statement,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,GetPeriod,The length of the statement  "	byte v = await ReadCharacteristicByte (MagnetometerCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached); " is 132.
Long Statement,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,FindAllDevices,The length of the statement  "	foreach (var device in await BleGenericGattService.FindMatchingDevices (BleIRTemperatureService.IRTemperatureServiceUuid)) { " is 124.
Empty Catch Block,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,CanNotify,The method has an empty catch block.
Empty Catch Block,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,RegisterForValueChangeEvents,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,Disconnect,The method has an empty catch block.
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == LightIntensityCharacteristicUuid) {  	if (_lightValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 2) {  				ushort rawData = ReadBigEndianU16bit (reader);  				uint m = (uint)(rawData & 0x0FFF);  				uint e = ((uint)(rawData & 0xF000)) >> 12;  				double lux = (double)m * (0.01 * Math.Pow (2.0' e));  				var measurement = new LightIntensityMeasurement ();  				measurement.Lux = lux;  				OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == LightIntensityCharacteristicUuid) {  	if (_lightValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 2) {  				ushort rawData = ReadBigEndianU16bit (reader);  				uint m = (uint)(rawData & 0x0FFF);  				uint e = ((uint)(rawData & 0xF000)) >> 12;  				double lux = (double)m * (0.01 * Math.Pow (2.0' e));  				var measurement = new LightIntensityMeasurement ();  				measurement.Lux = lux;  				OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == LightIntensityCharacteristicUuid) {  	if (_lightValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 2) {  				ushort rawData = ReadBigEndianU16bit (reader);  				uint m = (uint)(rawData & 0x0FFF);  				uint e = ((uint)(rawData & 0xF000)) >> 12;  				double lux = (double)m * (0.01 * Math.Pow (2.0' e));  				var measurement = new LightIntensityMeasurement ();  				measurement.Lux = lux;  				OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == LightIntensityCharacteristicUuid) {  	if (_lightValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 2) {  				ushort rawData = ReadBigEndianU16bit (reader);  				uint m = (uint)(rawData & 0x0FFF);  				uint e = ((uint)(rawData & 0xF000)) >> 12;  				double lux = (double)m * (0.01 * Math.Pow (2.0' e));  				var measurement = new LightIntensityMeasurement ();  				measurement.Lux = lux;  				OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_lightValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 2) {  			ushort rawData = ReadBigEndianU16bit (reader);  			uint m = (uint)(rawData & 0x0FFF);  			uint e = ((uint)(rawData & 0xF000)) >> 12;  			double lux = (double)m * (0.01 * Math.Pow (2.0' e));  			var measurement = new LightIntensityMeasurement ();  			measurement.Lux = lux;  			OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_lightValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 2) {  			ushort rawData = ReadBigEndianU16bit (reader);  			uint m = (uint)(rawData & 0x0FFF);  			uint e = ((uint)(rawData & 0xF000)) >> 12;  			double lux = (double)m * (0.01 * Math.Pow (2.0' e));  			var measurement = new LightIntensityMeasurement ();  			measurement.Lux = lux;  			OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_lightValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 2) {  			ushort rawData = ReadBigEndianU16bit (reader);  			uint m = (uint)(rawData & 0x0FFF);  			uint e = ((uint)(rawData & 0xF000)) >> 12;  			double lux = (double)m * (0.01 * Math.Pow (2.0' e));  			var measurement = new LightIntensityMeasurement ();  			measurement.Lux = lux;  			OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_lightValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 2) {  			ushort rawData = ReadBigEndianU16bit (reader);  			uint m = (uint)(rawData & 0x0FFF);  			uint e = ((uint)(rawData & 0xF000)) >> 12;  			double lux = (double)m * (0.01 * Math.Pow (2.0' e));  			var measurement = new LightIntensityMeasurement ();  			measurement.Lux = lux;  			OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 2) {  		ushort rawData = ReadBigEndianU16bit (reader);  		uint m = (uint)(rawData & 0x0FFF);  		uint e = ((uint)(rawData & 0xF000)) >> 12;  		double lux = (double)m * (0.01 * Math.Pow (2.0' e));  		var measurement = new LightIntensityMeasurement ();  		measurement.Lux = lux;  		OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 2) {  		ushort rawData = ReadBigEndianU16bit (reader);  		uint m = (uint)(rawData & 0x0FFF);  		uint e = ((uint)(rawData & 0xF000)) >> 12;  		double lux = (double)m * (0.01 * Math.Pow (2.0' e));  		var measurement = new LightIntensityMeasurement ();  		measurement.Lux = lux;  		OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 2) {  		ushort rawData = ReadBigEndianU16bit (reader);  		uint m = (uint)(rawData & 0x0FFF);  		uint e = ((uint)(rawData & 0xF000)) >> 12;  		double lux = (double)m * (0.01 * Math.Pow (2.0' e));  		var measurement = new LightIntensityMeasurement ();  		measurement.Lux = lux;  		OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 2) {  		ushort rawData = ReadBigEndianU16bit (reader);  		uint m = (uint)(rawData & 0x0FFF);  		uint e = ((uint)(rawData & 0xF000)) >> 12;  		double lux = (double)m * (0.01 * Math.Pow (2.0' e));  		var measurement = new LightIntensityMeasurement ();  		measurement.Lux = lux;  		OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 2) {  	ushort rawData = ReadBigEndianU16bit (reader);  	uint m = (uint)(rawData & 0x0FFF);  	uint e = ((uint)(rawData & 0xF000)) >> 12;  	double lux = (double)m * (0.01 * Math.Pow (2.0' e));  	var measurement = new LightIntensityMeasurement ();  	measurement.Lux = lux;  	OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 2) {  	ushort rawData = ReadBigEndianU16bit (reader);  	uint m = (uint)(rawData & 0x0FFF);  	uint e = ((uint)(rawData & 0xF000)) >> 12;  	double lux = (double)m * (0.01 * Math.Pow (2.0' e));  	var measurement = new LightIntensityMeasurement ();  	measurement.Lux = lux;  	OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 2) {  	ushort rawData = ReadBigEndianU16bit (reader);  	uint m = (uint)(rawData & 0x0FFF);  	uint e = ((uint)(rawData & 0xF000)) >> 12;  	double lux = (double)m * (0.01 * Math.Pow (2.0' e));  	var measurement = new LightIntensityMeasurement ();  	measurement.Lux = lux;  	OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleLightIntensityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleLightIntensityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 2) {  	ushort rawData = ReadBigEndianU16bit (reader);  	uint m = (uint)(rawData & 0x0FFF);  	uint e = ((uint)(rawData & 0xF000)) >> 12;  	double lux = (double)m * (0.01 * Math.Pow (2.0' e));  	var measurement = new LightIntensityMeasurement ();  	measurement.Lux = lux;  	OnLightIntensityMeasurementValueChanged (new LightIntensityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MovementCharacteristicUuid) {  	if (_movementValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 18) {  				MovementMeasurement measurement = new MovementMeasurement ();  				short gx = ReadBigEndian16bit (reader);  				short gy = ReadBigEndian16bit (reader);  				short gz = ReadBigEndian16bit (reader);  				short ax = ReadBigEndian16bit (reader);  				short ay = ReadBigEndian16bit (reader);  				short az = ReadBigEndian16bit (reader);  				short mx = ReadBigEndian16bit (reader);  				short my = ReadBigEndian16bit (reader);  				short mz = ReadBigEndian16bit (reader);  				measurement.GyroX = ((double)gx * 500.0) / 65536.0;  				measurement.GyroY = ((double)gy * 500.0) / 65536.0;  				measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  				measurement.AccelX = ((double)ax / 32768);  				measurement.AccelY = ((double)ay / 32768);  				measurement.AccelZ = ((double)az / 32768);  				// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  				measurement.MagX = (double)mx;  				measurement.MagY = (double)my;  				measurement.MagZ = (double)mz;  				OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_movementValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 18) {  			MovementMeasurement measurement = new MovementMeasurement ();  			short gx = ReadBigEndian16bit (reader);  			short gy = ReadBigEndian16bit (reader);  			short gz = ReadBigEndian16bit (reader);  			short ax = ReadBigEndian16bit (reader);  			short ay = ReadBigEndian16bit (reader);  			short az = ReadBigEndian16bit (reader);  			short mx = ReadBigEndian16bit (reader);  			short my = ReadBigEndian16bit (reader);  			short mz = ReadBigEndian16bit (reader);  			measurement.GyroX = ((double)gx * 500.0) / 65536.0;  			measurement.GyroY = ((double)gy * 500.0) / 65536.0;  			measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  			measurement.AccelX = ((double)ax / 32768);  			measurement.AccelY = ((double)ay / 32768);  			measurement.AccelZ = ((double)az / 32768);  			// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  			measurement.MagX = (double)mx;  			measurement.MagY = (double)my;  			measurement.MagZ = (double)mz;  			OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 18) {  		MovementMeasurement measurement = new MovementMeasurement ();  		short gx = ReadBigEndian16bit (reader);  		short gy = ReadBigEndian16bit (reader);  		short gz = ReadBigEndian16bit (reader);  		short ax = ReadBigEndian16bit (reader);  		short ay = ReadBigEndian16bit (reader);  		short az = ReadBigEndian16bit (reader);  		short mx = ReadBigEndian16bit (reader);  		short my = ReadBigEndian16bit (reader);  		short mz = ReadBigEndian16bit (reader);  		measurement.GyroX = ((double)gx * 500.0) / 65536.0;  		measurement.GyroY = ((double)gy * 500.0) / 65536.0;  		measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  		measurement.AccelX = ((double)ax / 32768);  		measurement.AccelY = ((double)ay / 32768);  		measurement.AccelZ = ((double)az / 32768);  		// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  		measurement.MagX = (double)mx;  		measurement.MagY = (double)my;  		measurement.MagZ = (double)mz;  		OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 18) {  	MovementMeasurement measurement = new MovementMeasurement ();  	short gx = ReadBigEndian16bit (reader);  	short gy = ReadBigEndian16bit (reader);  	short gz = ReadBigEndian16bit (reader);  	short ax = ReadBigEndian16bit (reader);  	short ay = ReadBigEndian16bit (reader);  	short az = ReadBigEndian16bit (reader);  	short mx = ReadBigEndian16bit (reader);  	short my = ReadBigEndian16bit (reader);  	short mz = ReadBigEndian16bit (reader);  	measurement.GyroX = ((double)gx * 500.0) / 65536.0;  	measurement.GyroY = ((double)gy * 500.0) / 65536.0;  	measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  	measurement.AccelX = ((double)ax / 32768);  	measurement.AccelY = ((double)ay / 32768);  	measurement.AccelZ = ((double)az / 32768);  	// on SensorTag CC2650 the conversion to micro tesla's is done in the firmware.  	measurement.MagX = (double)mx;  	measurement.MagY = (double)my;  	measurement.MagZ = (double)mz;  	OnMovementMeasurementValueChanged (new MovementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroX = ((double)gx * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroX = ((double)gx * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroY = ((double)gy * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroY = ((double)gy * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.GyroZ = ((double)gz * 500.0) / 65536.0;  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.AccelX = ((double)ax / 32768);  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.AccelY = ((double)ay / 32768);  
Magic Number,SensorTag,BleMovementService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMovementService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.AccelZ = ((double)az / 32768);  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == AccelerometerCharacteristicUuid) {  	if (_accelerometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 3) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  				sbyte x = (sbyte)data [0];  				sbyte y = (sbyte)data [1];  				sbyte z = (sbyte)data [2];  				measurement.X = (double)x / 64.0;  				measurement.Y = (double)y / 64.0;  				measurement.Z = (double)z / 64.0;  				OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == AccelerometerCharacteristicUuid) {  	if (_accelerometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 3) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  				sbyte x = (sbyte)data [0];  				sbyte y = (sbyte)data [1];  				sbyte z = (sbyte)data [2];  				measurement.X = (double)x / 64.0;  				measurement.Y = (double)y / 64.0;  				measurement.Z = (double)z / 64.0;  				OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == AccelerometerCharacteristicUuid) {  	if (_accelerometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 3) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  				sbyte x = (sbyte)data [0];  				sbyte y = (sbyte)data [1];  				sbyte z = (sbyte)data [2];  				measurement.X = (double)x / 64.0;  				measurement.Y = (double)y / 64.0;  				measurement.Z = (double)z / 64.0;  				OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == AccelerometerCharacteristicUuid) {  	if (_accelerometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 3) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  				sbyte x = (sbyte)data [0];  				sbyte y = (sbyte)data [1];  				sbyte z = (sbyte)data [2];  				measurement.X = (double)x / 64.0;  				measurement.Y = (double)y / 64.0;  				measurement.Z = (double)z / 64.0;  				OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == AccelerometerCharacteristicUuid) {  	if (_accelerometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 3) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  				sbyte x = (sbyte)data [0];  				sbyte y = (sbyte)data [1];  				sbyte z = (sbyte)data [2];  				measurement.X = (double)x / 64.0;  				measurement.Y = (double)y / 64.0;  				measurement.Z = (double)z / 64.0;  				OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_accelerometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 3) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  			sbyte x = (sbyte)data [0];  			sbyte y = (sbyte)data [1];  			sbyte z = (sbyte)data [2];  			measurement.X = (double)x / 64.0;  			measurement.Y = (double)y / 64.0;  			measurement.Z = (double)z / 64.0;  			OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_accelerometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 3) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  			sbyte x = (sbyte)data [0];  			sbyte y = (sbyte)data [1];  			sbyte z = (sbyte)data [2];  			measurement.X = (double)x / 64.0;  			measurement.Y = (double)y / 64.0;  			measurement.Z = (double)z / 64.0;  			OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_accelerometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 3) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  			sbyte x = (sbyte)data [0];  			sbyte y = (sbyte)data [1];  			sbyte z = (sbyte)data [2];  			measurement.X = (double)x / 64.0;  			measurement.Y = (double)y / 64.0;  			measurement.Z = (double)z / 64.0;  			OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_accelerometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 3) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  			sbyte x = (sbyte)data [0];  			sbyte y = (sbyte)data [1];  			sbyte z = (sbyte)data [2];  			measurement.X = (double)x / 64.0;  			measurement.Y = (double)y / 64.0;  			measurement.Z = (double)z / 64.0;  			OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_accelerometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 3) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  			sbyte x = (sbyte)data [0];  			sbyte y = (sbyte)data [1];  			sbyte z = (sbyte)data [2];  			measurement.X = (double)x / 64.0;  			measurement.Y = (double)y / 64.0;  			measurement.Z = (double)z / 64.0;  			OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 3) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  		sbyte x = (sbyte)data [0];  		sbyte y = (sbyte)data [1];  		sbyte z = (sbyte)data [2];  		measurement.X = (double)x / 64.0;  		measurement.Y = (double)y / 64.0;  		measurement.Z = (double)z / 64.0;  		OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 3) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  		sbyte x = (sbyte)data [0];  		sbyte y = (sbyte)data [1];  		sbyte z = (sbyte)data [2];  		measurement.X = (double)x / 64.0;  		measurement.Y = (double)y / 64.0;  		measurement.Z = (double)z / 64.0;  		OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 3) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  		sbyte x = (sbyte)data [0];  		sbyte y = (sbyte)data [1];  		sbyte z = (sbyte)data [2];  		measurement.X = (double)x / 64.0;  		measurement.Y = (double)y / 64.0;  		measurement.Z = (double)z / 64.0;  		OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 3) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  		sbyte x = (sbyte)data [0];  		sbyte y = (sbyte)data [1];  		sbyte z = (sbyte)data [2];  		measurement.X = (double)x / 64.0;  		measurement.Y = (double)y / 64.0;  		measurement.Z = (double)z / 64.0;  		OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 3) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  		sbyte x = (sbyte)data [0];  		sbyte y = (sbyte)data [1];  		sbyte z = (sbyte)data [2];  		measurement.X = (double)x / 64.0;  		measurement.Y = (double)y / 64.0;  		measurement.Z = (double)z / 64.0;  		OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 3) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  	sbyte x = (sbyte)data [0];  	sbyte y = (sbyte)data [1];  	sbyte z = (sbyte)data [2];  	measurement.X = (double)x / 64.0;  	measurement.Y = (double)y / 64.0;  	measurement.Z = (double)z / 64.0;  	OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 3) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  	sbyte x = (sbyte)data [0];  	sbyte y = (sbyte)data [1];  	sbyte z = (sbyte)data [2];  	measurement.X = (double)x / 64.0;  	measurement.Y = (double)y / 64.0;  	measurement.Z = (double)z / 64.0;  	OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 3) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  	sbyte x = (sbyte)data [0];  	sbyte y = (sbyte)data [1];  	sbyte z = (sbyte)data [2];  	measurement.X = (double)x / 64.0;  	measurement.Y = (double)y / 64.0;  	measurement.Z = (double)z / 64.0;  	OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 3) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  	sbyte x = (sbyte)data [0];  	sbyte y = (sbyte)data [1];  	sbyte z = (sbyte)data [2];  	measurement.X = (double)x / 64.0;  	measurement.Y = (double)y / 64.0;  	measurement.Z = (double)z / 64.0;  	OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 3) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	AccelerometerMeasurement measurement = new AccelerometerMeasurement ();  	sbyte x = (sbyte)data [0];  	sbyte y = (sbyte)data [1];  	sbyte z = (sbyte)data [2];  	measurement.X = (double)x / 64.0;  	measurement.Y = (double)y / 64.0;  	measurement.Z = (double)z / 64.0;  	OnAccelerationMeasurementValueChanged (new AccelerometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.X = (double)x / 64.0;  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Y = (double)y / 64.0;  
Magic Number,SensorTag,BleAccelerometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleAccelerometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Z = (double)z / 64.0;  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,StartCalibration,The following statement contains a magic number: if (Version == 1) {  	await WriteCharacteristicByte (BarometerCharacteristicConfigUuid' 2);  	await ReadCalibration ();  }  else {  	// Calibration is done in firmware on the CC2650 firmware.  	if (Calibrated != null) {  		Calibrated (this' EventArgs.Empty);  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,StartCalibration,The following statement contains a magic number: await WriteCharacteristicByte (BarometerCharacteristicConfigUuid' 2);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetPeriod,The following statement contains a magic number: if (Version > 1) {  	byte v = await ReadCharacteristicByte (BarometerCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached);  	return (int)(v * 10);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetPeriod,The following statement contains a magic number: return 1000;  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetPeriod,The following statement contains a magic number: if (Version > 1) {  	int delay = milliseconds / 10;  	if (delay < 0) {  		delay = 1;  	}  	await WriteCharacteristicByte (BarometerCharacteristicPeriodUuid' (byte)delay);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == BarometerCharacteristicUuid) {  	if (_barometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				// version 1  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				CalcBarometricPressure (eventArgs.Timestamp' data);  			}  			else if (dataLength == 6) {  				// version 2  				uint temp = ReadBigEndianU24bit (reader);  				uint pressure = ReadBigEndianU24bit (reader);  				BarometerMeasurement measurement = new BarometerMeasurement ();  				measurement.Temperature = (double)temp / 100.0;  				measurement.HectoPascals = (double)pressure / 100.0;  				OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  else if (sender.Uuid == BarometerCharacteristicCalibrationUuid) {  	UpdateCalibrationData (eventArgs);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == BarometerCharacteristicUuid) {  	if (_barometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				// version 1  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				CalcBarometricPressure (eventArgs.Timestamp' data);  			}  			else if (dataLength == 6) {  				// version 2  				uint temp = ReadBigEndianU24bit (reader);  				uint pressure = ReadBigEndianU24bit (reader);  				BarometerMeasurement measurement = new BarometerMeasurement ();  				measurement.Temperature = (double)temp / 100.0;  				measurement.HectoPascals = (double)pressure / 100.0;  				OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  else if (sender.Uuid == BarometerCharacteristicCalibrationUuid) {  	UpdateCalibrationData (eventArgs);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == BarometerCharacteristicUuid) {  	if (_barometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				// version 1  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				CalcBarometricPressure (eventArgs.Timestamp' data);  			}  			else if (dataLength == 6) {  				// version 2  				uint temp = ReadBigEndianU24bit (reader);  				uint pressure = ReadBigEndianU24bit (reader);  				BarometerMeasurement measurement = new BarometerMeasurement ();  				measurement.Temperature = (double)temp / 100.0;  				measurement.HectoPascals = (double)pressure / 100.0;  				OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  else if (sender.Uuid == BarometerCharacteristicCalibrationUuid) {  	UpdateCalibrationData (eventArgs);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == BarometerCharacteristicUuid) {  	if (_barometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				// version 1  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				CalcBarometricPressure (eventArgs.Timestamp' data);  			}  			else if (dataLength == 6) {  				// version 2  				uint temp = ReadBigEndianU24bit (reader);  				uint pressure = ReadBigEndianU24bit (reader);  				BarometerMeasurement measurement = new BarometerMeasurement ();  				measurement.Temperature = (double)temp / 100.0;  				measurement.HectoPascals = (double)pressure / 100.0;  				OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  else if (sender.Uuid == BarometerCharacteristicCalibrationUuid) {  	UpdateCalibrationData (eventArgs);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_barometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			// version 1  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			CalcBarometricPressure (eventArgs.Timestamp' data);  		}  		else if (dataLength == 6) {  			// version 2  			uint temp = ReadBigEndianU24bit (reader);  			uint pressure = ReadBigEndianU24bit (reader);  			BarometerMeasurement measurement = new BarometerMeasurement ();  			measurement.Temperature = (double)temp / 100.0;  			measurement.HectoPascals = (double)pressure / 100.0;  			OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_barometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			// version 1  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			CalcBarometricPressure (eventArgs.Timestamp' data);  		}  		else if (dataLength == 6) {  			// version 2  			uint temp = ReadBigEndianU24bit (reader);  			uint pressure = ReadBigEndianU24bit (reader);  			BarometerMeasurement measurement = new BarometerMeasurement ();  			measurement.Temperature = (double)temp / 100.0;  			measurement.HectoPascals = (double)pressure / 100.0;  			OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_barometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			// version 1  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			CalcBarometricPressure (eventArgs.Timestamp' data);  		}  		else if (dataLength == 6) {  			// version 2  			uint temp = ReadBigEndianU24bit (reader);  			uint pressure = ReadBigEndianU24bit (reader);  			BarometerMeasurement measurement = new BarometerMeasurement ();  			measurement.Temperature = (double)temp / 100.0;  			measurement.HectoPascals = (double)pressure / 100.0;  			OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_barometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			// version 1  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			CalcBarometricPressure (eventArgs.Timestamp' data);  		}  		else if (dataLength == 6) {  			// version 2  			uint temp = ReadBigEndianU24bit (reader);  			uint pressure = ReadBigEndianU24bit (reader);  			BarometerMeasurement measurement = new BarometerMeasurement ();  			measurement.Temperature = (double)temp / 100.0;  			measurement.HectoPascals = (double)pressure / 100.0;  			OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		// version 1  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		CalcBarometricPressure (eventArgs.Timestamp' data);  	}  	else if (dataLength == 6) {  		// version 2  		uint temp = ReadBigEndianU24bit (reader);  		uint pressure = ReadBigEndianU24bit (reader);  		BarometerMeasurement measurement = new BarometerMeasurement ();  		measurement.Temperature = (double)temp / 100.0;  		measurement.HectoPascals = (double)pressure / 100.0;  		OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		// version 1  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		CalcBarometricPressure (eventArgs.Timestamp' data);  	}  	else if (dataLength == 6) {  		// version 2  		uint temp = ReadBigEndianU24bit (reader);  		uint pressure = ReadBigEndianU24bit (reader);  		BarometerMeasurement measurement = new BarometerMeasurement ();  		measurement.Temperature = (double)temp / 100.0;  		measurement.HectoPascals = (double)pressure / 100.0;  		OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		// version 1  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		CalcBarometricPressure (eventArgs.Timestamp' data);  	}  	else if (dataLength == 6) {  		// version 2  		uint temp = ReadBigEndianU24bit (reader);  		uint pressure = ReadBigEndianU24bit (reader);  		BarometerMeasurement measurement = new BarometerMeasurement ();  		measurement.Temperature = (double)temp / 100.0;  		measurement.HectoPascals = (double)pressure / 100.0;  		OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		// version 1  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		CalcBarometricPressure (eventArgs.Timestamp' data);  	}  	else if (dataLength == 6) {  		// version 2  		uint temp = ReadBigEndianU24bit (reader);  		uint pressure = ReadBigEndianU24bit (reader);  		BarometerMeasurement measurement = new BarometerMeasurement ();  		measurement.Temperature = (double)temp / 100.0;  		measurement.HectoPascals = (double)pressure / 100.0;  		OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	// version 1  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	CalcBarometricPressure (eventArgs.Timestamp' data);  }  else if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	// version 1  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	CalcBarometricPressure (eventArgs.Timestamp' data);  }  else if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	// version 1  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	CalcBarometricPressure (eventArgs.Timestamp' data);  }  else if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	// version 1  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	CalcBarometricPressure (eventArgs.Timestamp' data);  }  else if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	// version 2  	uint temp = ReadBigEndianU24bit (reader);  	uint pressure = ReadBigEndianU24bit (reader);  	BarometerMeasurement measurement = new BarometerMeasurement ();  	measurement.Temperature = (double)temp / 100.0;  	measurement.HectoPascals = (double)pressure / 100.0;  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = (double)temp / 100.0;  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.HectoPascals = (double)pressure / 100.0;  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: if (this.c != null) {  	BarometerMeasurement measurement = new BarometerMeasurement ();  	//more info about the calculation:  	//http://www.epcos.com/web/generator/Web/Sections/ProductCatalog/Sensors/PressureSensors/T5400-ApplicationNote'property=Data__en.pdf;/T5400_ApplicationNote.pdf                  	int tr = BitConverter.ToInt16 (data' 0);  	// Temperature raw value  	int pr = BitConverter.ToUInt16 (data' 2);  	// Pressure raw value from sensor  	// Temperature actual value in unit centi degrees celsius  	double t_a = (100 * (c [0] * tr / Math.Pow (2' 8) + c [1] * Math.Pow (2' 6))) / Math.Pow (2' 16);  	double sensitivity = c [2] + c [3] * tr / Math.Pow (2' 17) + ((c [4] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 19);  	double offset = c [5] * Math.Pow (2' 14) + c [6] * tr / Math.Pow (2' 3) + ((c [7] * tr / Math.Pow (2' 15)) * tr) / Math.Pow (2' 4);  	measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  	OnBarometerMeasurementValueChanged (new BarometerMeasurementEventArgs (measurement' timestamp));  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,CalcBarometricPressure,The following statement contains a magic number: measurement.Pascals = (sensitivity * pr + offset) / Math.Pow (2' 14);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,ReadCalibration,The following statement contains a magic number: if (data.Length == 16) {  	SetCalibration (data);  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [1] = BitConverter.ToUInt16 (data' 2);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [2] = BitConverter.ToUInt16 (data' 4);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [2] = BitConverter.ToUInt16 (data' 4);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [3] = BitConverter.ToUInt16 (data' 6);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [3] = BitConverter.ToUInt16 (data' 6);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [4] = BitConverter.ToInt16 (data' 8);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [4] = BitConverter.ToInt16 (data' 8);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [5] = BitConverter.ToInt16 (data' 10);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [5] = BitConverter.ToInt16 (data' 10);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [6] = BitConverter.ToInt16 (data' 12);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [6] = BitConverter.ToInt16 (data' 12);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [7] = BitConverter.ToInt16 (data' 14);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,SetCalibration,The following statement contains a magic number: calibrationData [7] = BitConverter.ToInt16 (data' 14);  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,UpdateCalibrationData,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 16) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		SetCalibration (data);  	}  }  
Magic Number,SensorTag,BleBarometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,UpdateCalibrationData,The following statement contains a magic number: if (dataLength == 16) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	SetCalibration (data);  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: try {  	int retry = 5;  	GattCharacteristic characteristic;  	while (retry > 0) {  		if (registerNotifyQueue.TryDequeue (out characteristic)) {  			//characteristic.ProtectionLevel = GattProtectionLevel.Plain;  			var task = characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask ();  			task.Wait ();  			GattCommunicationStatus status = task.Result;  			Debug.WriteLine ("GattClientCharacteristicConfigurationDescriptorValue.Notify: " + status + " " + characteristic.Uuid.ToString ("b"));  			if (status != GattCommunicationStatus.Success) {  				if (status == GattCommunicationStatus.Unreachable) {  					OnError ("Registering to get notification from the device failed saying device is unreachable.  Perhaps the device is connected to another computer?");  				}  			}  			else {  				characteristic.ValueChanged += OnCharacteristicValueChanged;  				// this characteristic should now be notifying.  				lock (_characteristics) {  					_characteristics.Add (characteristic);  				}  			}  		}  		else if (retry-- > 0) {  			Task.Delay (100);  		}  	}  }  catch (Exception ex) {  	OnError ("Registering to get notification from the device failed.  " + ex.Message);  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: try {  	int retry = 5;  	GattCharacteristic characteristic;  	while (retry > 0) {  		if (registerNotifyQueue.TryDequeue (out characteristic)) {  			//characteristic.ProtectionLevel = GattProtectionLevel.Plain;  			var task = characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask ();  			task.Wait ();  			GattCommunicationStatus status = task.Result;  			Debug.WriteLine ("GattClientCharacteristicConfigurationDescriptorValue.Notify: " + status + " " + characteristic.Uuid.ToString ("b"));  			if (status != GattCommunicationStatus.Success) {  				if (status == GattCommunicationStatus.Unreachable) {  					OnError ("Registering to get notification from the device failed saying device is unreachable.  Perhaps the device is connected to another computer?");  				}  			}  			else {  				characteristic.ValueChanged += OnCharacteristicValueChanged;  				// this characteristic should now be notifying.  				lock (_characteristics) {  					_characteristics.Add (characteristic);  				}  			}  		}  		else if (retry-- > 0) {  			Task.Delay (100);  		}  	}  }  catch (Exception ex) {  	OnError ("Registering to get notification from the device failed.  " + ex.Message);  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: while (retry > 0) {  	if (registerNotifyQueue.TryDequeue (out characteristic)) {  		//characteristic.ProtectionLevel = GattProtectionLevel.Plain;  		var task = characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask ();  		task.Wait ();  		GattCommunicationStatus status = task.Result;  		Debug.WriteLine ("GattClientCharacteristicConfigurationDescriptorValue.Notify: " + status + " " + characteristic.Uuid.ToString ("b"));  		if (status != GattCommunicationStatus.Success) {  			if (status == GattCommunicationStatus.Unreachable) {  				OnError ("Registering to get notification from the device failed saying device is unreachable.  Perhaps the device is connected to another computer?");  			}  		}  		else {  			characteristic.ValueChanged += OnCharacteristicValueChanged;  			// this characteristic should now be notifying.  			lock (_characteristics) {  				_characteristics.Add (characteristic);  			}  		}  	}  	else if (retry-- > 0) {  		Task.Delay (100);  	}  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: if (registerNotifyQueue.TryDequeue (out characteristic)) {  	//characteristic.ProtectionLevel = GattProtectionLevel.Plain;  	var task = characteristic.WriteClientCharacteristicConfigurationDescriptorAsync (GattClientCharacteristicConfigurationDescriptorValue.Notify).AsTask ();  	task.Wait ();  	GattCommunicationStatus status = task.Result;  	Debug.WriteLine ("GattClientCharacteristicConfigurationDescriptorValue.Notify: " + status + " " + characteristic.Uuid.ToString ("b"));  	if (status != GattCommunicationStatus.Success) {  		if (status == GattCommunicationStatus.Unreachable) {  			OnError ("Registering to get notification from the device failed saying device is unreachable.  Perhaps the device is connected to another computer?");  		}  	}  	else {  		characteristic.ValueChanged += OnCharacteristicValueChanged;  		// this characteristic should now be notifying.  		lock (_characteristics) {  			_characteristics.Add (characteristic);  		}  	}  }  else if (retry-- > 0) {  	Task.Delay (100);  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: if (retry-- > 0) {  	Task.Delay (100);  }  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ProcessEnableNotificationQueue,The following statement contains a magic number: Task.Delay (100);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BigEndianUInt16,The following statement contains a magic number: return (ushort)(((ushort)hi << 8) + (ushort)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 5' 6' 10' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 5' 6' 10' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 5' 6' 10' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 7' 2' 8' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 7' 2' 8' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 7' 2' 8' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 8' 2' 6' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 8' 2' 6' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 8' 2' 6' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 10' 2' 4' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 10' 2' 4' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 10' 2' 4' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 12' 4' 0' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 12' 4' 0' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 15' 6' 0' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 15' 6' 0' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 9' 2' 6' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 9' 2' 6' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 9' 2' 6' -1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 6' 2' 8' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 6' 2' 8' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 6' 2' 8' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 4' 2' 10' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 4' 2' 10' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 4' 2' 10' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 0' 4' 12' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,WriteBigEndianGuid,The following statement contains a magic number: CopyBytes (bytes' buffer' 0' 4' 12' 1);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndian16bit,The following statement contains a magic number: return (short)(((short)hi << 8) + (short)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianU16bit,The following statement contains a magic number: return (ushort)(((ushort)hi << 8) + (ushort)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndian24bit,The following statement contains a magic number: return (int)(((int)highest << 8) + ((int)hi << 8) + (int)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndian24bit,The following statement contains a magic number: return (int)(((int)highest << 8) + ((int)hi << 8) + (int)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianU24bit,The following statement contains a magic number: return (uint)(((uint)highest << 16) + ((uint)hi << 8) + (uint)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianU24bit,The following statement contains a magic number: return (uint)(((uint)highest << 16) + ((uint)hi << 8) + (uint)lo);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianUint32,The following statement contains a magic number: return (uint)((d << 24) + (c << 16) + (b << 8) + a);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianUint32,The following statement contains a magic number: return (uint)((d << 24) + (c << 16) + (b << 8) + a);  
Magic Number,SensorTag,BleGenericGattService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,ReadBigEndianUint32,The following statement contains a magic number: return (uint)((d << 24) + (c << 16) + (b << 8) + a);  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (id.StartsWith (@"\\?\BTHLEDevice#")) {  	int i = id.IndexOf ('{');  	if (i > 0 && i < id.Length - 1) {  		i++;  		int j = id.IndexOf ('}'' i);  		if (j > i) {  			serviceGuid = id.Substring (i' j - i);  			if (j < id.Length - 1) {  				i = id.IndexOf ('{'' j);  				string tail = id.Substring (j + 1);  				if (i > 0 && i < id.Length - 1) {  					i++;  					j = id.IndexOf ('}'' i);  					if (j > i) {  						instanceUuid = id.Substring (i' j - i);  					}  				}  				i = tail.IndexOf ('#');  				if (i > 0) {  					tail = tail.Substring (0' i);  				}  				string[] parts = tail.Split ('_');  				foreach (string p in parts) {  					if (p.StartsWith ("VID&")) {  						this.vid = p.Substring (4);  					}  					else if (p.StartsWith ("PID&")) {  						this.pid = p.Substring (4);  					}  					else if (p.StartsWith ("REV&")) {  						this.pid = p.Substring (4);  					}  					else if (p.Length == 12) {  						this.MacAddress = p;  					}  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (id.StartsWith (@"\\?\BTHLEDevice#")) {  	int i = id.IndexOf ('{');  	if (i > 0 && i < id.Length - 1) {  		i++;  		int j = id.IndexOf ('}'' i);  		if (j > i) {  			serviceGuid = id.Substring (i' j - i);  			if (j < id.Length - 1) {  				i = id.IndexOf ('{'' j);  				string tail = id.Substring (j + 1);  				if (i > 0 && i < id.Length - 1) {  					i++;  					j = id.IndexOf ('}'' i);  					if (j > i) {  						instanceUuid = id.Substring (i' j - i);  					}  				}  				i = tail.IndexOf ('#');  				if (i > 0) {  					tail = tail.Substring (0' i);  				}  				string[] parts = tail.Split ('_');  				foreach (string p in parts) {  					if (p.StartsWith ("VID&")) {  						this.vid = p.Substring (4);  					}  					else if (p.StartsWith ("PID&")) {  						this.pid = p.Substring (4);  					}  					else if (p.StartsWith ("REV&")) {  						this.pid = p.Substring (4);  					}  					else if (p.Length == 12) {  						this.MacAddress = p;  					}  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (id.StartsWith (@"\\?\BTHLEDevice#")) {  	int i = id.IndexOf ('{');  	if (i > 0 && i < id.Length - 1) {  		i++;  		int j = id.IndexOf ('}'' i);  		if (j > i) {  			serviceGuid = id.Substring (i' j - i);  			if (j < id.Length - 1) {  				i = id.IndexOf ('{'' j);  				string tail = id.Substring (j + 1);  				if (i > 0 && i < id.Length - 1) {  					i++;  					j = id.IndexOf ('}'' i);  					if (j > i) {  						instanceUuid = id.Substring (i' j - i);  					}  				}  				i = tail.IndexOf ('#');  				if (i > 0) {  					tail = tail.Substring (0' i);  				}  				string[] parts = tail.Split ('_');  				foreach (string p in parts) {  					if (p.StartsWith ("VID&")) {  						this.vid = p.Substring (4);  					}  					else if (p.StartsWith ("PID&")) {  						this.pid = p.Substring (4);  					}  					else if (p.StartsWith ("REV&")) {  						this.pid = p.Substring (4);  					}  					else if (p.Length == 12) {  						this.MacAddress = p;  					}  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (id.StartsWith (@"\\?\BTHLEDevice#")) {  	int i = id.IndexOf ('{');  	if (i > 0 && i < id.Length - 1) {  		i++;  		int j = id.IndexOf ('}'' i);  		if (j > i) {  			serviceGuid = id.Substring (i' j - i);  			if (j < id.Length - 1) {  				i = id.IndexOf ('{'' j);  				string tail = id.Substring (j + 1);  				if (i > 0 && i < id.Length - 1) {  					i++;  					j = id.IndexOf ('}'' i);  					if (j > i) {  						instanceUuid = id.Substring (i' j - i);  					}  				}  				i = tail.IndexOf ('#');  				if (i > 0) {  					tail = tail.Substring (0' i);  				}  				string[] parts = tail.Split ('_');  				foreach (string p in parts) {  					if (p.StartsWith ("VID&")) {  						this.vid = p.Substring (4);  					}  					else if (p.StartsWith ("PID&")) {  						this.pid = p.Substring (4);  					}  					else if (p.StartsWith ("REV&")) {  						this.pid = p.Substring (4);  					}  					else if (p.Length == 12) {  						this.MacAddress = p;  					}  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (i > 0 && i < id.Length - 1) {  	i++;  	int j = id.IndexOf ('}'' i);  	if (j > i) {  		serviceGuid = id.Substring (i' j - i);  		if (j < id.Length - 1) {  			i = id.IndexOf ('{'' j);  			string tail = id.Substring (j + 1);  			if (i > 0 && i < id.Length - 1) {  				i++;  				j = id.IndexOf ('}'' i);  				if (j > i) {  					instanceUuid = id.Substring (i' j - i);  				}  			}  			i = tail.IndexOf ('#');  			if (i > 0) {  				tail = tail.Substring (0' i);  			}  			string[] parts = tail.Split ('_');  			foreach (string p in parts) {  				if (p.StartsWith ("VID&")) {  					this.vid = p.Substring (4);  				}  				else if (p.StartsWith ("PID&")) {  					this.pid = p.Substring (4);  				}  				else if (p.StartsWith ("REV&")) {  					this.pid = p.Substring (4);  				}  				else if (p.Length == 12) {  					this.MacAddress = p;  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (i > 0 && i < id.Length - 1) {  	i++;  	int j = id.IndexOf ('}'' i);  	if (j > i) {  		serviceGuid = id.Substring (i' j - i);  		if (j < id.Length - 1) {  			i = id.IndexOf ('{'' j);  			string tail = id.Substring (j + 1);  			if (i > 0 && i < id.Length - 1) {  				i++;  				j = id.IndexOf ('}'' i);  				if (j > i) {  					instanceUuid = id.Substring (i' j - i);  				}  			}  			i = tail.IndexOf ('#');  			if (i > 0) {  				tail = tail.Substring (0' i);  			}  			string[] parts = tail.Split ('_');  			foreach (string p in parts) {  				if (p.StartsWith ("VID&")) {  					this.vid = p.Substring (4);  				}  				else if (p.StartsWith ("PID&")) {  					this.pid = p.Substring (4);  				}  				else if (p.StartsWith ("REV&")) {  					this.pid = p.Substring (4);  				}  				else if (p.Length == 12) {  					this.MacAddress = p;  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (i > 0 && i < id.Length - 1) {  	i++;  	int j = id.IndexOf ('}'' i);  	if (j > i) {  		serviceGuid = id.Substring (i' j - i);  		if (j < id.Length - 1) {  			i = id.IndexOf ('{'' j);  			string tail = id.Substring (j + 1);  			if (i > 0 && i < id.Length - 1) {  				i++;  				j = id.IndexOf ('}'' i);  				if (j > i) {  					instanceUuid = id.Substring (i' j - i);  				}  			}  			i = tail.IndexOf ('#');  			if (i > 0) {  				tail = tail.Substring (0' i);  			}  			string[] parts = tail.Split ('_');  			foreach (string p in parts) {  				if (p.StartsWith ("VID&")) {  					this.vid = p.Substring (4);  				}  				else if (p.StartsWith ("PID&")) {  					this.pid = p.Substring (4);  				}  				else if (p.StartsWith ("REV&")) {  					this.pid = p.Substring (4);  				}  				else if (p.Length == 12) {  					this.MacAddress = p;  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (i > 0 && i < id.Length - 1) {  	i++;  	int j = id.IndexOf ('}'' i);  	if (j > i) {  		serviceGuid = id.Substring (i' j - i);  		if (j < id.Length - 1) {  			i = id.IndexOf ('{'' j);  			string tail = id.Substring (j + 1);  			if (i > 0 && i < id.Length - 1) {  				i++;  				j = id.IndexOf ('}'' i);  				if (j > i) {  					instanceUuid = id.Substring (i' j - i);  				}  			}  			i = tail.IndexOf ('#');  			if (i > 0) {  				tail = tail.Substring (0' i);  			}  			string[] parts = tail.Split ('_');  			foreach (string p in parts) {  				if (p.StartsWith ("VID&")) {  					this.vid = p.Substring (4);  				}  				else if (p.StartsWith ("PID&")) {  					this.pid = p.Substring (4);  				}  				else if (p.StartsWith ("REV&")) {  					this.pid = p.Substring (4);  				}  				else if (p.Length == 12) {  					this.MacAddress = p;  				}  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j > i) {  	serviceGuid = id.Substring (i' j - i);  	if (j < id.Length - 1) {  		i = id.IndexOf ('{'' j);  		string tail = id.Substring (j + 1);  		if (i > 0 && i < id.Length - 1) {  			i++;  			j = id.IndexOf ('}'' i);  			if (j > i) {  				instanceUuid = id.Substring (i' j - i);  			}  		}  		i = tail.IndexOf ('#');  		if (i > 0) {  			tail = tail.Substring (0' i);  		}  		string[] parts = tail.Split ('_');  		foreach (string p in parts) {  			if (p.StartsWith ("VID&")) {  				this.vid = p.Substring (4);  			}  			else if (p.StartsWith ("PID&")) {  				this.pid = p.Substring (4);  			}  			else if (p.StartsWith ("REV&")) {  				this.pid = p.Substring (4);  			}  			else if (p.Length == 12) {  				this.MacAddress = p;  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j > i) {  	serviceGuid = id.Substring (i' j - i);  	if (j < id.Length - 1) {  		i = id.IndexOf ('{'' j);  		string tail = id.Substring (j + 1);  		if (i > 0 && i < id.Length - 1) {  			i++;  			j = id.IndexOf ('}'' i);  			if (j > i) {  				instanceUuid = id.Substring (i' j - i);  			}  		}  		i = tail.IndexOf ('#');  		if (i > 0) {  			tail = tail.Substring (0' i);  		}  		string[] parts = tail.Split ('_');  		foreach (string p in parts) {  			if (p.StartsWith ("VID&")) {  				this.vid = p.Substring (4);  			}  			else if (p.StartsWith ("PID&")) {  				this.pid = p.Substring (4);  			}  			else if (p.StartsWith ("REV&")) {  				this.pid = p.Substring (4);  			}  			else if (p.Length == 12) {  				this.MacAddress = p;  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j > i) {  	serviceGuid = id.Substring (i' j - i);  	if (j < id.Length - 1) {  		i = id.IndexOf ('{'' j);  		string tail = id.Substring (j + 1);  		if (i > 0 && i < id.Length - 1) {  			i++;  			j = id.IndexOf ('}'' i);  			if (j > i) {  				instanceUuid = id.Substring (i' j - i);  			}  		}  		i = tail.IndexOf ('#');  		if (i > 0) {  			tail = tail.Substring (0' i);  		}  		string[] parts = tail.Split ('_');  		foreach (string p in parts) {  			if (p.StartsWith ("VID&")) {  				this.vid = p.Substring (4);  			}  			else if (p.StartsWith ("PID&")) {  				this.pid = p.Substring (4);  			}  			else if (p.StartsWith ("REV&")) {  				this.pid = p.Substring (4);  			}  			else if (p.Length == 12) {  				this.MacAddress = p;  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j > i) {  	serviceGuid = id.Substring (i' j - i);  	if (j < id.Length - 1) {  		i = id.IndexOf ('{'' j);  		string tail = id.Substring (j + 1);  		if (i > 0 && i < id.Length - 1) {  			i++;  			j = id.IndexOf ('}'' i);  			if (j > i) {  				instanceUuid = id.Substring (i' j - i);  			}  		}  		i = tail.IndexOf ('#');  		if (i > 0) {  			tail = tail.Substring (0' i);  		}  		string[] parts = tail.Split ('_');  		foreach (string p in parts) {  			if (p.StartsWith ("VID&")) {  				this.vid = p.Substring (4);  			}  			else if (p.StartsWith ("PID&")) {  				this.pid = p.Substring (4);  			}  			else if (p.StartsWith ("REV&")) {  				this.pid = p.Substring (4);  			}  			else if (p.Length == 12) {  				this.MacAddress = p;  			}  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j < id.Length - 1) {  	i = id.IndexOf ('{'' j);  	string tail = id.Substring (j + 1);  	if (i > 0 && i < id.Length - 1) {  		i++;  		j = id.IndexOf ('}'' i);  		if (j > i) {  			instanceUuid = id.Substring (i' j - i);  		}  	}  	i = tail.IndexOf ('#');  	if (i > 0) {  		tail = tail.Substring (0' i);  	}  	string[] parts = tail.Split ('_');  	foreach (string p in parts) {  		if (p.StartsWith ("VID&")) {  			this.vid = p.Substring (4);  		}  		else if (p.StartsWith ("PID&")) {  			this.pid = p.Substring (4);  		}  		else if (p.StartsWith ("REV&")) {  			this.pid = p.Substring (4);  		}  		else if (p.Length == 12) {  			this.MacAddress = p;  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j < id.Length - 1) {  	i = id.IndexOf ('{'' j);  	string tail = id.Substring (j + 1);  	if (i > 0 && i < id.Length - 1) {  		i++;  		j = id.IndexOf ('}'' i);  		if (j > i) {  			instanceUuid = id.Substring (i' j - i);  		}  	}  	i = tail.IndexOf ('#');  	if (i > 0) {  		tail = tail.Substring (0' i);  	}  	string[] parts = tail.Split ('_');  	foreach (string p in parts) {  		if (p.StartsWith ("VID&")) {  			this.vid = p.Substring (4);  		}  		else if (p.StartsWith ("PID&")) {  			this.pid = p.Substring (4);  		}  		else if (p.StartsWith ("REV&")) {  			this.pid = p.Substring (4);  		}  		else if (p.Length == 12) {  			this.MacAddress = p;  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j < id.Length - 1) {  	i = id.IndexOf ('{'' j);  	string tail = id.Substring (j + 1);  	if (i > 0 && i < id.Length - 1) {  		i++;  		j = id.IndexOf ('}'' i);  		if (j > i) {  			instanceUuid = id.Substring (i' j - i);  		}  	}  	i = tail.IndexOf ('#');  	if (i > 0) {  		tail = tail.Substring (0' i);  	}  	string[] parts = tail.Split ('_');  	foreach (string p in parts) {  		if (p.StartsWith ("VID&")) {  			this.vid = p.Substring (4);  		}  		else if (p.StartsWith ("PID&")) {  			this.pid = p.Substring (4);  		}  		else if (p.StartsWith ("REV&")) {  			this.pid = p.Substring (4);  		}  		else if (p.Length == 12) {  			this.MacAddress = p;  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (j < id.Length - 1) {  	i = id.IndexOf ('{'' j);  	string tail = id.Substring (j + 1);  	if (i > 0 && i < id.Length - 1) {  		i++;  		j = id.IndexOf ('}'' i);  		if (j > i) {  			instanceUuid = id.Substring (i' j - i);  		}  	}  	i = tail.IndexOf ('#');  	if (i > 0) {  		tail = tail.Substring (0' i);  	}  	string[] parts = tail.Split ('_');  	foreach (string p in parts) {  		if (p.StartsWith ("VID&")) {  			this.vid = p.Substring (4);  		}  		else if (p.StartsWith ("PID&")) {  			this.pid = p.Substring (4);  		}  		else if (p.StartsWith ("REV&")) {  			this.pid = p.Substring (4);  		}  		else if (p.Length == 12) {  			this.MacAddress = p;  		}  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: foreach (string p in parts) {  	if (p.StartsWith ("VID&")) {  		this.vid = p.Substring (4);  	}  	else if (p.StartsWith ("PID&")) {  		this.pid = p.Substring (4);  	}  	else if (p.StartsWith ("REV&")) {  		this.pid = p.Substring (4);  	}  	else if (p.Length == 12) {  		this.MacAddress = p;  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: foreach (string p in parts) {  	if (p.StartsWith ("VID&")) {  		this.vid = p.Substring (4);  	}  	else if (p.StartsWith ("PID&")) {  		this.pid = p.Substring (4);  	}  	else if (p.StartsWith ("REV&")) {  		this.pid = p.Substring (4);  	}  	else if (p.Length == 12) {  		this.MacAddress = p;  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: foreach (string p in parts) {  	if (p.StartsWith ("VID&")) {  		this.vid = p.Substring (4);  	}  	else if (p.StartsWith ("PID&")) {  		this.pid = p.Substring (4);  	}  	else if (p.StartsWith ("REV&")) {  		this.pid = p.Substring (4);  	}  	else if (p.Length == 12) {  		this.MacAddress = p;  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: foreach (string p in parts) {  	if (p.StartsWith ("VID&")) {  		this.vid = p.Substring (4);  	}  	else if (p.StartsWith ("PID&")) {  		this.pid = p.Substring (4);  	}  	else if (p.StartsWith ("REV&")) {  		this.pid = p.Substring (4);  	}  	else if (p.Length == 12) {  		this.MacAddress = p;  	}  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("VID&")) {  	this.vid = p.Substring (4);  }  else if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("VID&")) {  	this.vid = p.Substring (4);  }  else if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("VID&")) {  	this.vid = p.Substring (4);  }  else if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("VID&")) {  	this.vid = p.Substring (4);  }  else if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: this.vid = p.Substring (4);  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("PID&")) {  	this.pid = p.Substring (4);  }  else if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: this.pid = p.Substring (4);  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.StartsWith ("REV&")) {  	this.pid = p.Substring (4);  }  else if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: this.pid = p.Substring (4);  
Magic Number,SensorTag,BleGattDeviceInfo,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGenericGattService.cs,BleGattDeviceInfo,The following statement contains a magic number: if (p.Length == 12) {  	this.MacAddress = p;  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == GyroscopeCharacteristicUuid) {  	if (_gyroscopeValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				short x = ReadBigEndian16bit (reader);  				short y = ReadBigEndian16bit (reader);  				short z = ReadBigEndian16bit (reader);  				GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  				measurement.X = ((double)x * 500.0) / 65536.0;  				measurement.Y = ((double)y * 500.0) / 65536.0;  				measurement.Z = ((double)z * 500.0) / 65536.0;  				OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_gyroscopeValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			short x = ReadBigEndian16bit (reader);  			short y = ReadBigEndian16bit (reader);  			short z = ReadBigEndian16bit (reader);  			GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  			measurement.X = ((double)x * 500.0) / 65536.0;  			measurement.Y = ((double)y * 500.0) / 65536.0;  			measurement.Z = ((double)z * 500.0) / 65536.0;  			OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		short x = ReadBigEndian16bit (reader);  		short y = ReadBigEndian16bit (reader);  		short z = ReadBigEndian16bit (reader);  		GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  		measurement.X = ((double)x * 500.0) / 65536.0;  		measurement.Y = ((double)y * 500.0) / 65536.0;  		measurement.Z = ((double)z * 500.0) / 65536.0;  		OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	short x = ReadBigEndian16bit (reader);  	short y = ReadBigEndian16bit (reader);  	short z = ReadBigEndian16bit (reader);  	GyroscopeMeasurement measurement = new GyroscopeMeasurement ();  	measurement.X = ((double)x * 500.0) / 65536.0;  	measurement.Y = ((double)y * 500.0) / 65536.0;  	measurement.Z = ((double)z * 500.0) / 65536.0;  	OnGyroscopeMeasurementValueChanged (new GyroscopeMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.X = ((double)x * 500.0) / 65536.0;  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.X = ((double)x * 500.0) / 65536.0;  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Y = ((double)y * 500.0) / 65536.0;  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Y = ((double)y * 500.0) / 65536.0;  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Z = ((double)z * 500.0) / 65536.0;  
Magic Number,SensorTag,BleGyroscopeService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleGyroscopeService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Z = ((double)z * 500.0) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetPeriod,The following statement contains a magic number: if (Version == 2) {  	byte v = await ReadCharacteristicByte (HumidityCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached);  	return (int)(v * 10);  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetPeriod,The following statement contains a magic number: if (Version == 2) {  	byte v = await ReadCharacteristicByte (HumidityCharacteristicPeriodUuid' Windows.Devices.Bluetooth.BluetoothCacheMode.Uncached);  	return (int)(v * 10);  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,GetPeriod,The following statement contains a magic number: return 1000;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,SetPeriod,The following statement contains a magic number: if (Version == 2) {  	int delay = milliseconds / 10;  	byte p = (byte)delay;  	if (p < 1) {  		p = 1;  	}  	await WriteCharacteristicByte (HumidityCharacteristicPeriodUuid' p);  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,SetPeriod,The following statement contains a magic number: if (Version == 2) {  	int delay = milliseconds / 10;  	byte p = (byte)delay;  	if (p < 1) {  		p = 1;  	}  	await WriteCharacteristicByte (HumidityCharacteristicPeriodUuid' p);  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == HumidityCharacteristicUuid) {  	if (_humidityValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				ushort temp = ReadBigEndianU16bit (reader);  				ushort humidity = ReadBigEndianU16bit (reader);  				var measurement = new HumidityMeasurement ();  				if (Version == 1) {  					// calculate temperature [deg C]   					measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  					humidity &= 0xFFFC;  					// clear bits [1..0] (status bits)  					measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  					// RH= -6 + 125 * SRH/2^16  				}  				else {  					measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  					measurement.Humidity = ((double)humidity / 65536.0) * 100;  				}  				measurement.SetRawHumidity (humidity);  				OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_humidityValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			ushort temp = ReadBigEndianU16bit (reader);  			ushort humidity = ReadBigEndianU16bit (reader);  			var measurement = new HumidityMeasurement ();  			if (Version == 1) {  				// calculate temperature [deg C]   				measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  				humidity &= 0xFFFC;  				// clear bits [1..0] (status bits)  				measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  				// RH= -6 + 125 * SRH/2^16  			}  			else {  				measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  				measurement.Humidity = ((double)humidity / 65536.0) * 100;  			}  			measurement.SetRawHumidity (humidity);  			OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		ushort temp = ReadBigEndianU16bit (reader);  		ushort humidity = ReadBigEndianU16bit (reader);  		var measurement = new HumidityMeasurement ();  		if (Version == 1) {  			// calculate temperature [deg C]   			measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  			humidity &= 0xFFFC;  			// clear bits [1..0] (status bits)  			measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  			// RH= -6 + 125 * SRH/2^16  		}  		else {  			measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  			measurement.Humidity = ((double)humidity / 65536.0) * 100;  		}  		measurement.SetRawHumidity (humidity);  		OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	ushort temp = ReadBigEndianU16bit (reader);  	ushort humidity = ReadBigEndianU16bit (reader);  	var measurement = new HumidityMeasurement ();  	if (Version == 1) {  		// calculate temperature [deg C]   		measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  		humidity &= 0xFFFC;  		// clear bits [1..0] (status bits)  		measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  		// RH= -6 + 125 * SRH/2^16  	}  	else {  		measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  		measurement.Humidity = ((double)humidity / 65536.0) * 100;  	}  	measurement.SetRawHumidity (humidity);  	OnHumidityMeasurementValueChanged (new HumidityMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// calculate temperature [deg C]   	measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  	humidity &= 0xFFFC;  	// clear bits [1..0] (status bits)  	measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  	// RH= -6 + 125 * SRH/2^16  }  else {  	measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  	measurement.Humidity = ((double)humidity / 65536.0) * 100;  }  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = -46.85 + (175.72 * (double)temp) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Temperature = ((double)temp / 65536.0) * 165 - 40;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Humidity = ((double)humidity / 65536.0) * 100;  
Magic Number,SensorTag,BleHumidityService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Humidity = ((double)humidity / 65536.0) * 100;  
Magic Number,SensorTag,HumidityMeasurement,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,SetRawHumidity,The following statement contains a magic number: this.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,HumidityMeasurement,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,SetRawHumidity,The following statement contains a magic number: this.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,HumidityMeasurement,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleHumidityService.cs,SetRawHumidity,The following statement contains a magic number: this.Humidity = -6.0 + (125.0 * (double)humidity) / 65536.0;  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == IRTemperatureCharacteristicUuid) {  	if (_irTemperatureValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 4) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  				short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  				short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  				if (Version == 1) {  					// This algorithm comes from http://www.ti.com/product/tmp006  					measurement.DieTemperature = dieTemp / 128.0;  					double Vobj2 = (double)objTemp;  					Vobj2 *= 156.25E-9;  					// Voltage in the sensor  					double toKelvin = 273.15;  					double Tdie = measurement.DieTemperature + toKelvin;  					double S0 = 6.4E-14;  					// Default value based on black body with ε = 0.95' and 110° FOV.  					double a1 = 1.75E-3;  					// Default values based on typical sensor characteristics  					double a2 = -1.678E-5;  					double b0 = -2.94E-5;  					double b1 = -5.7E-7;  					// Calibrate in end-application environment  					double b2 = 4.63E-9;  					double c2 = 13.4;  					double Tref = 298.15;  					// compute the sensitivity of the thermopile sensor and how it changes over temperature  					double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  					// offset voltage that arises because of the slight self-heating of the TMP006 chip  					double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  					// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  					double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  					// computes the radiant transfer of IR energy between the target object and the TMP006 chip  					// and the conducted heat in the thermopile in the TMP006.  					double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  					// back to celcius  					measurement.ObjectTemperature = (tObj - toKelvin);  				}  				else {  					const double SCALE_LSB = 0.03125;  					int it;  					it = (int)((objTemp) >> 2);  					measurement.ObjectTemperature = (double)it * SCALE_LSB;  					it = (int)((dieTemp) >> 2);  					measurement.DieTemperature = (double)it * SCALE_LSB;  				}  				OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_irTemperatureValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 4) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  			short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  			short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  			if (Version == 1) {  				// This algorithm comes from http://www.ti.com/product/tmp006  				measurement.DieTemperature = dieTemp / 128.0;  				double Vobj2 = (double)objTemp;  				Vobj2 *= 156.25E-9;  				// Voltage in the sensor  				double toKelvin = 273.15;  				double Tdie = measurement.DieTemperature + toKelvin;  				double S0 = 6.4E-14;  				// Default value based on black body with ε = 0.95' and 110° FOV.  				double a1 = 1.75E-3;  				// Default values based on typical sensor characteristics  				double a2 = -1.678E-5;  				double b0 = -2.94E-5;  				double b1 = -5.7E-7;  				// Calibrate in end-application environment  				double b2 = 4.63E-9;  				double c2 = 13.4;  				double Tref = 298.15;  				// compute the sensitivity of the thermopile sensor and how it changes over temperature  				double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  				// offset voltage that arises because of the slight self-heating of the TMP006 chip  				double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  				// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  				double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  				// computes the radiant transfer of IR energy between the target object and the TMP006 chip  				// and the conducted heat in the thermopile in the TMP006.  				double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  				// back to celcius  				measurement.ObjectTemperature = (tObj - toKelvin);  			}  			else {  				const double SCALE_LSB = 0.03125;  				int it;  				it = (int)((objTemp) >> 2);  				measurement.ObjectTemperature = (double)it * SCALE_LSB;  				it = (int)((dieTemp) >> 2);  				measurement.DieTemperature = (double)it * SCALE_LSB;  			}  			OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 4) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  		short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  		short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  		if (Version == 1) {  			// This algorithm comes from http://www.ti.com/product/tmp006  			measurement.DieTemperature = dieTemp / 128.0;  			double Vobj2 = (double)objTemp;  			Vobj2 *= 156.25E-9;  			// Voltage in the sensor  			double toKelvin = 273.15;  			double Tdie = measurement.DieTemperature + toKelvin;  			double S0 = 6.4E-14;  			// Default value based on black body with ε = 0.95' and 110° FOV.  			double a1 = 1.75E-3;  			// Default values based on typical sensor characteristics  			double a2 = -1.678E-5;  			double b0 = -2.94E-5;  			double b1 = -5.7E-7;  			// Calibrate in end-application environment  			double b2 = 4.63E-9;  			double c2 = 13.4;  			double Tref = 298.15;  			// compute the sensitivity of the thermopile sensor and how it changes over temperature  			double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  			// offset voltage that arises because of the slight self-heating of the TMP006 chip  			double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  			// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  			double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  			// computes the radiant transfer of IR energy between the target object and the TMP006 chip  			// and the conducted heat in the thermopile in the TMP006.  			double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  			// back to celcius  			measurement.ObjectTemperature = (tObj - toKelvin);  		}  		else {  			const double SCALE_LSB = 0.03125;  			int it;  			it = (int)((objTemp) >> 2);  			measurement.ObjectTemperature = (double)it * SCALE_LSB;  			it = (int)((dieTemp) >> 2);  			measurement.DieTemperature = (double)it * SCALE_LSB;  		}  		OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 4) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	IRTemperatureMeasurement measurement = new IRTemperatureMeasurement ();  	short objTemp = (short)((short)data [0] + (short)(data [1] << 8));  	short dieTemp = (short)((short)data [2] + (short)(data [3] << 8));  	if (Version == 1) {  		// This algorithm comes from http://www.ti.com/product/tmp006  		measurement.DieTemperature = dieTemp / 128.0;  		double Vobj2 = (double)objTemp;  		Vobj2 *= 156.25E-9;  		// Voltage in the sensor  		double toKelvin = 273.15;  		double Tdie = measurement.DieTemperature + toKelvin;  		double S0 = 6.4E-14;  		// Default value based on black body with ε = 0.95' and 110° FOV.  		double a1 = 1.75E-3;  		// Default values based on typical sensor characteristics  		double a2 = -1.678E-5;  		double b0 = -2.94E-5;  		double b1 = -5.7E-7;  		// Calibrate in end-application environment  		double b2 = 4.63E-9;  		double c2 = 13.4;  		double Tref = 298.15;  		// compute the sensitivity of the thermopile sensor and how it changes over temperature  		double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  		// offset voltage that arises because of the slight self-heating of the TMP006 chip  		double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  		// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  		double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  		// computes the radiant transfer of IR energy between the target object and the TMP006 chip  		// and the conducted heat in the thermopile in the TMP006.  		double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  		// back to celcius  		measurement.ObjectTemperature = (tObj - toKelvin);  	}  	else {  		const double SCALE_LSB = 0.03125;  		int it;  		it = (int)((objTemp) >> 2);  		measurement.ObjectTemperature = (double)it * SCALE_LSB;  		it = (int)((dieTemp) >> 2);  		measurement.DieTemperature = (double)it * SCALE_LSB;  	}  	OnIRTemperatureMeasurementValueChanged (new IRTemperatureMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (Version == 1) {  	// This algorithm comes from http://www.ti.com/product/tmp006  	measurement.DieTemperature = dieTemp / 128.0;  	double Vobj2 = (double)objTemp;  	Vobj2 *= 156.25E-9;  	// Voltage in the sensor  	double toKelvin = 273.15;  	double Tdie = measurement.DieTemperature + toKelvin;  	double S0 = 6.4E-14;  	// Default value based on black body with ε = 0.95' and 110° FOV.  	double a1 = 1.75E-3;  	// Default values based on typical sensor characteristics  	double a2 = -1.678E-5;  	double b0 = -2.94E-5;  	double b1 = -5.7E-7;  	// Calibrate in end-application environment  	double b2 = 4.63E-9;  	double c2 = 13.4;  	double Tref = 298.15;  	// compute the sensitivity of the thermopile sensor and how it changes over temperature  	double S = S0 * (1 + a1 * (Tdie - Tref) + a2 * Math.Pow ((Tdie - Tref)' 2));  	// offset voltage that arises because of the slight self-heating of the TMP006 chip  	double Vos = b0 + b1 * (Tdie - Tref) + b2 * Math.Pow ((Tdie - Tref)' 2);  	// models the Seebeck coefficients of the thermopile and how these coefficients change over temperature.  	double fObj = (Vobj2 - Vos) + c2 * Math.Pow ((Vobj2 - Vos)' 2);  	// computes the radiant transfer of IR energy between the target object and the TMP006 chip  	// and the conducted heat in the thermopile in the TMP006.  	double tObj = Math.Pow (Math.Pow (Tdie' 4) + (fObj / S)' .25);  	// back to celcius  	measurement.ObjectTemperature = (tObj - toKelvin);  }  else {  	const double SCALE_LSB = 0.03125;  	int it;  	it = (int)((objTemp) >> 2);  	measurement.ObjectTemperature = (double)it * SCALE_LSB;  	it = (int)((dieTemp) >> 2);  	measurement.DieTemperature = (double)it * SCALE_LSB;  }  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.DieTemperature = dieTemp / 128.0;  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: Vobj2 *= 156.25E-9;  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: it = (int)((objTemp) >> 2);  
Magic Number,SensorTag,BleIRTemperatureService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleIRTemperatureService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: it = (int)((dieTemp) >> 2);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,GetPeriod,The following statement contains a magic number: return (int)(v * 10);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (sender.Uuid == MagnetometerCharacteristicUuid) {  	if (_magnetometerValueChanged != null) {  		uint dataLength = eventArgs.CharacteristicValue.Length;  		using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  			if (dataLength == 6) {  				var data = new byte[dataLength];  				reader.ReadBytes (data);  				MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  				int x = (int)data [0] + ((sbyte)data [1] << 8);  				int y = (int)data [2] + ((sbyte)data [3] << 8);  				int z = (int)data [4] + ((sbyte)data [5] << 8);  				measurement.X = (double)x * (2000.0 / 65536.0);  				measurement.Y = (double)y * (2000.0 / 65536.0);  				measurement.Z = (double)z * (2000.0 / 65536.0);  				OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  			}  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (_magnetometerValueChanged != null) {  	uint dataLength = eventArgs.CharacteristicValue.Length;  	using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  		if (dataLength == 6) {  			var data = new byte[dataLength];  			reader.ReadBytes (data);  			MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  			int x = (int)data [0] + ((sbyte)data [1] << 8);  			int y = (int)data [2] + ((sbyte)data [3] << 8);  			int z = (int)data [4] + ((sbyte)data [5] << 8);  			measurement.X = (double)x * (2000.0 / 65536.0);  			measurement.Y = (double)y * (2000.0 / 65536.0);  			measurement.Z = (double)z * (2000.0 / 65536.0);  			OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  		}  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: using (DataReader reader = DataReader.FromBuffer (eventArgs.CharacteristicValue)) {  	if (dataLength == 6) {  		var data = new byte[dataLength];  		reader.ReadBytes (data);  		MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  		int x = (int)data [0] + ((sbyte)data [1] << 8);  		int y = (int)data [2] + ((sbyte)data [3] << 8);  		int z = (int)data [4] + ((sbyte)data [5] << 8);  		measurement.X = (double)x * (2000.0 / 65536.0);  		measurement.Y = (double)y * (2000.0 / 65536.0);  		measurement.Z = (double)z * (2000.0 / 65536.0);  		OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  	}  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: if (dataLength == 6) {  	var data = new byte[dataLength];  	reader.ReadBytes (data);  	MagnetometerMeasurement measurement = new MagnetometerMeasurement ();  	int x = (int)data [0] + ((sbyte)data [1] << 8);  	int y = (int)data [2] + ((sbyte)data [3] << 8);  	int z = (int)data [4] + ((sbyte)data [5] << 8);  	measurement.X = (double)x * (2000.0 / 65536.0);  	measurement.Y = (double)y * (2000.0 / 65536.0);  	measurement.Z = (double)z * (2000.0 / 65536.0);  	OnMagnetometerMeasurementValueChanged (new MagnetometerMeasurementEventArgs (measurement' eventArgs.Timestamp));  }  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.X = (double)x * (2000.0 / 65536.0);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.X = (double)x * (2000.0 / 65536.0);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Y = (double)y * (2000.0 / 65536.0);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Y = (double)y * (2000.0 / 65536.0);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Z = (double)z * (2000.0 / 65536.0);  
Magic Number,SensorTag,BleMagnetometerService,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleMagnetometerService.cs,OnCharacteristicValueChanged,The following statement contains a magic number: measurement.Z = (double)z * (2000.0 / 65536.0);  
Magic Number,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,SensorTag,The following statement contains a magic number: if (name == "CC2650 SensorTag" || name == "SensorTag 2.0") {  	this.version = 2;  	this.deviceName = "CC2650";  }  else {  	this.deviceName = "CC2541";  }  
Magic Number,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,SensorTag,The following statement contains a magic number: this.version = 2;  
Magic Number,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,ConnectAsync,The following statement contains a magic number: if (!connecting && !connected) {  	disconnecting = false;  	try {  		OnStatusChanged ("connecting...");  		// since all this code is async' user could quit in the middle' hence all the checks  		// on the "disconnecting" state.  		if (!await ConnectIRTemperatureService ()) {  			return false;  		}  		;  		await ConnectHumidityService ();  		if (disconnecting)  			return false;  		await ConnectBarometerService ();  		if (disconnecting)  			return false;  		// Version 1 only  		if (version == 1) {  			await ConnectButtonService ();  			if (disconnecting)  				return false;  			await ConnectAccelerometerService ();  			if (disconnecting)  				return false;  			await ConnectGyroscopeService ();  			if (disconnecting)  				return false;  			await ConnectMagnetometerService ();  			if (disconnecting)  				return false;  		}  		if (version == 2) {  			await ConnectMovementService ();  			if (disconnecting)  				return false;  			await ConnectLightIntensityService ();  			if (disconnecting)  				return false;  		}  		connected = true;  		OnStatusChanged ("connected");  	}  	finally {  		connecting = false;  	}  }  
Magic Number,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,ConnectAsync,The following statement contains a magic number: try {  	OnStatusChanged ("connecting...");  	// since all this code is async' user could quit in the middle' hence all the checks  	// on the "disconnecting" state.  	if (!await ConnectIRTemperatureService ()) {  		return false;  	}  	;  	await ConnectHumidityService ();  	if (disconnecting)  		return false;  	await ConnectBarometerService ();  	if (disconnecting)  		return false;  	// Version 1 only  	if (version == 1) {  		await ConnectButtonService ();  		if (disconnecting)  			return false;  		await ConnectAccelerometerService ();  		if (disconnecting)  			return false;  		await ConnectGyroscopeService ();  		if (disconnecting)  			return false;  		await ConnectMagnetometerService ();  		if (disconnecting)  			return false;  	}  	if (version == 2) {  		await ConnectMovementService ();  		if (disconnecting)  			return false;  		await ConnectLightIntensityService ();  		if (disconnecting)  			return false;  	}  	connected = true;  	OnStatusChanged ("connected");  }  finally {  	connecting = false;  }  
Magic Number,SensorTag,SensorTag,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\SensorTag.cs,ConnectAsync,The following statement contains a magic number: if (version == 2) {  	await ConnectMovementService ();  	if (disconnecting)  		return false;  	await ConnectLightIntensityService ();  	if (disconnecting)  		return false;  }  
Missing Default,SensorTag,BarometerMeasurement,C:\repos\clovett_SensorTag-for-Windows\SensorTag\SensorTagLibrary\BleBarometerService.cs,GetUnit,The following switch statement is missing a default case: switch (unit) {  case PressureUnit.Hectopascal:  	return this.HectoPascals;  case PressureUnit.Pascal:  	return this.Pascals;  case PressureUnit.Bar:  	return this.Bars;  case PressureUnit.Millibar:  	return this.MilliBars;  case PressureUnit.Kilopascal:  	return this.KiloPascals;  case PressureUnit.MercuryMm:  	return this.HgMm;  case PressureUnit.MercuryIn:  	return this.HgInches;  case PressureUnit.Psi:  	return this.Psi;  }  
