Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,DaemonApi,The method has 9 parameters. Parameters: bitsharesConfig' bitcoinConfig' bitsharesAccount' bitsharesAsset' bitcoinDespositAddress' databaseName' databaseUser' databasePassword' listenAddress
Long Parameter List,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,DaemonBase,The method has 5 parameters. Parameters: bitsharesConfig' bitcoinConfig' bitsharesAccount' bitsharesAsset' bitcoinDespositAddress
Long Parameter List,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,MarkTransactionAsRefundedEnd,The method has 5 parameters. Parameters: receivedTxid' sentTxid' amount' type' notes
Long Parameter List,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,DaemonMySql,The method has 8 parameters. Parameters: bitsharesConfig' bitcoinConfig' bitsharesAccount' bitsharesAsset' bitcoinDespositAddress' databaseName' databaseUser' databasePassword
Long Parameter List,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,MarkTransactionAsRefundedEnd,The method has 5 parameters. Parameters: receivedTxid' sentTxid' amount' type' notes
Long Parameter List,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,InsertTransaction,The method has 5 parameters. Parameters: receivedTxid' sentTxid' amount' type' notes
Long Parameter List,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,MarkTransactionEnd,The method has 5 parameters. Parameters: receivedTxid' sentTxid' amount' type' notes
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,InsertSenderToDeposit,The length of the statement  "			m_database.Statement("INSERT INTO sender_to_deposit (receiving_address' deposit_address) VALUES(@a'@b);"' receivingAddress' depositAddress); " is 140.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,GetSenderDepositFromDeposit,The length of the statement  "			return m_database.Query<SenderToDepositRow>("SELECT * FROM sender_to_deposit WHERE deposit_address=@d;"' depositAddress).FirstOrDefault(); " is 138.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnSubmitAddress,The length of the statement  "			CurrencyTypes fromCurrency = RestHelpers.GetPostArg<CurrencyTypes' ApiExceptionMissingParameter>(ctx' WebForms.kFromCurrency); " is 126.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnSubmitAddress,The length of the statement  "			CurrencyTypes toCurrency = RestHelpers.GetPostArg<CurrencyTypes' ApiExceptionMissingParameter>(ctx' WebForms.kToCurrency); " is 122.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnSubmitAddress,The length of the statement  "			string receivingAddress = RestHelpers.GetPostArg<string' ApiExceptionMissingParameter>(ctx' WebForms.kReceivingAddress); " is 120.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnSubmitAddress,The length of the statement  "				SenderToDepositRow senderToDeposit = m_database.Query<SenderToDepositRow>("SELECT * FROM sender_to_deposit WHERE receiving_address=@s;"' accountName).FirstOrDefault(); " is 167.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnSubmitAddress,The length of the statement  "				SenderToDepositRow senderToDeposit = m_database.Query<SenderToDepositRow>("SELECT * FROM sender_to_deposit WHERE receiving_address=@s;"' bitcoinAddress).FirstOrDefault(); " is 170.
Long Statement,BtsOnrampDaemon,DaemonApi,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonApi.cs,OnGetStats,The length of the statement  "			List<TransactionsRow> lastTransactions = m_database.Query<TransactionsRow>("SELECT * FROM transactions WHERE uid>@uid ORDER BY uid;"' sinceTid); " is 144.
Long Statement,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,SendBitAssetsToDepositor,The length of the statement  "				bitsharesTrx = m_bitshares.WalletTransferToAddress(amount' m_asset.symbol' m_bitsharesAccount' bitsharesAddress.m_text); " is 120.
Long Statement,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,HandleBitcoinDeposits,The length of the statement  "			IEnumerable<TransactionSinceBlock> transactions = m_bitcoin.ListSinceBlock(lastBlockHash' 1).transactions.Where(t => t.Category == TransactionCategory.receive && t.Confirmations >= kBitcoinConfirms); " is 199.
Long Statement,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,IsTransactionIgnored,The length of the statement  "			return m_database.QueryScalar<long>("SELECT COUNT(*) FROM ignored'exceptions WHERE ignored.txid=@txid OR exceptions.txid=@txid2;"' txid' txid) > 0; " is 147.
Long Statement,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,LogException,The length of the statement  "			m_database.Statement("INSERT INTO exceptions (txid' message' date' type) VALUES(@a'@b'@c'@d);"' txid' message' date' type); " is 123.
Long Statement,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,InsertTransaction,The length of the statement  "			m_database.Statement(	"INSERT INTO transactions (received_txid' sent_txid' asset' amount' date' type' notes) VALUES(@a'@b'@c'@d'@e'@f'@g);"' " is 140.
Long Statement,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,MarkTransactionEnd,The length of the statement  "			m_database.Statement("UPDATE transactions SET sent_txid=@sent' amount=@amount' type=@type' notes=@notes WHERE received_txid=@txid;"' " is 132.
Long Statement,BtsOnrampDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonMySql.cs,IsPartTransaction,The length of the statement  "			return m_database.QueryScalar<long>("SELECT COUNT(*) FROM transactions WHERE received_txid=@txid AND sent_txid IS NULL;"' receivedTxid) > 0; " is 140.
Long Statement,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The length of the statement  "				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }' " is 136.
Long Statement,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The length of the statement  "														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }' " is 129.
Long Statement,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The length of the statement  "				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " + " is 121.
Long Statement,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The length of the statement  "									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " + " is 135.
Magic Number,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,RecomputeTransactionLimitsAndPrices,The following statement contains a magic number: m_bitcoinDepositLimit = Numeric.TruncateDecimal(m_bitsharesBalance * kMaxTransactionFactor' 2);
Magic Number,BtsOnrampDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\DaemonBase.cs,RecomputeTransactionLimitsAndPrices,The following statement contains a magic number: m_bitsharesDepositLimit = Numeric.TruncateDecimal(m_bitcoinBalance * kMaxTransactionFactor' 2);
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
Magic Number,BtsOnrampDaemon,Program,C:\repos\wildbunny_metaexchange\BtsOnrampDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 14)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];  				string bitsharesAssetName = args[4];  				  				string bitcoinUrl = args[5];  				string bitcoinUser = args[6];  				string bitcoinPassword = args[7];  				bool bitcoinUseTestNet = bool.Parse(args[8]);  				string bitcoinDepositAddress = args[9];    				string database = args[10];  				string databaseUser = args[11];  				string databasePassword = args[12];    				string apiListen = args[13];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				DaemonApi daemon = new DaemonApi(		new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  														new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  														bitsharesAccount' bitsharesAssetName' bitcoinDepositAddress'  														database' databaseUser' databasePassword'  														apiListen);    				scheduler.RunWithUpdate(daemon.Start' daemon.Update' 1 );    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage: BtsOnRampDamon.exe <bitshares rpc url> <bitshares rpc user> <bitshares rpc password> " +  									"<bitshares asset name> <bitcoin rpc url> <bitcoin rpc user> <bitcoin rpc password> <use bitcoin testnet> <bitcoin deposit address> " +  									"<myql database name> <mysql database user> <mysql database password> <api listen address>");  			}
