Implementation smell,Namespace,Class,File,Method,Description
Long Method,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,Update,The method has 173 lines of code.
Complex Method,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,Update,Cyclomatic complexity of the method is 22
Complex Method,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,Cyclomatic complexity of the method is 8
Long Parameter List,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,MetaDaemonApi,The method has 13 parameters. Parameters: bitsharesConfig' bitcoinConfig' bitsharesAccount' databaseName' databaseUser' databasePassword' listenAddress' bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames' masterSiteUrl' masterSiteIp' scheduler
Long Parameter List,MetaDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonBase.cs,MarkTransactionAsRefundedEnd,The method has 5 parameters. Parameters: receivedTxid' sentTxid' status' amount' notes
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,DaemonMySql,The method has 7 parameters. Parameters: bitsharesConfig' bitcoinConfig' bitsharesAccount' adminUsernames' databaseName' databaseUser' databasePassword
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,MarkDespositAsCreditedStart,The method has 6 parameters. Parameters: receivedTxid' depositAddress' symbolPair' orderType' status' policy
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,MarkDespositAsCreditedEnd,The method has 6 parameters. Parameters: receivedTxid' sentTxid' status' amount' price' fee
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,MarkTransactionAsRefundedEnd,The method has 5 parameters. Parameters: receivedTxid' sentTxid' status' amount' notes
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,InsertTransaction,The method has 11 parameters. Parameters: symbolPair' depositAddress' orderType' receivedTxid' sentTxid' amount' price' fee' status' date' notes
Long Parameter List,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,MarkTransactionEnd,The method has 7 parameters. Parameters: receivedTxid' sentTxid' status' amount' price' fee' notes
Long Parameter List,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,InternalMarket,The method has 6 parameters. Parameters: daemon' market' bitshares' bitcoin' bitsharesAccount' bitsharesAsset
Long Parameter List,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,MarketBase,The method has 5 parameters. Parameters: daemon' market' bitshares' bitcoin' bitsharesAccount
Long Parameter List,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitcoinsToDepositor,The method has 7 parameters. Parameters: btcAddress' trxId' amount' asset' depositAddress' orderType' burnUia
Long Parameter List,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitAssets,The method has 5 parameters. Parameters: amount' asset' sendTo' memo' allowIssue
Long Parameter List,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,RefundBitsharesDeposit,The method has 7 parameters. Parameters: fromAccount' larimers' depositId' memo' asset' depositAddress' orderType
Long Identifier,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,,The length of the parameter kMaxTransactionsBeforeCollectFees is 33.
Long Statement,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,OnSubmitAddress,The length of the statement  "				string receivingAddress = RestHelpers.GetPostArg<string' ApiExceptionMissingParameter>(ctx' WebForms.kReceivingAddress); " is 120.
Long Statement,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,OnSubmitAddress,The length of the statement  "				MetaOrderType orderType = RestHelpers.GetPostArg<MetaOrderType' ApiExceptionMissingParameter>(ctx' WebForms.kOrderType); " is 120.
Long Statement,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,HandleCommand,The length of the statement  "									BitsharesTransactionResponse response = m_bitshares.WalletTransfer(amount' CurrencyHelpers.ToBitsharesSymbol(type)' m_bitsharesAccount' to); " is 140.
Long Statement,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,Update,The length of the statement  "									if (kvpHandler.Value.CanDepositAsset(CurrencyHelpers.FromBitsharesSymbol(depositAsset.symbol' m_allCurrencies' depositAsset.IsUia()))) " is 134.
Long Statement,MetaDaemon,DaemonBase,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonBase.cs,HandleBitcoinDeposits,The length of the statement  "			IEnumerable<TransactionSinceBlock> transactions = m_bitcoin.ListSinceBlock(lastBlockHash' 1).transactions.Where(t => t.Category == TransactionCategory.receive); " is 160.
Long Statement,MetaDaemon,DaemonMySql,C:\repos\wildbunny_metaexchange\MetaDaemon\DaemonMySql.cs,InsertTransaction,The length of the statement  "			m_dataAccess.InsertTransaction(symbolPair' depositAddress' orderType' receivedTxid' sentTxid' amount' price' fee' status' date' notes); " is 135.
Long Statement,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The length of the statement  "				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }' " is 149.
Long Statement,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The length of the statement  "																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }' " is 129.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,The length of the statement  "				m_prices.UpdateParameters(m_lastFeedPrice' inventoryRatio' m_market.spread_percent' m_market.window_percent' out m_market.bid' out m_market.ask); " is 145.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,CanDepositAsset,The length of the statement  "			CurrencyHelpers.GetBaseAndQuoteFromSymbolPair(m_market.symbol_pair' m_daemon.m_AllCurrencies' out baseSymbol' out quoteSymbol); " is 127.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,SellBitAsset,The length of the statement  "				SendBitcoinsToDepositor(btcAddress' trxId' l.amount.amount' m_asset' s2d.deposit_address' MetaOrderType.sell'  m_currency.uia); " is 127.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,SellBitAsset,The length of the statement  "				RefundBitsharesDeposit(l.from_account' l.amount.amount' trxId' e.Message' m_asset' s2d.deposit_address' MetaOrderType.sell); " is 124.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,HandleBitcoinDeposit,The length of the statement  "					m_daemon.m_Database.MarkDespositAsCreditedStart(t.TxId' s2d.deposit_address' m_market.symbol_pair' MetaOrderType.buy' MetaOrderStatus.pending); " is 143.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,OnSubmitAddress,The length of the statement  "				SenderToDepositRow senderToDeposit = m_daemon.GetSenderDepositFromReceiver(accountName' m_market.symbol_pair' referralUser); " is 124.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,OnSubmitAddress,The length of the statement  "				SenderToDepositRow senderToDeposit = m_daemon.GetSenderDepositFromReceiver(bitcoinAddress' m_market.symbol_pair' referralUser); " is 127.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,OnSubmitAddress,The length of the statement  "					senderToDeposit = m_daemon.InsertSenderToDeposit(bitcoinAddress' MarketBase.CreateMemo(bitcoinAddress' m_market.symbol_pair' referralUser)' m_market.symbol_pair' referralUser); " is 176.
Long Statement,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,CollectFees,The length of the statement  "			List<TransactionsRow> transSince = m_daemon.GetCompletedTransactionsInMarketSince(m_market.symbol_pair' m_market.transaction_processed_uid); " is 140.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitAssetsToDepositor,The length of the statement  "			m_daemon.MarkDespositAsCreditedStart(t.TxId' s2d.deposit_address' m_market.symbol_pair' orderType' MetaOrderStatus.processing' TransactionPolicy.REPLACE); " is 154.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitAssetsToDepositor,The length of the statement  "			BitsharesTransactionResponse bitsharesTrx = SendBitAssets(amountAsset' asset' bitsharesAccount' "mX: " + orderType + " " + asset.symbol); " is 137.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitAssetsToDepositor,The length of the statement  "			m_daemon.MarkDespositAsCreditedEnd(t.TxId' bitsharesTrx.record_id' MetaOrderStatus.completed' bitAssetAmountNoFee' m_market.ask' fee); " is 134.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,GetBitsharesAccountFromBitcoinDeposit,The length of the statement  "			SenderToDepositRow senderToDeposit = m_daemon.m_Database.GetSenderDepositIgnoreReferral(t.Address' m_market.symbol_pair); " is 121.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,RefundBitsharesDeposit,The length of the statement  "			//BitsharesTransactionResponse response = m_bitshares.WalletTransfer(amount' asset.symbol' m_bitsharesAccount' fromAccount' memo); " is 130.
Long Statement,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,CreateMemo,The length of the statement  "			string memo = start + bitcoinAddress.Substring(0' Math.Min(BitsharesWallet.kBitsharesMaxMemoLength' bitcoinAddress.Length) - start.Length); " is 139.
Magic Number,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,HandlePriceSetting,The following statement contains a magic number: if (parts[0] == kSetPricesMemoStart)  			{  				if (parts[1] == market.symbol_pair)  				{  					// setting is for this market!  					decimal basePrice = decimal.Parse(parts[2]);  					decimal quotePrice = decimal.Parse(parts[3]);    					// go do it!  					handler.SetPricesFromSingleUnitQuantities(basePrice' quotePrice' market.flipped' market);  				}  			}
Magic Number,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,HandlePriceSetting,The following statement contains a magic number: if (parts[0] == kSetPricesMemoStart)  			{  				if (parts[1] == market.symbol_pair)  				{  					// setting is for this market!  					decimal basePrice = decimal.Parse(parts[2]);  					decimal quotePrice = decimal.Parse(parts[3]);    					// go do it!  					handler.SetPricesFromSingleUnitQuantities(basePrice' quotePrice' market.flipped' market);  				}  			}
Magic Number,MetaDaemon,MetaDaemonApi,C:\repos\wildbunny_metaexchange\MetaDaemon\Api.cs,HandleCommand,The following statement contains a magic number: if (m_adminUsernames.Contains(l.from_account))  			{  				try  				{  					string[] parts = l.memo.Split(' ');    					if (l.memo.StartsWith(kSetPricesMemoStart))  					{  						HandlePriceSetting(parts' l' handler' market);  						return true;  					}  					else if (l.memo.StartsWith(kWithdrawMemo))  					{  						// process withdrawal  						if (parts[0] == kWithdrawMemo)  						{  							// make sure we didn't already process this transaction!  							if (!m_dataAccess.IsWithdrawalProcessed(trxid))  							{  								decimal amount = decimal.Parse(parts[1]);  								CurrenciesRow type = CurrencyHelpers.FromSymbol(parts[2]' m_allCurrencies);  								string to;    								string txid;  								if ( !CurrencyHelpers.IsBitsharesAsset(type) )  								{  									to = m_dataAccess.GetStats().bitcoin_withdraw_address;  									Debug.Assert(to != null);    									txid = m_bitcoin.SendToAddress(to' amount);  								}  								else  								{  									to = l.from_account;  									BitsharesTransactionResponse response = m_bitshares.WalletTransfer(amount' CurrencyHelpers.ToBitsharesSymbol(type)' m_bitsharesAccount' to);  									txid = response.record_id;  								}    								// log in DB  								m_dataAccess.InsertWithdrawal(trxid' txid' type.ToString()' amount' to' DateTime.UtcNow);  							}    							return true;  						}  					}  				}  				catch (Exception e)  				{  					LogGeneralException(e.ToString());  				}  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon,Program,C:\repos\wildbunny_metaexchange\MetaDaemon\Program.cs,Main,The following statement contains a magic number: if (args.Length == 17)  			{  				string bitsharesUrl = args[0];  				string bitsharesUser = args[1];  				string bitsharesPassword = args[2];  				string bitsharesAccount = args[3];    				string bitcoinUrl = args[4];  				string bitcoinUser = args[5];  				string bitcoinPassword = args[6];  				bool bitcoinUseTestNet = bool.Parse(args[7]);    				string database = args[8];  				string databaseUser = args[9];  				string databasePassword = args[10];    				string apiListen = args[11];    				string bitcoinFeeAddress = args[12];  				string bitsharesFeeAccount = args[13];  				string adminUsernames = args[14];    				string masterSiteUrl = args[15];  				string masterSiteIp = args[16];    				// create a scheduler so we can be sure of thread affinity  				AsyncPump scheduler = new AsyncPump(Thread.CurrentThread' OnException);    				using (MetaDaemonApi daemon = new MetaDaemonApi(new RpcConfig { m_url = bitsharesUrl' m_rpcUser = bitsharesUser' m_rpcPassword = bitsharesPassword }'  																new RpcConfig { m_url = bitcoinUrl' m_rpcUser = bitcoinUser' m_rpcPassword = bitcoinPassword' m_useTestnet = bitcoinUseTestNet }'  																bitsharesAccount'  																database' databaseUser' databasePassword'  																apiListen'  																bitcoinFeeAddress' bitsharesFeeAccount' adminUsernames'  																masterSiteUrl' masterSiteIp'  																scheduler))  				{  					scheduler.RunWithUpdate(daemon.Start' daemon.Update' 5);  				}    				Console.WriteLine("Exiting...");  			}  			else  			{  				Console.WriteLine("Error' usage.");  			}
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeInventoryRatio,The following statement contains a magic number: return inventoryRatio / 2 + 0.5M;
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,The following statement contains a magic number: if (m_flipped)  			{  				// BTC_bitUSD  				  				// baseBalance = 10 bitUSD  				// ask = 240  				// askMax = 10 / 240 = 0.04 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance / m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance * m_market.bid) * maxTransactionFactor' 8);  			}  			else  			{  				// BTS_BTC  				//  				// baseBalance = 1 BTS  				// ask = 0.00004  				// askMax = 1 * 0.0004 = 0.0004 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance * m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance / m_market.bid) * maxTransactionFactor' 8);  			}
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,The following statement contains a magic number: if (m_flipped)  			{  				// BTC_bitUSD  				  				// baseBalance = 10 bitUSD  				// ask = 240  				// askMax = 10 / 240 = 0.04 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance / m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance * m_market.bid) * maxTransactionFactor' 8);  			}  			else  			{  				// BTS_BTC  				//  				// baseBalance = 1 BTS  				// ask = 0.00004  				// askMax = 1 * 0.0004 = 0.0004 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance * m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance / m_market.bid) * maxTransactionFactor' 8);  			}
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,The following statement contains a magic number: if (m_flipped)  			{  				// BTC_bitUSD  				  				// baseBalance = 10 bitUSD  				// ask = 240  				// askMax = 10 / 240 = 0.04 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance / m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance * m_market.bid) * maxTransactionFactor' 8);  			}  			else  			{  				// BTS_BTC  				//  				// baseBalance = 1 BTS  				// ask = 0.00004  				// askMax = 1 * 0.0004 = 0.0004 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance * m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance / m_market.bid) * maxTransactionFactor' 8);  			}
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,ComputeMarketPricesAndLimits,The following statement contains a magic number: if (m_flipped)  			{  				// BTC_bitUSD  				  				// baseBalance = 10 bitUSD  				// ask = 240  				// askMax = 10 / 240 = 0.04 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance / m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance * m_market.bid) * maxTransactionFactor' 8);  			}  			else  			{  				// BTS_BTC  				//  				// baseBalance = 1 BTS  				// ask = 0.00004  				// askMax = 1 * 0.0004 = 0.0004 BTC    				newAskMax = Numeric.TruncateDecimal((baseBalance * m_market.ask) * maxTransactionFactor' 8);  				newBidMax = Numeric.TruncateDecimal((quoteBalance / m_market.bid) * maxTransactionFactor' 8);  			}
Magic Number,MetaDaemon.Markets,InternalMarket,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\InternalMarket.cs,CollectFees,The following statement contains a magic number: if (transSince.Count > kMaxTransactionsBeforeCollectFees)  			{  				decimal buyFees = transSince.Where(t => t.order_type == MetaOrderType.buy).Sum(t => t.fee);  				decimal sellFees = transSince.Where(t => t.order_type == MetaOrderType.sell).Sum(t => t.fee);    				// make sure these are in range  				buyFees = m_asset.Truncate(buyFees);  				sellFees = Numeric.TruncateDecimal(sellFees' 8);    				decimal btcWorthOfBitassets;  				if (m_flipped)  				{  					btcWorthOfBitassets = buyFees / m_market.bid;  				}  				else  				{  					btcWorthOfBitassets = buyFees * m_market.bid;  				}    				if (btcWorthOfBitassets > kMinBtcFee &&  					sellFees > kMinBtcFee)  				{  					// update this here to prevent failures from continually sending fees  					m_daemon.UpdateTransactionProcessedForMarket(m_market.symbol_pair' transSince.Last().uid);    					string bitsharesTrxId = null' bitcoinTxId = null;  					string exception = null;  					try  					{  						BitsharesTransactionResponse bitsharesTrx = SendBitAssets(buyFees' m_asset' bitsharesFeeAccount' "Fee payment");  						bitsharesTrxId = bitsharesTrx.record_id;  						  						// WTUPID BTC DUST SIZE PREVENTS SMALL TRANSACGTIOJNs  						bitcoinTxId = m_bitcoin.SendToAddress(bitcoinFeeAddress' sellFees' "Fee payment");  					}  					catch (Exception e)  					{  						exception = e.ToString();  					}    					m_daemon.m_Database.InsertFeeTransaction(	m_market.symbol_pair'   																bitsharesTrxId'   																bitcoinTxId'   																buyFees'   																sellFees'   																transSince.Last().uid'   																exception'  																transSince.First().received_txid'  																transSince.Last().received_txid);    					return true;  				}  			}
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitcoinsToDepositor,The following statement contains a magic number: decimal fee = (m_market.bid_fee_percent / 100) * btcNoFee;
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitcoinsToDepositor,The following statement contains a magic number: decimal btcTotal = Numeric.TruncateDecimal(btcNoFee - fee' 8);
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SendBitAssetsToDepositor,The following statement contains a magic number: decimal fee = (m_market.ask_fee_percent / 100) * bitAssetAmountNoFee;
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SetPricesFromSingleUnitQuantities,The following statement contains a magic number: decimal buyFee = baseQuantity * market.bid_fee_percent/100;
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SetPricesFromSingleUnitQuantities,The following statement contains a magic number: decimal sellFee = quoteQuantity * market.ask_fee_percent/100;
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SetPricesFromSingleUnitQuantities,The following statement contains a magic number: if (Math.Abs(bid - m_market.bid) > m_market.bid / 10 ||  				Math.Abs(ask - m_market.ask) > m_market.ask / 10)  			{  				throw new Exception("New prices are too different!");  			}
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,SetPricesFromSingleUnitQuantities,The following statement contains a magic number: if (Math.Abs(bid - m_market.bid) > m_market.bid / 10 ||  				Math.Abs(ask - m_market.ask) > m_market.ask / 10)  			{  				throw new Exception("New prices are too different!");  			}
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,MemoExtract,The following statement contains a magic number: if (parts.Length == 2)  			{  				symbolPair = parts[0];  				referralUser = 0;  			}  			else if (parts.Length == 3)  			{  				symbolPair = parts[0];  				referralUser = uint.Parse(parts[1]);  			}  			else  			{  				throw new UnexpectedCaseException();  			}
Magic Number,MetaDaemon.Markets,MarketBase,C:\repos\wildbunny_metaexchange\MetaDaemon\Markets\MarketBase.cs,MemoExtract,The following statement contains a magic number: if (parts.Length == 2)  			{  				symbolPair = parts[0];  				referralUser = 0;  			}  			else if (parts.Length == 3)  			{  				symbolPair = parts[0];  				referralUser = uint.Parse(parts[1]);  			}  			else  			{  				throw new UnexpectedCaseException();  			}
