Implementation smell,Namespace,Class,File,Method,Description
Long Method,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,UpdateData,The method has 161 lines of code.
Long Method,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The method has 126 lines of code.
Complex Method,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,UpdateData,Cyclomatic complexity of the method is 32
Complex Method,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,CompareTLMenuStrip_Opening,Cyclomatic complexity of the method is 8
Complex Method,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetCustomDataFieldValue,Cyclomatic complexity of the method is 14
Complex Method,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,Cyclomatic complexity of the method is 23
Long Parameter List,CompareView,CompareTreeListColumnDefinition,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,CompareTreeListColumnDefinition,The method has 5 parameters.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.StartTime' CommonResources.Text.LabelDate' ""' 100' StringAlignment.Near)); " is 145.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Time' CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near)); " is 139.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.DistanceMeters' CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near)); " is 153.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Name' CommonResources.Text.LabelName' ""' 150' StringAlignment.Near)); " is 140.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Location' CommonResources.Text.LabelLocation' ""' 100' StringAlignment.Near)); " is 148.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Category' CommonResources.Text.LabelCategory' ""' 100' StringAlignment.Near)); " is 148.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgSpeed' CommonResources.Text.LabelAvgSpeed' ""' 70' StringAlignment.Near)); " is 147.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgPace' CommonResources.Text.LabelAvgPace' ""' 70' StringAlignment.Near)); " is 145.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgHR' CommonResources.Text.LabelAvgHR' ""' 70' StringAlignment.Near)); " is 141.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgCad' CommonResources.Text.LabelAvgCadence' ""' 70' StringAlignment.Near)); " is 147.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgPower' CommonResources.Text.LabelAvgPower' ""' 70' StringAlignment.Near)); " is 147.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedTime' Resources.Planned + " " + CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near)); " is 172.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedDistanceMeters' Resources.Planned + " " + CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near)); " is 186.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedName' Resources.Planned + " " + CommonResources.Text.LabelName' ""' 150' StringAlignment.Near)); " is 173.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedCategory' Resources.Planned + " " + CommonResources.Text.LabelCategory' ""' 100' StringAlignment.Near)); " is 181.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgSpeed' Resources.Planned + " " + CommonResources.Text.LabelAvgSpeed' ""' 70' StringAlignment.Near)); " is 180.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgPace' Resources.Planned + " " + CommonResources.Text.LabelAvgPace' ""' 70' StringAlignment.Near)); " is 178.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgHR' Resources.Planned + " " + CommonResources.Text.LabelAvgHR' ""' 70' StringAlignment.Near)); " is 174.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgCad' Resources.Planned + " " + CommonResources.Text.LabelAvgCadence' ""' 70' StringAlignment.Near)); " is 180.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgPower' Resources.Planned + " " + CommonResources.Text.LabelAvgPower' ""' 70' StringAlignment.Near)); " is 180.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.TimeDiff' Resources.Diff + " " + CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near)); " is 166.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The length of the statement  "	columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.DistanceDiff' Resources.Diff + " " + CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near)); " is 174.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The length of the statement  "			CompareTreeListColumnDefinition customDef = new CompareTreeListColumnDefinition ("CustomDataField" + customDT.Id.ToString ()' customDT.Name' "CustomDataFields"' 70' StringAlignment.Near); " is 187.
Long Statement,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The length of the statement  "			customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near); " is 214.
Long Statement,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,GetWeekOfYear,The length of the statement  "	return ciCurr.Calendar.GetWeekOfYear (dt' CalendarWeekRule.FirstFourDayWeek' DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek); " is 124.
Long Statement,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,CalenderDateChangedEventHandler,The length of the statement  "	ShowBestEntryForDate ((IList<TreeList.TreeListNode>)CompareTreeList.RowData' Plugin.GetApplication ().Calendar.Selected); " is 121.
Long Statement,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,RefreshColumns,The length of the statement  "				TreeList.Column column = new TreeList.Column (columnDef.Id' columnDef.Text (columnDef.Id)' columnDef.Width' columnDef.Align); " is 125.
Long Statement,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,UpdateData,The length of the statement  "			if (entry == null || !entry.Date.Date.Equals (activities [0].StartTime.ToLocalTime ().Date) || boPlannedActivity && entry.PlannedActivity != null || !boPlannedActivity && entry.Activity != null) { " is 196.
Long Statement,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,UpdateData,The length of the statement  "				if (wkEntry == null || GetWeekOfYear (wkEntry.Date) != GetWeekOfYear (entry.Date) || wkEntry.Date.Year != entry.Date.Year) { " is 124.
Long Statement,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetCustomDataFieldValue,The length of the statement  "	// If the node has children' calculate the value from the children. Note that they might have tp be be summed' averaged etc. " is 124.
Long Statement,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetCustomDataFieldValue,The length of the statement  "	if (customDF.DataType.Id.Equals (CustomDataFieldDefinitions.StandardDataTypes.NumberDataTypeId) && node.Children.Count > 0) { " is 125.
Long Statement,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetCustomDataFieldValue,The length of the statement  "						numCustDataValue = (numCustDataValue * (totTime.TotalSeconds - actTime.TotalSeconds) + childDataValue * actTime.TotalSeconds) / totTime.TotalSeconds; " is 149.
Long Statement,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The length of the statement  "			return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' ""); " is 176.
Long Statement,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The length of the statement  "			return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00"); " is 183.
Complex Conditional,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,UpdateData,The conditional expression  "entry == null || !entry.Date.Date.Equals (activities [0].StartTime.ToLocalTime ().Date) || boPlannedActivity && entry.PlannedActivity != null || !boPlannedActivity && entry.Activity != null"  is complex.
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.StartTime' CommonResources.Text.LabelDate' ""' 100' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Time' CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.DistanceMeters' CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Name' CommonResources.Text.LabelName' ""' 150' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Location' CommonResources.Text.LabelLocation' ""' 100' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.Category' CommonResources.Text.LabelCategory' ""' 100' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgSpeed' CommonResources.Text.LabelAvgSpeed' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgPace' CommonResources.Text.LabelAvgPace' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgHR' CommonResources.Text.LabelAvgHR' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgCad' CommonResources.Text.LabelAvgCadence' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.AvgPower' CommonResources.Text.LabelAvgPower' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedTime' Resources.Planned + " " + CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedDistanceMeters' Resources.Planned + " " + CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedName' Resources.Planned + " " + CommonResources.Text.LabelName' ""' 150' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedCategory' Resources.Planned + " " + CommonResources.Text.LabelCategory' ""' 100' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgSpeed' Resources.Planned + " " + CommonResources.Text.LabelAvgSpeed' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgPace' Resources.Planned + " " + CommonResources.Text.LabelAvgPace' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgHR' Resources.Planned + " " + CommonResources.Text.LabelAvgHR' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgCad' Resources.Planned + " " + CommonResources.Text.LabelAvgCadence' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.PlannedAvgPower' Resources.Planned + " " + CommonResources.Text.LabelAvgPower' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.TimeDiff' Resources.Diff + " " + CommonResources.Text.LabelTime' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnStaticDefs,The following statement contains a magic number: columnDefs.Add (new CompareTreeListColumnDefinition (CompareColumnIds.DistanceDiff' Resources.Diff + " " + CommonResources.Text.LabelDistance' ""' 70' StringAlignment.Near));  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The following statement contains a magic number: if (logbook != null) {  	foreach (ICustomDataFieldDefinition customDT in logbook.CustomDataFieldDefinitions) {  		CompareTreeListColumnDefinition customDef = new CompareTreeListColumnDefinition ("CustomDataField" + customDT.Id.ToString ()' customDT.Name' "CustomDataFields"' 70' StringAlignment.Near);  		columnDefs.Add (customDef);  		customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near);  		columnDefs.Add (customDef);  	}  }  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The following statement contains a magic number: if (logbook != null) {  	foreach (ICustomDataFieldDefinition customDT in logbook.CustomDataFieldDefinitions) {  		CompareTreeListColumnDefinition customDef = new CompareTreeListColumnDefinition ("CustomDataField" + customDT.Id.ToString ()' customDT.Name' "CustomDataFields"' 70' StringAlignment.Near);  		columnDefs.Add (customDef);  		customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near);  		columnDefs.Add (customDef);  	}  }  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The following statement contains a magic number: foreach (ICustomDataFieldDefinition customDT in logbook.CustomDataFieldDefinitions) {  	CompareTreeListColumnDefinition customDef = new CompareTreeListColumnDefinition ("CustomDataField" + customDT.Id.ToString ()' customDT.Name' "CustomDataFields"' 70' StringAlignment.Near);  	columnDefs.Add (customDef);  	customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near);  	columnDefs.Add (customDef);  }  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The following statement contains a magic number: foreach (ICustomDataFieldDefinition customDT in logbook.CustomDataFieldDefinitions) {  	CompareTreeListColumnDefinition customDef = new CompareTreeListColumnDefinition ("CustomDataField" + customDT.Id.ToString ()' customDT.Name' "CustomDataFields"' 70' StringAlignment.Near);  	columnDefs.Add (customDef);  	customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near);  	columnDefs.Add (customDef);  }  
Magic Number,CompareView,CompareColumnIds,C:\repos\staffann_compareplanned\ComparePlanned\CompareTreeListColumns.cs,ColumnCustomDataDefs,The following statement contains a magic number: customDef = new CompareTreeListColumnDefinition ("PlannedCustomDataField" + customDT.Id.ToString ()' Resources.Planned + " " + customDT.Name' Resources.Planned + " " + "CustomDataFields"' 70' StringAlignment.Near);  
Magic Number,CompareView,CompareViewControl,C:\repos\staffann_compareplanned\ComparePlanned\ComparePlannedForm.cs,tableSettingsMenuItem_Click,The following statement contains a magic number: dialog.NumFixedColumns = 3;  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("Planned")) {  	if (entry.PlannedActivity == null && node.Children.Count == 0)  		return "";  	else {  		// Don't duplicate how to show info - call this function back instead as if it was a performed activity  		TreeList.TreeListNode plannedNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  		return GetText (plannedNode' new TreeList.Column (column.Id.Replace ("Planned"' "")));  	}  }  else if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("Planned")) {  	if (entry.PlannedActivity == null && node.Children.Count == 0)  		return "";  	else {  		// Don't duplicate how to show info - call this function back instead as if it was a performed activity  		TreeList.TreeListNode plannedNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  		return GetText (plannedNode' new TreeList.Column (column.Id.Replace ("Planned"' "")));  	}  }  else if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("Planned")) {  	if (entry.PlannedActivity == null && node.Children.Count == 0)  		return "";  	else {  		// Don't duplicate how to show info - call this function back instead as if it was a performed activity  		TreeList.TreeListNode plannedNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  		return GetText (plannedNode' new TreeList.Column (column.Id.Replace ("Planned"' "")));  	}  }  else if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("Planned")) {  	if (entry.PlannedActivity == null && node.Children.Count == 0)  		return "";  	else {  		// Don't duplicate how to show info - call this function back instead as if it was a performed activity  		TreeList.TreeListNode plannedNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  		return GetText (plannedNode' new TreeList.Column (column.Id.Replace ("Planned"' "")));  	}  }  else if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Contains ("CustomDataField")) {  	Guid custDataFieldId = new Guid (column.Id.Replace ("CustomDataField"' ""));  	ILogbook logbook = Plugin.GetApplication ().Logbook;  	if (logbook != null) {  		foreach (ICustomDataFieldDefinition customDF in logbook.CustomDataFieldDefinitions) {  			if (customDF.Id.Equals (custDataFieldId)) {  				object custDataValueObject = GetCustomDataFieldValue (node' customDF);  				if (custDataValueObject != null) {  					if (object.ReferenceEquals (custDataValueObject.GetType ()' typeof(double))) {  						return (custDataValueObject as double?).Value.ToString ("0.00");  					}  					else {  						return entry.Activity.GetCustomDataValue (customDF).ToString ();  					}  				}  			}  		}  	}  	return "";  }  else if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("StartTime")) {  	return entry.Date.ToShortDateString ();  }  else if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("DistanceMeters")) {  	double? distanceMeters = GetDistanceMeters (node);  	if (distanceMeters == null)  		return "";  	else  		return Length.Convert (distanceMeters.Value' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals ("Time")) {  	TimeSpan? time = GetTime (node);  	if (time == null)  		return "";  	else {  		// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  		// Rounding not always correct for exactly 0.5s but who cares...  		if (time.Value.Milliseconds <= 500)  			time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  		else  			time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  		return time.ToString ();  	}  }  else if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time == null)  	return "";  else {  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Value.Milliseconds <= 500)  		time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  	else  		time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  	return time.ToString ();  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time == null)  	return "";  else {  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Value.Milliseconds <= 500)  		time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  	else  		time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  	return time.ToString ();  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time.Value.Milliseconds <= 500)  	time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  else  	time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time.Value.Milliseconds <= 500)  	time = time.Value.Subtract (TimeSpan.FromMilliseconds (time.Value.Milliseconds));  else  	time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: time = time.Value.Add (TimeSpan.FromMilliseconds (1000 - time.Value.Milliseconds));  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (column.Id.Equals (CompareColumnIds.TimeDiff)) {  	TimeSpan? performedTime = GetTime (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	TimeSpan? plannedTime = GetTime (transNode);  	if (performedTime == null) {  		performedTime = new TimeSpan (0);  	}  	if (plannedTime == null) {  		plannedTime = new TimeSpan (0);  	}  	TimeSpan time = performedTime.Value.Subtract (plannedTime.Value);  	// Round time to full second' ToString in .Net 2.0 doesn not have use a format string.  	// Rounding not always correct for exactly 0.5s but who cares...  	if (time.Milliseconds <= 500)  		time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  	else  		time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  	return time.ToString ();  }  else if (column.Id.Equals (CompareColumnIds.DistanceDiff)) {  	double? performedDistance = GetDistanceMeters (node);  	TreeList.TreeListNode transNode = TransformPlannedToActual (node' (TreeList.TreeListNode)node.Parent);  	double? plannedDistance = GetDistanceMeters (transNode);  	if (performedDistance == null) {  		performedDistance = 0;  	}  	if (plannedDistance == null) {  		plannedDistance = 0;  	}  	double distanceMeters = performedDistance.Value - plannedDistance.Value;  	return Length.Convert (distanceMeters' Length.Units.Meter' Length.Units.Kilometer).ToString ("0.00");  }  else if (column.Id.Equals (CompareColumnIds.AvgPace))  	if (entry.Activity != null) {  		return Speed.ToPaceString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgSpeed))  	if (entry.Activity != null) {  		return Speed.ToSpeedString (ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageSpeedMetersPerSecond' new TimeSpan (0' 0' 1)' new Length (1' Length.Units.Kilometer)' "###.00");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgHR))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageHeartRate.ToString ("###");  	}  	else  		return "";  else if (column.Id.Equals (CompareColumnIds.AvgCad))  	if (entry.Activity != null) {  		return ActivityInfoCache.Instance.GetInfo (entry.Activity).AverageCadence.ToString ("###");  	}  	else  		return "";  else// Default - handle anything that isn't explicitly handled above   {  	if (entry.Activity == null)  		return "";  	else {  		string retString;  		retString = base.GetText (entry.Activity' column);  		if (retString.Equals ("")) {  			retString = base.GetText (ActivityInfoCache.Instance.GetInfo (entry.Activity)' column);  		}  		return retString;  	}  }  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time.Milliseconds <= 500)  	time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  else  	time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: if (time.Milliseconds <= 500)  	time = time.Subtract (TimeSpan.FromMilliseconds (time.Milliseconds));  else  	time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  
Magic Number,CompareView,CVLabelProvider,C:\repos\staffann_compareplanned\ComparePlanned\CVLabelProvider.cs,GetText,The following statement contains a magic number: time = time.Add (TimeSpan.FromMilliseconds (1000 - time.Milliseconds));  
