Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KeyHub.Model,CustomerApp,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\CustomerApp.cs,AddLicenses,The length of the statement  "                if (!(from x in this.LicenseCustomerApps where x.LicenseId == newLicenseGuid && x.CustomerAppId == this.CustomerAppId select x).Any()) " is 134.
Long Statement,KeyHub.Model,CustomerApp,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\CustomerApp.cs,RemoveLicenses,The length of the statement  "                LicenseCustomerApp removedLicense = (from f in this.LicenseCustomerApps where f.LicenseId == removedLicenseGuid select f).FirstOrDefault(); " is 139.
Long Statement,KeyHub.Model,PrivateKey,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\PrivateKey.cs,SetKeyBytes,The length of the statement  "            using(var r = new RSACryptoServiceProvider(2048' new CspParameters() { Flags = CspProviderFlags.CreateEphemeralKey | CspProviderFlags.NoPrompt})){ " is 146.
Long Statement,KeyHub.Model,SKU,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\SKU.cs,RemoveFeatures,The length of the statement  "                SkuFeature removedSKUFeature = (from f in this.SkuFeatures where f.FeatureId == removedFeatureGuid select f).FirstOrDefault(); " is 126.
Long Statement,KeyHub.Model,SKU,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\SKU.cs,CalculateManualDomainExpiration,The length of the statement  "            return ManualDomainDuration.HasValue ? CalculateDomainIssueDate().AddMonths(ManualDomainDuration.Value) : (DateTime?)null; " is 122.
Magic Number,KeyHub.Model,PrivateKey,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\PrivateKey.cs,SetKeyBytes,The following statement contains a magic number: using(var r = new RSACryptoServiceProvider(2048' new CspParameters() { Flags = CspProviderFlags.CreateEphemeralKey | CspProviderFlags.NoPrompt})){                  try                  {                      var privateKeyBytes = r.ExportCspBlob(true);                      this.KeyBytes = SymmetricEncryption.EncryptForDatabase(privateKeyBytes);                  }                  finally{                      r.PersistKeyInCsp = false;                  }              }
Magic Number,KeyHub.Model,PrivateKey,C:\repos\imazen_keyhub\src\KeyHub.Model\Logic\Application\PrivateKey.cs,GetPublicKeyXmlString,The following statement contains a magic number: using (var r = new RSACryptoServiceProvider(2048' new CspParameters()              {                  Flags = CspProviderFlags.CreateEphemeralKey | CspProviderFlags.NoPrompt              }))              {                  try                  {                      var privateKey = SymmetricEncryption.DecryptForDatabase(KeyBytes);                        r.ImportCspBlob(privateKey);                      return r.ToXmlString(false);                  }                  finally                  {                      r.PersistKeyInCsp = false; //Default behavior is to store on filesystem; this is a security issue                  }              }
