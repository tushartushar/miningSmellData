Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,KeyHub.Client,DomainLicense,C:\repos\imazen_keyhub\src\KeyHub.Client\DomainLicense.cs,DomainLicense,The method has 5 parameters. Parameters: domain' ownerName' issued' expires' features
Magic Number,KeyHub.Client,LicenseDeserializer,C:\repos\imazen_keyhub\src\KeyHub.Client\LicenseDeserializer.cs,DeserializeAll,The following statement contains a magic number: using (var r = new RSACryptoServiceProvider(2048))              {                  try                  {                      r.FromXmlString(publicKeyXml);                        foreach (var licenseAndSignature in licensesAndSignatures)                      {                          var licenseBytes = Convert.FromBase64String(licenseAndSignature.Key);                          var domainLicense = DomainLicense.Parse(Encoding.UTF8.GetString(licenseBytes));                            if (!r.VerifyData(licenseBytes' new SHA256Managed()'                                  Convert.FromBase64String(licenseAndSignature.Value)))                          {                              throw new Exception("Signature failed for license of domain " + domainLicense.Domain);                          }                            string domain = domainLicense.Domain;                          List<DomainLicense> forDomain;                          if (!licenses.TryGetValue(domain' out forDomain))                          {                              forDomain = new List<DomainLicense>();                              licenses[domain] = forDomain;                          }                          forDomain.Add(domainLicense);                      }                  }                  finally                  {                      r.PersistKeyInCsp = false;                  }              }
Missing Default,KeyHub.Client,DomainLicense,C:\repos\imazen_keyhub\src\KeyHub.Client\DomainLicense.cs,Parse,The following switch statement is missing a default case: switch (key)                  {                      case "domain": result.Domain = value; break;                      case "owner": result.OwnerName = value; break;                      case "issued": result.Issued = DateTime.Parse(value); break;                      case "expires":                            if (value.Trim().Length == 0)                          {                              result.Expires = null;                          }                          else                          {                              result.Expires = DateTime.Parse(value);                          }                            break;                      case "features":                          List<Guid> ids = new List<Guid>();                          string[] parts = value.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);                          foreach (string p in parts)                          {                              ids.Add(new Guid(p));                          }                          result.Features = ids;                          break;                  }
