Implementation smell,Namespace,Class,File,Method,Description
Long Method,KeyHub.Common.Utils,TimeZoneAbbreviations,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\TimeZoneAbbreviations.cs,Populate,The method has 197 lines of code.
Complex Method,KeyHub.Common.Extensions,NameValueCollectionExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\NameValueCollection.cs,ParseList,Cyclomatic complexity of the method is 8
Long Parameter List,KeyHub.Common.Extensions,NameValueCollectionExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\NameValueCollection.cs,SetList,The method has 5 parameters. Parameters: q' name' values' throwExceptions' allowedSizes
Long Parameter List,KeyHub.Common.Utils,CookieUtil,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\CookieUtil.cs,CreateCookie,The method has 5 parameters. Parameters: Context' cookieName' value' expirationDays' encrypt
Long Statement,KeyHub.Common.Extensions,NameValueCollectionExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\NameValueCollection.cs,SetList,The length of the statement  "                if (throwExceptions) throw new ArgumentOutOfRangeException("values"' "The specified array is not a valid length. Valid lengths are " + JoinPrimitives<int>(allowedSizes' ''')); " is 175.
Long Statement,KeyHub,Cryptography,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Cryptography.cs,EncryptUrl,The length of the statement  "            return KeyHub.Common.Utils.UrlService.Base64UrlEncode(KeyHub.Common.Utils.Cryptography.Encryption.EncryptText(InputString' KeyHub.Common.Utils.Cryptography.Encryption.EncryptionTypes.Rijndael)); " is 194.
Long Statement,KeyHub,Cryptography,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Cryptography.cs,DecryptUrl,The length of the statement  "            return KeyHub.Common.Utils.Cryptography.Encryption.DecryptText(KeyHub.Common.Utils.UrlService.Base64UrlDecode(InputString)' KeyHub.Common.Utils.Cryptography.Encryption.EncryptionTypes.Rijndael); " is 194.
Long Statement,KeyHub,Cryptography,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Cryptography.cs,Encrypt,The length of the statement  "            return KeyHub.Common.Utils.Cryptography.Encryption.EncryptText(InputString' KeyHub.Common.Utils.Cryptography.Encryption.EncryptionTypes.Rijndael); " is 146.
Long Statement,KeyHub,Cryptography,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Cryptography.cs,Decrypt,The length of the statement  "            return KeyHub.Common.Utils.Cryptography.Encryption.DecryptText(InputString' KeyHub.Common.Utils.Cryptography.Encryption.EncryptionTypes.Rijndael); " is 146.
Long Statement,KeyHub.Common.Utils,CookieUtil,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\CookieUtil.cs,GetCookieValue,The length of the statement  "            cookieVal = (decrypt) ? Context.Request.Cookies[cookieName].Value.Decrypt() : Context.Request.Cookies[cookieName].Value; " is 120.
Long Statement,KeyHub.Common.Utils,RegexUtils,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\Regex.cs,IsExactMatch,The length of the statement  "            System.Text.RegularExpressions.Match m = System.Text.RegularExpressions.Regex.Match(input' pattern' RegexOptions.IgnoreCase | RegexOptions.Compiled); " is 149.
Long Statement,KeyHub.Common.Utils,RegexUtils,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\Regex.cs,Replace,The length of the statement  "            return System.Text.RegularExpressions.Regex.Replace(input' pattern' replace' RegexOptions.Compiled | RegexOptions.IgnoreCase); " is 126.
Complex Conditional,KeyHub.Common.Extensions,EnumExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Enum.cs,Parse,The conditional expression  "(char.IsDigit(p[0]) || p[0] == '-' || p[0] == '+') &&                      long.TryParse(p' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out temp)"  is complex.
Complex Conditional,KeyHub.Common.Extensions,NameValueCollectionExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\NameValueCollection.cs,ParsePrimitive,The conditional expression  ""true".Equals(s' StringComparison.OrdinalIgnoreCase) ||                       "1".Equals(s' StringComparison.OrdinalIgnoreCase) ||                       "yes".Equals(s' StringComparison.OrdinalIgnoreCase) ||                       "on".Equals(s' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,KeyHub.Common.Extensions,NameValueCollectionExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\NameValueCollection.cs,ParsePrimitive,The conditional expression  ""false".Equals(s' StringComparison.OrdinalIgnoreCase) ||                      "0".Equals(s' StringComparison.OrdinalIgnoreCase) ||                      "no".Equals(s' StringComparison.OrdinalIgnoreCase) ||                      "off".Equals(s' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,KeyHub.Common.Extensions,EnumExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\Enum.cs,LoadValues,The following statement contains a magic number: var ev = new Dictionary<string' Enum>(fields.Length * 2' StringComparer.OrdinalIgnoreCase);
Magic Number,KeyHub.Common.Extensions,StringBuilderExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\StringBuilderExtensions.cs,AppendQueryArgs,The following statement contains a magic number: if (args != null && args.Count() > 0)              {                  var sb = new StringBuilder(50 + (args.Count() * 10));                  if (!string.IsNullOrEmpty(builder.Query))                  {                      sb.Append(builder.Query.Substring(1));                      sb.Append('&');                  }                  sb.Append(CreateQueryString(args));                    builder.Query = sb.ToString();              }
Magic Number,KeyHub.Common.Extensions,StringBuilderExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\StringBuilderExtensions.cs,AppendQueryArgs,The following statement contains a magic number: if (args != null && args.Count() > 0)              {                  var sb = new StringBuilder(50 + (args.Count() * 10));                  if (!string.IsNullOrEmpty(builder.Query))                  {                      sb.Append(builder.Query.Substring(1));                      sb.Append('&');                  }                  sb.Append(CreateQueryString(args));                    builder.Query = sb.ToString();              }
Magic Number,KeyHub.Common.Extensions,StringBuilderExtensions,C:\repos\imazen_keyhub\src\KeyHub.Common\Extensions\StringBuilderExtensions.cs,CreateQueryString,The following statement contains a magic number: var sb = new StringBuilder(args.Count() * 10);
Magic Number,KeyHub.Common.Utils,SafeConvert,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SaveConvert.cs,ToHexString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(data.Length * 2);
Magic Number,KeyHub.Common.Utils,SymmetricEncryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SymmetricEncryption.cs,Encrypt,The following statement contains a magic number: using (var provider = new AesCryptoServiceProvider())              {                  provider.Key = privateKeyHash;                  provider.Mode = CipherMode.CBC;                  provider.Padding = PaddingMode.PKCS7;                    using (var ms = new MemoryStream())                  {                      ms.Write(provider.IV' 0' 16);                      using (var encryptor = provider.CreateEncryptor())                      {                          using (var cs = new CryptoStream(ms' encryptor' CryptoStreamMode.Write))                          {                              cs.Write(data' 0' data.Length);                              cs.FlushFinalBlock();                          }                          return ms.ToArray();                      }                  }              }
Magic Number,KeyHub.Common.Utils,SymmetricEncryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SymmetricEncryption.cs,Decrypt,The following statement contains a magic number: using (var provider = new AesCryptoServiceProvider())              {                  provider.Key = privateKeyHash;                  using (var ms = new MemoryStream(encryptedString))                  {                      // Read the first 16 bytes which is the IV.                      byte[] iv = new byte[16];                      ms.Read(iv' 0' 16);                      provider.IV = iv;                        using (var decryptor = provider.CreateDecryptor())                      {                          using (var cs = new CryptoStream(ms' decryptor' CryptoStreamMode.Read))                          {                              return ReadToEnd(cs);                          }                      }                  }              }
Magic Number,KeyHub.Common.Utils,SymmetricEncryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SymmetricEncryption.cs,Decrypt,The following statement contains a magic number: using (var provider = new AesCryptoServiceProvider())              {                  provider.Key = privateKeyHash;                  using (var ms = new MemoryStream(encryptedString))                  {                      // Read the first 16 bytes which is the IV.                      byte[] iv = new byte[16];                      ms.Read(iv' 0' 16);                      provider.IV = iv;                        using (var decryptor = provider.CreateDecryptor())                      {                          using (var cs = new CryptoStream(ms' decryptor' CryptoStreamMode.Read))                          {                              return ReadToEnd(cs);                          }                      }                  }              }
Magic Number,KeyHub.Common.Utils,SymmetricEncryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SymmetricEncryption.cs,ReadToEnd,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,KeyHub.Common.Utils,SymmetricEncryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\SymmetricEncryption.cs,ReadToEnd,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,KeyHub.Common.Utils,TimeZoneAbbreviations,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\TimeZoneAbbreviations.cs,AddZone,The following statement contains a magic number: if (offset.StartsWith("UTC")) offset = offset.Substring(3);
Magic Number,KeyHub.Common.Utils.Cryptography,Encryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\Encryption.cs,CalculateNewKeyAndIV,The following statement contains a magic number: m_Key = pdb.GetBytes(algo.KeySize / 8);
Magic Number,KeyHub.Common.Utils.Cryptography,Encryption,C:\repos\imazen_keyhub\src\KeyHub.Common\Utils\Encryption.cs,CalculateNewKeyAndIV,The following statement contains a magic number: m_IV = pdb.GetBytes(algo.BlockSize / 8);
