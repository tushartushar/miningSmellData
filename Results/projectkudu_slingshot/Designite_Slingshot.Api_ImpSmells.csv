Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Slingshot.Concrete,GitHubRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\GitHubRepository.cs,GetTemplateUrlAsync,Cyclomatic complexity of the method is 8
Complex Method,Slingshot.Modules,ARMOAuthModule,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\ARMOAuthModule.cs,AuthenticateRequest,Cyclomatic complexity of the method is 8
Long Identifier,Slingshot.Helpers,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Constants.cs,,The length of the parameter GitCustomTemplateFolderUrlFormat is 32.
Long Identifier,Slingshot.Helpers,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Constants.cs,,The length of the parameter BitbucketApiPullRequestInfoFormat is 33.
Long Identifier,Slingshot.Helpers,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Constants.cs,,The length of the parameter BitbucketApiMainBranchInfoFormat is 32.
Long Identifier,Slingshot.Helpers,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Constants.cs,,The length of the parameter BitbucketApiPullRequestCommentsFormat is 37.
Long Statement,Slingshot.Abstract,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Abstract\Repository.cs,CreateRepositoryObj,The length of the statement  "                throw new NotSupportedException("Invalid git repository.  Currently deployments can only be made from github.com repositories"); " is 128.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get-token"' "api/token"' new { controller = "ARM"' action = "GetToken" }' new { verb = new HttpMethodConstraint("GET"' "HEAD") }); " is 158.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            //config.Routes.MapHttpRoute("get-subscriptions"' "api/subscriptions"' new { controller = "ARM"' action = "Subscriptions" }' new { verb = new HttpMethodConstraint("GET") }); " is 173.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get-subscription-sitenameavailable"' "api/subscriptions/{subscriptionId}/sites/{siteName}"' new { controller = "ARM"' action = "IsSiteNameAvailable" }' new { verb = new HttpMethodConstraint("GET") }); " is 228.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get-template"' "api/template"' new { controller = "ARM"' action = "GetTemplate" }' new { verb = new HttpMethodConstraint("GET") }); " is 159.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("post-preview"' "api/preview/{subscriptionId}"' new { controller = "ARM"' action = "Preview" }' new { verb = new HttpMethodConstraint("POST") }); " is 172.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("post-deployments"' "api/deployments/{subscriptionId}"' new { controller = "ARM"' action = "Deploy" }' new { verb = new HttpMethodConstraint("POST") }); " is 179.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get-deployments-status"' "api/deployments/{subscriptionId}/rg/{resourceGroup}"' new { controller = "ARM"' action = "GetDeploymentStatus" }' new { verb = new HttpMethodConstraint("GET") }); " is 216.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get-scmdeployments-status"' "api/deployments/{subscriptionId}/rg/{resourceGroup}/scm"' new { controller = "ARM"' action = "GetScmDeploymentStatus" }' new { verb = new HttpMethodConstraint("GET") }); " is 226.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("post-deployments-notification"' "api/deploymentsnotification"' new { controller = "ARM"' action = "DeploymentNotification" }' new { verb = new HttpMethodConstraint("POST") }); " is 203.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            config.Routes.MapHttpRoute("get"' "api/{*path}"' new { controller = "ARM"' action = "Get" }' new { verb = new HttpMethodConstraint("GET"' "HEAD") }); " is 149.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            // Uncomment the following line of code to enable query support for actions with an IQueryable or IQueryable<T> return type. " is 124.
Long Statement,Slingshot,WebApiConfig,C:\repos\projectkudu_slingshot\Slingshot.Api\App_Start\WebApiConfig.cs,Register,The length of the statement  "            // To avoid processing unexpected or malicious queries' use the validation settings on QueryableAttribute to validate incoming queries. " is 135.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetBranch,The length of the statement  "            // 1) Get from query string' this is where are the most common case should be when user was auto direct from bitbucket.org " is 122.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetBranch,The length of the statement  "                    var mainBranchUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiMainBranchInfoFormat' UserName' RepositoryName); " is 145.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetBranch,The length of the statement  "                throw new InvalidOperationException("Failed to discover branch information. Or you can specify with query string 'at=[value]'. " + ex.Message); " is 143.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetScmType,The length of the statement  "                    var repoInfoUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiRepoInfoFormat' UserName' RepositoryName); " is 137.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetScmType,The length of the statement  "                throw new InvalidOperationException("Failed to discover repository type' please make sure you have read access to repository. " + ex.Message); " is 142.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,IsPrivate,The length of the statement  "                var repoInfoUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketWebRepoInfoFormat' UserName' RepositoryName); " is 137.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,HasAccess,The length of the statement  "                string repoUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiRepoInfoFormat' UserName' RepositoryName); " is 136.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetPullRequest,The length of the statement  "                    var requestUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiPullRequestInfoFormat' UserName' RepositoryName' prId); " is 149.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetPullRequest,The length of the statement  "                throw new InvalidOperationException(string.Format("Failed to retrieve information for Pull Request: {0}. {1}"' prId' ex.Message)); " is 130.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,UpdatePullRequest,The length of the statement  "                    var requestUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiPullRequestInfoFormat' UserName' RepositoryName' prId); " is 149.
Long Statement,Slingshot.Concrete,BitbucketRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\BitbucketRepository.cs,GetFileReference,The length of the statement  "                fileUrl = string.Format(CultureInfo.InvariantCulture' Constants.Repository.BitbucketApiRawFile' UserName' RepositoryName' branch' path); " is 136.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetScmDeploymentStatus,The length of the statement  "                    response = Request.CreateResponse(HttpStatusCode.NotFound' new { error = "Could not find any source control deployments" }); " is 124.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,DeploymentNotification,The length of the statement  "                prMsg.Append("***\n[![Azure App Service](http://deployredirector.azurewebsites.net/AzureLogo.png)](https://azure.microsoft.com/en-us/services/app-service) A web app has been deployed to Azure App Service from this pull request"); " is 229.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetTenants,The length of the statement  "                response.Headers.Location = new Uri(uri.Substring(0' uri.IndexOf("/api/" + parts[0]' StringComparison.OrdinalIgnoreCase))); " is 123.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetClient,The length of the statement  "            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer"' Request.Headers.GetValues("X-MS-OAUTH-TOKEN").FirstOrDefault()); " is 149.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetDeploymentPayload,The length of the statement  "            if (!string.IsNullOrWhiteSpace(inputs.templateUrl) && inputs.templateUrl.EndsWith(Constants.Repository.CustomTemplateFileName' StringComparison.OrdinalIgnoreCase)) " is 163.
Long Statement,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,PurgeCustomProperties,The length of the statement  "                    if (paramObjFromTmpl[p.Key] != null && paramObjFromTmpl[p.Key][Constants.CustomTemplateProperties.DefaultValueComeFirst] != null) " is 129.
Long Statement,Slingshot.Helpers,Utils,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Utils.cs,GetSourceControlAsync,The length of the statement  "            var url = string.Format("{0}/providers/Microsoft.Web/sourceControls/{1}?api-version={2}"' Utils.GetCSMUrl(host)' scm' Constants.CSM.ApiVersion); " is 144.
Long Statement,Slingshot.Helpers,Utils,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Utils.cs,GetSubscriptionsAsync,The length of the statement  "                ResultOf<SubscriptionInfo> result = await ProcessResponse<ResultOf<SubscriptionInfo>>("GetSubscriptionsAsync"' response); " is 121.
Long Statement,Slingshot.Helpers,Utils,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Utils.cs,GetResourceGroups,The length of the statement  "                        throw new InvalidOperationException(String.Format("GetResourceGroups {0}' {1}"' response.StatusCode' error.Value<string>("message"))); " is 134.
Long Statement,Slingshot.Helpers,Utils,C:\repos\projectkudu_slingshot\Slingshot.Api\Helpers\Utils.cs,GetResourceGroups,The length of the statement  "                throw new InvalidOperationException(String.Format("GetResourceGroups {0}' {1}"' response.StatusCode' await response.Content.ReadAsStringAsync())); " is 146.
Long Statement,Slingshot.Modules,ARMOAuthModule,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\ARMOAuthModule.cs,ReadOAuthTokenCookie,The length of the statement  "                    oauthToken = AADOAuth2AccessToken.GetAccessTokenByRefreshToken(oauthToken.TenantId' oauthToken.refresh_token' oauthToken.resource); " is 131.
Long Statement,Slingshot.Modules,OpenIdConfiguration,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\OpenIdConfiguration.cs,GetAuthorizationEndpoint,The length of the statement  "            return String.IsNullOrEmpty(tenantId) ? AuthorizationEndpoint : AuthorizationEndpoint.Replace("/common/"' String.Format("/{0}/"' tenantId)); " is 140.
Long Statement,Slingshot.Modules,OpenIdConfiguration,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\OpenIdConfiguration.cs,GetTokenEndpoint,The length of the statement  "            return String.IsNullOrEmpty(tenantId) ? TokenEndpoint : TokenEndpoint.Replace("/common/"' String.Format("/{0}/"' tenantId)); " is 124.
Complex Conditional,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,DeploymentNotification,The conditional expression  "inputs.deployInputs.parameters["isManualIntegration"] != null &&                      inputs.deployInputs.parameters["isManualIntegration"]["value"] != null &&                      bool.TryParse(inputs.deployInputs.parameters["isManualIntegration"]["value"].ToString()' out isManualIntegration) &&                      !isManualIntegration"  is complex.
Empty Catch Block,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,DeleteResourceGroup,The method has an empty catch block.
Magic Number,Slingshot.Abstract,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Abstract\Repository.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Slingshot.Abstract,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Abstract\Repository.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Slingshot.Abstract,Repository,C:\repos\projectkudu_slingshot\Slingshot.Api\Abstract\Repository.cs,CreateHttpClient,The following statement contains a magic number: client.MaxResponseContentBufferSize = 1024 * 1024 * 10;
Magic Number,Slingshot.Concrete,GitHubRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\GitHubRepository.cs,GetTemplateUrlAsync,The following statement contains a magic number: if (string.IsNullOrEmpty(_templateUrl))              {                  JObject template = null;                  string templateUrl = null;                  StringBuilder builder = null;                    if (_inputUri.Segments.Length > 2)                  {                      string branch = await GetBranch();                      builder = new StringBuilder(string.Format(Constants.Repository.GitCustomTemplateFolderUrlFormat'                                                          UserName'                                                          RepositoryName'                                                          branch));                        for (var i = 5; i < _inputUri.Segments.Length; i++)                      {                          string segment = _inputUri.Segments[i];                          if (segment.EndsWith(".md"' StringComparison.OrdinalIgnoreCase))                          {                              break;                          }                            builder.Append(segment);                      }                        templateUrl = builder.ToString().TrimEnd(Constants.Path.SlashChars) + "/azuredeploy.json";                      template = await DownloadJson(templateUrl);                        string paramTemplatePath = this.GetParameterTemplatePath();                      if (template != null && paramTemplatePath != null)                      {                          string paramTemplateFullPath = paramTemplatePath;                            if (!paramTemplatePath.StartsWith("http"' StringComparison.OrdinalIgnoreCase))                          {                              // it is relative path' construct url to point to raw content                              paramTemplateFullPath = string.Format(                                  CultureInfo.InvariantCulture'                                  "{0}/{1}"' builder.ToString().TrimEnd(Constants.Path.SlashChars)'                                  paramTemplatePath.Trim(Constants.Path.SlashChars));                          }                            JObject paramTemplate = await DownloadJson(paramTemplateFullPath);                          MergeParametersIntoTemplate(template' paramTemplate);                      }                  }                    if (template == null)                  {                      templateUrl = Constants.Repository.EmptySiteTemplateUrl;                      template = await DownloadJson(templateUrl);                  }                    _template = template;                  _templateUrl = templateUrl;              }
Magic Number,Slingshot.Concrete,GitHubRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\GitHubRepository.cs,GetTemplateUrlAsync,The following statement contains a magic number: if (string.IsNullOrEmpty(_templateUrl))              {                  JObject template = null;                  string templateUrl = null;                  StringBuilder builder = null;                    if (_inputUri.Segments.Length > 2)                  {                      string branch = await GetBranch();                      builder = new StringBuilder(string.Format(Constants.Repository.GitCustomTemplateFolderUrlFormat'                                                          UserName'                                                          RepositoryName'                                                          branch));                        for (var i = 5; i < _inputUri.Segments.Length; i++)                      {                          string segment = _inputUri.Segments[i];                          if (segment.EndsWith(".md"' StringComparison.OrdinalIgnoreCase))                          {                              break;                          }                            builder.Append(segment);                      }                        templateUrl = builder.ToString().TrimEnd(Constants.Path.SlashChars) + "/azuredeploy.json";                      template = await DownloadJson(templateUrl);                        string paramTemplatePath = this.GetParameterTemplatePath();                      if (template != null && paramTemplatePath != null)                      {                          string paramTemplateFullPath = paramTemplatePath;                            if (!paramTemplatePath.StartsWith("http"' StringComparison.OrdinalIgnoreCase))                          {                              // it is relative path' construct url to point to raw content                              paramTemplateFullPath = string.Format(                                  CultureInfo.InvariantCulture'                                  "{0}/{1}"' builder.ToString().TrimEnd(Constants.Path.SlashChars)'                                  paramTemplatePath.Trim(Constants.Path.SlashChars));                          }                            JObject paramTemplate = await DownloadJson(paramTemplateFullPath);                          MergeParametersIntoTemplate(template' paramTemplate);                      }                  }                    if (template == null)                  {                      templateUrl = Constants.Repository.EmptySiteTemplateUrl;                      template = await DownloadJson(templateUrl);                  }                    _template = template;                  _templateUrl = templateUrl;              }
Magic Number,Slingshot.Concrete,GitHubRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\GitHubRepository.cs,GetBranch,The following statement contains a magic number: if (string.IsNullOrEmpty(_branch))              {                  if (_inputUri.Segments.Length > 4)                  {                      _branch = _inputUri.Segments[4].Trim(Constants.Path.SlashChars);                  }                  else                  {                      // If the branch isn't in the URL' then we need to look up the default branch                      // by querying the GitHub API.                      using (HttpClient client = CreateHttpClient())                      {                          var url = string.Format(Constants.Repository.GitHubApiRepoInfoFormat' UserName' RepositoryName);                            var content = await client.GetStringAsync(url);                          var responseObj = JObject.Parse(content);                          var defaultBranch = responseObj["default_branch"];                          if (defaultBranch == null)                          {                              throw new ArgumentException("Could not discover default branch from repository");                          }                            _branch = defaultBranch.Value<string>();                      }                  }                }
Magic Number,Slingshot.Concrete,GitHubRepository,C:\repos\projectkudu_slingshot\Slingshot.Api\Concrete\GitHubRepository.cs,GetBranch,The following statement contains a magic number: if (string.IsNullOrEmpty(_branch))              {                  if (_inputUri.Segments.Length > 4)                  {                      _branch = _inputUri.Segments[4].Trim(Constants.Path.SlashChars);                  }                  else                  {                      // If the branch isn't in the URL' then we need to look up the default branch                      // by querying the GitHub API.                      using (HttpClient client = CreateHttpClient())                      {                          var url = string.Format(Constants.Repository.GitHubApiRepoInfoFormat' UserName' RepositoryName);                            var content = await client.GetStringAsync(url);                          var responseObj = JObject.Parse(content);                          var defaultBranch = responseObj["default_branch"];                          if (defaultBranch == null)                          {                              throw new ArgumentException("Could not discover default branch from repository");                          }                            _branch = defaultBranch.Value<string>();                      }                  }                }
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,Preview,The following statement contains a magic number: List<string> providers = new List<string>(32);
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetScmDeploymentStatus,The following statement contains a magic number: using (var client = GetClient())              {                  string url = string.Format(                      Constants.CSM.GetScmDeploymentStatusFormat'                      Utils.GetCSMUrl(Request.RequestUri.Host)'                      subscriptionId'                      resourceGroup'                      siteName'                      Constants.CSM.WebsitesApiVersion);                    for (int i = 0; i < 5; i++)                  {                      var statusResponse = await client.GetAsync(url);                      if (statusResponse.IsSuccessStatusCode)                      {                          var resultObj = JObject.Parse(await statusResponse.Content.ReadAsStringAsync());                          var deployments = resultObj["properties"];                          if (deployments.Count() > 0)                          {                              response = Request.CreateResponse(HttpStatusCode.OK' deployments.First());                              break;                          }                            await Task.Delay(1000);                      }                      else                      {                          response = statusResponse;                      }                  }                    if (response == null)                  {                      response = Request.CreateResponse(HttpStatusCode.NotFound' new { error = "Could not find any source control deployments" });                  }              }
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetScmDeploymentStatus,The following statement contains a magic number: using (var client = GetClient())              {                  string url = string.Format(                      Constants.CSM.GetScmDeploymentStatusFormat'                      Utils.GetCSMUrl(Request.RequestUri.Host)'                      subscriptionId'                      resourceGroup'                      siteName'                      Constants.CSM.WebsitesApiVersion);                    for (int i = 0; i < 5; i++)                  {                      var statusResponse = await client.GetAsync(url);                      if (statusResponse.IsSuccessStatusCode)                      {                          var resultObj = JObject.Parse(await statusResponse.Content.ReadAsStringAsync());                          var deployments = resultObj["properties"];                          if (deployments.Count() > 0)                          {                              response = Request.CreateResponse(HttpStatusCode.OK' deployments.First());                              break;                          }                            await Task.Delay(1000);                      }                      else                      {                          response = statusResponse;                      }                  }                    if (response == null)                  {                      response = Request.CreateResponse(HttpStatusCode.NotFound' new { error = "Could not find any source control deployments" });                  }              }
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GenerateResourceGroupName,The following statement contains a magic number: if (!string.IsNullOrEmpty(repo.RepositoryName))              {                  bool isAvailable = false;                  var creds = new TokenCloudCredentials(subscriptions.First().subscriptionId' token);                  var rdfeBaseUri = new Uri(Utils.GetRDFEUrl(Request.RequestUri.Host));                    using (var webSiteMgmtClient = CloudContext.Clients.CreateWebSiteManagementClient(creds' rdfeBaseUri))                  {                      // Make 3 attempts to get a random name (based on the repo name)                      for (int i = 0; i < 3; i++)                      {                          string resourceGroupName = GenerateRandomResourceGroupName(repo.RepositoryName);                          isAvailable = await IsSiteNameAvailable(webSiteMgmtClient' resourceGroupName);                            if (isAvailable)                          {                              return resourceGroupName;                          }                      }                  }              }
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetClaims,The following statement contains a magic number: int mod4 = base64.Length % 4;
Magic Number,Slingshot.Controllers,ARMController,C:\repos\projectkudu_slingshot\Slingshot.Api\Controllers\ARMController.cs,GetClaims,The following statement contains a magic number: if (mod4 > 0)              {                  base64 += new string('='' 4 - mod4);              }
Magic Number,Slingshot.Modules,AADOAuth2AccessToken,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\AADOAuth2AccessToken.cs,IsValid,The following statement contains a magic number: return EpochTime.AddSeconds(secs) > DateTime.UtcNow.AddMinutes(10);
Magic Number,Slingshot.Modules,AADOAuth2AccessToken,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\AADOAuth2AccessToken.cs,HandleOAuthError,The following statement contains a magic number: if ((int)response.StatusCode >= 400 && (int)response.StatusCode < 500)              {                  var error = response.Content.ReadAsAsync<AADOAuth2Error>().Result;                  if (error != null && !String.IsNullOrEmpty(error.error_description))                  {                      return new InvalidOperationException(String.Format("Failed with {0}  POST {1}"' error.error_description' requestUri));                  }              }
Magic Number,Slingshot.Modules,AADOAuth2AccessToken,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\AADOAuth2AccessToken.cs,HandleOAuthError,The following statement contains a magic number: if ((int)response.StatusCode >= 400 && (int)response.StatusCode < 500)              {                  var error = response.Content.ReadAsAsync<AADOAuth2Error>().Result;                  if (error != null && !String.IsNullOrEmpty(error.error_description))                  {                      return new InvalidOperationException(String.Format("Failed with {0}  POST {1}"' error.error_description' requestUri));                  }              }
Magic Number,Slingshot.Modules,ARMOAuthModule,C:\repos\projectkudu_slingshot\Slingshot.Api\Modules\ARMOAuthModule.cs,SwitchTenant,The following statement contains a magic number: if (request.Url.PathAndQuery.StartsWith("/tenants"' StringComparison.OrdinalIgnoreCase))              {                  var parts = request.Url.PathAndQuery.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (parts.Length >= 2)                  {                      tenantId = parts[1];                  }              }
