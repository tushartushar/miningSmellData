Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,Cyclomatic complexity of the method is 13
Long Parameter List,FBReader.Hyphen,ZLTextTeXHyphenationPattern,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenationPattern.cs,ZLTextTeXHyphenationPattern,The method has 5 parameters.
Long Statement,FBReader.Hyphen,ZLTextTeXHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenator.cs,GetPatterns,The length of the statement  "	return patterns.Select (pattern => new ZLTextTeXHyphenationPattern (pattern.ToCharArray ()' 0' pattern.Length' true)).ToDictionary (p => p); " is 140.
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: Hyphenate (pattern' mask' len + 2);  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: for (int i = 0' j = offset - 1; i <= len; ++i' ++j) {  	if ((i < 2) || (i > len - 2)) {  		mask [i] = false;  	}  	else {  		switch (data [j]) {  		case (char)0xAD:  			// soft hyphen  			mask [i] = true;  			break;  		case '-':  			mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  			break;  		default:  			mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  			break;  		}  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: if ((i < 2) || (i > len - 2)) {  	mask [i] = false;  }  else {  	switch (data [j]) {  	case (char)0xAD:  		// soft hyphen  		mask [i] = true;  		break;  	case '-':  		mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  		break;  	default:  		mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  		break;  	}  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: switch (data [j]) {  case (char)0xAD:  	// soft hyphen  	mask [i] = true;  	break;  case '-':  	mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  	break;  default:  	mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  	break;  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: switch (data [j]) {  case (char)0xAD:  	// soft hyphen  	mask [i] = true;  	break;  case '-':  	mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  	break;  default:  	mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  	break;  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: switch (data [j]) {  case (char)0xAD:  	// soft hyphen  	mask [i] = true;  	break;  case '-':  	mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  	break;  default:  	mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  	break;  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: switch (data [j]) {  case (char)0xAD:  	// soft hyphen  	mask [i] = true;  	break;  case '-':  	mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  	break;  default:  	mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  	break;  }  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: mask [i] = (i >= 3) && isLetter [i - 3] && isLetter [i - 2] && isLetter [i] && isLetter [i + 1];  
Magic Number,FBReader.Hyphen,ZLTextHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextHyphenator.cs,GetInfo,The following statement contains a magic number: mask [i] = mask [i] && isLetter [i - 2] && isLetter [i - 1] && isLetter [i] && isLetter [i + 1];  
Magic Number,FBReader.Hyphen,ZLTextTeXHyphenationPattern,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenationPattern.cs,GetHashCode,The following statement contains a magic number: for (int i = Length - 1; i >= 0; --i) {  	hash *= 31;  	hash += symbols [i];  }  
Magic Number,FBReader.Hyphen,ZLTextTeXHyphenationPattern,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenationPattern.cs,GetHashCode,The following statement contains a magic number: hash *= 31;  
Magic Number,FBReader.Hyphen,ZLTextTeXHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenator.cs,Hyphenate,The following statement contains a magic number: for (int i = 0; i < length - 1; i++) {  	mask [i] = (values [i + 1] % 2) == 1;  }  
Magic Number,FBReader.Hyphen,ZLTextTeXHyphenator,C:\repos\geometer_FBReaderCS\src\FBReader.Hyphen\ZLTextTeXHyphenator.cs,Hyphenate,The following statement contains a magic number: mask [i] = (values [i + 1] % 2) == 1;  
