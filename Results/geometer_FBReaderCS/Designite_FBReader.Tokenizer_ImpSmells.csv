Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FBReader.Tokenizer.Parsers.Epub,EpubTokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubTokenParser.cs,ParseNodes,Cyclomatic complexity of the method is 11
Complex Method,FBReader.Tokenizer.Parsers.Fb2,Fb2TokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2TokenParser.cs,ParseNodes,Cyclomatic complexity of the method is 10
Complex Method,FBReader.Tokenizer.Parsers.Html,HtmlTokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Html\HtmlTokenParser.cs,ParseTokens,Cyclomatic complexity of the method is 11
Complex Method,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,GetLines,Cyclomatic complexity of the method is 10
Complex Method,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,AppendToLine,Cyclomatic complexity of the method is 10
Complex Method,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ApplyProperties,Cyclomatic complexity of the method is 15
Long Parameter List,FBReader.Tokenizer.Parsers.Epub,EpubCoverHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubCoverHelper.cs,FindImageInXml,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers.Epub,EpubTokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubTokenParser.cs,EpubTokenParser,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers.Epub,EpubTokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubTokenParser.cs,ParseNodes,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers.Fb2,Fb2TokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2TokenParser.cs,Fb2TokenParser,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers.Fb2,Fb2TokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2TokenParser.cs,ParseNodes,The method has 6 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,BookBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookBuilder.cs,BookBuilder,The method has 8 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,LineBuilder,The method has 6 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,GetLines,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,Append,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,AppendTextToken,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,GetTextWidth,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The method has 5 parameters.
Long Parameter List,FBReader.Tokenizer.Tokens,TextTokenBlock,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Tokens\TextTokenBlock.cs,AddText,The method has 6 parameters.
Long Statement,FBReader.Tokenizer.Parsers.Fb2,Fb2SummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2SummaryParser.cs,SaveCover,The length of the statement  "		stream = new MemoryStream (Convert.FromBase64String (xelement.Value.Replace (" "' string.Empty).Replace ("\n"' string.Empty))); " is 127.
Long Statement,FBReader.Tokenizer.Parsers.Fb2,Fb2SummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2SummaryParser.cs,PrepareUniqueID,The length of the statement  "	XElement isbn = _root.Elements (_ns + "description").Elements (_ns + "publish-info").Elements (_ns + "isbn").FirstOrDefault (); " is 127.
Long Statement,FBReader.Tokenizer.Parsers.Fb2,Fb2SummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2SummaryParser.cs,GetCoverImageID,The length of the statement  "	XAttribute attribute = _root.Elements (_ns + "description").Descendants (_ns + "coverpage").Elements (_ns + "image").Attributes ().FirstOrDefault (t => t.Name.LocalName == "href"); " is 180.
Long Statement,FBReader.Tokenizer.Parsers,BookBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookBuilder.cs,GetPreviousPage,The length of the statement  "		List<TokenBlockBase> linesInBlock = lineBuilder.GetLines (_bookTokens' string.Empty' blockStartId' stopTokenID' stopText).ToList (); " is 132.
Long Statement,FBReader.Tokenizer.Parsers,BookBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookBuilder.cs,RemovePageBreaks,The length of the statement  "	int itemsAfterPageBreakCount = tokenLines.AsEnumerable ().Reverse ().TakeWhile ((t => !(t is PageBreakBlock))).Count (); " is 120.
Long Statement,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,Append,The length of the statement  "	if (textToken != null && AppendTextToken (textToken' lastText' stopTokenID' stopText' ref firstText) || stopTokenID >= 0 && token.ID >= stopTokenID) " is 148.
Long Statement,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,AppendToLine,The length of the statement  "	_block.AddText (text' _lastOpenTag.TextProperties' _fontSize' GetTextSize (text' _lastOpenTag.TextProperties)' token.Part' token.ID); " is 133.
Long Statement,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,CreateLine,The length of the statement  "	_block.AddText (text' _lastOpenTag.TextProperties' _fontSize' GetTextSize (text' _lastOpenTag.TextProperties)' token.Part' token.ID); " is 133.
Complex Conditional,FBReader.Tokenizer.Parsers,LineBuilder,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\LineBuilder.cs,Append,The conditional expression  "textToken != null && AppendTextToken (textToken' lastText' stopTokenID' stopText' ref firstText) || stopTokenID >= 0 && token.ID >= stopTokenID"  is complex.
Empty Catch Block,FBReader.Tokenizer.Parsers.Epub,EpubSummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubSummaryParser.cs,SaveImages,The method has an empty catch block.
Empty Catch Block,FBReader.Tokenizer.Parsers.Fb2,Fb2SummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Fb2\Fb2SummaryParser.cs,SaveImages,The method has an empty catch block.
Magic Number,FBReader.Tokenizer.Parsers.Epub,EpubSummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubSummaryParser.cs,GetUniqueID,The following statement contains a magic number: return str.SafeSubstring (1000);  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: ((Action)(() =>  {  	try {  		var bitmapImage = new BitmapImage ();  		bitmapImage.SetSource (imageStream);  		using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  			using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  				bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  			}  			using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  				bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  			}  		}  		result = true;  	}  	catch (Exception) {  		result = false;  	}  	finally {  		@event.Set ();  	}  })).OnUIThread ();  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: ((Action)(() =>  {  	try {  		var bitmapImage = new BitmapImage ();  		bitmapImage.SetSource (imageStream);  		using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  			using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  				bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  			}  			using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  				bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  			}  		}  		result = true;  	}  	catch (Exception) {  		result = false;  	}  	finally {  		@event.Set ();  	}  })).OnUIThread ();  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: try {  	var bitmapImage = new BitmapImage ();  	bitmapImage.SetSource (imageStream);  	using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  		using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  			bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  		}  		using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  			bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  		}  	}  	result = true;  }  catch (Exception) {  	result = false;  }  finally {  	@event.Set ();  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: try {  	var bitmapImage = new BitmapImage ();  	bitmapImage.SetSource (imageStream);  	using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  		using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  			bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  		}  		using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  			bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  		}  	}  	result = true;  }  catch (Exception) {  	result = false;  }  finally {  	@event.Set ();  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  	using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  		bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  	}  	using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  		bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  	}  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: using (var isoStorage = IsolatedStorageFile.GetUserStoreForApplication ()) {  	using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  		bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  	}  	using (var coverImageFile = isoStorage.CreateFile (ModelExtensions.GetBookFullCoverPath (bookID))) {  		bitmapImage.SaveJpeg (coverImageFile' bitmapImage.PixelWidth' bitmapImage.PixelHeight' false);  	}  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  	bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: using (var iconImageFile = isoStorage.CreateFile (ModelExtensions.GetBookCoverPath (bookID))) {  	bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  }  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  
Magic Number,FBReader.Tokenizer.Parsers,BookSummaryParserBase,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\BookSummaryParserBase.cs,SaveCoverImages,The following statement contains a magic number: bitmapImage.SaveJpeg (iconImageFile' 300' 300' true);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: if (margin.EndsWith ("px")) {  	double pixels;  	margin = margin.Remove (margin.Length - 2' 2);  	if (!double.TryParse (margin' NumberStyles.Float' CultureInfo.InvariantCulture' out pixels)) {  		return 0.0;  	}  	return pixels;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: if (margin.EndsWith ("px")) {  	double pixels;  	margin = margin.Remove (margin.Length - 2' 2);  	if (!double.TryParse (margin' NumberStyles.Float' CultureInfo.InvariantCulture' out pixels)) {  		return 0.0;  	}  	return pixels;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: margin = margin.Remove (margin.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: margin = margin.Remove (margin.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: if (margin.EndsWith ("em")) {  	double emFactor;  	margin = margin.Remove (margin.Length - 2' 2);  	if (!double.TryParse (margin' NumberStyles.Float' CultureInfo.InvariantCulture' out emFactor)) {  		emFactor = 1.0;  	}  	return (normal * emFactor);  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: if (margin.EndsWith ("em")) {  	double emFactor;  	margin = margin.Remove (margin.Length - 2' 2);  	if (!double.TryParse (margin' NumberStyles.Float' CultureInfo.InvariantCulture' out emFactor)) {  		emFactor = 1.0;  	}  	return (normal * emFactor);  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: margin = margin.Remove (margin.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMarginValue,The following statement contains a magic number: margin = margin.Remove (margin.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 1) {  	double marginLeft = ParseMarginValue (strArray [0]);  	left = marginLeft;  	right = marginLeft;  	bottom = marginLeft;  }  else if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 2) {  	double marginBottom = ParseMarginValue (strArray [0]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginBottom;  }  else if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length == 3) {  	double marginVert = ParseMarginValue (strArray [2]);  	double marginHor = ParseMarginValue (strArray [1]);  	left = marginHor;  	right = marginHor;  	bottom = marginVert;  }  else if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,ParseMargin,The following statement contains a magic number: if (strArray.Length > 3) {  	double marginRight = ParseMarginValue (strArray [1]);  	double marginBottom = ParseMarginValue (strArray [2]);  	double marginLeft = ParseMarginValue (strArray [3]);  	left = marginLeft;  	right = marginRight;  	bottom = marginBottom;  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("px")) {  	int num;  	value = value.Remove (value.Length - 2' 2);  	if (int.TryParse (value' out num)) {  		type = FontSizeType.Px;  		size = num;  		return true;  	}  }  else if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("px")) {  	int num;  	value = value.Remove (value.Length - 2' 2);  	if (int.TryParse (value' out num)) {  		type = FontSizeType.Px;  		size = num;  		return true;  	}  }  else if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("px")) {  	int num;  	value = value.Remove (value.Length - 2' 2);  	if (int.TryParse (value' out num)) {  		type = FontSizeType.Px;  		size = num;  		return true;  	}  }  else if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("px")) {  	int num;  	value = value.Remove (value.Length - 2' 2);  	if (int.TryParse (value' out num)) {  		type = FontSizeType.Px;  		size = num;  		return true;  	}  }  else if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: value = value.Remove (value.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: value = value.Remove (value.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: if (value.EndsWith ("em")) {  	double fontSize;  	value = value.Remove (value.Length - 2' 2);  	if (double.TryParse (value' NumberStyles.Float' CultureInfo.InvariantCulture' out fontSize)) {  		size = fontSize;  		type = FontSizeType.Em;  		return true;  	}  }  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: value = value.Remove (value.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Styling,CSS,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Styling\CSS.cs,TryParseFontSize,The following statement contains a magic number: value = value.Remove (value.Length - 2' 2);  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: if (pixelWidth == bitmap.PixelWidth) {  	Buffer.BlockCopy (bitmap2.Pixels' 0' bitmap3.Pixels' 0' (pixelWidth * pixelHeight) * 4);  }  else {  	int srcOffset = 0;  	int dstOffset = 0;  	for (int i = 0; i < pixelHeight; i++) {  		Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  		srcOffset += bitmap.PixelWidth * 4;  		dstOffset += pixelWidth * 4;  	}  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: if (pixelWidth == bitmap.PixelWidth) {  	Buffer.BlockCopy (bitmap2.Pixels' 0' bitmap3.Pixels' 0' (pixelWidth * pixelHeight) * 4);  }  else {  	int srcOffset = 0;  	int dstOffset = 0;  	for (int i = 0; i < pixelHeight; i++) {  		Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  		srcOffset += bitmap.PixelWidth * 4;  		dstOffset += pixelWidth * 4;  	}  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: if (pixelWidth == bitmap.PixelWidth) {  	Buffer.BlockCopy (bitmap2.Pixels' 0' bitmap3.Pixels' 0' (pixelWidth * pixelHeight) * 4);  }  else {  	int srcOffset = 0;  	int dstOffset = 0;  	for (int i = 0; i < pixelHeight; i++) {  		Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  		srcOffset += bitmap.PixelWidth * 4;  		dstOffset += pixelWidth * 4;  	}  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: if (pixelWidth == bitmap.PixelWidth) {  	Buffer.BlockCopy (bitmap2.Pixels' 0' bitmap3.Pixels' 0' (pixelWidth * pixelHeight) * 4);  }  else {  	int srcOffset = 0;  	int dstOffset = 0;  	for (int i = 0; i < pixelHeight; i++) {  		Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  		srcOffset += bitmap.PixelWidth * 4;  		dstOffset += pixelWidth * 4;  	}  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: Buffer.BlockCopy (bitmap2.Pixels' 0' bitmap3.Pixels' 0' (pixelWidth * pixelHeight) * 4);  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: for (int i = 0; i < pixelHeight; i++) {  	Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  	srcOffset += bitmap.PixelWidth * 4;  	dstOffset += pixelWidth * 4;  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: for (int i = 0; i < pixelHeight; i++) {  	Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  	srcOffset += bitmap.PixelWidth * 4;  	dstOffset += pixelWidth * 4;  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: for (int i = 0; i < pixelHeight; i++) {  	Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  	srcOffset += bitmap.PixelWidth * 4;  	dstOffset += pixelWidth * 4;  }  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: Buffer.BlockCopy (bitmap2.Pixels' srcOffset' bitmap3.Pixels' dstOffset' pixelWidth * 4);  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: srcOffset += bitmap.PixelWidth * 4;  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: dstOffset += pixelWidth * 4;  
Magic Number,FBReader.Tokenizer.Extensions,BitmapImageExtension,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Extensions\ImageExtensions.cs,SaveJpeg,The following statement contains a magic number: bitmap3.SaveJpeg (output' width' height' 0' 100);  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,GetHash,The following statement contains a magic number: return ((long)c << 16) + ((((long)(fontSize * 5) << 1) + (bold ? 1L : 0L) << 1) + (italic ? 1L : 0L));  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,GetHash,The following statement contains a magic number: return ((long)c << 16) + ((((long)(fontSize * 5) << 1) + (bold ? 1L : 0L) << 1) + (italic ? 1L : 0L));  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,InternalGetSize,The following statement contains a magic number: ((Action)(() =>  {  	var textBlock = new TextBlock {  		Text = Convert.ToString (c)'  		FontSize = fontSize'  		FontFamily = _fontFamily'  		FontStyle = italic ? FontStyles.Italic : FontStyles.Normal'  		FontWeight = bold ? FontWeights.Bold : FontWeights.Normal  	};  	textBlock.Measure (new Size (1024.0' 1024.0));  	size = new Size (textBlock.ActualWidth' textBlock.ActualHeight);  	@event.Set ();  })).OnUIThread ();  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,InternalGetSize,The following statement contains a magic number: ((Action)(() =>  {  	var textBlock = new TextBlock {  		Text = Convert.ToString (c)'  		FontSize = fontSize'  		FontFamily = _fontFamily'  		FontStyle = italic ? FontStyles.Italic : FontStyles.Normal'  		FontWeight = bold ? FontWeights.Bold : FontWeights.Normal  	};  	textBlock.Measure (new Size (1024.0' 1024.0));  	size = new Size (textBlock.ActualWidth' textBlock.ActualHeight);  	@event.Set ();  })).OnUIThread ();  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,InternalGetSize,The following statement contains a magic number: textBlock.Measure (new Size (1024.0' 1024.0));  
Magic Number,FBReader.Tokenizer.Fonts,FontHelper,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Fonts\FontHelper.cs,InternalGetSize,The following statement contains a magic number: textBlock.Measure (new Size (1024.0' 1024.0));  
Magic Number,FBReader.Tokenizer.Parsers.Txt,TxtTokenParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Txt\TxtTokenParser.cs,GetTokens,The following statement contains a magic number: while ((line = _reader.ReadLine ()) != null) {  	if (string.IsNullOrEmpty (line))  		continue;  	var p = new XElement ("p");  	var property = new TextVisualProperties {  		TextIndent = 32.0'  		Inline = false  	};  	yield return new TagOpenToken (top.Index++' p' property' -1);  	foreach (TokenBase baseToken in ParseText (line' top))  		yield return baseToken;  	yield return new TagCloseToken (top.Index++' -1);  }  
Missing Default,FBReader.Tokenizer.Parsers.Epub,EpubSummaryParser,C:\repos\geometer_FBReaderCS\src\FBReader.Tokenizer\Parsers\Epub\EpubSummaryParser.cs,SaveImages,The following switch statement is missing a default case: switch (mediaTypeAttr.Value) {  case "image/png":  case "image/jpg":  case "image/jpeg":  	try {  		string href = element.Attributes ().First (t => (t.Name.LocalName == "href")).Value;  		string path = _oebps + href;  		Stream imageStream = _zip.GetFileStream (path' false);  		if (imageStream == null)  			continue;  		Size imageSize = imageStream.GetImageSize ();  		images.Add (new BookImage {  			ID = path'  			Width = (int)imageSize.Width'  			Height = (int)imageSize.Height'  			Data = imageStream.ToBase64String ()  		}.Save ());  	}  	catch {  	}  	break;  }  
