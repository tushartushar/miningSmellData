Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GruntXProductions.Blazar.Assembler.CodeGen,Parser,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Parser.cs,ProcessTokens,Cyclomatic complexity of the method is 13
Complex Method,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerBl,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerBl.cs,Assemble,Cyclomatic complexity of the method is 32
Complex Method,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerBr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerBr.cs,Assemble,Cyclomatic complexity of the method is 32
Complex Method,GruntXProductions.Blazar.Assembler.Lexer,Lexer,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\Lexer\Lexer.cs,Scan,Cyclomatic complexity of the method is 31
Complex Method,BlazarAssembler,Program,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\Program.cs,Main,Cyclomatic complexity of the method is 11
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) { " is 132.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) { " is 132.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) { " is 132.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) { " is 132.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) { " is 132.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Long Statement,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The length of the statement  "	else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) { " is 130.
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen,Parser,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Parser.cs,parseSingleInstruction,The following statement contains a magic number: if (list [0] is TokenIdentifier) {  	string name = list [0].ToString ();  	List<AbstractToken> operands = new List<AbstractToken> ();  	for (int pos = 1; pos < list.Count; pos++) {  		if (pos % 2 != 0)  			operands.Add (list [pos]);  		else if (!(list [pos] is TokenComma))  			CreateError ("Comma or EOL expected!");  	}  	this.instructions.Add (new Instruction (list [0].Line' name' operands));  }  else  	CreateError ("Mnemonic expected!");  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen,Parser,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Parser.cs,parseSingleInstruction,The following statement contains a magic number: for (int pos = 1; pos < list.Count; pos++) {  	if (pos % 2 != 0)  		operands.Add (list [pos]);  	else if (!(list [pos] is TokenComma))  		CreateError ("Comma or EOL expected!");  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen,Parser,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Parser.cs,parseSingleInstruction,The following statement contains a magic number: if (pos % 2 != 0)  	operands.Add (list [pos]);  else if (!(list [pos] is TokenComma))  	CreateError ("Comma or EOL expected!");  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAdd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAdd.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddi.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAddu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAddu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.And' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.And' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.And' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.And' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerAnd,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerAnd.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.And' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMov,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMov.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Add' reg1.Register' reg2.Register' (ushort)0));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Bor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Bor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Bor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Bor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerOr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerOr.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Bor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerCmp,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerCmp.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Cmp' reg1.Register' reg2.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerCmpi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerCmpi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenIntLiteral))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg = (TokenRegister)ins.Operands [0];  	TokenIntLiteral val = (TokenIntLiteral)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Cmp' reg.Register' (ushort)val.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Div' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Div' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Div' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Div' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDiv,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDiv.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Div' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerDivui,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerDivui.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Divu' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerLb,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerLb.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenIndirectRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister dst = (TokenRegister)ins.Operands [0];  	TokenIndirectRegister src = (TokenIndirectRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Lb' dst.Register' src.Register' (short)src.Offset));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerLi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerLi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (ins.Operands [0] is TokenRegister && ins.Operands [1] is TokenIntLiteral) {  	TokenRegister reg = (TokenRegister)ins.Operands [0];  	TokenIntLiteral val = (TokenIntLiteral)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Li' reg.Register' (ushort)val.Value));  }  else if (ins.Operands [0] is TokenRegister && ins.Operands [1] is TokenIdentifier) {  	TokenRegister reg = (TokenRegister)ins.Operands [0];  	TokenIdentifier ident = (TokenIdentifier)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Li' reg.Register' ident.Value));  }  else  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerLw,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerLw.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenIndirectRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister dst = (TokenRegister)ins.Operands [0];  	TokenIndirectRegister src = (TokenIndirectRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Lw' dst.Register' src.Register' (short)src.Offset));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Mul' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Mul' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Mul' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Mul' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMul,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMul.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Mul' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Multu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Multu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Multu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Multu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerMultu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerMultu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Multu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPop,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPop.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count == 0) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	ushort rlist = 0;  	for (int i = 0; i < ins.Operands.Count; i++) {  		if (!(ins.Operands [i] is TokenRegister)) {  			cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  			continue;  		}  		TokenRegister reg = (TokenRegister)ins.Operands [i];  		rlist |= (ushort)(2 << (byte)reg.Register);  	}  	str.Emit (new BlazarInstruction (Opcode.Pop' rlist));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPop,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPop.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	ushort rlist = 0;  	for (int i = 0; i < ins.Operands.Count; i++) {  		if (!(ins.Operands [i] is TokenRegister)) {  			cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  			continue;  		}  		TokenRegister reg = (TokenRegister)ins.Operands [i];  		rlist |= (ushort)(2 << (byte)reg.Register);  	}  	str.Emit (new BlazarInstruction (Opcode.Pop' rlist));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPop,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPop.cs,Assemble,The following statement contains a magic number: for (int i = 0; i < ins.Operands.Count; i++) {  	if (!(ins.Operands [i] is TokenRegister)) {  		cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  		continue;  	}  	TokenRegister reg = (TokenRegister)ins.Operands [i];  	rlist |= (ushort)(2 << (byte)reg.Register);  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPop,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPop.cs,Assemble,The following statement contains a magic number: rlist |= (ushort)(2 << (byte)reg.Register);  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPush,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPush.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count == 0) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	ushort rlist = 0;  	for (int i = 0; i < ins.Operands.Count; i++) {  		if (!(ins.Operands [i] is TokenRegister)) {  			cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  			continue;  		}  		TokenRegister reg = (TokenRegister)ins.Operands [i];  		rlist |= (ushort)(2 << (byte)reg.Register);  	}  	str.Emit (new BlazarInstruction (Opcode.Push' rlist));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPush,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPush.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	ushort rlist = 0;  	for (int i = 0; i < ins.Operands.Count; i++) {  		if (!(ins.Operands [i] is TokenRegister)) {  			cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  			continue;  		}  		TokenRegister reg = (TokenRegister)ins.Operands [i];  		rlist |= (ushort)(2 << (byte)reg.Register);  	}  	str.Emit (new BlazarInstruction (Opcode.Push' rlist));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPush,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPush.cs,Assemble,The following statement contains a magic number: for (int i = 0; i < ins.Operands.Count; i++) {  	if (!(ins.Operands [i] is TokenRegister)) {  		cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  		continue;  	}  	TokenRegister reg = (TokenRegister)ins.Operands [i];  	rlist |= (ushort)(2 << (byte)reg.Register);  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerPush,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerPush.cs,Assemble,The following statement contains a magic number: rlist |= (ushort)(2 << (byte)reg.Register);  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSb,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSb.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [1] is TokenRegister) || (!(ins.Operands [0] is TokenIndirectRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenIndirectRegister dst = (TokenIndirectRegister)ins.Operands [0];  	TokenRegister reg = (TokenRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Sb' dst.Register' reg.Register' (short)dst.Offset));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shl' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shl' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shl' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shl' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSli,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSli.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shl' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shr' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shr' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shr' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shr' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSri,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSri.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Shr' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSub,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSub.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubi,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubi.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenIntLiteral)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenIntLiteral lit = (TokenIntLiteral)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Sub' reg1.Register' reg2.Register' (ushort)lit.Value));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Subu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Subu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Subu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Subu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSubu,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSubu.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Subu' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerSw,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerSw.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 2) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [1] is TokenRegister) || (!(ins.Operands [0] is TokenIndirectRegister))) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenIndirectRegister dst = (TokenIndirectRegister)ins.Operands [0];  	TokenRegister reg = (TokenRegister)ins.Operands [1];  	str.Emit (new BlazarInstruction (Opcode.Sw' dst.Register' reg.Register' (short)dst.Offset));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Xor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Xor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The following statement contains a magic number: if (ins.Operands.Count != 3) {  	cgen.CreateError ("{0} does not take {1} arguments!"' ins.Name' ins.Operands.Count);  }  else if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Xor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Xor' reg1.Register' reg2.Register' reg3.Register));  }  
Magic Number,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerXor,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerXor.cs,Assemble,The following statement contains a magic number: if (!(ins.Operands [0] is TokenRegister) || (!(ins.Operands [1] is TokenRegister)) || !(ins.Operands [2] is TokenRegister)) {  	cgen.CreateError ("Unsupported addressing mode for instruction '{0}'"' ins.Name);  }  else {  	TokenRegister reg1 = (TokenRegister)ins.Operands [0];  	TokenRegister reg2 = (TokenRegister)ins.Operands [1];  	TokenRegister reg3 = (TokenRegister)ins.Operands [2];  	str.Emit (new BlazarInstruction (Opcode.Xor' reg1.Register' reg2.Register' reg3.Register));  }  
Missing Default,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerBl,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerBl.cs,Assemble,The following switch statement is missing a default case: switch (ins.Name) {  case "blc":  	code = ConditionCode.Carry;  	break;  case "bls":  	code = ConditionCode.Sign;  	break;  case "blv":  	code = ConditionCode.Overflow;  	break;  case "blz":  	code = ConditionCode.Zero;  	break;  case "ble":  	code = ConditionCode.Equal;  	break;  case "blne":  	code = ConditionCode.NotEqual;  	break;  case "bll":  	code = ConditionCode.LessThan;  	break;  case "blg":  	code = ConditionCode.GreaterThan;  	break;  case "blle":  	code = ConditionCode.LessThanOrEqual;  	break;  case "blge":  	code = ConditionCode.GreaterThanOrEqual;  	break;  }  
Missing Default,GruntXProductions.Blazar.Assembler.CodeGen.Assemblers,AssemblerBr,C:\repos\GruntTheDivine_BlazarVM\src\BlazarAssembler\CodeGen\Assemblers\AssemblerBr.cs,Assemble,The following switch statement is missing a default case: switch (ins.Name) {  case "bc":  	code = ConditionCode.Carry;  	break;  case "bs":  	code = ConditionCode.Sign;  	break;  case "bv":  	code = ConditionCode.Overflow;  	break;  case "bz":  	code = ConditionCode.Zero;  	break;  case "be":  	code = ConditionCode.Equal;  	break;  case "bne":  	code = ConditionCode.NotEqual;  	break;  case "blt":  	code = ConditionCode.LessThan;  	break;  case "bgt":  	code = ConditionCode.GreaterThan;  	break;  case "ble":  	code = ConditionCode.LessThanOrEqual;  	break;  case "bge":  	code = ConditionCode.GreaterThanOrEqual;  	break;  }  
