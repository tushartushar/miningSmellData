Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azavea.NijPredictivePolicing.Common,CmdLineJobBase,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\CmdLineJobBase.cs,Load,The method has 112 lines of code.
Complex Method,Azavea.NijPredictivePolicing.Common,CmdLineJobBase,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\CmdLineJobBase.cs,Load,Cyclomatic complexity of the method is 17
Complex Method,Azavea.NijPredictivePolicing.Common,Settings,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Settings.cs,LoadYearConfigs,Cyclomatic complexity of the method is 8
Long Parameter List,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,FixedWidthField,The method has 5 parameters. Parameters: start' end' type' seeker' terminator
Long Parameter List,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,FixedWidthField,The method has 7 parameters. Parameters: start' end' type' seeker' terminator' defaultValue' strict
Long Parameter List,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,FixedWidthField,The method has 5 parameters. Parameters: columnName' description' length' start' type
Long Parameter List,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,FixedWidthField,The method has 6 parameters. Parameters: columnName' description' length' start' type' term
Long Statement,Azavea.NijPredictivePolicing.Common,Settings,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Settings.cs,Get,The length of the statement  "                _log.FatalFormat("The importer couldn't find/read the \"AcsAlchemist.json.{0}.config\" file' the importer cannot continue"' year); " is 130.
Long Statement,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetCellFeetForProjection,The length of the statement  "            const string webMercator1984 = "PROJCS[\"WGS_1984_Web_Mercator\"' GEOGCS[\"GCS_WGS_1984_Major_Auxiliary_Sphere\"' DATUM[\"WGS_1984_Major_Auxiliary_Sphere\"' SPHEROID[\"WGS_1984_Major_Auxiliary_Sphere\"'6378137.0'0.0]]' PRIMEM[\"Greenwich\"'0.0]' UNIT[\"Degree\"'0.0174532925199433]]' PROJECTION[\"Mercator_1SP\"]' PARAMETER[\"False_Easting\"'0.0]' PARAMETER[\"False_Northing\"'0.0]' PARAMETER[\"Central_Meridian\"'0.0]' PARAMETER[\"latitude_of_origin\"'0.0]' UNIT[\"Meter\"'1.0]]"; " is 481.
Long Statement,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetCoordinateSystemWKTByID,The length of the statement  "            //string sql = "SELECT srs_wkt FROM spatial_ref_sys WHERE srid = " + outputSrid;    //not really worried about injection here " is 125.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,CommaSeparatedValueReader,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\CommaSeparatedValueReader.cs,LoadFile,The length of the statement  "                _dataStream = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read); " is 127.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,CommaSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\CommaSeparatedValueWriter.cs,SetWriteFile,The length of the statement  "                FileStream fs = new FileStream(filename' System.IO.FileMode.Append' System.IO.FileAccess.Write' System.IO.FileShare.Read); " is 122.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,GetFieldRange,The length of the statement  "                        throw new ArgumentOutOfRangeException("Start"' Start' "Seeker is FROM_START' but value of Start results in out of range index"); " is 128.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,GetFieldRange,The length of the statement  "                        throw new ArgumentOutOfRangeException("Start"' Start' "Seeker is FROM_END' but value of Start results in out of range index"); " is 126.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,GetFieldRange,The length of the statement  "                        throw new ArgumentOutOfRangeException("Start"' Start' "Seeker is FROM_CURRENT' but value of current position and Start results in out of range index"); " is 151.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,FixedWidthField,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\FixedWidthField.cs,GetFieldRange,The length of the statement  "                        throw new ArgumentOutOfRangeException("End"' End' "Terminator is LENGTH' but value of current position results in out of range index"); " is 135.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,GenericSeparatedValueReader,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\GenericSeparatedValueReader.cs,LoadFile,The length of the statement  "                _dataStream = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read); " is 127.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,GenericSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\GenericSeparatedValueWriter.cs,SetWriteFile,The length of the statement  "            FileStream fs = new FileStream(filename' System.IO.FileMode.Append' System.IO.FileAccess.Write' System.IO.FileShare.Read); " is 122.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,TabSeparatedValueReader,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\TabSeparatedValueReader.cs,LoadFile,The length of the statement  "                _dataStream = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read); " is 127.
Long Statement,Azavea.NijPredictivePolicing.Common.Data,TabSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\TabSeparatedValueWriter.cs,SetWriteFile,The length of the statement  "                FileStream fs = new FileStream(filename' System.IO.FileMode.Append' System.IO.FileAccess.Write' System.IO.FileShare.Read); " is 122.
Complex Conditional,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,TrimComments,The conditional expression  "(chunk[i] == delim)                  && ((i == 0) || ((i > 0) && (char.IsWhiteSpace(chunk[i - 1]))))"  is complex.
Empty Catch Block,Azavea.NijPredictivePolicing.Common,FileUtilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\FileUtilities.cs,TryDelete,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common,FileUtilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\FileUtilities.cs,TryChangeCreationTime,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common,FileUtilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\FileUtilities.cs,TryChangeLastWriteTime,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAsType,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAs,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common.DB,SqlDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqlDataClient.cs,TestDatabaseConnection,The method has an empty catch block.
Empty Catch Block,Azavea.NijPredictivePolicing.Common.DB,SqliteDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqliteDataClient.cs,TestDatabaseConnection,The method has an empty catch block.
Magic Number,Azavea.NijPredictivePolicing.Common,CmdLineJobBase,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\CmdLineJobBase.cs,Load,The following statement contains a magic number: while (idx >= 0)              {                  int nextSpace = line.IndexOf(' '' idx + 1);                    string flag = line.Substring(idx + 1' nextSpace - (idx + 1)).ToLower();                  string contents = string.Empty;                    idx += 1 + flag.Length;                    if (!knownFlags.Contains(flag))                  {                      _log.ErrorFormat("Invalid parameter: {0}"' flag.Substring(0' Math.Min(512' flag.Length)));                      return false;                  }                    int end = 0;                  int nextQuote = line.IndexOf('\"'' idx);                  if (nextQuote >= 0)                  {                      int quoteEnd = line.IndexOf('\"'' nextQuote + 1);                      if (quoteEnd >= 0)                      {                          end = quoteEnd + 1;                      }                      else                      {                          _log.Error("Unterminated Quote found in arguments.");                          return false;                      }                  }                  else                  {                      end = line.IndexOf(delim' idx);                  }                      if (end == -1)                  {                      end = line.Length;                  }                  if (end > idx)                  {                      contents = line.Substring(idx' end - idx).Trim();                      if (string.IsNullOrEmpty(contents))                      {                          contents = true.ToString();                      }                      else if (contents.StartsWith("\""))                      {                          contents = contents.Trim('\"');                      }                        idx = end;                  }                  //find the next flag.                  idx = line.IndexOf(delim' idx);                      for (int p = 0; p < availFlags.Length; p++)                  {                      var arg = availFlags[p];                      if (arg.Flag.Equals(flag' StringComparison.CurrentCultureIgnoreCase))                      {                          var prop = thisType.GetProperty(arg.PropertyName);                          prop.SetValue(dest' Utilities.GetAsType(prop.PropertyType' contents' null)' null);                          break;                      }                  }              }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,CopyTo,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,CopyToWithProgress,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,CopyToWithProgress,The following statement contains a magic number: while ((numBytesRead = from.Read(buffer' 0' buffer.Length)) > 0)              {                  position += numBytesRead;                  to.Write(buffer' 0' numBytesRead);                    int step = (int)((((double)position) / ((double)expectedLength)) * 100.0);                  if (((step % 5) == 0) && (lastProgress != step))                  {                      TimeSpan elapsed = (DateTime.Now - start);                      if (elapsed.TotalSeconds > 1)                      {                          _log.DebugFormat("{0}% complete' {1:#0.0#} seconds elapsed' {2} bytes downloaded"'                              step' elapsed.TotalSeconds' position                              );                          lastProgress = step;                            if (cancelled) { return; }                      }                  }              }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,CopyToWithProgress,The following statement contains a magic number: while ((numBytesRead = from.Read(buffer' 0' buffer.Length)) > 0)              {                  position += numBytesRead;                  to.Write(buffer' 0' numBytesRead);                    int step = (int)((((double)position) / ((double)expectedLength)) * 100.0);                  if (((step % 5) == 0) && (lastProgress != step))                  {                      TimeSpan elapsed = (DateTime.Now - start);                      if (elapsed.TotalSeconds > 1)                      {                          _log.DebugFormat("{0}% complete' {1:#0.0#} seconds elapsed' {2} bytes downloaded"'                              step' elapsed.TotalSeconds' position                              );                          lastProgress = step;                            if (cancelled) { return; }                      }                  }              }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAsType,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return value;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAsType,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return value;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAsType,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return value;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAs,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type destType = typeof(T);                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (string.IsNullOrEmpty(value as string)))                      {                          return ifEmpty;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return (T)Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return (T)Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return (T)value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return (T)Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAs,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type destType = typeof(T);                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (string.IsNullOrEmpty(value as string)))                      {                          return ifEmpty;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return (T)Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return (T)Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return (T)value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return (T)Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetAs,The following statement contains a magic number: try              {                  if ((!Convert.IsDBNull(value)) && (value != null))                  {                      Type destType = typeof(T);                      Type srcType = value.GetType();                        if (srcType == destType)                      {                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (string.IsNullOrEmpty(value as string)))                      {                          return ifEmpty;                      }                      else if ((srcType == typeof(double)) && (destType == typeof(string)))                      {                          //this is a special case for preserving as much precision on doubles as possible.                          return (T)Convert.ChangeType(((double)value).ToString("R")' destType);                      }                      else if ((srcType == typeof(string)) && (destType == typeof(bool)))                      {                          //special case for lowercase true/false                          //this recognizes T' t' True' and true as all true' anything else is false.                          string t = value as string;                          value = ((!string.IsNullOrEmpty(t)) && ((t.ToLower() == true.ToString().ToLower()) || (t.ToLower() == "t")));                          return (T)value;                      }                      else if ((srcType == typeof(string)) && (destType.IsEnum))                      {                          return (T)Enum.Parse(destType' (string)value);                      }                      else if ((destType == typeof(DateTime)) && (srcType == typeof(string)))                      {                          //get the ticks since Jan 1' 1601 (C# epoch) to the JS Epoch                          DateTime JSepoch = new DateTime(1969' 12' 31' 0' 0' 0' DateTimeKind.Unspecified);                          //value = DateTime.FromFileTime((ticks * TimeSpan.TicksPerMillisecond) + JSepoch.ToFileTime());                            //meant to convert a javascript (new Date().getTime()) result to a C# DateTime...                          long ticks = -1;                          if (long.TryParse((string)value' out ticks))                              value = JSepoch.Add(TimeSpan.FromMilliseconds(ticks));                          else                              value = DateTime.Parse((string)value);                            return (T)value;                      }                      //add (datetime -> string) / (string -> datetime) conversions?                      else                      {                          return (T)Convert.ChangeType(value' destType);                      }                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,IEnvToIGeometry,The following statement contains a magic number: ICoordinate[] coords = new Coordinate[5];
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,IEnvToIGeometry,The following statement contains a magic number: coords[2] = new Coordinate(env.MaxX' env.MaxY);
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,IEnvToIGeometry,The following statement contains a magic number: coords[3] = new Coordinate(env.MinX' env.MaxY);
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,IEnvToIGeometry,The following statement contains a magic number: coords[4] = new Coordinate(env.MinX' env.MinY);
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,GetCellFeetForProjection,The following statement contains a magic number: const double FEET_PER_METER = 3.2808399;
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,ListAllCoordinateSystemIDs,The following statement contains a magic number: List<string> results = new List<string>(4096);
Magic Number,Azavea.NijPredictivePolicing.Common,Utilities,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Utilities.cs,ReprojectGeometry,The following statement contains a magic number: double[] srcPt = new double[2]' pt = null;
Magic Number,Azavea.NijPredictivePolicing.Common.Data,CommaSeparatedValueFileEnumerator,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\CommaSeparatedValueReader.cs,GetNextField,The following statement contains a magic number: StringBuilder buffer = new StringBuilder(1024);
Magic Number,Azavea.NijPredictivePolicing.Common.Data,CommaSeparatedValueFileEnumerator,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\CommaSeparatedValueReader.cs,GetNextRow,The following statement contains a magic number: var result = new List<string>((_columnNames != null) ? _columnNames.Count : 32);
Magic Number,Azavea.NijPredictivePolicing.Common.Data,CommaSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\CommaSeparatedValueWriter.cs,QuoteAndEscape,The following statement contains a magic number: if (input.Contains('\n') || input.Contains('''))              {                  string temp = input.Replace("\""' "\"\"");                  StringBuilder result = new StringBuilder(temp.Length + 2);                  result.Append('\"').Append(temp).Append('\"');                  return result.ToString();              }              else              {                  return input;              }
Magic Number,Azavea.NijPredictivePolicing.Common.Data,GenericSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\GenericSeparatedValueWriter.cs,MakeColumnLine,The following statement contains a magic number: StringBuilder colLine = new StringBuilder(512);
Magic Number,Azavea.NijPredictivePolicing.Common.Data,GenericSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\GenericSeparatedValueWriter.cs,MakeFormatLine,The following statement contains a magic number: StringBuilder formatLine = new StringBuilder(512);
Magic Number,Azavea.NijPredictivePolicing.Common.Data,TabSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\TabSeparatedValueWriter.cs,MakeColumnLine,The following statement contains a magic number: StringBuilder colLine = new StringBuilder(512);
Magic Number,Azavea.NijPredictivePolicing.Common.Data,TabSeparatedValueWriter,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\Data\TabSeparatedValueWriter.cs,MakeFormatLine,The following statement contains a magic number: StringBuilder formatLine = new StringBuilder(512);
Magic Number,Azavea.NijPredictivePolicing.Common.DB,SqlDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqlDataClient.cs,TestDatabaseConnection,The following statement contains a magic number: try              {                  using (DbCommand cmd = GetCommand("select 1 + 1 as two"))                  {                      int two = (int)cmd.ExecuteScalar();                      return (two == 2);                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common.DB,SqliteDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqliteDataClient.cs,LoadAllSpatialReferences,The following statement contains a magic number: using (var conn = GetConnection())              {                  string sql = "SELECT count(1) FROM spatial_ref_sys ";    //not really worried about injection here                  using (var cmd = this.GetCommand(sql' conn))                  {                      int count = Utilities.GetAs<int>(cmd.ExecuteScalar()' -1);                      if (count > 10)                      {                          return;                      }                  }                    this.GetCommand("DELETE FROM spatial_ref_sys "' conn).ExecuteNonQuery();                                      string spatialRefSQL = File.ReadAllText("init_spatialite.sql");                  this.GetCommand(spatialRefSQL' conn).ExecuteNonQuery();              }
Magic Number,Azavea.NijPredictivePolicing.Common.DB,SqliteDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqliteDataClient.cs,TestDatabaseConnection,The following statement contains a magic number: try              {                  using (DbCommand cmd = GetCommand("select 1 + 1 as two"))                  {                      int two = Utilities.GetAs<int>(cmd.ExecuteScalar()' -1);                      return (two == 2);                  }              }              catch { }
Magic Number,Azavea.NijPredictivePolicing.Common.DB,SqliteDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqliteDataClient.cs,GenerateTableSQLFromFields,The following statement contains a magic number: StringBuilder sql = new StringBuilder(512);
Magic Number,Azavea.NijPredictivePolicing.Common.DB,SqliteDataClient,C:\repos\azavea_acs-alchemist\csharp\Azavea.NijPredictivePolicing.Common\DB\SqliteDataClient.cs,GenerateTableSQLFromTable,The following statement contains a magic number: StringBuilder sql = new StringBuilder(512);
