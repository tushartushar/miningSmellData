Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The method has 300 lines of code.
Complex Method,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,Cyclomatic complexity of the method is 48
Complex Method,GitVersion,Program,C:\repos\Particular_GitVersion\src\GitVersionExe\Program.cs,VerifyArgumentsAndRun,Cyclomatic complexity of the method is 9
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        throw new WarningException("Can't specify multiple assembly info files when using -ensureassemblyinfo switch' either use a single assembly info file or do not specify -ensureassemblyinfo and create assembly info files manually"); " is 229.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                    throw new WarningException("assemblyversionformat switch removed' use AssemblyVersioningScheme configuration value instead"); " is 125.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        versionVariable = VersionVariables.AvailableVariables.SingleOrDefault(av => av.Equals(value.Replace("'"' "")' StringComparison.CurrentCultureIgnoreCase)); " is 154.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        var message = string.Format(messageFormat' name' String.Join("' "' VersionVariables.AvailableVariables.Select(x => string.Concat("'"' x' "'")))); " is 145.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        throw new WarningException(string.Format("Value '{0}' cannot be parsed as output type' please use 'json' or 'buildserver'"' value)); " is 132.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        throw new WarningException("Can't specify multiple assembly info files when using /ensureassemblyinfo switch' either use a single assembly info file or do not specify /ensureassemblyinfo and create assembly info files manually"); " is 229.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                        throw new WarningException("Can't specify multiple /overrideconfig options: currently supported only 'tag-prefix' option"); " is 123.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                            throw new WarningException(string.Format("Could not parse /overrideconfig option: {0}. Ensure it is in format 'key=value'"' keyValueOption)); " is 141.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                                throw new WarningException(string.Format("Could not parse /overrideconfig option: {0}. Currently supported only 'tag-prefix' option"' optionKey)); " is 146.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The length of the statement  "                // If we've reached through all argument switches without a match' we can relatively safely assume that the first argument isn't a switch' but the target path. " is 159.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,CollectSwitchesAndValuesFromArguments,The length of the statement  "                // If the current (previous) argument doesn't require a value parameter and this is a switch' create new name/value entry for it' with a null value. " is 148.
Long Statement,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,CollectSwitchesAndValuesFromArguments,The length of the statement  "                    // And if the current switch does not have a value yet and the value is not itself a switch' set its value to this argument. " is 124.
Long Statement,GitVersion,Extensions,C:\repos\Particular_GitVersion\src\GitVersionExe\Extensions.cs,IsSwitchArgument,The length of the statement  "                   && !Regex.Match(value' @"/\w+:").Success; //Exclude msbuild & project parameters in form /blah:' which should be parsed as values' not switch names. " is 148.
Long Statement,GitVersion,Extensions,C:\repos\Particular_GitVersion\src\GitVersionExe\Extensions.cs,IsHelp,The length of the statement  "            return (singleArgument == "?") || singleArgument.IsSwitch("h") || singleArgument.IsSwitch("help") || singleArgument.IsSwitch("?"); " is 130.
Long Statement,GitVersion,Extensions,C:\repos\Particular_GitVersion\src\GitVersionExe\Extensions.cs,ArgumentRequiresValue,The length of the statement  "            // If this is the first argument that might be a target path' the argument starts with slash and we're on an OS that supports paths with slashes' the argument does not require a value. " is 184.
Long Statement,GitVersion,Extensions,C:\repos\Particular_GitVersion\src\GitVersionExe\Extensions.cs,ArgumentRequiresValue,The length of the statement  "            if (argumentMightRequireValue && argumentIndex == 0 && argument.StartsWith("/") && Path.DirectorySeparatorChar == '/' && argument.IsValidPath()) " is 144.
Long Statement,GitVersion,HelpWriter,C:\repos\Particular_GitVersion\src\GitVersionExe\HelpWriter.cs,WriteTo,The length of the statement  "    /overrideconfig Overrides GitVersion config values inline (semicolon-separated key value pairs e.g. /overrideconfig tag-prefix=Foo) " is 131.
Long Statement,GitVersion,HelpWriter,C:\repos\Particular_GitVersion\src\GitVersionExe\HelpWriter.cs,WriteTo,The length of the statement  "    /c              The commit id to check. If not specified' the latest available commit on the specified branch will be used. " is 123.
Long Statement,GitVersion,HelpWriter,C:\repos\Particular_GitVersion\src\GitVersionExe\HelpWriter.cs,WriteTo,The length of the statement  "    /nofetch        Disables 'git fetch' during version calculation. Might cause GitVersion to not calculate your version as expected. " is 130.
Long Statement,GitVersion,Program,C:\repos\Particular_GitVersion\src\GitVersionExe\Program.cs,VerifyConfiguration,The length of the statement  "            var gitPreparer = new GitPreparer(arguments.TargetUrl' arguments.DynamicRepositoryLocation' arguments.Authentication' arguments.NoFetch' arguments.TargetPath); " is 159.
Long Statement,GitVersion,Program,C:\repos\Particular_GitVersion\src\GitVersionExe\Program.cs,ConfigureLogging,The length of the statement  "                Logger.WriteError(string.Format("Failed to configure logging for '{0}': {1}"' arguments.LogFilePath' exception.Message)); " is 121.
Long Statement,GitVersion,SpecifiedArgumentRunner,C:\repos\Particular_GitVersion\src\GitVersionExe\SpecifiedArgumentRunner.cs,Run,The length of the statement  "            var variables = executeCore.ExecuteGitVersion(targetUrl' dynamicRepositoryLocation' authentication' targetBranch' noFetch' targetPath' commitId' overrideConfig' noCache); " is 170.
Long Statement,GitVersion,SpecifiedArgumentRunner,C:\repos\Particular_GitVersion\src\GitVersionExe\SpecifiedArgumentRunner.cs,Run,The length of the statement  "            using (var assemblyInfoUpdater = new AssemblyInfoFileUpdater(arguments.UpdateAssemblyInfoFileName' targetPath' variables' fileSystem' arguments.EnsureAssemblyInfo)) " is 164.
Long Statement,GitVersion,SpecifiedArgumentRunner,C:\repos\Particular_GitVersion\src\GitVersionExe\SpecifiedArgumentRunner.cs,RunMsBuildIfNeeded,The length of the statement  "                throw new WarningException(string.Format("{0} execution failed' non-zero return code"' runningOnMono ? "XBuild" : "MSBuild")); " is 126.
Complex Conditional,GitVersion,Extensions,C:\repos\Particular_GitVersion\src\GitVersionExe\Extensions.cs,ArgumentRequiresValue,The conditional expression  "argumentMightRequireValue && argumentIndex == 0 && argument.StartsWith("/") && Path.DirectorySeparatorChar == '/' && argument.IsValidPath()"  is complex.
Magic Number,GitVersion,ArgumentParser,C:\repos\Particular_GitVersion\src\GitVersionExe\ArgumentParser.cs,ParseArguments,The following statement contains a magic number: for (var i = 0; i < switchesAndValues.AllKeys.Length; i++)              {                  var name = switchesAndValues.AllKeys[i];                  var values = switchesAndValues.GetValues(name);                  var value = values != null ? values.FirstOrDefault() : null;                    if (name.IsSwitch("version"))                  {                      EnsureArgumentValueCount(values);                      arguments.IsVersion = true;                      continue;                  }                    if (name.IsSwitch("l"))                  {                      EnsureArgumentValueCount(values);                      arguments.LogFilePath = value;                      continue;                  }                    if (name.IsSwitch("targetpath"))                  {                      EnsureArgumentValueCount(values);                      arguments.TargetPath = value;                      continue;                  }                    if (name.IsSwitch("dynamicRepoLocation"))                  {                      EnsureArgumentValueCount(values);                      arguments.DynamicRepositoryLocation = value;                      continue;                  }                    if (name.IsSwitch("url"))                  {                      EnsureArgumentValueCount(values);                      arguments.TargetUrl = value;                      continue;                  }                    if (name.IsSwitch("b"))                  {                      EnsureArgumentValueCount(values);                      arguments.TargetBranch = value;                      continue;                  }                    if (name.IsSwitch("u"))                  {                      EnsureArgumentValueCount(values);                      arguments.Authentication.Username = value;                      continue;                  }                    if (name.IsSwitch("p"))                  {                      EnsureArgumentValueCount(values);                      arguments.Authentication.Password = value;                      continue;                  }                    if (name.IsSwitch("c"))                  {                      EnsureArgumentValueCount(values);                      arguments.CommitId = value;                      continue;                  }                    if (name.IsSwitch("exec"))                  {                      EnsureArgumentValueCount(values);                      arguments.Exec = value;                      continue;                  }                    if (name.IsSwitch("execargs"))                  {                      EnsureArgumentValueCount(values);                      arguments.ExecArgs = value;                      continue;                  }                    if (name.IsSwitch("proj"))                  {                      EnsureArgumentValueCount(values);                      arguments.Proj = value;                      continue;                  }                    if (name.IsSwitch("projargs"))                  {                      EnsureArgumentValueCount(values);                      arguments.ProjArgs = value;                      continue;                  }                      if (name.IsSwitch("diag"))                  {                      if (value == null || value.IsTrue())                      {                          arguments.Diag = true;                      }                      continue;                  }                      if (name.IsSwitch("updateAssemblyInfo"))                  {                      if (value.IsTrue())                      {                          arguments.UpdateAssemblyInfo = true;                      }                      else if (value.IsFalse())                      {                          arguments.UpdateAssemblyInfo = false;                      }                      else if (values != null && values.Length > 1)                      {                          arguments.UpdateAssemblyInfo = true;                          foreach (var v in values)                          {                              arguments.AddAssemblyInfoFileName(v);                          }                      }                      else if (!value.IsSwitchArgument())                      {                          arguments.UpdateAssemblyInfo = true;                          arguments.AddAssemblyInfoFileName(value);                      }                      else                      {                          arguments.UpdateAssemblyInfo = true;                      }                        if (arguments.UpdateAssemblyInfoFileName.Count > 1 && arguments.EnsureAssemblyInfo)                      {                          throw new WarningException("Can't specify multiple assembly info files when using -ensureassemblyinfo switch' either use a single assembly info file or do not specify -ensureassemblyinfo and create assembly info files manually");                      }                        continue;                  }                    if (name.IsSwitch("assemblyversionformat"))                  {                      throw new WarningException("assemblyversionformat switch removed' use AssemblyVersioningScheme configuration value instead");                  }                    if (name.IsSwitch("v") || name.IsSwitch("showvariable"))                  {                      string versionVariable = null;                        if (!string.IsNullOrWhiteSpace(value))                      {                          versionVariable = VersionVariables.AvailableVariables.SingleOrDefault(av => av.Equals(value.Replace("'"' "")' StringComparison.CurrentCultureIgnoreCase));                      }                        if (versionVariable == null)                      {                          var messageFormat = "{0} requires a valid version variable.  Available variables are:\n{1}";                          var message = string.Format(messageFormat' name' String.Join("' "' VersionVariables.AvailableVariables.Select(x => string.Concat("'"' x' "'"))));                          throw new WarningException(message);                      }                        arguments.ShowVariable = versionVariable;                      continue;                  }                    if (name.IsSwitch("showConfig"))                  {                      if (value.IsTrue())                      {                          arguments.ShowConfig = true;                      }                      else if (value.IsFalse())                      {                          arguments.UpdateAssemblyInfo = false;                      }                      else                      {                          arguments.ShowConfig = true;                      }                      continue;                  }                    if (name.IsSwitch("output"))                  {                      OutputType outputType;                      if (!Enum.TryParse(value' true' out outputType))                      {                          throw new WarningException(string.Format("Value '{0}' cannot be parsed as output type' please use 'json' or 'buildserver'"' value));                      }                        arguments.Output = outputType;                      continue;                  }                    if (name.IsSwitch("nofetch"))                  {                      arguments.NoFetch = true;                      continue;                  }                    if (name.IsSwitch("ensureassemblyinfo"))                  {                      if (value.IsTrue())                      {                          arguments.EnsureAssemblyInfo = true;                      }                      else if (value.IsFalse())                      {                          arguments.EnsureAssemblyInfo = false;                      }                      else                      {                          arguments.EnsureAssemblyInfo = true;                      }                        if (arguments.UpdateAssemblyInfoFileName.Count > 1 && arguments.EnsureAssemblyInfo)                      {                          throw new WarningException("Can't specify multiple assembly info files when using /ensureassemblyinfo switch' either use a single assembly info file or do not specify /ensureassemblyinfo and create assembly info files manually");                      }                      continue;                  }                    if (name.IsSwitch("overrideconfig"))                  {                      var keyValueOptions = (value ?? "").Split(new[] { ';' }' StringSplitOptions.RemoveEmptyEntries);                      if (keyValueOptions.Length == 0)                      {                          continue;                      }                        arguments.HasOverrideConfig = true;                        if (keyValueOptions.Length > 1)                      {                          throw new WarningException("Can't specify multiple /overrideconfig options: currently supported only 'tag-prefix' option");                      }                        // key=value                      foreach (var keyValueOption in keyValueOptions)                      {                          var keyAndValue = keyValueOption.Split(new[] { '=' }' StringSplitOptions.RemoveEmptyEntries);                          if (keyAndValue.Length != 2)                          {                              throw new WarningException(string.Format("Could not parse /overrideconfig option: {0}. Ensure it is in format 'key=value'"' keyValueOption));                          }                            var optionKey = keyAndValue[0].ToLowerInvariant();                          switch (optionKey)                          {                              case "tag-prefix":                                  arguments.OverrideConfig.TagPrefix = keyAndValue[1];                                  break;                              default:                                  throw new WarningException(string.Format("Could not parse /overrideconfig option: {0}. Currently supported only 'tag-prefix' option"' optionKey));                          }                      }                        continue;                  }                    if (name.IsSwitch("nocache"))                  {                      arguments.NoCache = true;                      continue;                  }                    if (name.IsSwitch("verbosity"))                  {                      if (!Enum.TryParse(value' true' out arguments.Verbosity))                      {                          throw new WarningException(String.Format("Could not parse Verbosity value '{0}'"' value));                      }                      continue;                  }                    var couldNotParseMessage = string.Format("Could not parse command line parameter '{0}'."' name);                    // If we've reached through all argument switches without a match' we can relatively safely assume that the first argument isn't a switch' but the target path.                  if (i == 0)                  {                      if (name.StartsWith("/"))                      {                          if (Path.DirectorySeparatorChar == '/' && name.IsValidPath())                          {                              arguments.TargetPath = name;                              continue;                          }                      }                      else if (!name.IsSwitchArgument())                      {                          arguments.TargetPath = name;                          continue;                      }                        couldNotParseMessage += " If it is the target path' make sure it exists.";                  }                    throw new WarningException(couldNotParseMessage);              }
Magic Number,GitVersion,Program,C:\repos\Particular_GitVersion\src\GitVersionExe\Program.cs,VerifyArgumentsAndRun,The following statement contains a magic number: try              {                  var fileSystem = new FileSystem();                  var argumentsWithoutExeName = GetArgumentsWithoutExeName();                    try                  {                      arguments = ArgumentParser.ParseArguments(argumentsWithoutExeName);                  }                  catch (Exception exception)                  {                      Console.WriteLine("Failed to parse arguments: {0}"' string.Join(" "' argumentsWithoutExeName));                      if (!string.IsNullOrWhiteSpace(exception.Message))                      {                          Console.WriteLine();                          Console.WriteLine(exception.Message);                          Console.WriteLine();                      }                        HelpWriter.Write();                      return 1;                  }                    if (arguments.IsVersion)                  {                      var assembly = Assembly.GetExecutingAssembly();                      VersionWriter.Write(assembly);                      return 0;                  }                    if (arguments.IsHelp)                  {                      HelpWriter.Write();                      return 0;                  }                  if (arguments.Diag)                  {                      arguments.NoCache = true;                      arguments.Output = OutputType.BuildServer;                  }                     ConfigureLogging(arguments);                    if (arguments.Diag)                  {                      Logger.WriteInfo("Dumping commit graph: ");                      GitTools.LibGitExtensions.DumpGraph(arguments.TargetPath' Logger.WriteInfo' 100);                  }                  if (!Directory.Exists(arguments.TargetPath))                  {                      Logger.WriteWarning(string.Format("The working directory '{0}' does not exist."' arguments.TargetPath));                  }                  else                  {                      Logger.WriteInfo("Working directory: " + arguments.TargetPath);                  }                  VerifyConfiguration(arguments' fileSystem);                    if (arguments.Init)                  {                      ConfigurationProvider.Init(arguments.TargetPath' fileSystem' new ConsoleAdapter());                      return 0;                  }                  if (arguments.ShowConfig)                  {                      Console.WriteLine(ConfigurationProvider.GetEffectiveConfigAsString(arguments.TargetPath' fileSystem));                      return 0;                  }                    if (!string.IsNullOrEmpty(arguments.Proj) || !string.IsNullOrEmpty(arguments.Exec))                  {                      arguments.Output = OutputType.BuildServer;                  }                    SpecifiedArgumentRunner.Run(arguments' fileSystem);              }              catch (WarningException exception)              {                  var error = string.Format("An error occurred:\r\n{0}"' exception.Message);                  Logger.WriteWarning(error);                  return 1;              }              catch (Exception exception)              {                  var error = string.Format("An unexpected error occurred:\r\n{0}"' exception);                  Logger.WriteError(error);                    if (arguments != null)                  {                      Logger.WriteInfo(string.Empty);                      Logger.WriteInfo("Attempting to show the current git graph (please include in issue): ");                      Logger.WriteInfo("Showing max of 100 commits");                        try                      {                          GitTools.LibGitExtensions.DumpGraph(arguments.TargetPath' Logger.WriteInfo' 100);                      }                      catch (Exception dumpGraphException)                      {                          Logger.WriteError("Couldn't dump the git graph due to the following error: " + dumpGraphException);                      }                  }                  return 1;              }
Magic Number,GitVersion,Program,C:\repos\Particular_GitVersion\src\GitVersionExe\Program.cs,VerifyArgumentsAndRun,The following statement contains a magic number: try              {                  var fileSystem = new FileSystem();                  var argumentsWithoutExeName = GetArgumentsWithoutExeName();                    try                  {                      arguments = ArgumentParser.ParseArguments(argumentsWithoutExeName);                  }                  catch (Exception exception)                  {                      Console.WriteLine("Failed to parse arguments: {0}"' string.Join(" "' argumentsWithoutExeName));                      if (!string.IsNullOrWhiteSpace(exception.Message))                      {                          Console.WriteLine();                          Console.WriteLine(exception.Message);                          Console.WriteLine();                      }                        HelpWriter.Write();                      return 1;                  }                    if (arguments.IsVersion)                  {                      var assembly = Assembly.GetExecutingAssembly();                      VersionWriter.Write(assembly);                      return 0;                  }                    if (arguments.IsHelp)                  {                      HelpWriter.Write();                      return 0;                  }                  if (arguments.Diag)                  {                      arguments.NoCache = true;                      arguments.Output = OutputType.BuildServer;                  }                     ConfigureLogging(arguments);                    if (arguments.Diag)                  {                      Logger.WriteInfo("Dumping commit graph: ");                      GitTools.LibGitExtensions.DumpGraph(arguments.TargetPath' Logger.WriteInfo' 100);                  }                  if (!Directory.Exists(arguments.TargetPath))                  {                      Logger.WriteWarning(string.Format("The working directory '{0}' does not exist."' arguments.TargetPath));                  }                  else                  {                      Logger.WriteInfo("Working directory: " + arguments.TargetPath);                  }                  VerifyConfiguration(arguments' fileSystem);                    if (arguments.Init)                  {                      ConfigurationProvider.Init(arguments.TargetPath' fileSystem' new ConsoleAdapter());                      return 0;                  }                  if (arguments.ShowConfig)                  {                      Console.WriteLine(ConfigurationProvider.GetEffectiveConfigAsString(arguments.TargetPath' fileSystem));                      return 0;                  }                    if (!string.IsNullOrEmpty(arguments.Proj) || !string.IsNullOrEmpty(arguments.Exec))                  {                      arguments.Output = OutputType.BuildServer;                  }                    SpecifiedArgumentRunner.Run(arguments' fileSystem);              }              catch (WarningException exception)              {                  var error = string.Format("An error occurred:\r\n{0}"' exception.Message);                  Logger.WriteWarning(error);                  return 1;              }              catch (Exception exception)              {                  var error = string.Format("An unexpected error occurred:\r\n{0}"' exception);                  Logger.WriteError(error);                    if (arguments != null)                  {                      Logger.WriteInfo(string.Empty);                      Logger.WriteInfo("Attempting to show the current git graph (please include in issue): ");                      Logger.WriteInfo("Showing max of 100 commits");                        try                      {                          GitTools.LibGitExtensions.DumpGraph(arguments.TargetPath' Logger.WriteInfo' 100);                      }                      catch (Exception dumpGraphException)                      {                          Logger.WriteError("Couldn't dump the git graph due to the following error: " + dumpGraphException);                      }                  }                  return 1;              }
