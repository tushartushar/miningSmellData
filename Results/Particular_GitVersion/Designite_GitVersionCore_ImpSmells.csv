Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The method has 122 lines of code.
Long Method,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The method has 102 lines of code.
Complex Method,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,Cyclomatic complexity of the method is 13
Complex Method,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,CompareTo,Cyclomatic complexity of the method is 10
Complex Method,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,Cyclomatic complexity of the method is 13
Complex Method,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,Cyclomatic complexity of the method is 8
Complex Method,GitVersion.Configuration.Init,EditConfigStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\EditConfigStep.cs,HandleResult,Cyclomatic complexity of the method is 8
Complex Method,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,Cyclomatic complexity of the method is 9
Long Parameter List,GitVersion,GitVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionCalculator.cs,GitVersionCalculator,The method has 10 parameters. Parameters: fileSystem' log' configFileLocator' configProvider' buildServerResolver' gitVersionCache' gitVersionFinder' gitPreparer' variableProvider' options
Long Parameter List,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,GitVersionContext,The method has 6 parameters. Parameters: repository' log' targetBranch' configuration' onlyEvaluateTrackedBranches' commitId
Long Parameter List,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,GitVersionContext,The method has 6 parameters. Parameters: repository' log' currentBranch' configuration' onlyEvaluateTrackedBranches' commitId
Long Parameter List,GitVersion,IncrementStrategyFinder,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\IncrementStrategyFinder.cs,GetIncrementFromMessage,The method has 5 parameters. Parameters: message' majorRegex' minorRegex' patchRegex' none
Long Parameter List,GitVersion,IncrementStrategyFinder,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\IncrementStrategyFinder.cs,FindIncrementFromMessage,The method has 5 parameters. Parameters: message' majorRegex' minorRegex' patchRegex' noneRegex
Long Parameter List,GitVersion,SemanticVersionBuildMetaData,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionBuildMetaData.cs,SemanticVersionBuildMetaData,The method has 7 parameters. Parameters: versionSourceSha' commitsSinceTag' branch' commitSha' commitShortSha' commitDate' otherMetadata
Long Parameter List,GitVersion.Cache,GitVersionCacheKeyFactory,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Cache\GitVersionCacheKeyFactory.cs,Create,The method has 5 parameters. Parameters: fileSystem' log' gitPreparer' configFileLocator' overrideConfig
Long Parameter List,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,ApplyBranchDefaults,The method has 13 parameters. Parameters: config' branchConfig' branchRegex' sourceBranches' defaultTag' defaultIncrementStrategy' defaultPreventIncrement' defaultVersioningMode' defaultTrackMergeTarget' defaultTagNumberPattern' tracksReleaseBranches' isReleaseBranch' isMainline
Long Parameter List,GitVersion.Configuration,ConfigProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigProvider.cs,ConfigProvider,The method has 5 parameters. Parameters: fileSystem' log' configFileLocator' gitPreparer' configInitWizard
Long Parameter List,GitVersion.Configuration,EffectiveConfiguration,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\EffectiveConfiguration.cs,EffectiveConfiguration,The method has 28 parameters. Parameters: assemblyVersioningScheme' assemblyFileVersioningScheme' assemblyInformationalFormat' assemblyVersioningFormat' assemblyFileVersioningFormat' versioningMode' gitTagPrefix' tag' nextVersion' increment' branchPrefixToTrim' preventIncrementForMergedBranchVersion' tagNumberPattern' continuousDeploymentFallbackTag' trackMergeTarget' majorVersionBumpMessage' minorVersionBumpMessage' patchVersionBumpMessage' noBumpMessage' commitMessageIncrementing' legacySemVerPaddding' buildMetaDataPadding' commitsSinceVersionSourcePadding' versionFilters' tracksReleaseBranches' isCurrentBranchRelease' commitDateFormat' preReleaseWeight
Long Parameter List,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,AssemblyInfoFileUpdater,The method has 6 parameters. Parameters: assemblyInfoFileName' workingDirectory' variables' fileSystem' log' ensureAssemblyInfo
Long Parameter List,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,AssemblyInfoFileUpdater,The method has 6 parameters. Parameters: assemblyInfoFileNames' workingDirectory' variables' fileSystem' log' ensureAssemblyInfo
Long Parameter List,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,ReplaceOrInsertAfterLastAssemblyAttributeOrAppend,The method has 5 parameters. Parameters: replaceRegex' inputString' replaceString' fileExtension' appendedAttributes
Long Parameter List,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The method has 7 parameters. Parameters: log' environment' gitDirectory' authentication' noFetch' currentBranch' isDynamicRepository
Long Parameter List,GitVersion.Helpers,ProcessHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\ProcessHelper.cs,Run,The method has 7 parameters. Parameters: output' errorOutput' input' exe' args' workingDirectory' environmentalVariables
Long Parameter List,GitVersion.OutputVariables,VariableProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,CheckAndFormatString,The method has 5 parameters. Parameters: formatString' source' environment' defaultValue' formatVarName
Long Parameter List,GitVersion.OutputVariables,VersionVariables,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,VersionVariables,The method has 30 parameters. Parameters: major' minor' patch' buildMetaData' buildMetaDataPadded' fullBuildMetaData' branchName' sha' shortSha' majorMinorPatch' semVer' legacySemVer' legacySemVerPadded' fullSemVer' assemblySemVer' assemblySemFileVer' preReleaseTag' preReleaseTagWithDash' preReleaseLabel' preReleaseNumber' weightedPreReleaseNumber' informationalVersion' commitDate' nugetVersion' nugetVersionV2' nugetPreReleaseTag' nugetPreReleaseTagV2' versionSourceSha' commitsSinceVersionSource' commitsSinceVersionSourcePadded
Long Parameter List,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,AggregateMergeCommitIncrement,The method has 5 parameters. Parameters: context' commit' directCommits' mainlineVersion' mainline
Long Parameter List,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,FindMessageIncrement,The method has 5 parameters. Parameters: context' mergeCommit' mergedHead' findMergeBase' commitLog
Long Parameter List,GitVersion.VersionCalculation.BaseVersionCalculators,BaseVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\BaseVersion.cs,BaseVersion,The method has 6 parameters. Parameters: context' source' shouldIncrement' semanticVersion' baseVersionSource' branchNameOverride
Long Identifier,GitVersion,GitRepoMetadataProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,,The length of the parameter semanticVersionTagsOnBranchCache is 32.
Long Identifier,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the parameter preventIncrementForMergedBranchVersion is 38.
Long Identifier,GitVersion.Configuration,DefaultConfigFileLocator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\DefaultConfigFileLocator.cs,WarnAboutAmbiguousConfigFileSelection,The length of the parameter hasConfigInProjectRootDirectory is 31.
Long Identifier,GitVersion.Configuration,EffectiveConfiguration,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter preventIncrementForMergedBranchVersion is 38.
Long Identifier,GitVersion.Configuration,EffectiveConfiguration,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter continuousDeploymentFallbackTag is 31.
Long Identifier,GitVersion.Configuration,EffectiveConfiguration,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\EffectiveConfiguration.cs,EffectiveConfiguration,The length of the parameter commitsSinceVersionSourcePadding is 32.
Long Identifier,GitVersion.Configuration,NamedConfigFileLocator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\NamedConfigFileLocator.cs,WarnAboutAmbiguousConfigFileSelection,The length of the parameter hasConfigInProjectRootDirectory is 31.
Long Identifier,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the parameter localBranchesWhereCommitShaIsHead is 33.
Long Identifier,GitVersion.OutputVariables,VersionVariables,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,VersionVariables,The length of the parameter commitsSinceVersionSourcePadded is 31.
Long Identifier,GitVersion.VersionCalculation,BaseVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the parameter matchingVersionsOnceIncremented is 31.
Long Identifier,GitVersion.VersionCalculation,NextVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the parameter branchConfigHasPreReleaseTagConfigured is 38.
Long Identifier,GitVersion.VersionCalculation,NextVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the parameter preReleaseTagDoesNotMatchConfiguration is 38.
Long Identifier,GitVersion.VersioningModes,ContinuousDeliveryMode,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersioningModes\ContinuousDeliveryMode.cs,RetrieveMostRecentOptionalTagVersion,The length of the parameter applicableTagsInDescendingOrder is 31.
Long Statement,GitVersion,GitPreparer,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitPreparer.cs,CleanupDuplicateOrigin,The length of the statement  "            if (!repo.Network.Remotes.Any(remote => remote.Name.Equals(DefaultRemoteName' StringComparison.InvariantCultureIgnoreCase))) " is 124.
Long Statement,GitVersion,GitPreparer,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitPreparer.cs,NormalizeGitDirectory,The length of the statement  "                GitRepositoryHelper.NormalizeGitDirectory(log' environment' gitDirectory' auth' options.Value.NoFetch' targetBranch' isDynamicRepository); " is 138.
Long Statement,GitVersion,GitRepoMetadataProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,GetVersionTagsOnBranch,The length of the statement  "                var versionTags = branch.Commits.SelectMany(c => tags.Where(t => c.Sha == t.Item1.Target.Sha).Select(t => t.Item2)).ToList(); " is 125.
Long Statement,GitVersion,GitVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionCalculator.cs,CalculateVersionVariables,The length of the statement  "            var currentBranch = ResolveCurrentBranch(buildServer' arguments.TargetBranch' !string.IsNullOrWhiteSpace(arguments.DynamicRepositoryLocation)); " is 143.
Long Statement,GitVersion,GitVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionCalculator.cs,CalculateVersionVariables,The length of the statement  "            return GetCachedGitVersionInfo(arguments.TargetBranch' arguments.CommitId' arguments.OverrideConfig' arguments.NoCache); " is 120.
Long Statement,GitVersion,GitVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionCalculator.cs,ExecuteInternal,The length of the statement  "                return variableProvider.GetVariablesFor(semanticVersion' gitVersionContext.Configuration' gitVersionContext.IsCurrentCommitTagged); " is 131.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'Versioning mode' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 167.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'Increment' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 161.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'PreventIncrementOfMergedBranchVersion' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 189.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'TrackMergeTarget' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 168.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'TracksReleaseBranches' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 173.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception($"Configuration value for 'IsReleaseBranch' for branch {currentBranchConfig.Name} has no value. (this should not happen' please report an issue)"); " is 167.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'AssemblyVersioningScheme' has no value. (this should not happen' please report an issue)"); " is 137.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'AssemblyFileVersioningScheme' has no value. (this should not happen' please report an issue)"); " is 141.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'CommitMessageIncrementing' has no value. (this should not happen' please report an issue)"); " is 138.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'LegacySemVerPadding' has no value. (this should not happen' please report an issue)"); " is 132.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'BuildMetaDataPadding' has no value. (this should not happen' please report an issue)"); " is 133.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                throw new Exception("Configuration value for 'CommitsSinceVersionSourcePadding' has no value. (this should not happen' please report an issue)"); " is 145.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "            var commitMessageVersionBump = currentBranchConfig.CommitMessageIncrementing ?? FullConfiguration.CommitMessageIncrementing.Value; " is 130.
Long Statement,GitVersion,GitVersionContext,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionContext.cs,CalculateEffectiveConfiguration,The length of the statement  "                assemblyVersioningScheme' assemblyFileVersioningScheme' assemblyInformationalFormat' assemblyVersioningFormat' assemblyFileVersioningFormat' versioningMode' gitTagPrefix' " is 170.
Long Statement,GitVersion,GitVersionFinder,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionFinder.cs,FindVersion,The length of the statement  "            log.Info($"Running against branch: {context.CurrentBranch.FriendlyName} ({(context.CurrentCommit == null ? "-" : context.CurrentCommit.Sha)})"); " is 144.
Long Statement,GitVersion,GitVersionFinder,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionFinder.cs,FindVersion,The length of the statement  "                throw new WarningException("NextVersion.txt has been deprecated. See http://gitversion.readthedocs.org/en/latest/configuration/ for replacement"); " is 146.
Long Statement,GitVersion,SemanticVersionBuildMetaData,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionBuildMetaData.cs,ToString,The length of the statement  "                "f" => $"{CommitsSinceTag}{(string.IsNullOrEmpty(Branch) ? null : ".Branch." + FormatMetaDataPart(Branch))}{(string.IsNullOrEmpty(Sha) ? null : ".Sha." + Sha)}{(string.IsNullOrEmpty(OtherMetaData) ? null : "." + FormatMetaDataPart(OtherMetaData))}".TrimStart('.')' " is 264.
Long Statement,GitVersion,SemanticVersionExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionExtensions.cs,OverrideVersionManuallyIfNeeded,The length of the statement  "            if (!string.IsNullOrEmpty(configuration.NextVersion) && SemanticVersion.TryParse(configuration.NextVersion' configuration.GitTagPrefix' out var manualNextVersion)) " is 163.
Long Statement,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,ToString,The length of the statement  "                return Number.HasValue ? FormatLegacy(GetLegacyName()' Number.Value.ToString("D" + padding)) : FormatLegacy(GetLegacyName()); " is 125.
Long Statement,GitVersion.BuildServers,Drone,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\Drone.cs,CanApplyToCurrentContext,The length of the statement  "            return Environment.GetEnvironmentVariable(EnvironmentVariable)?.Equals("true"' StringComparison.OrdinalIgnoreCase) ?? false; " is 124.
Long Statement,GitVersion.BuildServers,GitHubActions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\GitHubActions.cs,GenerateSetParameterMessage,The length of the statement  "            // https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env " is 155.
Long Statement,GitVersion.BuildServers,TeamCity,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,WriteBranchEnvVariableWarning,The length of the statement  "Depending on your authentication and transport setup of your git VCS root things may work. In that case' ignore this warning. " is 125.
Long Statement,GitVersion.BuildServers,TeamCity,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\TeamCity.cs,WriteBranchEnvVariableWarning,The length of the statement  "In your TeamCity build configuration' add a parameter called `env.Git_Branch` with value %teamcity.build.vcs.branch.<vcsid>% " is 124.
Long Statement,GitVersion.BuildServers,TravisCi,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\TravisCI.cs,CanApplyToCurrentContext,The length of the statement  "            return "true".Equals(Environment.GetEnvironmentVariable(EnvironmentVariable)) && "true".Equals(Environment.GetEnvironmentVariable("CI")); " is 137.
Long Statement,GitVersion.Cache,GitVersionCache,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Cache\GitVersionCache.cs,WriteVariablesToDiskCache,The length of the statement  "            var retryOperation = new OperationWithExponentialBackoff<IOException>(new ThreadSleep()' log' WriteCacheOperation' maxRetries: 6); " is 130.
Long Statement,GitVersion.Cache,GitVersionCache,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Cache\GitVersionCache.cs,LoadVersionVariablesFromDiskCache,The length of the statement  "                            log.Warning($"Unable to delete corrupted version cache file {cacheFileName}. Got {deleteEx.GetType().FullName} exception."); " is 124.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,GetBranchConfiguration,The length of the statement  "                log.Info($"No branch configuration found for branch {targetBranch.FriendlyName}' falling back to default configuration"); " is 121.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                    possibleParents = context.RepositoryMetadataProvider.GetBranchesContainingCommit(targetBranch.Tip' branchesToEvaluate' true) " is 124.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                // If we fail to inherit it is probably because the branch has been merged and we can't do much. So we will fall back to develop's config " is 137.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                    errorMessage = "Failed to inherit Increment branch configuration' ended up with: " + string.Join("' "' possibleParents.Select(p => p.FriendlyName)); " is 148.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                var chosenBranch = repository.Branches.FirstOrDefault(b => Regex.IsMatch(b.FriendlyName' developBranchRegex' RegexOptions.IgnoreCase) " is 133.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                log.Warning(errorMessage + System.Environment.NewLine + System.Environment.NewLine + "Falling back to " + branchName + " branch config"); " is 137.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The length of the statement  "                        log.Warning("Fallback branch wants to inherit Increment branch configuration from itself. Using patch increment instead."); " is 123.
Long Statement,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,CalculateWhenMultipleParents,The length of the statement  "                    currentBranch = possibleTargetBranches.FirstOrDefault(b => b.NameWithoutRemote() == "master") ?? possibleTargetBranches.First(); " is 128.
Long Statement,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The length of the statement  "                defaultVersioningMode: config.VersioningMode == VersioningMode.Mainline ? VersioningMode.Mainline : VersioningMode.ContinuousDeployment' " is 136.
Long Statement,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The length of the statement  "                    throw new GitVersionConfigurationException($"Branch configuration '{branchConfig.Key}' is missing required configuration 'regex'\n\n" + " is 135.
Long Statement,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The length of the statement  "                    throw new GitVersionConfigurationException($"Branch configuration '{branchConfig.Key}' is missing required configuration 'source-branches'\n\n" + " is 145.
Long Statement,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Verify,The length of the statement  "                throw new GitVersionConfigurationException(@"Mainline mode only works at the repository level' a single branch cannot be put into mainline mode " is 143.
Long Statement,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Verify,The length of the statement  "This is because mainline mode treats your entire git repository as an event source with each merge into the 'mainline' incrementing the version. " is 144.
Long Statement,GitVersion.Configuration,ConfigSerialiser,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigSerialiser.cs,Write,The length of the statement  "            var serializer = new SerializerBuilder().ConfigureDefaultValuesHandling(DefaultValuesHandling.OmitDefaults).WithNamingConvention(HyphenatedNamingConvention.Instance).Build(); " is 174.
Long Statement,GitVersion.Configuration,DefaultConfigFileLocator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\DefaultConfigFileLocator.cs,WarnAboutAmbiguousConfigFileSelection,The length of the statement  "                throw new WarningException($"Ambiguous config file selection from '{workingConfigFile}' and '{projectRootConfigFile}'"); " is 120.
Long Statement,GitVersion.Configuration,DefaultConfigFileLocator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\DefaultConfigFileLocator.cs,WarnAboutObsoleteConfigFile,The length of the statement  "                Log.Warning(string.Format("Ambiguous config files at '{0}': '{1}' (deprecated) and '{2}'. Will be used '{2}'"' workingDirectory' ObsoleteFileName' DefaultFileName)); " is 165.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "            var deserializer = new DeserializerBuilder().WithNamingConvention(NullNamingConvention.Instance).IgnoreUnmatchedProperties().Build(); " is 133.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "            var oldConfigs = legacyConfig.Branches.Keys.Where(k => OldConfigKnownRegexes.Keys.Contains(k) && k != OldConfigKnownRegexes[k]).ToList(); " is 137.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("develop-branch-tag has been replaced by branch specific configuration. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 169.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("release-branch-tag has been replaced by branch specific configuration. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 169.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                issues.Add("'is-develop' is deprecated' use 'tracks-release-branches' instead. See http://gitversion.readthedocs.org/en/latest/configuration/#branch-configuration"); " is 165.
Long Statement,GitVersion.Configuration,LegacyConfigNotifier,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\LegacyConfigNotifier.cs,Notify,The length of the statement  "                throw new OldConfigurationException("GitVersion configuration file contains old configuration' please fix the following errors:\r\n" + string.Join("\r\n"' issues)); " is 164.
Long Statement,GitVersion.Configuration,NamedConfigFileLocator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\NamedConfigFileLocator.cs,WarnAboutAmbiguousConfigFileSelection,The length of the statement  "                throw new WarningException($"Ambiguous config file selection from '{workingConfigFile}' and '{projectRootConfigFile}'"); " is 120.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetGvCommand,The length of the statement  "                ProjectVisibility.Private => "  - ps: gitversion $env:APPVEYOR_BUILD_FOLDER /l console /output buildserver /updateAssemblyInfo /nofetch /b $env:APPVEYOR_REPO_BRANCH"' " is 166.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GenerateNuGetConfig,The length of the statement  "  - cmd: ECHO nuget pack <Project>\<NuSpec>.nuspec -version ""%GitVersion_NuGetVersion%"" -prop ""target=%CONFIGURATION%"" " is 120.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetPrompt,The length of the statement  "                prompt.AppendLine("GitVersion doesn't support modifying existing appveyor config files. We will generate appveyor.gitversion.yml instead"); " is 139.
Long Statement,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,GetOutputFilename,The length of the statement  "                throw new Exception("appveyor.gitversion.yml -> appveyor.gitversion.9.yml all exist. Pretty sure you have enough templates"); " is 125.
Long Statement,GitVersion.Configuration.Init.Wizard,FinishedSetupStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\FinishedSetupStep.cs,GetPrompt,The length of the statement  "            return "Questions are all done' you can now edit GitVersion's configuration further\r\n" + base.GetPrompt(config' workingDirectory); " is 132.
Long Statement,GitVersion.Configuration.Init.Wizard,GitFlowSetupStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\GitFlowSetupStep.cs,GetPrompt,The length of the statement  "            return "By default GitVersion will only increment the version of the 'develop' branch every commit' all other branches will increment when tagged\r\n\r\n" +  " is 156.
Long Statement,GitVersion.Configuration.Init.Wizard,GitHubFlowStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\GitHubFlowStep.cs,GetPrompt,The length of the statement  "            return "By default GitVersion will only increment the version when tagged\r\n\r\n" + base.GetPrompt(config' workingDirectory); " is 126.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The length of the statement  "                    Console.Write(@"Because you need to maintain multiple versions of your product in production at the same time' GitFlow is likely a good fit. " is 140.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The length of the statement  "GitFlow allows you to have new development happening on the 'develop' branch' patch issues in old minor versions with 'hotfix/' branches and support old major versions with 'support/' branches"); " is 195.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy3Step,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy3Step.cs,GetPrompt,The length of the statement  "            return "Do you need to build nightlies or consume packages the CI build creates without releasing those versions? (y/n)"; " is 121.
Long Statement,GitVersion.Configuration.Init.Wizard,PickBranchingStrategyStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategyStep.cs,GetPrompt,The length of the statement  "            return @"The way you will use GitVersion will change a lot based on your branching strategy. What branching strategy will you be using: " is 135.
Long Statement,GitVersion.Extensions,StringExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\StringExtensions.cs,IsSwitchArgument,The length of the statement  "                   && !Regex.Match(value' @"/\w+:").Success; //Exclude msbuild & project parameters in form /blah:' which should be parsed as values' not switch names. " is 148.
Long Statement,GitVersion.Extensions,StringExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\StringExtensions.cs,IsHelp,The length of the statement  "            return (singleArgument == "?") || singleArgument.IsSwitch("h") || singleArgument.IsSwitch("help") || singleArgument.IsSwitch("?"); " is 130.
Long Statement,GitVersion.Extensions,StringExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\StringExtensions.cs,ArgumentRequiresValue,The length of the statement  "            // If this is the first argument that might be a target path' the argument starts with slash and we're on an OS that supports paths with slashes' the argument does not require a value. " is 184.
Long Statement,GitVersion.Extensions,StringExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\StringExtensions.cs,ArgumentRequiresValue,The length of the statement  "            if (argumentMightRequireValue && argumentIndex == 0 && argument.StartsWith("/") && Path.DirectorySeparatorChar == '/' && argument.IsValidPath()) " is 144.
Long Statement,GitVersion.Extensions.GitVersionInformationResources,GitVersionInformationGenerator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\GitVersionInformationResources\GitVersionInformationGenerator.cs,Generate,The length of the statement  "            var members = string.Join(System.Environment.NewLine' variables.Select(v => string.Format("    " + addFormat' v.Key' v.Value))); " is 128.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyInfoFiles = GetAssemblyInfoFiles(workingDirectory' assemblyInfoFileNames' fileSystem' ensureAssemblyInfo).ToList(); " is 127.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyVersionString = !string.IsNullOrWhiteSpace(assemblyVersion) ? $"AssemblyVersion(\"{assemblyVersion}\")" : null; " is 123.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "            var assemblyFileVersionString = !string.IsNullOrWhiteSpace(assemblyFileVersion) ? $"AssemblyFileVersion(\"{assemblyFileVersion}\")" : null; " is 139.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                    fileContents = ReplaceOrInsertAfterLastAssemblyAttributeOrAppend(assemblyVersionRegex' fileContents' assemblyVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 176.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                    fileContents = ReplaceOrInsertAfterLastAssemblyAttributeOrAppend(assemblyFileVersionRegex' fileContents' assemblyFileVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 184.
Long Statement,GitVersion.Extensions.VersionAssemblyInfoResources,AssemblyInfoFileUpdater,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\VersionAssemblyInfoResources\AssemblyInfoFileUpdater.cs,Update,The length of the statement  "                fileContents = ReplaceOrInsertAfterLastAssemblyAttributeOrAppend(assemblyInfoVersionRegex' fileContents' assemblyInfoVersionString' assemblyInfoFile.Extension' ref appendedAttributes); " is 184.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                //If noFetch is enabled' then GitVersion will assume that the git repository is normalized before execution' so that fetching from remotes is not required. " is 155.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                    log.Info("Skipping fetching' if GitVersion does not calculate your version as expected you might need to allow fetching or use dynamic repositories"); " is 150.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                    log.Info($"Head has moved from '{expectedBranchName} | {expectedSha}' => '{newExpectedBranchName} | {newExpectedSha}'' allowed since this is a dynamic repository"); " is 164.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                log.Info(string.Format("Local Refs:\r\n" + string.Join(System.Environment.NewLine' repo.Refs.FromGlob("*").Select(r => $"{r.CanonicalName} ({r.TargetIdentifier})")))); " is 167.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                // In order to decide whether a fake branch is required or not' first check to see if any local branches have the same commit SHA of the head SHA. " is 146.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                    ? localBranchesWhereCommitShaIsHead.SingleOrDefault(b => b.CanonicalName.Replace("/heads/"' "/") == currentBranch.Replace("/heads/"' "/")) " is 138.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                        var branchesWithoutSeparators = localBranchesWhereCommitShaIsHead.Where(b => !b.FriendlyName.Contains('/') && !b.FriendlyName.Contains('-')).ToList(); " is 150.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "                            log.Warning($"Choosing {branchWithoutSeparator.CanonicalName} as it is the only branch without / or - in it. " + moveBranchMsg); " is 128.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,NormalizeGitDirectory,The length of the statement  "Please run `git {CreateGitLogArgs(100)}` and submit it along with your build log (with personal info removed) in a new issue at https://github.com/GitTools/GitVersion"); " is 169.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,CreateGitLogArgs,The length of the statement  "            return @"log --graph --format=""%h %cr %d"" --decorate --date=relative --all --remotes=*" + (maxCommits != null ? $" -n {maxCommits}" : null); " is 142.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,Fetch,The length of the statement  "            log.Info($"Fetching from remote '{remote.Name}' using the following refspecs: {string.Join("' "' remote.FetchRefSpecs.Select(r => r.Specification))}."); " is 152.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,EnsureLocalBranchExistsForCurrentBranch,The length of the statement  "            var localCanonicalName = !isRef ? "refs/heads/" + currentBranch : isBranch ? currentBranch : currentBranch.Replace("refs/"' "refs/heads/"); " is 139.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,CreateFakeBranchPointingAtThePullRequestTip,The length of the statement  "                var message = $"Found more than one remote tip from remote '{remote.Url}' pointing at the commit '{headTipSha}'. Unable to determine which one to use ({names})."; " is 162.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,CreateFakeBranchPointingAtThePullRequestTip,The length of the statement  "            var fakeBranchName = canonicalName.Replace("refs/pull/"' "refs/heads/pull/").Replace("refs/pull-requests/"' "refs/heads/pull-requests/"); " is 137.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,CreateOrUpdateLocalBranchesFromRemoteTrackingOnes,The length of the statement  "            foreach (var remoteTrackingReference in repo.Refs.FromGlob(prefix + "*").Where(r => r.CanonicalName != remoteHeadCanonicalName)) " is 128.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,CreateOrUpdateLocalBranchesFromRemoteTrackingOnes,The length of the statement  "                repo.Refs.Add(localCanonicalName' new ObjectId(remoteTrackingReference.ResolveToDirectReference().TargetIdentifier)' true); " is 123.
Long Statement,GitVersion.Helpers,GitRepositoryHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\GitRepositoryHelper.cs,EnsureOnlyOneRemoteIsDefined,The length of the statement  "            var message = $"{howMany} remote(s) have been detected. When being run on a build server' the Git repository is expected to bear one (and no more than one) remote."; " is 165.
Long Statement,GitVersion.Helpers,StringFormatWithExtension,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\StringFormatWith.cs,FormatWith,The length of the statement  "                    var components = (memberAccessExpression.Contains("??")) ? memberAccessExpression.Split(new[] { "??" }' StringSplitOptions.None) : null; " is 136.
Long Statement,GitVersion.Logging,Log,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Logging\Log.cs,IndentLog,The length of the statement  "                Write(Verbosity.Normal' LogLevel.Info' string.Format(CultureInfo.InvariantCulture' "End: {0} (Took: {1:N}ms)"' operationDescription' DateTime.Now.Subtract(start).TotalMilliseconds)); " is 182.
Long Statement,GitVersion.Logging,Log,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Logging\Log.cs,FormatMessage,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "{0}{1} [{2:MM/dd/yy H:mm:ss:ff}] {3}"' indent' level' DateTime.Now' obscuredMessage); " is 137.
Long Statement,GitVersion.OutputVariables,VariableProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,The length of the statement  "            var isContinuousDeploymentMode = config.VersioningMode == VersioningMode.ContinuousDeployment && !isCurrentCommitTagged; " is 120.
Long Statement,GitVersion.OutputVariables,VariableProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VariableProvider.cs,GetVariablesFor,The length of the statement  "                    semanticVersion.PreReleaseTag.Name = nextVersionCalculator.GetBranchSpecificTag(config' semanticVersion.BuildMetaData.Branch' null); " is 132.
Long Statement,GitVersion.OutputVariables,VersionVariables,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\OutputVariables\VersionVariables.cs,GetEnumerator,The length of the statement  "                .Where(p => p.PropertyType == type && !p.GetIndexParameters().Any() && !p.GetCustomAttributes(typeof(ReflectionIgnoreAttribute)' false).Any()) " is 142.
Long Statement,GitVersion.VersionCalculation,BaseVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the statement  "                    var oldest = matchingVersionsOnceIncremented.Aggregate((v1' v2) => v1.Version.BaseVersionSource.Committer.When < v2.Version.BaseVersionSource.Committer.When ? v1 : v2); " is 168.
Long Statement,GitVersion.VersionCalculation,BaseVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculator.cs,GetBaseVersion,The length of the statement  "                    log.Info($"Found multiple base versions which will produce the same SemVer ({maxVersion.IncrementedVersion})' taking oldest source for commit counting ({baseVersionWithOldestSource.Source})"); " is 192.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,GetMainline,The length of the statement  "            log.Info($"Multiple mainlines ({string.Join("' "' possibleMainlineBranches.Select(b => b.FriendlyName))}) have the same merge base for the current branch' choosing {chosenMainline.FriendlyName} because we found that branch first..."); " is 234.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,IncrementForEachCommit,The length of the statement  "                log.Info($"Direct commit on master {directCommit.Sha} incremented base versions {directCommitIncrement}' now {mainlineVersion}"); " is 129.
Long Statement,GitVersion.VersionCalculation,MainlineVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\MainlineVersionCalculator.cs,GetMergedHead,The length of the statement  "                throw new NotSupportedException("Mainline development does not support more than one merge source in a single commit yet"); " is 123.
Long Statement,GitVersion.VersionCalculation,NextVersionCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\NextVersionCalculator.cs,FindVersion,The length of the statement  "            var preReleaseTagDoesNotMatchConfiguration = hasPreReleaseTag && branchConfigHasPreReleaseTagConfigured && semver.PreReleaseTag.Name != context.Configuration.Tag; " is 162.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,BaseVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\BaseVersion.cs,ToString,The length of the statement  "            return $"{Source}: {SemanticVersion.ToString("f")} with commit count source {(BaseVersionSource == null ? "External Source" : BaseVersionSource.Sha)} (Incremented: {(ShouldIncrement ? BaseVersionCalculator.MaybeIncrement(context' this).ToString("t") : "None")})"; " is 263.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,ConfigNextVersionVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\ConfigNextVersionVersionStrategy.cs,GetVersions,The length of the statement  "            yield return new BaseVersion(context' "NextVersion in GitVersion configuration file"' false' semanticVersion' null' null); " is 122.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,FallbackVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\FallbackVersionStrategy.cs,GetVersions,The length of the statement  "                throw new GitVersionException($"Can't find commit {currentBranchTip.Sha}. Please ensure that the repository is an unshallow clone with `git fetch --unshallow`."' exception); " is 173.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,FallbackVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\FallbackVersionStrategy.cs,GetVersions,The length of the statement  "            yield return new BaseVersion(context' "Fallback base version"' false' new SemanticVersion(minor : 1)' baseVersionSource' null); " is 127.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,MergeMessageVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\MergeMessageVersionStrategy.cs,GetVersions,The length of the statement  "                        context.Log.Info($"Found commit [{context.CurrentCommit.Sha}] matching merge message format: {mergeMessage.FormatName}"); " is 121.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,MergeMessageVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\MergeMessageVersionStrategy.cs,GetVersions,The length of the statement  "                            new BaseVersion(context' $"{MergeMessageStrategyPrefix} '{c.Message.Trim()}'"' shouldIncrement' mergeMessage.Version' c' null) " is 126.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,TaggedCommitVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\TaggedCommitVersionStrategy.cs,GetTaggedVersions,The length of the statement  "            var allTags = gitRepoMetadataProvider.GetValidVersionTags(context.Repository' context.Configuration.GitTagPrefix' olderThan);  " is 125.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,TaggedCommitVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\TaggedCommitVersionStrategy.cs,CreateBaseVersion,The length of the statement  "            var baseVersion = new BaseVersion(context' FormatSource(version)' shouldUpdateVersion' version.SemVer' version.Commit' null); " is 125.
Long Statement,GitVersion.VersionCalculation.BaseVersionCalculators,VersionInBranchNameVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\VersionInBranchNameVersionStrategy.cs,GetVersions,The length of the statement  "                yield return new BaseVersion(context' "Version in branch name"' false' versionInBranch.Item2' commitBranchWasBranchedFrom.Commit' branchNameOverride); " is 150.
Long Statement,GitVersion.VersioningModes,ContinuousDeliveryMode,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersioningModes\ContinuousDeliveryMode.cs,RetrieveMostRecentOptionalTagVersion,The length of the statement  "                var preReleaseVersion = applicableTagsInDescendingOrder.Select(tag => SemanticVersion.Parse(tag.FriendlyName' context.Configuration.GitTagPrefix)).FirstOrDefault(); " is 164.
Complex Conditional,GitVersion,GitRepoMetadataProvider,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitRepoMetadataProvider.cs,GetBranchesContainingCommit,The conditional expression  "branch.Tip != null && branch.Tip.Sha != commit.Sha || (onlyTrackedBranches && !branch.IsTracking)"  is complex.
Complex Conditional,GitVersion.Extensions,StringExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\StringExtensions.cs,ArgumentRequiresValue,The conditional expression  "argumentMightRequireValue && argumentIndex == 0 && argument.StartsWith("/") && Path.DirectorySeparatorChar == '/' && argument.IsValidPath()"  is complex.
Empty Catch Block,GitVersion.Configuration.Init.SetConfig,ConfigureBranches,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\ConfigureBranches.cs,HandleResult,The method has an empty catch block.
Empty Catch Block,GitVersion.Helpers,ProcessHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\ProcessHelper.cs,Start,The method has an empty catch block.
Empty Catch Block,GitVersion.Helpers,ChangeErrorMode,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\ProcessHelper.cs,Dispose,The method has an empty catch block.
Empty Catch Block,GitVersion.Logging,FileAppender,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Logging\FileAppender.cs,WriteTo,The method has an empty catch block.
Magic Number,GitVersion,BranchCommit,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BranchCommit.cs,GetHashCode,The following statement contains a magic number: return ((Branch != null ? Branch.GetHashCode() : 0) * 397) ^ (Commit != null ? Commit.GetHashCode() : 0);
Magic Number,GitVersion,GitVersionFinder,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\GitVersionFinder.cs,EnsureHeadIsNotDetached,The following statement contains a magic number: var message = string.Format(                  "It looks like the branch being examined is a detached Head pointing to commit '{0}'. " +                  "Without a proper branch name GitVersion cannot determine the build version."'                  context.CurrentCommit.Id.ToString(7));
Magic Number,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Minor;
Magic Number,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Patch;
Magic Number,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PreReleaseTag != null ? PreReleaseTag.GetHashCode() : 0);
Magic Number,GitVersion,SemanticVersion,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersion.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (BuildMetaData != null ? BuildMetaData.GetHashCode() : 0);
Magic Number,GitVersion,SemanticVersionBuildMetaData,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionBuildMetaData.cs,ToString,The following statement contains a magic number: var padding = 4;
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: var padding = 4;
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: int.TryParse(format.Substring(2)' out var p)
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,ToString,The following statement contains a magic number: format.Length > 2
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,FormatLegacy,The following statement contains a magic number: return $"{tag.Substring(0' 20 - number.Length)}{number}";
Magic Number,GitVersion,SemanticVersionPreReleaseTag,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\SemanticVersioning\SemanticVersionPreReleaseTag.cs,FormatLegacy,The following statement contains a magic number: tag.Length + number.Length > 20
Magic Number,GitVersion.BuildServers,AzurePipelines,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\BuildServers\AzurePipelines.cs,GenerateSetVersionMessage,The following statement contains a magic number: var buildNumber = variables.FullSemVer.EndsWith("+0")                                  ? variables.FullSemVer.Substring(0' variables.FullSemVer.Length - 2)                                  : variables.FullSemVer;
Magic Number,GitVersion.Cache,GitVersionCache,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Cache\GitVersionCache.cs,WriteVariablesToDiskCache,The following statement contains a magic number: var retryOperation = new OperationWithExponentialBackoff<IOException>(new ThreadSleep()' log' WriteCacheOperation' maxRetries: 6);
Magic Number,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The following statement contains a magic number: parentCount == 2
Magic Number,GitVersion.Configuration,BranchConfigurationCalculator,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\BranchConfigurationCalculator.cs,InheritBranchConfiguration,The following statement contains a magic number: possibleParents = context.RepositoryMetadataProvider.GetBranchesContainingCommit(targetBranch.Tip' branchesToEvaluate' true)                          // It fails to inherit Increment branch configuration if more than 1 parent;                          // therefore no point to get more than 2 parents                          .Take(2)                          .ToList();
Magic Number,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The following statement contains a magic number: config.LegacySemVerPadding ??= 4;
Magic Number,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The following statement contains a magic number: config.BuildMetaDataPadding ??= 4;
Magic Number,GitVersion.Configuration,ConfigExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\ConfigExtensions.cs,Reset,The following statement contains a magic number: config.CommitsSinceVersionSourcePadding ??= 4;
Magic Number,GitVersion.Helpers,LambdaEqualityHelper<T>,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\LambdaEqualityHelper.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (item != null ? item.GetHashCode() : 0);
Magic Number,GitVersion.Helpers,OperationWithExponentialBackoff<T>,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\OperationWithExponentialBackoff.cs,ExecuteAsync,The following statement contains a magic number: var sleepMSec = 500;
Magic Number,GitVersion.Helpers,OperationWithExponentialBackoff<T>,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\OperationWithExponentialBackoff.cs,ExecuteAsync,The following statement contains a magic number: sleepMSec *= 2;
Magic Number,GitVersion.Logging,Log,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Logging\Log.cs,IndentLog,The following statement contains a magic number: return Disposable.Create(() =>              {                  var length = indent.Length - 2;                  indent = length > 0 ? indent.Substring(0' length) : indent;                  Write(Verbosity.Normal' LogLevel.Info' string.Format(CultureInfo.InvariantCulture' "End: {0} (Took: {1:N}ms)"' operationDescription' DateTime.Now.Subtract(start).TotalMilliseconds));              });
Magic Number,GitVersion.VersionCalculation.BaseVersionCalculators,MergeMessageVersionStrategy,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\VersionCalculation\BaseVersionCalculators\MergeMessageVersionStrategy.cs,Inner,The following statement contains a magic number: mergeCommit.Parents.Count() < 2
Missing Default,GitVersion.Configuration.Init.BuildServer,AppveyorPublicPrivate,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppveyorPublicPrivate.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(StepFactory.CreateStep<EditConfigStep>());                      return StepResult.Ok();                  case "1":                      steps.Enqueue(StepFactory.CreateStep<AppVeyorSetup>().WithData(ProjectVisibility.Public));                      return StepResult.Ok();                  case "2":                      steps.Enqueue(StepFactory.CreateStep<AppVeyorSetup>().WithData(ProjectVisibility.Private));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.BuildServer,AppVeyorSetup,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\AppVeyorSetup.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "1":                      GenerateBasicConfig(workingDirectory);                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "2":                      GenerateNuGetConfig(workingDirectory);                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.BuildServer,SetupBuildScripts,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\BuildServer\SetupBuildScripts.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(StepFactory.CreateStep<EditConfigStep>());                      return StepResult.Ok();                  case "1":                      steps.Enqueue(StepFactory.CreateStep<AppveyorPublicPrivate>());                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init,EditConfigStep,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\EditConfigStep.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      return StepResult.SaveAndExit();                  case "1":                      return StepResult.ExitWithoutSaving();                    case "2":                      steps.Enqueue(StepFactory.CreateStep<PickBranchingStrategyStep>());                      return StepResult.Ok();                    case "3":                      steps.Enqueue(StepFactory.CreateStep<SetNextVersion>());                      return StepResult.Ok();                    case "4":                      steps.Enqueue(StepFactory.CreateStep<ConfigureBranches>());                      return StepResult.Ok();                  case "5":                      var editConfigStep = StepFactory.CreateStep<EditConfigStep>();                      steps.Enqueue(StepFactory.CreateStep<GlobalModeSetting>().WithData(editConfigStep' false));                      return StepResult.Ok();                  case "6":                      steps.Enqueue(StepFactory.CreateStep<AssemblyVersioningSchemeSetting>());                      return StepResult.Ok();                  case "7":                      steps.Enqueue(StepFactory.CreateStep<SetupBuildScripts>());                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,AssemblyVersioningSchemeSetting,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\AssemblyVersioningSchemeSetting.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "1":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.Major;                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "2":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinor;                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "3":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinorPatch;                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "4":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.MajorMinorPatchTag;                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();                  case "5":                      config.AssemblyVersioningScheme = AssemblyVersioningScheme.None;                      steps.Enqueue(editConfigStep);                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,ConfigureBranch,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\ConfigureBranch.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(StepFactory.CreateStep<ConfigureBranches>());                      return StepResult.Ok();                  case "1":                      steps.Enqueue(StepFactory.CreateStep<SetBranchTag>().WithData(name' branchConfig));                      return StepResult.Ok();                  case "2":                      steps.Enqueue(StepFactory.CreateStep<SetBranchIncrementMode>().WithData(name' branchConfig));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,GlobalModeSetting,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\GlobalModeSetting.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "1":                      config.VersioningMode = VersioningMode.ContinuousDelivery;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "2":                      config.VersioningMode = VersioningMode.ContinuousDeployment;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "3":                      config.VersioningMode = VersioningMode.Mainline;                      steps.Enqueue(returnToStep);                      return StepResult.Ok();                  case "0":                  case "4":                      steps.Enqueue(returnToStep);                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.SetConfig,SetBranchIncrementMode,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\SetConfig\SetBranchIncrementMode.cs,HandleResult,The following switch statement is missing a default case: switch (result)              {                  case "0":                      steps.Enqueue(configureBranchStep.WithData(name' branchConfig));                      return StepResult.Ok();                  case "1":                      branchConfig.VersioningMode = VersioningMode.ContinuousDelivery;                      steps.Enqueue(configureBranchStep.WithData(name' branchConfig));                      return StepResult.Ok();                  case "2":                      branchConfig.VersioningMode = VersioningMode.ContinuousDeployment;                      steps.Enqueue(configureBranchStep.WithData(name' branchConfig));                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy1Step,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy1Step.cs,HandleResult,The following switch statement is missing a default case: switch (result.ToLower())              {                  case "y":                      Console.Write(@"Because you need to maintain multiple versions of your product in production at the same time' GitFlow is likely a good fit.    GitFlow allows you to have new development happening on the 'develop' branch' patch issues in old minor versions with 'hotfix/' branches and support old major versions with 'support/' branches");                      steps.Enqueue(StepFactory.CreateStep<PickBranchingStrategyStep>());                      return StepResult.Ok();                  case "n":                      steps.Enqueue(StepFactory.CreateStep<PickBranchingStrategy2Step>());                      return StepResult.Ok();              }
Missing Default,GitVersion.Configuration.Init.Wizard,PickBranchingStrategy2Step,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Configuration\Init\Wizard\PickBranchingStrategy2Step.cs,HandleResult,The following switch statement is missing a default case: switch (result.ToLower())              {                  case "y":                      Console.WriteLine("GitFlow is likely a good fit' the 'develop' branch can be used " +                                        "for active development while stabilising the next release.");                      Console.WriteLine();                      Console.WriteLine("GitHubFlow is designed for a lightweight workflow where master is always " +                                        "good to deploy to production and feature branches are used to stabilise " +                                        "features' once stable they are merged to master and made available in the next release");                      steps.Enqueue(StepFactory.CreateStep<PickBranchingStrategyStep>());                      return StepResult.Ok();                  case "n":                      steps.Enqueue(StepFactory.CreateStep<PickBranchingStrategy3Step>());                      return StepResult.Ok();              }
Missing Default,GitVersion.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Extensions\EnumerableExtensions.cs,OnlyOrDefault,The following switch statement is missing a default case: switch (source)              {                  case null:                      throw new ArgumentNullException(nameof(source));                  case IList<T> list when list.Count == 1:                      return list[0];              }
Missing Default,GitVersion.Helpers,ProcessHelper,C:\research\architectureSmells\repos\Particular_GitVersion\src\GitVersionCore\Helpers\ProcessHelper.cs,Start,The following switch statement is missing a default case: switch ((NativeErrorCode)exception.NativeErrorCode)                          {                              case NativeErrorCode.Success:                                  // Success is not a failure.                                  break;                                case NativeErrorCode.FileNotFound:                                  throw new FileNotFoundException($"The executable file '{startInfo.FileName}' could not be found."'                                      startInfo.FileName'                                      exception);                                case NativeErrorCode.PathNotFound:                                  throw new DirectoryNotFoundException($"The path to the executable file '{startInfo.FileName}' could not be found."'                                      exception);                          }
