Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Framework,Assert,C:\repos\mono_olive\nunit20\framework\Assert.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework,Assert,C:\repos\mono_olive\nunit20\framework\Assert.cs,IsNumericType,Cyclomatic complexity of the method is 23
Long Parameter List,NUnit.Framework,Assert,C:\repos\mono_olive\nunit20\framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\repos\mono_olive\nunit20\framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\repos\mono_olive\nunit20\framework\Assert.cs,FailArraysNotEqual,The method has 5 parameters. Parameters: index' expected' actual' message' args
Long Parameter List,NUnit.Framework,AssertionFailureMessage,C:\repos\mono_olive\nunit20\framework\AssertionFailureMessage.cs,FormatMessageForFailArraysNotEqual,The method has 5 parameters. Parameters: index' expected' actual' message' args
Complex Conditional,NUnit.Framework,AssertionFailureMessage,C:\repos\mono_olive\nunit20\framework\AssertionFailureMessage.cs,InputsAreStrings,The conditional expression  "null != expected  &&  				null != actual    &&  				expected is string &&  				actual   is string"  is complex.
Magic Number,NUnit.Framework,AssertionFailureMessage,C:\repos\mono_olive\nunit20\framework\AssertionFailureMessage.cs,BuildArraysDifferentMessage,The following statement contains a magic number: if ( index < expected.Length && index < actual.Length )  			{  				if( InputsAreStrings( expected.GetValue(index)' actual.GetValue(index) ) )  				{  					BuildStringsDifferentMessage(   						sbOutput'   						(string)expected.GetValue(index)'   						(string)actual.GetValue(index) );  				}  				else  				{  					AppendExpectedAndActual( sbOutput' expected.GetValue(index)' actual.GetValue(index) );  				}  			}  			else if( expected.Length < actual.Length )  			{  				sbOutput.Append( NewLine );  				sbOutput.Append( "   extra:<" );  				DisplayElements( sbOutput' actual' index' 3 );  				sbOutput.Append( ">" );  			}  			else  			{  				sbOutput.Append( NewLine );  				sbOutput.Append( " missing:<" );  				DisplayElements( sbOutput' expected' index' 3 );  				sbOutput.Append( ">" );  			}
Magic Number,NUnit.Framework,AssertionFailureMessage,C:\repos\mono_olive\nunit20\framework\AssertionFailureMessage.cs,BuildArraysDifferentMessage,The following statement contains a magic number: if ( index < expected.Length && index < actual.Length )  			{  				if( InputsAreStrings( expected.GetValue(index)' actual.GetValue(index) ) )  				{  					BuildStringsDifferentMessage(   						sbOutput'   						(string)expected.GetValue(index)'   						(string)actual.GetValue(index) );  				}  				else  				{  					AppendExpectedAndActual( sbOutput' expected.GetValue(index)' actual.GetValue(index) );  				}  			}  			else if( expected.Length < actual.Length )  			{  				sbOutput.Append( NewLine );  				sbOutput.Append( "   extra:<" );  				DisplayElements( sbOutput' actual' index' 3 );  				sbOutput.Append( ">" );  			}  			else  			{  				sbOutput.Append( NewLine );  				sbOutput.Append( " missing:<" );  				DisplayElements( sbOutput' expected' index' 3 );  				sbOutput.Append( ">" );  			}
