Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NUnit.Core,Reflect,C:\repos\mono_olive\nunit20\core\Reflect.cs,CheckSetUpTearDownSignature,The length of the statement  "				if ( !method.IsPublic && !method.IsFamily || method.IsStatic || method.ReturnType != typeof(void) || method.GetParameters().Length > 0 ) " is 136.
Long Statement,NUnit.Core,TestFixture,C:\repos\mono_olive\nunit20\core\TestFixture.cs,Initialize,The length of the statement  "				MethodInfo [] methods = fixtureType.GetMethods(BindingFlags.Public|BindingFlags.Instance|BindingFlags.Static|BindingFlags.NonPublic); " is 133.
Complex Conditional,NUnit.Core,Reflect,C:\repos\mono_olive\nunit20\core\Reflect.cs,IsObsoleteTestMethod,The conditional expression  "attribute is SetUpAttribute ||  						attribute is TestFixtureSetUpAttribute ||  						attribute is TearDownAttribute ||   						attribute is TestFixtureTearDownAttribute"  is complex.
Complex Conditional,NUnit.Core,Reflect,C:\repos\mono_olive\nunit20\core\Reflect.cs,CheckSetUpTearDownSignature,The conditional expression  "!method.IsPublic && !method.IsFamily || method.IsStatic || method.ReturnType != typeof(void) || method.GetParameters().Length > 0"  is complex.
Virtual Method Call from Constructor,NUnit.Core,TestEventArgs,C:\repos\mono_olive\nunit20\core\TestEventArgs.cs,TestEventArgs,The constructor "TestEventArgs" calls a virtual method "CountTestCases".
Empty Catch Block,NUnit.Core,TestRunnerThread,C:\repos\mono_olive\nunit20\core\TestRunnerThread.cs,TestRunnerThread,The method has an empty catch block.
Magic Number,NUnit.Core,Reflect,C:\repos\mono_olive\nunit20\core\Reflect.cs,CheckSetUpTearDownMethod,The following statement contains a magic number: if ( count > 1 )  			{  				string attributeName = attributeType.Name;  				if ( attributeName.EndsWith( "Attribute" ) )  					attributeName = attributeName.Substring(   						0' attributeName.Length - 9 );    				throw new InvalidTestFixtureException(   					string.Format( "{0} has multiple {1} methods"'  					fixtureType.Name' attributeName ) );  			}
