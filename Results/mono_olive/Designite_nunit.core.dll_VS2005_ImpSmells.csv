Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The method has 105 lines of code.
Complex Method,NUnit.Core,LegacySuite,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\LegacySuite.cs,LegacySuite,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Core,NUnitFramework,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\NUnitFramework.cs,ApplyCommonAttributes,Cyclomatic complexity of the method is 17
Complex Method,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,Cyclomatic complexity of the method is 29
Complex Method,NUnit.Core,TestSuiteBuilder,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\TestSuiteBuilder.cs,Build,Cyclomatic complexity of the method is 10
Long Parameter List,NUnit.Core,TestSuite,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\TestSuite.cs,MarkTestsNotRun,The method has 6 parameters. Parameters: tests' runState' ignoreReason' suiteResult' listener' filter
Long Parameter List,NUnit.Core,TestSuite,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\TestSuite.cs,MarkTestNotRun,The method has 6 parameters. Parameters: test' runState' ignoreReason' suiteResult' listener' filter
Long Statement,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The length of the statement  "                    nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001; " is 121.
Long Statement,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The length of the statement  "                    nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001; " is 121.
Long Statement,NUnit.Core.Builders,AbstractFixtureBuilder,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\Builders\AbstractFixtureBuilder.cs,GetCandidateTestMethods,The length of the statement  "			return fixtureType.GetMethods( BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static ); " is 124.
Complex Conditional,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The conditional expression  "rt.Version.Major == version.Major &&  					 rt.Version.Minor == version.Minor &&  				   ( version.Build == -1 || rt.Version.Build == version.Build ) &&  				   ( version.Revision == -1 || rt.Version.Revision == version.Revision )"  is complex.
Complex Conditional,NUnit.Core.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\Builders\NUnitTestCaseBuilder.cs,CanBuildFrom,The conditional expression  "regex.Match(method.Name).Success   					&& !NUnitFramework.IsSetUpMethod( method )  					&& !NUnitFramework.IsTearDownMethod( method )  					&& !NUnitFramework.IsFixtureSetUpMethod( method )  					&& !NUnitFramework.IsFixtureTearDownMethod( method )"  is complex.
Complex Conditional,NUnit.Core.Builders,NUnitTestFixtureBuilder,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\Builders\NUnitTestFixtureBuilder.cs,CheckSetUpTearDownMethod,The conditional expression  "theMethod.IsStatic ||                      theMethod.IsAbstract ||                      !theMethod.IsPublic && !theMethod.IsFamily ||                      theMethod.GetParameters().Length != 0 ||                      !theMethod.ReturnType.Equals(typeof(void))"  is complex.
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: fileHeader = peHeader + 4;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: optionalHeader = fileHeader + 20;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: dataDirectory = optionalHeader + 96;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: fs.Position += 12;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: fs.Position += 8;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,CalcHeaderOffsets,The following statement contains a magic number: fs.Position += 16;
Magic Number,NUnit.Core,AssemblyReader,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\AssemblyReader.cs,DataDirectoryRva,The following statement contains a magic number: fs.Position = dataDirectory + n * 8;
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,PlatformHelper,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )  			{  				case "WIN":  				case "WIN32":  					nameOK = os.Platform.ToString().StartsWith( "Win" );  					break;  				case "WIN32S":  					nameOK = os.Platform == PlatformID.Win32S;  					break;  				case "WIN32WINDOWS":  					nameOK = os.Platform == PlatformID.Win32Windows;  					break;  				case "WIN32NT":  					nameOK = os.Platform == PlatformID.Win32NT;  					break;  				case "WINCE":  					nameOK = (int)os.Platform == 3;  // Not defined in .NET 1.0  					break;  				case "WIN95":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 0;  					break;  				case "WIN98":   					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 10;  					break;  				case "WINME":  					nameOK = os.Platform == PlatformID.Win32Windows && os.Version.Major == 4 && os.Version.Minor == 90;  					break;  				case "NT3":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 3;  					break;  				case "NT4":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 4;  					break;  				case "NT5":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5;  					break;  				case "WIN2K":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 0;  					break;  				case "WINXP":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 1;  					break;  				case "WIN2003SERVER":  					nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 5 && os.Version.Minor == 2;  					break;                  case "NT6":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6;                      break;                  // TODO: Distinguish Vista SP1 from Server 2008                  case "VISTA":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build != 6001;                      break;                  case "WIN2008SERVER":                      nameOK = os.Platform == PlatformID.Win32NT && os.Version.Major == 6 && os.Version.Minor == 0 && os.Version.Build == 6001;                      break;  				case "UNIX":  				case "LINUX":  					nameOK = os.Platform == UnixPlatformID_Microsoft                            || os.Platform == UnixPlatformID_Mono;  					break;  				case "NET":  					nameOK = rt.Runtime == RuntimeType.Net;  					break;  				case "NETCF":  					nameOK = rt.Runtime == RuntimeType.NetCF;  					break;  				case "SSCLI":  				case "ROTOR":  					nameOK = rt.Runtime == RuntimeType.SSCLI;  					break;  				case "MONO":  					nameOK = rt.Runtime == RuntimeType.Mono;  					// Special handling because Mono 1.0 profile has version 1.1  					if ( versionSpecification == "1.0" )  						versionSpecification = "1.1";  					break;  				default:  					throw new ArgumentException( "Invalid platform name"' platform.ToString() );  			}
Magic Number,NUnit.Core,TestFixtureBuilder,C:\research\architectureSmells\repos\mono_olive\nunit24\NUnitCore\core\TestFixtureBuilder.cs,GetAssemblyPath,The following statement contains a magic number: path[start] == '/' && path[start+2] == ':'
