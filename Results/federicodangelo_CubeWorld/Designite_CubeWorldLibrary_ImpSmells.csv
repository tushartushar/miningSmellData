Implementation smell,Namespace,Class,File,Method,Description
Long Method,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,ParseTileRule,The method has 178 lines of code.
Long Method,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,CreateGenerator,The method has 126 lines of code.
Complex Method,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,Cyclomatic complexity of the method is 15
Complex Method,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteVerticalMovement,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,Cyclomatic complexity of the method is 8
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,SetTileType,Cyclomatic complexity of the method is 10
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,MoveTile,Cyclomatic complexity of the method is 13
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,SetTileOnFire,Cyclomatic complexity of the method is 10
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,SetTileDynamic,Cyclomatic complexity of the method is 8
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,UpdateTiles,Cyclomatic complexity of the method is 12
Complex Method,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,CubeWorld.Tiles.Rules,TileRuleExplode,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleExplode.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,Cyclomatic complexity of the method is 11
Complex Method,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Generator,DepositWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\DepositWorldGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Generator,HoleWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\HoleWorldGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,Cyclomatic complexity of the method is 8
Complex Method,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,Cyclomatic complexity of the method is 13
Complex Method,CubeWorld.World.Generator,SmoothWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\SmoothWorldGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,InitLuminance,Cyclomatic complexity of the method is 10
Complex Method,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,Cyclomatic complexity of the method is 11
Complex Method,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,Cyclomatic complexity of the method is 9
Complex Method,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,Cyclomatic complexity of the method is 8
Complex Method,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,Cyclomatic complexity of the method is 9
Long Parameter List,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,Parse,The method has 5 parameters. Parameters: miscConfigTxt' tilesConfigTxt' avatarsConfigTxt' itemsConfigTxt' generatorsConfigTxt
Long Parameter List,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,GetLowerLevel,The method has 5 parameters. Parameters: dir' tileManager' tile' pos' minLevel
Long Parameter List,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,FindFall,The method has 6 parameters. Parameters: dir' tileManager' tile' pos' nearDirection' nearDistance
Long Parameter List,CubeWorld.Tiles.Rules,TileRuleSetDynamic,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleSetDynamic.cs,TileRuleSetDynamic,The method has 5 parameters. Parameters: delta' value' gravity' timeout' condition
Long Parameter List,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The method has 6 parameters. Parameters: world' from' fwd' maxDistance' ignoreNonSolid' ignoreNonClickable
Long Parameter List,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,CaveCellWorldGenerator,The method has 5 parameters. Parameters: iterationsRV' minRadiusRV' maxRadiusRV' minDepthRV' maxDepthRV
Long Parameter List,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,CaveWorldGenerator,The method has 5 parameters. Parameters: iterationsRV' minRadiusRV' maxRadiusRV' fromYRV' toYRV
Long Parameter List,CubeWorld.World.Generator,DepositWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\DepositWorldGenerator.cs,DepositWorldGenerator,The method has 8 parameters. Parameters: fromYRV' toYRV' iterationsRV' minRadiusRV' maxRadiusRV' overTile' tileType' allowEmptyAbove
Long Parameter List,CubeWorld.World.Generator,HoleWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\HoleWorldGenerator.cs,HoleWorldGenerator,The method has 5 parameters. Parameters: iterationsRV' minRadiusRV' maxRadiusRV' minDepthRV' maxDepthRV
Long Parameter List,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The method has 8 parameters. Parameters: x' y' width' height' c1' c2' c3' c4
Long Parameter List,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The method has 5 parameters. Parameters: minParticlesRV' maxParticlesRV' minDropsRV' maxDropsRV' tileType
Long Parameter List,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,PerlinNoise2WorldGenerator,The method has 5 parameters. Parameters: fromYRV' toYRV' octaves' freq' tileType
Long Parameter List,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,MultiFractal,The method has 8 parameters. Parameters: x' y' octaves' amplitude' frequency' h' lacunarity' offset
Long Parameter List,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,FBM,The method has 7 parameters. Parameters: x' y' octaves' amplitude' frequency' h' lacunarity
Long Parameter List,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,dot,The method has 5 parameters. Parameters: g' x' y' z' w
Long Parameter List,CubeWorld.World.Generator,PerlinNoiseWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoiseWorldGenerator.cs,PerlinNoiseWorldGenerator,The method has 5 parameters. Parameters: fromYRV' toYRV' octaves' freq' tileType
Long Parameter List,CubeWorld.World.Generator,PerlinNoiseWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoiseWorldGenerator.cs,GetRandomHeight,The method has 8 parameters. Parameters: X' Y' MaxHeight' Frequency' Amplitude' Persistance' Octaves' Seed
Long Parameter List,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,TreeWorldGenerator,The method has 11 parameters. Parameters: minRV' maxRV' minTrunkHeight' maxTrunkHeight' minLeavesHeight' maxLeavesHeight' minLeavesRadius' maxLeavesRadius' overTileType' tileTypeTrunk' tileTypeLeaves
Long Parameter List,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,FreeSpaceAvailable,The method has 6 parameters. Parameters: x' y' z' radius' height' world
Long Parameter List,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,CreateTree,The method has 7 parameters. Parameters: treeX' treeY' treeZ' trunkHeight' leavesHeight' leavesRadius' world
Long Identifier,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,,The length of the parameter pendingSectorsUpdateOrderValid is 30.
Long Identifier,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,,The length of the parameter pendingSectorsUpdateLightOrderValid is 35.
Long Statement,CubeWorld.Avatars,AvatarManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\AvatarManager.cs,IsTileBlockedByAnyAvatar,The length of the statement  "                TilePosition tileMin = Graphics.Vector3ToTilePosition(avatar.position - new Vector3(Graphics.QUART_TILE_SIZE' Graphics.QUART_TILE_SIZE' Graphics.QUART_TILE_SIZE)); " is 163.
Long Statement,CubeWorld.Avatars,AvatarManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\AvatarManager.cs,IsTileBlockedByAnyAvatar,The length of the statement  "                TilePosition tileMax = Graphics.Vector3ToTilePosition(avatar.position + new Vector3(Graphics.QUART_TILE_SIZE' Graphics.TILE_SIZE + Graphics.QUART_TILE_SIZE' Graphics.QUART_TILE_SIZE)); " is 184.
Long Statement,CubeWorld.Avatars,Player,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Player.cs,ResetPosition,The length of the statement  "            while (world.tileManager.GetTileType(new TilePosition(resetPosition.x' top' resetPosition.z)) != TileDefinition.EMPTY_TILE_TYPE) " is 128.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.x = Graphics.FloatToTilePosition(avatar.position.x + deltaMov.x - Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.x = Graphics.FloatToTilePosition(avatar.position.x + deltaMov.x + Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.z = Graphics.FloatToTilePosition(avatar.position.z + deltaMov.z - Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.z = Graphics.FloatToTilePosition(avatar.position.z + deltaMov.z + Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.x = Graphics.FloatToTilePosition(avatar.position.x + deltaMov.x - Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.x = Graphics.FloatToTilePosition(avatar.position.x + deltaMov.x + Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.z = Graphics.FloatToTilePosition(avatar.position.z + deltaMov.z - Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The length of the statement  "                            avatarNew.z = Graphics.FloatToTilePosition(avatar.position.z + deltaMov.z + Graphics.HALF_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 127.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,IsCeilingAbove,The length of the statement  "                nearDelta.x = near.x = Graphics.FloatToTilePosition(avatar.position.x + x * Graphics.QUART_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 128.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,IsCeilingAbove,The length of the statement  "                    nearDelta.z = near.z = Graphics.FloatToTilePosition(avatar.position.z + z * Graphics.QUART_TILE_SIZE * PLAYER_BORDER_TOLERANCE); " is 128.
Long Statement,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteVerticalMovement,The length of the statement  "            bool insideWater = (avatar.world.tileManager.IsValidTile(playerPosition) && avatar.world.tileManager.GetTileLiquid(playerPosition) == true); " is 140.
Long Statement,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,AddTileUpdateRule,The length of the statement  "                            TileActionRule.ActionType tileActionType = (TileActionRule.ActionType)System.Enum.Parse(typeof(TileActionRule.ActionType)' " is 122.
Long Statement,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The length of the statement  "                    Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true); " is 135.
Long Statement,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientConnected,The length of the statement  "            MultiplayerAction initialDataAction = new MultiplayerAction(MultiplayerAction.Action.INITIAL_DATA' GetInitialData(client' player)); " is 131.
Long Statement,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The length of the statement  "                    int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None); " is 167.
Long Statement,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,SendActions,The length of the statement  "                    bytesSent = tcpClient.Client.Send(currentDataToSend' currentDataToSendOffset' currentDataToSend.Length - currentDataToSendOffset' SocketFlags.None); " is 148.
Long Statement,CubeWorld.Items.Components,ItemComponentGoToPlayer,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Items\Components\ItemComponentGoToPlayer.cs,Update,The length of the statement  "            Vector3 vectorToPlayer = item.position - (item.world.avatarManager.player.position + new Vector3(0' Player.HEAD_POSITION * 0.5f' 0)); " is 133.
Long Statement,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,CreateSector,The length of the statement  "            TilePosition sectorOffset = new TilePosition(posSector.x << SECTOR_SIZE_BITS' posSector.y << SECTOR_SIZE_BITS' posSector.z << SECTOR_SIZE_BITS); " is 144.
Long Statement,CubeWorld.Tiles.Components,TileComponentGravity,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Components\TileComponentGravity.cs,Fall,The length of the statement  "                    bool insideWater = (tile.world.tileManager.IsValidTile(tilePos) && tile.world.tileManager.GetTileLiquid(tilePos) == true); " is 122.
Long Statement,CubeWorld.Tiles.Components,TileComponentGravity,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Components\TileComponentGravity.cs,IsAvatarBelow,The length of the statement  "            return tile.world.avatarManager.IsTileBlockedByAnyAvatar(new TilePosition(tile.tilePosition.x' yBelow' tile.tilePosition.z)); " is 125.
Long Statement,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The length of the statement  "            if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid) " is 132.
Long Statement,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The length of the statement  "                                    bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType; " is 125.
Long Statement,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The length of the statement  "                                    bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType; " is 125.
Long Statement,CubeWorld.World,CubeWorld,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\CubeWorld.cs,LoadMultiplayer,The length of the statement  "            Player player = (Player) avatarManager.CreateAvatar(avatarManager.GetAvatarDefinitionById("player")' playerObjectId' new Vector3()' false); " is 139.
Long Statement,CubeWorld.World,CubeWorldStats,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\CubeWorldStats.cs,ToString,The length of the statement  "            return "ER: " + executedRules + " ' IT: " + invalidatedTiles + " ' UT: " + updatedTiles + " ' CC: " + checkedConditions; " is 120.
Long Statement,CubeWorld.World.Generator,DepositWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\DepositWorldGenerator.cs,Generate,The length of the statement  "                                    if (allowEmptyAbove || y == tileManager.sizeY || tileManager.GetTileType(new TilePosition(x' y + 1' z)) != TileDefinition.EMPTY_TILE_TYPE) " is 138.
Long Statement,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The length of the statement  "            map[mapDimension / 2' mapDimension / 2] = map[0' 0] + map[0' mapDimension] + map[mapDimension' 0] + map[mapDimension' mapDimension] / 4; " is 136.
Long Statement,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The length of the statement  "						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);; " is 127.
Long Statement,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The length of the statement  "						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);; " is 129.
Long Statement,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,smoothrandom,The length of the statement  "            double corners = (randomnumber(x - 1' y - 1) + randomnumber(x + 1' y - 1) + randomnumber(x - 1' y + 1) + randomnumber(x + 1' y + 1)) / 16; " is 138.
Long Statement,CubeWorld.World.Generator,PerlinNoiseWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoiseWorldGenerator.cs,GenerateNoise,The length of the statement  "            Noise = new float[MAX_WIDTH' MAX_HEIGHT];    //Create the noise table where MAX_WIDTH and MAX_HEIGHT are set to some value>0 " is 124.
Long Statement,CubeWorld.World.Lights,DayCycleManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\DayCycleManager.cs,Update,The length of the statement  "                    newLuminance = (byte)(((int)Tile.MAX_LUMINANCE) * (sourcePercent + (targetPercent - sourcePercent) * normalizedDeltaTime) / 100); " is 129.
Long Statement,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The length of the statement  "					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE)) " is 128.
Complex Conditional,CubeWorld.Avatars,AvatarManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\AvatarManager.cs,IsTileBlockedByAnyAvatar,The conditional expression  "tile.x >= tileMin.x && tile.x <= tileMax.x &&                      tile.y >= tileMin.y && tile.y <= tileMax.y &&                      tile.z >= tileMin.z && tile.z <= tileMax.z"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The conditional expression  "avatar.world.tileManager.IsValidTile(avatarNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarNew) ||                              avatar.world.tileManager.IsValidTile(avatarHeadNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarHeadNew)"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The conditional expression  "avatar.world.tileManager.IsValidTile(avatarNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarNew) ||                              avatar.world.tileManager.IsValidTile(avatarHeadNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarHeadNew)"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The conditional expression  "avatar.world.tileManager.IsValidTile(avatarNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarNew) ||                              avatar.world.tileManager.IsValidTile(avatarHeadNew) == false ||                              avatar.world.tileManager.GetTileSolid(avatarHeadNew)"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The conditional expression  "deltaMov.x < 0.0f && avatarActual.x < 0 || deltaMov.x > 0.0f && avatarActual.x >= avatar.world.sizeX"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,ExecuteHorizontalMovement,The conditional expression  "deltaMov.z < 0.0f && avatarActual.z < 0 || deltaMov.z > 0.0f && avatarActual.z >= avatar.world.sizeZ"  is complex.
Complex Conditional,CubeWorld.Avatars.Components,AvatarComponentPhysics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentPhysics.cs,IsCeilingAbove,The conditional expression  "avatar.world.tileManager.IsValidTile(near) && avatar.world.tileManager.GetTileSolid(near) ||                          avatar.world.tileManager.IsValidTile(nearDelta) && avatar.world.tileManager.GetTileSolid(nearDelta)"  is complex.
Complex Conditional,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The conditional expression  "serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT"  is complex.
Complex Conditional,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,Update,The conditional expression  "(pendingSectorsUpdate.Count > 0 || pendingSectorsUpdateLight.Count > 0) &&   				(DateTime.Now.Ticks - start < ticksInMillisecond * 10 || updateRounds < 8)"  is complex.
Complex Conditional,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,FindFall,The conditional expression  "tileManager.IsValidTile(posNear) &&                       (tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE ||                       tileManager.GetTileType(posNear) == tile.tileType && tileManager.GetTileExtraData(posNear) != 0)"  is complex.
Complex Conditional,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The conditional expression  "tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null))"  is complex.
Complex Conditional,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The conditional expression  "axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0"  is complex.
Complex Conditional,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The conditional expression  "axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0"  is complex.
Complex Conditional,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The conditional expression  "x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false"  is complex.
Complex Conditional,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,InitLuminance,The conditional expression  "x > 0 && tileManager.GetTileAmbientLuminance(pos + new TilePosition(-1' 0' 0)) == 0 ||                              x < tileManager.sizeX - 1 && tileManager.GetTileAmbientLuminance(pos + new TilePosition(1' 0' 0)) == 0 ||                              z > 0 && tileManager.GetTileAmbientLuminance(pos + new TilePosition(0' 0' -1)) == 0 ||                              z < tileManager.sizeZ - 1 && tileManager.GetTileAmbientLuminance(pos + new TilePosition(0' 0' 1)) == 0"  is complex.
Complex Conditional,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The conditional expression  "(tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE)"  is complex.
Virtual Method Call from Constructor,CubeWorld.World.Generator,GeneratorProcess,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\GeneratorProcess.cs,GeneratorProcess,The constructor "GeneratorProcess" calls a virtual method "Prepare".
Virtual Method Call from Constructor,CubeWorld.World.Generator,GeneratorProcess,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\GeneratorProcess.cs,GeneratorProcess,The constructor "GeneratorProcess" calls a virtual method "GetTotalCost".
Empty Catch Block,CubeWorld.Gameplay.Multiplayer,MultiplayerServer,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerServer.cs,Clear,The method has an empty catch block.
Empty Catch Block,CubeWorld.Gameplay.Multiplayer,MultiplayerServer,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerServer.cs,Clear,The method has an empty catch block.
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,GetAttributeVector3Value,The following statement contains a magic number: if (string.IsNullOrEmpty(x.GetAttribute(name)) == false)              {                  string[] s = x.GetAttribute(name).Split(''');                  return new Vector3(                      float.Parse(s[0]' System.Globalization.CultureInfo.InvariantCulture)'                      float.Parse(s[1]' System.Globalization.CultureInfo.InvariantCulture)'                      float.Parse(s[2]' System.Globalization.CultureInfo.InvariantCulture));              }
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,GetAttributeVector3Value,The following statement contains a magic number: return new Vector3(                  float.Parse(s[0]' System.Globalization.CultureInfo.InvariantCulture)'                  float.Parse(s[1]' System.Globalization.CultureInfo.InvariantCulture)'                  float.Parse(s[2]' System.Globalization.CultureInfo.InvariantCulture));
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,GetAttributeTilePositionValue,The following statement contains a magic number: return new TilePosition(                  int.Parse(s[0])'                  int.Parse(s[1])'                  int.Parse(s[2]));
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,ParseTileDefinition,The following statement contains a magic number: tile.materials = new int[6];
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,ParseTileDefinition,The following statement contains a magic number: if (materials.Length == 1)              {                  for (int i = 0; i < 6; i++)                      tile.materials[i] = int.Parse(materials[0]);              }              else if (materials.Length == 6)              {                  for (int i = 0; i < materials.Length; i++)                      tile.materials[i] = int.Parse(materials[i]);              }              else              {                  throw new System.Exception("Invalid number of materials in tile " + tile.id);              }
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,ParseTileDefinition,The following statement contains a magic number: if (materials.Length == 1)              {                  for (int i = 0; i < 6; i++)                      tile.materials[i] = int.Parse(materials[0]);              }              else if (materials.Length == 6)              {                  for (int i = 0; i < materials.Length; i++)                      tile.materials[i] = int.Parse(materials[i]);              }              else              {                  throw new System.Exception("Invalid number of materials in tile " + tile.id);              }
Magic Number,CubeWorld.Configuration,ConfigParserXML,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Configuration\ConfigParserXML.cs,ParseVisualDefinition,The following statement contains a magic number: visualDefinition.scale = GetAttributeIntValue(visualDefinitionXML' "scale"' 16);
Magic Number,CubeWorld.Gameplay,BaseGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BaseGameplay.cs,GetPlayerResetPosition,The following statement contains a magic number: return new TilePosition(                      world.sizeX / 2'                      world.tileManager.GetTopPosition(world.sizeX / 2' world.sizeZ / 2)'                      world.sizeZ / 2);
Magic Number,CubeWorld.Gameplay,BaseGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BaseGameplay.cs,GetPlayerResetPosition,The following statement contains a magic number: return new TilePosition(                      world.sizeX / 2'                      world.tileManager.GetTopPosition(world.sizeX / 2' world.sizeZ / 2)'                      world.sizeZ / 2);
Magic Number,CubeWorld.Gameplay,BaseGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BaseGameplay.cs,GetPlayerResetPosition,The following statement contains a magic number: return new TilePosition(                      world.sizeX / 2'                      world.tileManager.GetTopPosition(world.sizeX / 2' world.sizeZ / 2)'                      world.sizeZ / 2);
Magic Number,CubeWorld.Gameplay,BaseGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BaseGameplay.cs,GetPlayerResetPosition,The following statement contains a magic number: return new TilePosition(                      world.sizeX / 2'                      world.tileManager.GetTopPosition(world.sizeX / 2' world.sizeZ / 2)'                      world.sizeZ / 2);
Magic Number,CubeWorld.Gameplay,BaseGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BaseGameplay.cs,FillPlayerInventory,The following statement contains a magic number: foreach (TileDefinition tileDefinition in world.tileManager.tileDefinitions)              {                  if (tileDefinition.tileType != TileDefinition.EMPTY_TILE_TYPE)                  {                      DynamicTile dynamicTile = new DynamicTile(world' tileDefinition' -1);                        InventoryEntry ie = new InventoryEntry();                      ie.position = 0;                      ie.quantity = 10;                      ie.cwobject = dynamicTile;                        inventory.entries.Add(ie);                  }              }
Magic Number,CubeWorld.Gameplay,BasicEnemiesGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\BasicEnemiesGameplay.cs,WorldCreated,The following statement contains a magic number: AddRandomEnemies(40);
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,Update,The following statement contains a magic number: if (initializationDataReceived)                  client.Update(999);              else                  client.Update(1);
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,Init,The following statement contains a magic number: server = new MultiplayerServer(9999' this' this);
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following statement contains a magic number: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveFirstByte,The following statement contains a magic number: if (tcpClient.Client.Available > 0)              {                  byte[] buffer = new byte[1];                    if (tcpClient.Client.Receive(buffer) == 1)                  {                      firstByte = false;                        if (buffer[0] == 1)                      {                          sendingPolicy = false;                          server.ClientAccepted(this' false);                      }                      else                      {                          sendingPolicy = true;                          server.ClientAccepted(this' true);                          tcpClient.Client.Send(Encoding.UTF8.GetBytes(PolicyString));                          tcpClient.Client.LingerState = new LingerOption(true' 20);                          tcpClient.Client.BeginDisconnect(false' new AsyncCallback(DisconnectCallback)' null);                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,ReceiveActions,The following statement contains a magic number: while (tcpClient.Client.Available > 0 && limitActions > 0)              {                  if (currentDataToReceive == null)                  {                      if (tcpClient.Client.Available >= 4)                      {                          byte[] dataSizeBuffer = new byte[4];                          tcpClient.Client.Receive(dataSizeBuffer' 0' 4' SocketFlags.None);                          int dataSize =                              (dataSizeBuffer[0] << 0) |                              (dataSizeBuffer[1] << 8) |                              (dataSizeBuffer[2] << 16) |                              (dataSizeBuffer[3] << 24);                            if (serverSide == true && dataSize > MAX_SERVER_SIDE_DATA_AMOUNT ||                              serverSide == false && dataSize > MAX_CLIENT_SIDE_DATA_AMOUNT)                          {                              throw new Exception("Invalid amount of data to receive [" + dataSize + "]");                          }                            currentDataToReceive = new byte[dataSize];                          currentDataToReceiveOffset = 0;                      }                      else                      {                          return;                      }                  }                    if (currentDataToReceive != null)                  {                      int bytesRead = tcpClient.Client.Receive(currentDataToReceive' currentDataToReceiveOffset' currentDataToReceive.Length - currentDataToReceiveOffset' SocketFlags.None);                      if (bytesRead < 0)                          throw new Exception("Socket Read Bytes < 0");                        currentDataToReceiveOffset += bytesRead;                        if (currentDataToReceiveOffset == currentDataToReceive.Length)                      {                          MultiplayerAction action = MultiplayerProtocol.Deserialize(currentDataToReceive);                            stats.receivedActions[(int)action.action]++;                            clientListener.ClientActionReceived(this' action);                            currentDataToReceive = null;                            limitActions--;                      }                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,SendActions,The following statement contains a magic number: if (currentDataToSend == null)              {                  if (actionsQueue.Count > 0)                  {                      List<byte> bytesToSend = new List<byte>();                        foreach (MultiplayerAction action in actionsQueue)                      {                          stats.sentActions[(int)action.action]++;                            byte[] data = MultiplayerProtocol.Serialize(action);                            bytesToSend.Add((byte)((data.Length >> 0) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 8) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 16) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 24) & 0xFF));                          bytesToSend.AddRange(data);                      }                        currentDataToSend = bytesToSend.ToArray();                      currentDataToSendOffset = 0;                        actionsQueue.Clear();                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,SendActions,The following statement contains a magic number: if (currentDataToSend == null)              {                  if (actionsQueue.Count > 0)                  {                      List<byte> bytesToSend = new List<byte>();                        foreach (MultiplayerAction action in actionsQueue)                      {                          stats.sentActions[(int)action.action]++;                            byte[] data = MultiplayerProtocol.Serialize(action);                            bytesToSend.Add((byte)((data.Length >> 0) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 8) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 16) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 24) & 0xFF));                          bytesToSend.AddRange(data);                      }                        currentDataToSend = bytesToSend.ToArray();                      currentDataToSendOffset = 0;                        actionsQueue.Clear();                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerClient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerClient.cs,SendActions,The following statement contains a magic number: if (currentDataToSend == null)              {                  if (actionsQueue.Count > 0)                  {                      List<byte> bytesToSend = new List<byte>();                        foreach (MultiplayerAction action in actionsQueue)                      {                          stats.sentActions[(int)action.action]++;                            byte[] data = MultiplayerProtocol.Serialize(action);                            bytesToSend.Add((byte)((data.Length >> 0) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 8) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 16) & 0xFF));                          bytesToSend.Add((byte)((data.Length >> 24) & 0xFF));                          bytesToSend.AddRange(data);                      }                        currentDataToSend = bytesToSend.ToArray();                      currentDataToSendOffset = 0;                        actionsQueue.Clear();                  }              }
Magic Number,CubeWorld.Gameplay.Multiplayer,MultiplayerServer,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\Multiplayer\MultiplayerServer.cs,Update,The following statement contains a magic number: foreach (MultiplayerClient client in clients)              {                  try                  {                      if (client.Update(999) == false)                          clientsToRemove.Add(client);                  }                  catch (Exception ex)                  {                      clientsToRemove.Add(client);                      CWConsole.LogError(ex.ToString());                  }              }
Magic Number,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,Update,The following statement contains a magic number: long ticksInMillisecond = 10000;
Magic Number,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,Update,The following statement contains a magic number: while ((pendingSectorsUpdate.Count > 0 || pendingSectorsUpdateLight.Count > 0) &&   				(DateTime.Now.Ticks - start < ticksInMillisecond * 10 || updateRounds < 8))              {                  if (pendingSectorsUpdate.Count > 0)                  {                      Sector sectorToUpdate = pendingSectorsUpdate[pendingSectorsUpdate.Count - 1];                      pendingSectorsUpdate.RemoveAt(pendingSectorsUpdate.Count - 1);                      sectorToUpdate.UpdateMesh();                      sectorToUpdate.insideInvalidateSectorQueue = false;                  }                    if (pendingSectorsUpdateLight.Count > 0)                  {                      Sector sectorToUpdate = pendingSectorsUpdateLight[pendingSectorsUpdateLight.Count - 1];                      pendingSectorsUpdateLight.RemoveAt(pendingSectorsUpdateLight.Count - 1);                      sectorToUpdate.UpdateAmbientLight();                      sectorToUpdate.insideInvalidateLightQueue = false;                  }  				  				updateRounds++;              }
Magic Number,CubeWorld.Sectors,SectorManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Sectors\SectorManager.cs,Update,The following statement contains a magic number: while ((pendingSectorsUpdate.Count > 0 || pendingSectorsUpdateLight.Count > 0) &&   				(DateTime.Now.Ticks - start < ticksInMillisecond * 10 || updateRounds < 8))              {                  if (pendingSectorsUpdate.Count > 0)                  {                      Sector sectorToUpdate = pendingSectorsUpdate[pendingSectorsUpdate.Count - 1];                      pendingSectorsUpdate.RemoveAt(pendingSectorsUpdate.Count - 1);                      sectorToUpdate.UpdateMesh();                      sectorToUpdate.insideInvalidateSectorQueue = false;                  }                    if (pendingSectorsUpdateLight.Count > 0)                  {                      Sector sectorToUpdate = pendingSectorsUpdateLight[pendingSectorsUpdateLight.Count - 1];                      pendingSectorsUpdateLight.RemoveAt(pendingSectorsUpdateLight.Count - 1);                      sectorToUpdate.UpdateAmbientLight();                      sectorToUpdate.insideInvalidateLightQueue = false;                  }  				  				updateRounds++;              }
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Serialize,The following statement contains a magic number: return tileType | (luminance << 8) | (extra << 16) | (extra2 << 24);
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Serialize,The following statement contains a magic number: return tileType | (luminance << 8) | (extra << 16) | (extra2 << 24);
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Serialize,The following statement contains a magic number: return tileType | (luminance << 8) | (extra << 16) | (extra2 << 24);
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Deserialize,The following statement contains a magic number: luminance = (byte) ((data >> 8) & 0xFF);
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Deserialize,The following statement contains a magic number: extra = (byte) ((data >> 16) & 0xFF);
Magic Number,CubeWorld.Tiles,Tile,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Tile.cs,Deserialize,The following statement contains a magic number: extra2 = (byte) ((data >> 24) & 0xFF);
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Create,The following statement contains a magic number: this.ticks = (uint) new Random().Next(0' 100);
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: byte[] tileBytes = new byte[sizeX * sizeY * sizeZ * 4];
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Save,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{                  Tile tile = tiles[n];  				tile.Enqueued = false;  				  				tileBytes[(n << 2) | 0] = tile.tileType;  				tileBytes[(n << 2) | 1] = tile.luminance;  				tileBytes[(n << 2) | 2] = tile.extra;  				tileBytes[(n << 2) | 3] = tile.extra2;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: byte[] tileBytes = br.ReadBytes(sizeX * sizeY * sizeZ * 4);
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,TileManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Load,The following statement contains a magic number: for (int n = tiles.Length - 1; n >= 0; n--)  			{  				tile.tileType = mapTileDefinitionMapper[tileBytes[(n << 2) | 0]];  				tile.luminance = tileBytes[(n << 2) | 1];  				tile.extra = tileBytes[(n << 2) | 2];  				tile.extra2 = tileBytes[(n << 2) | 3];  				  				tiles[n] = tile;  			}
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,GetTotalCost,The following statement contains a magic number: return 5;
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Generate,The following statement contains a magic number: switch (generationStep)                  {                      case 0:                          world.tileManager.EnqueueTilesWithRules();                          world.tileManager.enqueueTileUpdates = true;                          generationStep++;                          break;                        case 1:                          if (world.tileManager.pendingTileUpdates.Count > 0 && initialIterations-- >= 0)                              world.tileManager.Update(TILE_UPDATE_STEP);                          else                              generationStep++;                          break;                        case 2:                          LightModelAmbient.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 3:                          LightModelLightSource.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 4:                          world.tileManager.updateLighting = true;                          world.tileManager.reportTileInvalidated = true;                            world.gameplay.WorldCreated();                          return true;                  }
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Generate,The following statement contains a magic number: switch (generationStep)                  {                      case 0:                          world.tileManager.EnqueueTilesWithRules();                          world.tileManager.enqueueTileUpdates = true;                          generationStep++;                          break;                        case 1:                          if (world.tileManager.pendingTileUpdates.Count > 0 && initialIterations-- >= 0)                              world.tileManager.Update(TILE_UPDATE_STEP);                          else                              generationStep++;                          break;                        case 2:                          LightModelAmbient.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 3:                          LightModelLightSource.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 4:                          world.tileManager.updateLighting = true;                          world.tileManager.reportTileInvalidated = true;                            world.gameplay.WorldCreated();                          return true;                  }
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Generate,The following statement contains a magic number: switch (generationStep)                  {                      case 0:                          world.tileManager.EnqueueTilesWithRules();                          world.tileManager.enqueueTileUpdates = true;                          generationStep++;                          break;                        case 1:                          if (world.tileManager.pendingTileUpdates.Count > 0 && initialIterations-- >= 0)                              world.tileManager.Update(TILE_UPDATE_STEP);                          else                              generationStep++;                          break;                        case 2:                          LightModelAmbient.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 3:                          LightModelLightSource.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 4:                          world.tileManager.updateLighting = true;                          world.tileManager.reportTileInvalidated = true;                            world.gameplay.WorldCreated();                          return true;                  }
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,ToString,The following statement contains a magic number: switch (generationStep)                  {                      case 0: return "Adding rules";                      case 1: return "Updating rules";                      case 2: return "Illuminating (1/2)";                      case 3: return "Illuminating (2/2)";                      case 4: return "Preparing";                  }
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,ToString,The following statement contains a magic number: switch (generationStep)                  {                      case 0: return "Adding rules";                      case 1: return "Updating rules";                      case 2: return "Illuminating (1/2)";                      case 3: return "Illuminating (2/2)";                      case 4: return "Preparing";                  }
Magic Number,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,ToString,The following statement contains a magic number: switch (generationStep)                  {                      case 0: return "Adding rules";                      case 1: return "Updating rules";                      case 2: return "Illuminating (1/2)";                      case 3: return "Illuminating (2/2)";                      case 4: return "Preparing";                  }
Magic Number,CubeWorld.Tiles,TilePosition,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TilePosition.cs,GetHashCode,The following statement contains a magic number: return x | (y << 8) | (z << 16);
Magic Number,CubeWorld.Tiles,TilePosition,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TilePosition.cs,GetHashCode,The following statement contains a magic number: return x | (y << 8) | (z << 16);
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Tiles.Rules,TileRuleLiquid,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\Rules\TileRuleLiquid.cs,Propagate,The following statement contains a magic number: if (tileManager.IsValidTile(posBelow) && (tileManager.GetTileType(posBelow) == TileDefinition.EMPTY_TILE_TYPE) || belowIsSameLiquid)              {                  if (belowIsSameLiquid == false)                  {                      tileManager.SetTileType(posBelow' tile.tileType);                      tileManager.SetTileExtraData(posBelow' 1);                  }              }              else              {                  if (level < maxLevel)                  {                      TilePosition[] nearDirection = new TilePosition[4];                        int[] nearDistance = new int[] { maxLevel' maxLevel' maxLevel' maxLevel };                        FindFall(new TilePosition(1' 0' 0)' tileManager' tile' pos' ref nearDirection[0]' ref nearDistance[0]);                      FindFall(new TilePosition(-1' 0' 0)' tileManager' tile' pos' ref nearDirection[1]' ref nearDistance[1]);                      FindFall(new TilePosition(0' 0' 1)' tileManager' tile' pos' ref nearDirection[2]' ref nearDistance[2]);                      FindFall(new TilePosition(0' 0' -1)' tileManager' tile' pos' ref nearDirection[3]' ref nearDistance[3]);                        int minNearDistance = Math.Min(Math.Min(Math.Min(nearDistance[0]' nearDistance[1])' nearDistance[2])' nearDistance[3]);                        if (minNearDistance != maxLevel)                      {                          for (int i = 0; i < 4; i++)                          {                              if (nearDistance[i] == minNearDistance)                              {                                  TilePosition posNear = pos + nearDirection[i];                                    if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                      else                      {                          foreach (TilePosition deltaPos in Manhattan.GetTilesAtDistance(1))                          {                              if (deltaPos.y == 0)                              {                                  TilePosition posNear = pos + deltaPos;                                  if (tileManager.IsValidTile(posNear) && tileManager.GetTileType(posNear) == TileDefinition.EMPTY_TILE_TYPE)                                  {                                      TilePosition posNearBelow = posNear + new TilePosition(0' -1' 0);                                      bool nearBelowIsSameLiquid = tileManager.IsValidTile(posNearBelow) && tileManager.GetTileType(posNearBelow) == tile.tileType;                                        if (nearBelowIsSameLiquid == false || belowIsSameLiquid == false)                                      {                                          tileManager.SetTileType(posNear' tile.tileType);                                          tileManager.SetTileExtraData(posNear' (byte)(level + 1));                                      }                                  }                              }                          }                      }                  }              }
Magic Number,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following statement contains a magic number: while (true)              {                  Vector3 near = pos;                    //Find near planes                  for (int d = 0; d < 3; d++)                  {                      near[d] = (float) Math.Round(near[d] / Graphics.TILE_SIZE) * Graphics.TILE_SIZE;                      near[d] += Graphics.HALF_TILE_SIZE * Math.Sign(fwd[d]);                  }                    //Calculate nearest plane                  float[] ns = new float[3];                    for (int d = 0; d < 3; d++)                  {                      if (fwd[d] != 0.0f)                          ns[d] = (near[d] - pos[d]) / fwd[d];                      else                          ns[d] = 1.0f;                  }                    float minN = ns[0];                  int lockedAxis = 0;                    for (int d = 1; d < 3; d++)                  {                      if (ns[d] < minN)                      {                          minN = ns[d];                          lockedAxis = d;                      }                  }                    //Advance until the border of the nearest plane                  pos += fwd * minN;                    if ((pos - from).magnitude >= maxDistance)                      break;                    //See what tile is there                  Vector3 d2 = new Vector3();                  d2[lockedAxis] = Math.Sign(fwd[lockedAxis]) * Graphics.QUART_TILE_SIZE;                    TilePosition cursorPosition = Graphics.Vector3ToTilePosition(pos + d2);                    //Advance a little to stop the next loop from selecting the same tile / border                  pos += fwd * Graphics.TILE_SIZE * 0.0001f;                      //Now validate what to do :-)                    if (tileManager.IsValidTile(cursorPosition))                  {                      byte tileType = tileManager.GetTileType(cursorPosition);                        if (tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null)))                      {                          switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }                            result.position = cursorPosition;                          result.hit = true;                          result.tile = tileManager.GetTile(cursorPosition);                          break;                      }                  }              }
Magic Number,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following statement contains a magic number: while (true)              {                  Vector3 near = pos;                    //Find near planes                  for (int d = 0; d < 3; d++)                  {                      near[d] = (float) Math.Round(near[d] / Graphics.TILE_SIZE) * Graphics.TILE_SIZE;                      near[d] += Graphics.HALF_TILE_SIZE * Math.Sign(fwd[d]);                  }                    //Calculate nearest plane                  float[] ns = new float[3];                    for (int d = 0; d < 3; d++)                  {                      if (fwd[d] != 0.0f)                          ns[d] = (near[d] - pos[d]) / fwd[d];                      else                          ns[d] = 1.0f;                  }                    float minN = ns[0];                  int lockedAxis = 0;                    for (int d = 1; d < 3; d++)                  {                      if (ns[d] < minN)                      {                          minN = ns[d];                          lockedAxis = d;                      }                  }                    //Advance until the border of the nearest plane                  pos += fwd * minN;                    if ((pos - from).magnitude >= maxDistance)                      break;                    //See what tile is there                  Vector3 d2 = new Vector3();                  d2[lockedAxis] = Math.Sign(fwd[lockedAxis]) * Graphics.QUART_TILE_SIZE;                    TilePosition cursorPosition = Graphics.Vector3ToTilePosition(pos + d2);                    //Advance a little to stop the next loop from selecting the same tile / border                  pos += fwd * Graphics.TILE_SIZE * 0.0001f;                      //Now validate what to do :-)                    if (tileManager.IsValidTile(cursorPosition))                  {                      byte tileType = tileManager.GetTileType(cursorPosition);                        if (tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null)))                      {                          switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }                            result.position = cursorPosition;                          result.hit = true;                          result.tile = tileManager.GetTile(cursorPosition);                          break;                      }                  }              }
Magic Number,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following statement contains a magic number: while (true)              {                  Vector3 near = pos;                    //Find near planes                  for (int d = 0; d < 3; d++)                  {                      near[d] = (float) Math.Round(near[d] / Graphics.TILE_SIZE) * Graphics.TILE_SIZE;                      near[d] += Graphics.HALF_TILE_SIZE * Math.Sign(fwd[d]);                  }                    //Calculate nearest plane                  float[] ns = new float[3];                    for (int d = 0; d < 3; d++)                  {                      if (fwd[d] != 0.0f)                          ns[d] = (near[d] - pos[d]) / fwd[d];                      else                          ns[d] = 1.0f;                  }                    float minN = ns[0];                  int lockedAxis = 0;                    for (int d = 1; d < 3; d++)                  {                      if (ns[d] < minN)                      {                          minN = ns[d];                          lockedAxis = d;                      }                  }                    //Advance until the border of the nearest plane                  pos += fwd * minN;                    if ((pos - from).magnitude >= maxDistance)                      break;                    //See what tile is there                  Vector3 d2 = new Vector3();                  d2[lockedAxis] = Math.Sign(fwd[lockedAxis]) * Graphics.QUART_TILE_SIZE;                    TilePosition cursorPosition = Graphics.Vector3ToTilePosition(pos + d2);                    //Advance a little to stop the next loop from selecting the same tile / border                  pos += fwd * Graphics.TILE_SIZE * 0.0001f;                      //Now validate what to do :-)                    if (tileManager.IsValidTile(cursorPosition))                  {                      byte tileType = tileManager.GetTileType(cursorPosition);                        if (tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null)))                      {                          switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }                            result.position = cursorPosition;                          result.hit = true;                          result.tile = tileManager.GetTile(cursorPosition);                          break;                      }                  }              }
Magic Number,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following statement contains a magic number: while (true)              {                  Vector3 near = pos;                    //Find near planes                  for (int d = 0; d < 3; d++)                  {                      near[d] = (float) Math.Round(near[d] / Graphics.TILE_SIZE) * Graphics.TILE_SIZE;                      near[d] += Graphics.HALF_TILE_SIZE * Math.Sign(fwd[d]);                  }                    //Calculate nearest plane                  float[] ns = new float[3];                    for (int d = 0; d < 3; d++)                  {                      if (fwd[d] != 0.0f)                          ns[d] = (near[d] - pos[d]) / fwd[d];                      else                          ns[d] = 1.0f;                  }                    float minN = ns[0];                  int lockedAxis = 0;                    for (int d = 1; d < 3; d++)                  {                      if (ns[d] < minN)                      {                          minN = ns[d];                          lockedAxis = d;                      }                  }                    //Advance until the border of the nearest plane                  pos += fwd * minN;                    if ((pos - from).magnitude >= maxDistance)                      break;                    //See what tile is there                  Vector3 d2 = new Vector3();                  d2[lockedAxis] = Math.Sign(fwd[lockedAxis]) * Graphics.QUART_TILE_SIZE;                    TilePosition cursorPosition = Graphics.Vector3ToTilePosition(pos + d2);                    //Advance a little to stop the next loop from selecting the same tile / border                  pos += fwd * Graphics.TILE_SIZE * 0.0001f;                      //Now validate what to do :-)                    if (tileManager.IsValidTile(cursorPosition))                  {                      byte tileType = tileManager.GetTileType(cursorPosition);                        if (tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null)))                      {                          switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }                            result.position = cursorPosition;                          result.hit = true;                          result.tile = tileManager.GetTile(cursorPosition);                          break;                      }                  }              }
Magic Number,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following statement contains a magic number: while (true)              {                  Vector3 near = pos;                    //Find near planes                  for (int d = 0; d < 3; d++)                  {                      near[d] = (float) Math.Round(near[d] / Graphics.TILE_SIZE) * Graphics.TILE_SIZE;                      near[d] += Graphics.HALF_TILE_SIZE * Math.Sign(fwd[d]);                  }                    //Calculate nearest plane                  float[] ns = new float[3];                    for (int d = 0; d < 3; d++)                  {                      if (fwd[d] != 0.0f)                          ns[d] = (near[d] - pos[d]) / fwd[d];                      else                          ns[d] = 1.0f;                  }                    float minN = ns[0];                  int lockedAxis = 0;                    for (int d = 1; d < 3; d++)                  {                      if (ns[d] < minN)                      {                          minN = ns[d];                          lockedAxis = d;                      }                  }                    //Advance until the border of the nearest plane                  pos += fwd * minN;                    if ((pos - from).magnitude >= maxDistance)                      break;                    //See what tile is there                  Vector3 d2 = new Vector3();                  d2[lockedAxis] = Math.Sign(fwd[lockedAxis]) * Graphics.QUART_TILE_SIZE;                    TilePosition cursorPosition = Graphics.Vector3ToTilePosition(pos + d2);                    //Advance a little to stop the next loop from selecting the same tile / border                  pos += fwd * Graphics.TILE_SIZE * 0.0001f;                      //Now validate what to do :-)                    if (tileManager.IsValidTile(cursorPosition))                  {                      byte tileType = tileManager.GetTileType(cursorPosition);                        if (tileType != TileDefinition.EMPTY_TILE_TYPE &&                          ((ignoreNonSolid == false || tileManager.GetTileSolid(cursorPosition) == true) ||                          (ignoreNonClickable == false &&                            tileManager.GetTileDefinition(tileType).GetRulesForAction(TileActionRule.ActionType.CLICKED) != null)))                      {                          switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }                            result.position = cursorPosition;                          result.hit = true;                          result.tile = tileManager.GetTile(cursorPosition);                          break;                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveCellWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveCellWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int startX = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int startZ = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                  int startY = tileManager.GetTopPosition(startX' startZ);                    int radius = minRadius;                    int dx = random.Next(32) - 16;                  int dy = -random.Next(8);                  int dz = random.Next(32) - 16;                    int xf = startX << 4;                  int yf = startY << 4;                  int zf = startZ << 4;                    int depth = random.Next(minDepth' maxDepth);                    for (int d = 0; d < depth; d++)                  {                      radius += random.Next(3) - 1;                        if (radius > maxRadius)                          radius = maxRadius;                      else if (radius < minRadius)                          radius = minRadius;                        TilePosition center = new TilePosition(xf >> 4' yf >> 4' zf >> 4);                        if (tileManager.IsValidTile(center - new TilePosition(radius + 1' radius + 1' radius + 1)) &&                          tileManager.IsValidTile(center + new TilePosition(radius + 1' radius + 1' radius + 1)))                      {                          for (int x = center.x - radius; x <= center.x + radius; x++)                              for (int y = center.y - radius; y <= center.y + radius; y++)                                  for (int z = center.z - radius; z <= center.z + radius; z++)                                      tileManager.SetTileType(new TilePosition(x' y' z)' 0);                      }                      else                          break;                        if (random.Next(0' 100) > 85)                      {                          dx = random.Next(32) - 16;                          dy = -random.Next(8);                          dz = random.Next(32) - 16;                      }                        xf += dx;                      yf += dy;                      zf += dz;                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,CaveWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\CaveWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  TilePosition center = new TilePosition(                      random.Next(maxRadius + 1' world.sizeX - maxRadius - 1)'                      random.Next(fromY' toY)'                      random.Next(maxRadius + 1' world.sizeZ - maxRadius - 1));                    TilePosition radius = new TilePosition(                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius)'                      random.Next(minRadius' maxRadius));                    TilePosition position = new TilePosition();                    int axis = random.Next(3);                    for (int a1 = center[axis] - radius[axis]; a1 <= center[axis] + radius[axis]; a1++)                  {                      position[axis] = a1;                        int axis2 = (axis + random.Next(2) + 1) % 3;                      int axis3;                      if (axis == 0 && axis2 == 2 || axis == 2 && axis2 == 0)                          axis3 = 1;                      else if (axis == 0 && axis2 == 1 || axis == 1 && axis2 == 0)                          axis3 = 2;                      else                          axis3 = 0;                        radius[axis2] += random.Next(5) - 2;                        if (radius[axis2] < minRadius)                          radius[axis2] = minRadius;                      else if (radius[axis2] > maxRadius)                          radius[axis2] = maxRadius;                        for (int a2 = center[axis2] - radius[axis2]; a2 <= center[axis2] + radius[axis2]; a2++)                      {                          position[axis2] = a2;                            radius[axis3] += random.Next(5) - 2;                            if (radius[axis3] < minRadius)                              radius[axis3] = minRadius;                          else if (radius[axis3] > maxRadius)                              radius[axis3] = maxRadius;                            for (int a3 = center[axis3] - radius[axis3]; a3 <= center[axis3] + radius[axis3]; a3++)                          {                              position[axis3] = a3;                                if (position[1] < fromY)                                  position[1] = fromY;                              else if (position[1] > toY)                                  position[1] = toY;                                tileManager.SetTileType(position' 0);                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,DepositWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\DepositWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int cx = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int cy = random.Next(maxRadius + 1' tileManager.sizeY - maxRadius - 1);                  int cz = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                    int radiusX = random.Next(minRadius' maxRadius);                  int radiusY = random.Next(minRadius' maxRadius);                  int radiusZ = random.Next(minRadius' maxRadius);                    for (int x = cx - radiusX; x < cx + radiusX; x++)                      for (int z = cz - radiusZ; z < cz + radiusZ; z++)                          for (int y = cy - radiusY; y < cy + radiusY; y++)                          {                              if (y >= fromY && y < toY)                              {                                  if (random.NextDouble() > 0.25)                                  {                                      if (allowEmptyAbove || y == tileManager.sizeY || tileManager.GetTileType(new TilePosition(x' y + 1' z)) != TileDefinition.EMPTY_TILE_TYPE)                                          if (tileManager.GetTileType(new TilePosition(x' y' z)) == overTile)                                              tileManager.SetTileType(new TilePosition(x' y' z)' tileType);                                  }                              }                          }              }
Magic Number,CubeWorld.World.Generator,GeneratorProcess,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\GeneratorProcess.cs,GetProgress,The following statement contains a magic number: if (totalCost != 0)                  return generator.GetCurrentCost() * 100 / totalCost;              else                  return 100;
Magic Number,CubeWorld.World.Generator,GeneratorProcess,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\GeneratorProcess.cs,GetProgress,The following statement contains a magic number: if (totalCost != 0)                  return generator.GetCurrentCost() * 100 / totalCost;              else                  return 100;
Magic Number,CubeWorld.World.Generator,HoleWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\HoleWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int cx = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int cz = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                    int radiusX = random.Next(minRadius' maxRadius);                  int radiusZ = random.Next(minRadius' maxRadius);                    int depth = random.Next(minDepth' maxDepth);                    int sum = 0;                    for (int x = cx - radiusX; x < cx + radiusX; x++)                      for (int z = cz - radiusZ; z < cz + radiusZ; z++)                          sum += tileManager.GetTopPosition(x' z);                    int avg = sum / (radiusX * 2 * radiusZ * 2);                    if (avg - depth > 1)                  {                      for (int x = cx - radiusX; x < cx + radiusX; x++)                      {                          for (int z = cz - radiusZ; z < cz + radiusZ; z++)                          {                              int y = tileManager.GetTopPosition(x' z);                                if (y > avg - depth)                              {                                  //Remove tiles                                  for (int dy = (avg - depth) + 1; dy <= y; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' 0);                              }                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,HoleWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\HoleWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int cx = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int cz = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                    int radiusX = random.Next(minRadius' maxRadius);                  int radiusZ = random.Next(minRadius' maxRadius);                    int depth = random.Next(minDepth' maxDepth);                    int sum = 0;                    for (int x = cx - radiusX; x < cx + radiusX; x++)                      for (int z = cz - radiusZ; z < cz + radiusZ; z++)                          sum += tileManager.GetTopPosition(x' z);                    int avg = sum / (radiusX * 2 * radiusZ * 2);                    if (avg - depth > 1)                  {                      for (int x = cx - radiusX; x < cx + radiusX; x++)                      {                          for (int z = cz - radiusZ; z < cz + radiusZ; z++)                          {                              int y = tileManager.GetTopPosition(x' z);                                if (y > avg - depth)                              {                                  //Remove tiles                                  for (int dy = (avg - depth) + 1; dy <= y; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' 0);                              }                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: int newWidth = width / 2;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: int newHeight = height / 2;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,DivideGrid,The following statement contains a magic number: if (width > 1 || height > 1)              {                  Middle = (c1 + c2 + c3 + c4) / 4 + Displace(newWidth + newHeight);	//Randomly displace the midpoint!                  Edge1 = (c1 + c2) / 2;	//Calculate the edges by averaging the two corners of each edge.                  Edge2 = (c2 + c3) / 2;                  Edge3 = (c3 + c4) / 2;                  Edge4 = (c4 + c1) / 2;                    //Make sure that the midpoint doesn't accidentally "randomly displaced" past the boundaries!                  if (Middle < 0)                  {                      Middle = 0;                  }                  else if (Middle > 1.0f)                  {                      Middle = 1.0f;                  }                    //Do the operation over again for each of the four new grids.			                  DivideGrid(x' y' newWidth' newHeight' c1' Edge1' Middle' Edge4);                  DivideGrid(x + newWidth' y' newWidth' newHeight' Edge1' c2' Edge2' Middle);                  DivideGrid(x + newWidth' y + newHeight' newWidth' newHeight' Middle' Edge2' c3' Edge3);                  DivideGrid(x' y + newHeight' newWidth' newHeight' Edge4' Middle' Edge3' c4);              }              else	//This is the "base case'" where each grid piece is less than the size of a pixel.              {                  //The four corners of the grid piece will be averaged and drawn as a single pixel.                  float c = (c1 + c2 + c3 + c4) / 4;                    map[(int)x' (int)y] = c;              }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = map[0' 0] + map[0' mapDimension] + map[mapDimension' 0] + map[mapDimension' mapDimension] / 4;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = map[0' 0] + map[0' mapDimension] + map[mapDimension' 0] + map[mapDimension' mapDimension] / 4;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = map[0' 0] + map[0' mapDimension] + map[mapDimension' 0] + map[mapDimension' mapDimension] / 4;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = normalize(map[mapDimension / 2' mapDimension / 2]);
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = normalize(map[mapDimension / 2' mapDimension / 2]);
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = normalize(map[mapDimension / 2' mapDimension / 2]);
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension / 2] = normalize(map[mapDimension / 2' mapDimension / 2]);
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: center = map[mapDimension / 2' mapDimension / 2];
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: center = map[mapDimension / 2' mapDimension / 2];
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension] = bl + br + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' mapDimension] = bl + br + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' 0] = tl + tr + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension / 2' 0] = tl + tr + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension' mapDimension / 2] = tr + br + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[mapDimension' mapDimension / 2] = tr + br + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[0' mapDimension / 2] = tl + bl + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,StartMidpointDisplacment,The following statement contains a magic number: map[0' mapDimension / 2] = tl + bl + center / 3;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: int newDimension = dimension / 2;
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,MidpointDisplacementWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\MidpointDisplacementWorldGenerator.cs,MidpointDisplacment,The following statement contains a magic number: if (newDimension > 1){  			    for(i = newDimension; i <= width; i += newDimension){  				    for(j = newDimension; j <= height; j += newDimension)                      {  					    int x = i - (newDimension / 2);                          int y = j - (newDimension / 2);      					  					    topLeft = map[i - newDimension' j - newDimension];   					    topRight = map[i'j - newDimension];  					    bottomLeft = map[i - newDimension'j];  					    bottomRight = map[i'j];      					  					    // Center				  					    map[x'y] = (topLeft + topRight + bottomLeft + bottomRight) / 4 + Displace(dimension);  					    map[x'y] = normalize(map[x'y]);  					    center = map[x'y];	      					  					    // Top  					    if(j - (newDimension * 2) + (newDimension / 2) > 0){  						    map[x'j - newDimension] = (topLeft + topRight + center + map[x'j - dimension + (newDimension / 2)]) / 4 + Displace(dimension);;  					    }else{  						    map[x'j - newDimension] = (topLeft + topRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j - newDimension] = normalize(map[x'j - newDimension]);      			  					    // Bottom  					    if(j + (newDimension / 2) < mapDimension){  						    map[x'j] = (bottomLeft + bottomRight + center + map[x'j + (newDimension / 2)]) / 4+ Displace(dimension);  					    }else{  						    map[x'j] = (bottomLeft + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[x'j] = normalize(map[x'j]);        					  					    //Right  					    if(i + (newDimension / 2) < mapDimension){  						    map[i'y] = (topRight + bottomRight + center + map[i + (newDimension / 2)'y]) / 4+ Displace(dimension);  					    }else{  						    map[i'y] = (topRight + bottomRight + center) / 3+ Displace(dimension);  					    }      					  					    map[i'y] = normalize(map[i'y]);      					  					    // Left  					    if(i - (newDimension * 2) + (newDimension / 2) > 0){  						    map[i - newDimension'y] = (topLeft + bottomLeft + center + map[i - dimension + (newDimension / 2)'y]) / 4 + Displace(dimension);;  					    }else{  						    map[i - newDimension'y] = (topLeft + bottomLeft + center) / 3+ Displace(dimension);  					    }      					  					    map[i - newDimension'y] = normalize(map[i - newDimension'y]);  				    }  			    }  			    MidpointDisplacment(newDimension);  		    }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The following statement contains a magic number: nearPositions = new int[3][];
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The following statement contains a magic number: nearPositions[0] = new int[3];
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The following statement contains a magic number: nearPositions[1] = new int[3];
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The following statement contains a magic number: nearPositions[2] = new int[3];
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,ParticleDepositionWorldGenerator,The following statement contains a magic number: nearPositions[2] = new int[3];
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < drops; i++)              {                  int x = generator.Next(2' tileManager.sizeX - 2);                  int z = generator.Next(2' tileManager.sizeZ - 2);                  sidesToCheck = generator.Next(3' 10);                    int particles = generator.Next(minParticlesRV.EvaluateInt(world)' maxParticlesRV.EvaluateInt(world));                    for (int j = 0; j < particles; j++)                      DropParticle(x' z' world);              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The following statement contains a magic number: while (x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false)              {                  int middleY = 0;                    for (int ax = -1; ax <= 1; ax++)                  {                      for (int az = -1; az <= 1; az++)                      {                          int topY = tileManager.GetTopPosition(x + ax' z + az);                          if (tileManager.GetTileType(new TilePosition(x + ax' topY' z + az)) != TileDefinition.EMPTY_TILE_TYPE)                              topY++;                            nearPositions[ax + 1][az + 1] = topY;                            if (ax == 0 && az == 0)                              middleY = topY;                      }                  }                    int finalY = middleY;                  int finalX = x;                  int finalZ = z;                    int from = generator.Next(9);                  bool finalPosition = true;                    for (int j = 0; j < sidesToCheck; j++)                  {                      int ax = (((j + from) % 9) % 3) - 1;                      int az = (((j + from) % 9) / 3) - 1;                        int y = nearPositions[ax + 1][az + 1];                      if (y < finalY)                      {                          finalX = x + ax;                          finalZ = z + az;                          finalY = y;                          finalPosition = false;                          break;                      }                  }                    if (finalY >= tileManager.sizeY)                      break;                    if (finalPosition)                  {                      tileManager.SetTileType(new TilePosition(finalX' finalY' finalZ)' tileType);                      particleDropped = true;                  }                  else                  {                      x = finalX;                      z = finalZ;                  }              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The following statement contains a magic number: while (x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false)              {                  int middleY = 0;                    for (int ax = -1; ax <= 1; ax++)                  {                      for (int az = -1; az <= 1; az++)                      {                          int topY = tileManager.GetTopPosition(x + ax' z + az);                          if (tileManager.GetTileType(new TilePosition(x + ax' topY' z + az)) != TileDefinition.EMPTY_TILE_TYPE)                              topY++;                            nearPositions[ax + 1][az + 1] = topY;                            if (ax == 0 && az == 0)                              middleY = topY;                      }                  }                    int finalY = middleY;                  int finalX = x;                  int finalZ = z;                    int from = generator.Next(9);                  bool finalPosition = true;                    for (int j = 0; j < sidesToCheck; j++)                  {                      int ax = (((j + from) % 9) % 3) - 1;                      int az = (((j + from) % 9) / 3) - 1;                        int y = nearPositions[ax + 1][az + 1];                      if (y < finalY)                      {                          finalX = x + ax;                          finalZ = z + az;                          finalY = y;                          finalPosition = false;                          break;                      }                  }                    if (finalY >= tileManager.sizeY)                      break;                    if (finalPosition)                  {                      tileManager.SetTileType(new TilePosition(finalX' finalY' finalZ)' tileType);                      particleDropped = true;                  }                  else                  {                      x = finalX;                      z = finalZ;                  }              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The following statement contains a magic number: while (x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false)              {                  int middleY = 0;                    for (int ax = -1; ax <= 1; ax++)                  {                      for (int az = -1; az <= 1; az++)                      {                          int topY = tileManager.GetTopPosition(x + ax' z + az);                          if (tileManager.GetTileType(new TilePosition(x + ax' topY' z + az)) != TileDefinition.EMPTY_TILE_TYPE)                              topY++;                            nearPositions[ax + 1][az + 1] = topY;                            if (ax == 0 && az == 0)                              middleY = topY;                      }                  }                    int finalY = middleY;                  int finalX = x;                  int finalZ = z;                    int from = generator.Next(9);                  bool finalPosition = true;                    for (int j = 0; j < sidesToCheck; j++)                  {                      int ax = (((j + from) % 9) % 3) - 1;                      int az = (((j + from) % 9) / 3) - 1;                        int y = nearPositions[ax + 1][az + 1];                      if (y < finalY)                      {                          finalX = x + ax;                          finalZ = z + az;                          finalY = y;                          finalPosition = false;                          break;                      }                  }                    if (finalY >= tileManager.sizeY)                      break;                    if (finalPosition)                  {                      tileManager.SetTileType(new TilePosition(finalX' finalY' finalZ)' tileType);                      particleDropped = true;                  }                  else                  {                      x = finalX;                      z = finalZ;                  }              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The following statement contains a magic number: while (x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false)              {                  int middleY = 0;                    for (int ax = -1; ax <= 1; ax++)                  {                      for (int az = -1; az <= 1; az++)                      {                          int topY = tileManager.GetTopPosition(x + ax' z + az);                          if (tileManager.GetTileType(new TilePosition(x + ax' topY' z + az)) != TileDefinition.EMPTY_TILE_TYPE)                              topY++;                            nearPositions[ax + 1][az + 1] = topY;                            if (ax == 0 && az == 0)                              middleY = topY;                      }                  }                    int finalY = middleY;                  int finalX = x;                  int finalZ = z;                    int from = generator.Next(9);                  bool finalPosition = true;                    for (int j = 0; j < sidesToCheck; j++)                  {                      int ax = (((j + from) % 9) % 3) - 1;                      int az = (((j + from) % 9) / 3) - 1;                        int y = nearPositions[ax + 1][az + 1];                      if (y < finalY)                      {                          finalX = x + ax;                          finalZ = z + az;                          finalY = y;                          finalPosition = false;                          break;                      }                  }                    if (finalY >= tileManager.sizeY)                      break;                    if (finalPosition)                  {                      tileManager.SetTileType(new TilePosition(finalX' finalY' finalZ)' tileType);                      particleDropped = true;                  }                  else                  {                      x = finalX;                      z = finalZ;                  }              }
Magic Number,CubeWorld.World.Generator,ParticleDepositionWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\ParticleDepositionWorldGenerator.cs,DropParticle,The following statement contains a magic number: while (x > 0 && z > 0 && x < tileManager.sizeX - 1 && z < tileManager.sizeZ - 1 && particleDropped == false)              {                  int middleY = 0;                    for (int ax = -1; ax <= 1; ax++)                  {                      for (int az = -1; az <= 1; az++)                      {                          int topY = tileManager.GetTopPosition(x + ax' z + az);                          if (tileManager.GetTileType(new TilePosition(x + ax' topY' z + az)) != TileDefinition.EMPTY_TILE_TYPE)                              topY++;                            nearPositions[ax + 1][az + 1] = topY;                            if (ax == 0 && az == 0)                              middleY = topY;                      }                  }                    int finalY = middleY;                  int finalX = x;                  int finalZ = z;                    int from = generator.Next(9);                  bool finalPosition = true;                    for (int j = 0; j < sidesToCheck; j++)                  {                      int ax = (((j + from) % 9) % 3) - 1;                      int az = (((j + from) % 9) / 3) - 1;                        int y = nearPositions[ax + 1][az + 1];                      if (y < finalY)                      {                          finalX = x + ax;                          finalZ = z + az;                          finalY = y;                          finalPosition = false;                          break;                      }                  }                    if (finalY >= tileManager.sizeY)                      break;                    if (finalPosition)                  {                      tileManager.SetTileType(new TilePosition(finalX' finalY' finalZ)' tileType);                      particleDropped = true;                  }                  else                  {                      x = finalX;                      z = finalZ;                  }              }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,Generate,The following statement contains a magic number: if (offInitialized == false)  			{  				Random rnd = new Random();  				offX = rnd.Next(0' 9999999);  				offY = rnd.Next(0' 9999999);  				offInitialized = true;  			}
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,Generate,The following statement contains a magic number: if (offInitialized == false)  			{  				Random rnd = new Random();  				offX = rnd.Next(0' 9999999);  				offY = rnd.Next(0' 9999999);  				offInitialized = true;  			}
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,Generate,The following statement contains a magic number: int midY = fromY + (toY - fromY) / 2;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,cosineinterpolation,The following statement contains a magic number: ft = x * 3.1415927;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,cosineinterpolation,The following statement contains a magic number: f = (1 - Math.Cos(ft)) * .5;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: int n = x + y * 57;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: n = (n << 13) ^ n;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: ret = (1 - ((n * (n * n * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: ret = (1 - ((n * (n * n * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: ret = (1 - ((n * (n * n * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: ret = (1 - ((n * (n * n * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,randomnumber,The following statement contains a magic number: ret = (1 - ((n * (n * n * 15731 + 789221) + 1376312589) & 2147483647) / 1073741824.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,smoothrandom,The following statement contains a magic number: double corners = (randomnumber(x - 1' y - 1) + randomnumber(x + 1' y - 1) + randomnumber(x - 1' y + 1) + randomnumber(x + 1' y + 1)) / 16;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,smoothrandom,The following statement contains a magic number: double sides = (randomnumber(x - 1' y) + randomnumber(x + 1' y) + randomnumber(x' y - 1) + randomnumber(x' y + 1)) / 8;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,smoothrandom,The following statement contains a magic number: double center = randomnumber(x' y) / 4;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,dot,The following statement contains a magic number: return g[0]*x + g[1]*y + g[2]*z;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,dot,The following statement contains a magic number: return g[0]*x + g[1]*y + g[2]*z + g[3]*w;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,dot,The following statement contains a magic number: return g[0]*x + g[1]*y + g[2]*z + g[3]*w;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: if (perm == null)  		  {  			  grad3 = new int[12][];  			  grad3[0] = new int[] {1'1'0};  			  grad3[1] = new int[] {-1'1'0};  			  grad3[2] = new int[] {1'-1'0};  			  grad3[3] = new int[] {-1'-1'0};  			  grad3[4] = new int[] {1'0'1};  			  grad3[5] = new int[] {-1'0'1};  			  grad3[6] = new int[] {1'0'-1};  			  grad3[7] = new int[] {-1'0'-1};  				grad3[8] = new int[] {0'1'1};  				grad3[9] = new int[] {0'-1'1};  				grad3[10] = new int[] {0'1'-1};  				grad3[11] = new int[] {0'-1'-1};  								   		p = new int[] {151'160'137'91'90'15'  		  131'13'201'95'96'53'194'233'7'225'140'36'103'30'69'142'8'99'37'240'21'10'23'  		  190' 6'148'247'120'234'75'0'26'197'62'94'252'219'203'117'35'11'32'57'177'33'  		  88'237'149'56'87'174'20'125'136'171'168' 68'175'74'165'71'134'139'48'27'166'  		  77'146'158'231'83'111'229'122'60'211'133'230'220'105'92'41'55'46'245'40'244'  		  102'143'54' 65'25'63'161' 1'216'80'73'209'76'132'187'208' 89'18'169'200'196'  		  135'130'116'188'159'86'164'100'109'198'173'186' 3'64'52'217'226'250'124'123'  		  5'202'38'147'118'126'255'82'85'212'207'206'59'227'47'16'58'17'182'189'28'42'  		  223'183'170'213'119'248'152' 2'44'154'163' 70'221'153'101'155'167' 43'172'9'  		  129'22'39'253' 19'98'108'110'79'113'224'232'178'185' 112'104'218'246'97'228'  		  251'34'242'193'238'210'144'12'191'179'162'241' 81'51'145'235'249'14'239'107'  		  49'192'214' 31'181'199'106'157'184' 84'204'176'115'121'50'45'127' 4'150'254'  		  138'236'205'93'222'114'67'29'24'72'243'141'128'195'78'66'215'61'156'180};									   			    			   perm = new int[512];  			  for(i=0; i<512; i++) perm[i]=p[i & 255];  		  }
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double F2 = 0.5*(Math.Sqrt(3.0)-1.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double F2 = 0.5*(Math.Sqrt(3.0)-1.0);
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double G2 = (3.0-Math.Sqrt(3.0))/6.0;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double G2 = (3.0-Math.Sqrt(3.0))/6.0;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double G2 = (3.0-Math.Sqrt(3.0))/6.0;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double x2 = x0 - 1.0 + 2.0 * G2;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double y2 = y0 - 1.0 + 2.0 * G2;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: int ii = i & 255;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: int jj = j & 255;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: int gi0 = perm[ii+perm[jj]] % 12;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: int gi1 = perm[ii+i1+perm[jj+j1]] % 12;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: int gi2 = perm[ii+1+perm[jj+1]] % 12;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double t0 = 0.5 - x0*x0-y0*y0;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double t1 = 0.5 - x1*x1-y1*y1;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: double t2 = 0.5 - x2*x2-y2*y2;
Magic Number,CubeWorld.World.Generator,PerlinNoise2WorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\PerlinNoise2WorldGenerator.cs,simplexNoise,The following statement contains a magic number: return 70.0 * (n0 + n1 + n2);
Magic Number,CubeWorld.World.Generator,RoguelikeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\RoguelikeWorldGenerator.cs,RoguelikeWorldGenerator,The following statement contains a magic number: playerStartPosition =                  new TilePosition(                      LEVEL_HEIGHT / 2'                      world.sizeY - LEVEL_HEIGHT + 3'                      LEVEL_HEIGHT / 2);
Magic Number,CubeWorld.World.Generator,RoguelikeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\RoguelikeWorldGenerator.cs,RoguelikeWorldGenerator,The following statement contains a magic number: playerStartPosition =                  new TilePosition(                      LEVEL_HEIGHT / 2'                      world.sizeY - LEVEL_HEIGHT + 3'                      LEVEL_HEIGHT / 2);
Magic Number,CubeWorld.World.Generator,RoguelikeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\RoguelikeWorldGenerator.cs,RoguelikeWorldGenerator,The following statement contains a magic number: playerStartPosition =                  new TilePosition(                      LEVEL_HEIGHT / 2'                      world.sizeY - LEVEL_HEIGHT + 3'                      LEVEL_HEIGHT / 2);
Magic Number,CubeWorld.World.Generator,RoguelikeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\RoguelikeWorldGenerator.cs,CreateBasicLevels,The following statement contains a magic number: for (int x = 0; x < world.sizeX; x++)                  for (int z = 0; z < world.sizeZ; z++)                      if (x % 3 == 0 && z % 3 == 0)                          world.tileManager.SetTileType(new TilePosition(x' world.sizeY - 1' z)' tileTypeCeilingGlass);                      else                          world.tileManager.SetTileType(new TilePosition(x' world.sizeY - 1' z)' tileTypeHardRock);
Magic Number,CubeWorld.World.Generator,RoguelikeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\RoguelikeWorldGenerator.cs,CreateBasicLevels,The following statement contains a magic number: for (int x = 0; x < world.sizeX; x++)                  for (int z = 0; z < world.sizeZ; z++)                      if (x % 3 == 0 && z % 3 == 0)                          world.tileManager.SetTileType(new TilePosition(x' world.sizeY - 1' z)' tileTypeCeilingGlass);                      else                          world.tileManager.SetTileType(new TilePosition(x' world.sizeY - 1' z)' tileTypeHardRock);
Magic Number,CubeWorld.World.Generator,SmoothWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\SmoothWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int cx = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int cz = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                    int radius = random.Next(minRadius' maxRadius);                    int sum = 0;                    for (int x = cx - radius; x < cx + radius; x++)                      for (int z = cz - radius; z < cz + radius; z++)                          sum += tileManager.GetTopPosition(x' z);                    int avg = sum / (radius * 2 * radius * 2);                    for (int x = cx - radius; x < cx + radius; x++)                  {                      for (int z = cz - radius; z < cz + radius; z++)                      {                          int y = tileManager.GetTopPosition(x' z);                            if (avg - y < -1 || avg - y > 1)                          {                              if (y > avg)                              {                                  //Remove tiles                                  for (int dy = avg + 1; dy <= y; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' 0);                              }                              else if (y < avg)                              {                                  //Add tiles                                  for (int dy = y; dy <= avg; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' tileType);                              }                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,SmoothWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\SmoothWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < iterations; i++)              {                  int cx = random.Next(maxRadius + 1' tileManager.sizeX - maxRadius - 1);                  int cz = random.Next(maxRadius + 1' tileManager.sizeZ - maxRadius - 1);                    int radius = random.Next(minRadius' maxRadius);                    int sum = 0;                    for (int x = cx - radius; x < cx + radius; x++)                      for (int z = cz - radius; z < cz + radius; z++)                          sum += tileManager.GetTopPosition(x' z);                    int avg = sum / (radius * 2 * radius * 2);                    for (int x = cx - radius; x < cx + radius; x++)                  {                      for (int z = cz - radius; z < cz + radius; z++)                      {                          int y = tileManager.GetTopPosition(x' z);                            if (avg - y < -1 || avg - y > 1)                          {                              if (y > avg)                              {                                  //Remove tiles                                  for (int dy = avg + 1; dy <= y; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' 0);                              }                              else if (y < avg)                              {                                  //Add tiles                                  for (int dy = y; dy <= avg; dy++)                                      tileManager.SetTileType(new TilePosition(x' dy' z)' tileType);                              }                          }                      }                  }              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < trees; i++)              {                  int x = generator.Next(maxLeavesRadius * 2' tileManager.sizeX - maxLeavesRadius * 2);                  int z = generator.Next(maxLeavesRadius * 2' tileManager.sizeZ - maxLeavesRadius * 2);                    PlantTree(x' z' world);              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < trees; i++)              {                  int x = generator.Next(maxLeavesRadius * 2' tileManager.sizeX - maxLeavesRadius * 2);                  int z = generator.Next(maxLeavesRadius * 2' tileManager.sizeZ - maxLeavesRadius * 2);                    PlantTree(x' z' world);              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < trees; i++)              {                  int x = generator.Next(maxLeavesRadius * 2' tileManager.sizeX - maxLeavesRadius * 2);                  int z = generator.Next(maxLeavesRadius * 2' tileManager.sizeZ - maxLeavesRadius * 2);                    PlantTree(x' z' world);              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < trees; i++)              {                  int x = generator.Next(maxLeavesRadius * 2' tileManager.sizeX - maxLeavesRadius * 2);                  int z = generator.Next(maxLeavesRadius * 2' tileManager.sizeZ - maxLeavesRadius * 2);                    PlantTree(x' z' world);              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,PlantTree,The following statement contains a magic number: if (topY < tileManager.sizeY - (maxTrunkHeight + maxLeavesHeight) * 2)              {                  if (tileManager.GetTileType(new TilePosition(x' topY' z)) == overTileType)                  {                      topY++;                        int trunkHeight = generator.Next(minTrunkHeight' maxTrunkHeight + 1);                      int leavesHeight = generator.Next(minLeavesHeight' maxLeavesHeight + 1);                      int leavesRadius = generator.Next(minLeavesRadius' maxLeavesRadius + 1);                        int treeHeight = trunkHeight + leavesHeight;                        if (FreeSpaceAvailable(x' topY' z' leavesRadius' treeHeight' world))                          CreateTree(x' topY' z' trunkHeight' leavesHeight' leavesRadius' world);                  }              }
Magic Number,CubeWorld.World.Generator,TreeWorldGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\TreeWorldGenerator.cs,CreateTree,The following statement contains a magic number: for (int y = treeY; y < treeY + trunkHeight + leavesHeight / 2; y++)                  tileManager.SetTileType(new TilePosition(treeX' y' treeZ)' tileTypeTrunk);
Magic Number,CubeWorld.World.Generator,WorldSizeRelativeValue,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\WorldSizeRelativeValue.cs,WorldSizeRelativeValue,The following statement contains a magic number: if (expression.IndexOf('*') <= 0)              {                  if (Char.IsDigit(expression[0]) == true)                  {                      relativeTo = RelativeTo.Nothing;                      value = float.Parse(expression' System.Globalization.CultureInfo.InvariantCulture);                  }                  else                  {                      relativeTo = (RelativeTo)System.Enum.Parse(typeof(RelativeTo)' expression' true);                      value = 1.0f;                  }              }              else              {                  string[] strs = expression.Split('*');                  if (strs.Length != 2)                      throw new Exception("Invalid relative value string: " + expression);                    relativeTo = (RelativeTo)System.Enum.Parse(typeof(RelativeTo)' strs[0]' true);                    value = float.Parse(strs[1].Trim()' System.Globalization.CultureInfo.InvariantCulture);              }
Magic Number,CubeWorld.World.Lights,DayCycleManager,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\DayCycleManager.cs,Update,The following statement contains a magic number: for (int i = 0; i < dayTimeLuminances.Length; i++)              {                  if (dayTimeLuminances[i].toTimePercent >= normalizedDayTime)                  {                      int targetPercent = dayTimeLuminances[i].luminancePercent;                      float targetTime = dayTimeLuminances[i].toTimePercent;                        int sourcePercent = dayTimeLuminances[(i - 1) % dayTimeLuminances.Length].luminancePercent;                      float sourceTime = dayTimeLuminances[(i - 1) % dayTimeLuminances.Length].toTimePercent;                        float normalizedDeltaTime = (normalizedDayTime - sourceTime) / (targetTime - sourceTime);                        newLuminance = (byte)(((int)Tile.MAX_LUMINANCE) * (sourcePercent + (targetPercent - sourcePercent) * normalizedDeltaTime) / 100);                        break;                  }              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,PositionToInt,The following statement contains a magic number: return x | (y << 16) | (z << 32);
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,PositionToInt,The following statement contains a magic number: return x | (y << 16) | (z << 32);
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,IntToPosition,The following statement contains a magic number: return new TilePosition((int)(v & 0xFFFF)' (int)((v >> 16) & 0xFFFF)' (int)(v >> 32));
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,IntToPosition,The following statement contains a magic number: return new TilePosition((int)(v & 0xFFFF)' (int)((v >> 16) & 0xFFFF)' (int)(v >> 32));
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if ((tilePos.x == from.x && tilePos.z == from.z) || (tile.AmbientLuminance != 0 && tile.AmbientLuminance != Tile.MAX_LUMINANCE))  					{                          byte oldLuminance = tile.AmbientLuminance;                            tileManager.SetTileAmbientLuminance(tilePos' 0);                            updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileAmbientLuminance(tilePos);                                    if (nearLuminance <= oldLuminance && nearLuminance != Tile.MAX_LUMINANCE)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}  				  				List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.AmbientLuminance;                            if (luminance > 0)                          {                              for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileAmbientLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileAmbientLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,PositionToInt,The following statement contains a magic number: return x | (y << 16) | (z << 32);
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,PositionToInt,The following statement contains a magic number: return x | (y << 16) | (z << 32);
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,IntToPosition,The following statement contains a magic number: return new TilePosition((int) (v & 0xFFFF)' (int) ((v >> 16) & 0xFFFF)' (int) (v >> 32));
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,IntToPosition,The following statement contains a magic number: return new TilePosition((int) (v & 0xFFFF)' (int) ((v >> 16) & 0xFFFF)' (int) (v >> 32));
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{                      long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.LightSourceLuminance > 0)  					{  						byte oldLuminance = tile.LightSourceLuminance;                          tileManager.SetTileLightSourceLuminance(tilePos' 0);  						  						updatedTiles.Add(pos);  						  						for (int i = 0; i < 6; i++)  						{  							switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}                                long nearPos = PositionToInt(tilePos.x' tilePos.y' tilePos.z);  							  							if (tileManager.IsValidTile(tilePos) &&   								updatedTiles.Contains(nearPos) == false)  							{  								int nearLuminance = tileManager.GetTileLightSourceLuminance(tilePos);  								  								if (nearLuminance < oldLuminance)  									nextPendingUpdateLights.Add(nearPos);  								else if (lightsToRecalculate.Contains(nearPos) == false)  									lightsToRecalculate.Add(nearPos);  							}							  						}  					}  				}                    List<long> old = pendingUpdateLights;  				pendingUpdateLights = nextPendingUpdateLights;  				nextPendingUpdateLights = old;  			}
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Magic Number,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following statement contains a magic number: while(pendingUpdateLights.Count > 0)  			{  				while(pendingUpdateLights.Count > 0)  				{  					long pos = pendingUpdateLights[pendingUpdateLights.Count - 1];                      pendingUpdateLights.RemoveAt(pendingUpdateLights.Count - 1);                        TilePosition tilePos = IntToPosition(pos);  					Tile tile = tileManager.GetTile(tilePos);  					  					if (tile.CastShadow == false)  					{  						byte luminance = tile.LightSourceLuminance;                            if (luminance > 0)                          {                              luminance --;                                for (int i = 0; i < 6; i++)                              {                                  switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }                                    if (tileManager.IsValidTile(tilePos))                                  {                                      if (tileManager.GetTileLightSourceLuminance(tilePos) < luminance)                                      {                                          tileManager.SetTileLightSourceLuminance(tilePos' luminance);                                          nextPendingUpdateLights.Add(PositionToInt(tilePos.x' tilePos.y' tilePos.z));                                      }                                  }                              }  						}  					}  				}                    List<long> old = pendingUpdateLights;                  pendingUpdateLights = nextPendingUpdateLights;                  nextPendingUpdateLights = old;              }
Missing Default,CubeWorld.Avatars.Components,AvatarComponentIA,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentIA.cs,Update,The following switch statement is missing a default case: switch (currentAction)                  {                      case Action.Walk:                          randomDir = new Vector3(                          (float)random.NextDouble() * 2.0f - 1.0f'                          0'                          (float)random.NextDouble() * 2.0f - 1.0f);                          randomDir = randomDir.normalized;                          jumpTimer = (float)random.NextDouble();                            avatar.input.moveDirection = randomDir;                          avatar.input.jump = false;                          break;                        case Action.Wait:                          avatar.input.moveDirection = new Vector3();                          avatar.input.jump = false;                          break;                  }
Missing Default,CubeWorld.Avatars.Components,AvatarComponentIA,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Avatars\Components\AvatarComponentIA.cs,Update,The following switch statement is missing a default case: switch (currentAction)                  {                      case Action.Walk:                          jumpTimer -= deltaTime;                          if (jumpTimer <= 0.0f)                          {                              jumpTimer = (float)random.NextDouble();                              avatar.input.jump = true;                          }                          else                          {                              avatar.input.jump = false;                          }                          break;                  }
Missing Default,CubeWorld.Gameplay,MultiplayerClientGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerClientGameplay.cs,ClientActionReceived,The following switch statement is missing a default case: switch (action.action)              {                  case MultiplayerAction.Action.INITIAL_DATA:                      initializationDataReceived = true;                      initializationData = action.extraData;                      break;                    case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                      avatar.position = pos;                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_CREATE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      string avatarDefinitionId = action.GetParameter(1);                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3))'                          Single.Parse(action.GetParameter(4)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6))'                          Single.Parse(action.GetParameter(7)));                        Avatar avatar = world.avatarManager.CreateAvatar(world.avatarManager.GetAvatarDefinitionById(avatarDefinitionId)' objectId' pos' true);                      avatar.rotation = rot;                      break;                  }                    case MultiplayerAction.Action.AVATAR_DESTROY:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      world.avatarManager.DestroyAvatar(world.avatarManager.GetAvatarByObjectId(objectId));                      break;                  }                    case MultiplayerAction.Action.TILE_INVALIDATED:                  {                      MemoryStream ms = new MemoryStream(action.extraData);                      BinaryReader br = new BinaryReader(ms);                        int n = br.ReadInt32();                      Tile tile = new Tile();                        for (int i = 0; i < n; i++)                      {                          TilePosition pos = SerializationUtils.ReadTilePosition(br);                          tile.Deserialize(br.ReadUInt32());                            if (tile.tileType != world.tileManager.GetTileType(pos))                              world.tileManager.SetTileType(pos' tile.tileType);                          if (tile.OnFire != world.tileManager.GetTileOnFire(pos))                              world.tileManager.SetTileOnFire(pos' tile.OnFire);                          if (tile.ExtraData != world.tileManager.GetTileExtraData(pos))                              world.tileManager.SetTileExtraData(pos' tile.ExtraData);                          if (tile.Energy != world.tileManager.GetTileEnergy(pos))                              world.tileManager.SetTileEnergy(pos' tile.Energy);                      }                      break;                  }              }
Missing Default,CubeWorld.Gameplay,MultiplayerServerGameplay,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Gameplay\MultiplayerServerGameplay.cs,ClientActionReceived,The following switch statement is missing a default case: switch (action.action)              {                  case MultiplayerAction.Action.AVATAR_MOVE:                  {                      int objectId = Int32.Parse(action.GetParameter(0));                      Vector3 pos = new Vector3(                          Single.Parse(action.GetParameter(1))'                          Single.Parse(action.GetParameter(2))'                          Single.Parse(action.GetParameter(3)));                      Vector3 rot = new Vector3(                          Single.Parse(action.GetParameter(4))'                          Single.Parse(action.GetParameter(5))'                          Single.Parse(action.GetParameter(6)));                        if (objectId == client.id)                      {                          Avatar avatar = world.avatarManager.GetAvatarByObjectId(objectId);                            avatar.position = pos;                          avatar.rotation = rot;                                                    server.SendToEveryone(action' client.id);                      }                      break;                  }                    case MultiplayerAction.Action.TILE_CREATE:                  {                      byte tileType = byte.Parse(action.GetParameter(0));                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        CreateTile(pos' tileType);                      break;                  }                    case MultiplayerAction.Action.TILE_CLICKED:                  {                      TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(0))'                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2)));                      this.TileClicked(pos);                      break;                  }                    case MultiplayerAction.Action.TILE_HIT:                  {                      string itemId = action.GetParameter(0);                        TilePosition pos = new TilePosition(                          Int32.Parse(action.GetParameter(1))'                          Int32.Parse(action.GetParameter(2))'                          Int32.Parse(action.GetParameter(3)));                        this.TileHit(pos' world.itemManager.GetItemDefinitionById(itemId));                      break;                  }              }
Missing Default,CubeWorld.Serialization,Serializer,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Serialization\Serializer.cs,InternalObjectDeserialize,The following switch statement is missing a default case: switch (objType)                      {                          case TYPE_INT:                              currentObject[fieldName] = br.ReadInt32();                              break;                          case TYPE_BYTE:                              currentObject[fieldName] = br.ReadByte();                              break;                          case TYPE_FLOAT:                              currentObject[fieldName] = br.ReadSingle();                              break;                          case TYPE_STRING:                              currentObject[fieldName] = br.ReadString();                              break;                          case TYPE_NULL:                              currentObject[fieldName] = null;                              break;                          case TYPE_VECTOR3:                          {                              float x = br.ReadSingle();                              float y = br.ReadSingle();                              float z = br.ReadSingle();                              currentObject[fieldName] = new Vector3(x' y' z);                              break;                          }                          case TYPE_TILEPOSITION:                          {                              int x = br.ReadInt32();                              int y = br.ReadInt32();                              int z = br.ReadInt32();                              currentObject[fieldName] = new TilePosition(x' y' z);                              break;                          }                          case TYPE_BOOL:                              currentObject[fieldName] = br.ReadBoolean();                              break;                          case TYPE_BYTE_ARRAY:                          {                              int n = br.ReadInt32();                              byte[] bytes = br.ReadBytes(n);                              currentObject[fieldName] = bytes;                              break;                          }                          case TYPE_INT_ARRAY:                          {                              int n = br.ReadInt32();                              int[] ints = new int[n];                              for (int i = 0; i < n; i++)                                  ints[i] = br.ReadInt32();                              currentObject[fieldName] = ints;                              break;                          }                          case TYPE_OBJECT_ARRAY:                          {                              int n = br.ReadInt32();                              Dictionary<string' object>[] objects = new Dictionary<string' object>[n];                              for (int i = 0; i < n; i++)                              {                                  byte b = br.ReadByte();                                  if (b == TYPE_OBJECT_START)                                      objects[i] = InternalObjectDeserialize(br);                                  else if (b == TYPE_NULL)                                      objects[i] = null;                              }                              currentObject[fieldName] = objects;                              break;                           }                          case TYPE_OBJECT_START:                          {                              currentObject[fieldName] = InternalObjectDeserialize(br);                              break;                          }                      }
Missing Default,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,Generate,The following switch statement is missing a default case: switch (generationStep)                  {                      case 0:                          world.tileManager.EnqueueTilesWithRules();                          world.tileManager.enqueueTileUpdates = true;                          generationStep++;                          break;                        case 1:                          if (world.tileManager.pendingTileUpdates.Count > 0 && initialIterations-- >= 0)                              world.tileManager.Update(TILE_UPDATE_STEP);                          else                              generationStep++;                          break;                        case 2:                          LightModelAmbient.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 3:                          LightModelLightSource.InitLuminance(world.tileManager);                          generationStep++;                          break;                        case 4:                          world.tileManager.updateLighting = true;                          world.tileManager.reportTileInvalidated = true;                            world.gameplay.WorldCreated();                          return true;                  }
Missing Default,CubeWorld.Tiles,InternalWorldInitializationGenerator,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Tiles\TileManager.cs,ToString,The following switch statement is missing a default case: switch (generationStep)                  {                      case 0: return "Adding rules";                      case 1: return "Updating rules";                      case 2: return "Illuminating (1/2)";                      case 3: return "Illuminating (2/2)";                      case 4: return "Preparing";                  }
Missing Default,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,GetFaceNormal,The following switch statement is missing a default case: switch (face)              {                  case Faces.Back:                      return new TilePosition(0' 0' 1);                  case Faces.Front:                      return new TilePosition(0' 0' -1);                  case Faces.Bottom:                      return new TilePosition(0' -1' 0);                  case Faces.Top:                      return new TilePosition(0' 1' 0);                  case Faces.Right:                      return new TilePosition(1' 0' 0);                  case Faces.Left:                      return new TilePosition(-1' 0' 0);              }
Missing Default,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,GetOpposingFace,The following switch statement is missing a default case: switch (face)              {                  case Faces.Back:                      return Faces.Front;                  case Faces.Front:                      return Faces.Back;                  case Faces.Bottom:                      return Faces.Top;                  case Faces.Top:                      return Faces.Bottom;                  case Faces.Right:                      return Faces.Left;                  case Faces.Left:                      return Faces.Right;              }
Missing Default,CubeWorld.Utils,Graphics,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\Utils\Graphics.cs,RaycastTile,The following switch statement is missing a default case: switch (lockedAxis)                          {                              case 0:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Left;                                  else                                      result.face = Faces.Right;                                  break;                              case 1:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Bottom;                                  else                                      result.face = Faces.Top;                                  break;                              case 2:                                  if (Math.Sign(fwd[lockedAxis]) > 0)                                      result.face = Faces.Front;                                  else                                      result.face = Faces.Back;                                  break;                          }
Missing Default,CubeWorld.World.Generator,WorldSizeRelativeValue,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Generator\WorldSizeRelativeValue.cs,Evaluate,The following switch statement is missing a default case: switch (relativeTo)              {                  case RelativeTo.Nothing:                      return value;                    case RelativeTo.SizeX:                      return world.sizeX * value;                  case RelativeTo.SizeY:                      return world.sizeY * value;                  case RelativeTo.SizeZ:                      return world.sizeZ * value;                    case RelativeTo.SizeXY:                      return (world.sizeX * world.sizeY) * value;                  case RelativeTo.SizeXZ:                      return (world.sizeX * world.sizeZ) * value;                  case RelativeTo.SizeYZ:                      return (world.sizeY * world.sizeZ) * value;                    case RelativeTo.SizeVolumen:                      return (world.sizeX * world.sizeY * world.sizeZ) * value;              }
Missing Default,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceDark,The following switch statement is missing a default case: switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}
Missing Default,CubeWorld.World.Lights,LightModelAmbient,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelAmbient.cs,UpdateLuminanceLightVector,The following switch statement is missing a default case: switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          luminance--;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.z -= 1;                                          break;                                      case 3:                                          tilePos.z += 2;                                          break;                                      case 4:                                          luminance++;                                          tilePos.z -= 1;                                          tilePos.y -= 1;                                          break;                                      case 5:                                          tilePos.y += 2;                                          break;                                  }
Missing Default,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceDark,The following switch statement is missing a default case: switch(i)  							{  								case 0:  									tilePos.x -= 1;  									break;  								case 1:  									tilePos.x += 2;  									break;  								case 2:  									tilePos.x -= 1;  									tilePos.y -= 1;  									break;  								case 3:  									tilePos.y += 2;  									break;  								case 4:                                      tilePos.y -= 1;  									tilePos.z -= 1;  									break;  								case 5:  									tilePos.z += 2;  									break;  							}
Missing Default,CubeWorld.World.Lights,LightModelLightSource,C:\repos\federicodangelo_CubeWorld\CubeWorldLibrary\CubeWorld\World\Lights\LightModelLightSource.cs,UpdateLuminanceLightVector,The following switch statement is missing a default case: switch (i)                                  {                                      case 0:                                          tilePos.x -= 1;                                          break;                                      case 1:                                          tilePos.x += 2;                                          break;                                      case 2:                                          tilePos.x -= 1;                                          tilePos.y -= 1;                                          break;                                      case 3:                                          tilePos.y += 2;                                          break;                                      case 4:                                          tilePos.y -= 1;                                          tilePos.z -= 1;                                          break;                                      case 5:                                          tilePos.z += 2;                                          break;                                  }
