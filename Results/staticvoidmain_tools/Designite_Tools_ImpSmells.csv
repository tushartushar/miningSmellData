Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,GetReaderMethod,Cyclomatic complexity of the method is 34
Long Parameter List,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,WrapReaderMethodIfNecessary,The method has 5 parameters.
Long Statement,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,CreateDynamicMethod,The length of the statement  "	return new DynamicMethod (name: string.Concat ("DbMapper_"' typeof(TResult).Name)' attributes: MethodAttributes.Static | MethodAttributes.Public' callingConvention: CallingConventions.Standard' returnType: typeof(TResult)' parameterTypes: new Type[] { " is 251.
Long Statement,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,GetMapperExpression,The length of the statement  "		Expression setValueDefaultExpression = simpleSetter ? (Expression)Expression.Assign (Expression.Field (returnValue' field)' defaultExpression) : (Expression)Expression.Call (returnValue' setter' defaultExpression); " is 214.
Long Statement,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,GetMapperExpression,The length of the statement  "		Expression setValueReaderExpression = simpleSetter ? (Expression)Expression.Assign (Expression.Field (returnValue' field)' readerMethod) : (Expression)Expression.Call (returnValue' setter' readerMethod); " is 203.
Long Statement,Tools,DbMapper,C:\repos\staticvoidmain_tools\src\DbMapper.cs,GetMapperExpression,The length of the statement  "		expressions.Add (Expression.IfThenElse (Expression.Call (reader' SqlDataReaderMethods.IsDbNull' Expression.Constant (ordinalPosition))' setValueDefaultExpression' setValueReaderExpression)); " is 190.
Long Statement,Tools,Mapper,C:\repos\staticvoidmain_tools\src\Mapper.cs,CreateDynamicMethod,The length of the statement  "	return new DynamicMethod (name: name' attributes: MethodAttributes.Static | MethodAttributes.Public' callingConvention: CallingConventions.Standard' returnType: typeof(TResult)' parameterTypes: new Type[] { " is 206.
Long Statement,Tools,Mapper,C:\repos\staticvoidmain_tools\src\Mapper.cs,GetSourceProperty,The length of the statement  "	return typeof(TSource).GetProperty (name: destinationProperty.Name' bindingAttr: flags' binder: null' returnType: destinationProperty.PropertyType' types: Type.EmptyTypes' modifiers: null); " is 189.
Long Statement,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The length of the statement  "			if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) { " is 137.
Complex Conditional,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The conditional expression  "il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value"  is complex.
Magic Number,Tools,Mapper,C:\repos\staticvoidmain_tools\src\Mapper.cs,CreateKey,The following statement contains a magic number: unchecked {  	int h1 = (int)typeof(T1).GetHashCode ();  	int h2 = (int)typeof(T2).GetHashCode ();  	return (h1 << 5) + h1 ^ h2;  }  
Magic Number,Tools,Mapper,C:\repos\staticvoidmain_tools\src\Mapper.cs,CreateKey,The following statement contains a magic number: return (h1 << 5) + h1 ^ h2;  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 0) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length == 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 3);  			FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 0) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length == 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 3);  			FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 0) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length == 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 3);  			FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 0) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length == 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 3);  			FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il.Length == 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 3);  		FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il.Length == 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 3);  		FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il.Length == 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 3);  		FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il.Length == 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 3);  		FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  	int fieldToken = BitConverter.ToInt32 (il' 3);  	FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  	if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  		isSimple = true;  		field = info;  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  	int fieldToken = BitConverter.ToInt32 (il' 3);  	FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  	if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  		isSimple = true;  		field = info;  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleSetter,The following statement contains a magic number: if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldarg_1.Value && il [2] == OpCodes.Stfld.Value && il [7] == OpCodes.Ret.Value) {  	int fieldToken = BitConverter.ToInt32 (il' 3);  	FieldInfo info = setter.DeclaringType.Module.ResolveField (fieldToken);  	if (info != null && info.DeclaringType.IsAssignableFrom (setter.DeclaringType)) {  		isSimple = true;  		field = info;  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 1) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length > 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 2);  			FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 1) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length > 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 2);  			FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (body.ExceptionHandlingClauses.Count == 0 && body.LocalVariables.Count == 1) {  	byte[] il = body.GetILAsByteArray ();  	if (il.Length > 8) {  		if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  			int fieldToken = BitConverter.ToInt32 (il' 2);  			FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  			if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  				isSimple = true;  				field = info;  			}  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (il.Length > 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 2);  		FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (il.Length > 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 2);  		FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (il.Length > 8) {  	if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  		int fieldToken = BitConverter.ToInt32 (il' 2);  		FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  		if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  			isSimple = true;  			field = info;  		}  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  	int fieldToken = BitConverter.ToInt32 (il' 2);  	FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  	if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  		isSimple = true;  		field = info;  	}  }  
Magic Number,Tools,MapperUtils,C:\repos\staticvoidmain_tools\src\MapperUtils.cs,IsSimpleGetter,The following statement contains a magic number: if (il [0] == OpCodes.Ldarg_0.Value && il [1] == OpCodes.Ldfld.Value && il [6] == OpCodes.Stloc_0.Value) {  	int fieldToken = BitConverter.ToInt32 (il' 2);  	FieldInfo info = getter.DeclaringType.Module.ResolveField (fieldToken);  	if (info != null && info.DeclaringType.IsAssignableFrom (getter.DeclaringType)) {  		isSimple = true;  		field = info;  	}  }  
