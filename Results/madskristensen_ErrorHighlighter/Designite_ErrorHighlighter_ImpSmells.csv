Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,Adornment,The following statement contains a magic number: BorderThickness = new Thickness(0' 0' 0' 2);
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,Adornment,The following statement contains a magic number: Padding = new Thickness(0' 0' 0' 3);
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,SetValue,The following statement contains a magic number: if (count > 0)              {                  string text = count == 1 ? singular : plural;                  block.Text = count.ToString().PadLeft(3' ' ') + " " + text + " ";              }
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,CreateBlocks,The following statement contains a magic number: return new TextBlock              {                  FontSize = 16'                  Foreground = new SolidColorBrush(color)'                  FontWeight = FontWeights.Bold'                  TextAlignment = TextAlignment.Left'                  FontFamily = new FontFamily("Consolas")'              };
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,Highlight,The following statement contains a magic number: await Dispatcher.CurrentDispatcher.BeginInvoke(new Action(async () =>              {                  if (Visibility == System.Windows.Visibility.Visible)                  {                      BorderBrush = new SolidColorBrush(Colors.Red);                      BorderBrush.Opacity = .5;                      await Task.Delay(500);                      BorderBrush = null;                  }                })' DispatcherPriority.ApplicationIdle' null);
Magic Number,ErrorHighlighter,Adornment,C:\repos\madskristensen_ErrorHighlighter\src\Adornment.cs,Highlight,The following statement contains a magic number: await Dispatcher.CurrentDispatcher.BeginInvoke(new Action(async () =>              {                  if (Visibility == System.Windows.Visibility.Visible)                  {                      BorderBrush = new SolidColorBrush(Colors.Red);                      BorderBrush.Opacity = .5;                      await Task.Delay(500);                      BorderBrush = null;                  }                })' DispatcherPriority.ApplicationIdle' null);
Magic Number,ErrorHighlighter,ErrorHighlighter,C:\repos\madskristensen_ErrorHighlighter\src\ErrorHighlighter.cs,ErrorHighlighter,The following statement contains a magic number: _timer = new Timer(750);
Magic Number,ErrorHighlighter,ErrorHighlighter,C:\repos\madskristensen_ErrorHighlighter\src\ErrorHighlighter.cs,SetAdornmentLocation,The following statement contains a magic number: Canvas.SetLeft(_text' _view.ViewportRight - 130);
Magic Number,ErrorHighlighter,ErrorHighlighter,C:\repos\madskristensen_ErrorHighlighter\src\ErrorHighlighter.cs,SetAdornmentLocation,The following statement contains a magic number: Canvas.SetTop(_text' _view.ViewportTop + 20);
Magic Number,ErrorHighlighter,ErrorHighlighter,C:\repos\madskristensen_ErrorHighlighter\src\ErrorHighlighter.cs,UpdateAdornment,The following statement contains a magic number: do  			{  				result = itemsEnum.Next((uint)rgelt.Length' rgelt' pceltFetched);  				for (int i = 0; i < pceltFetched[0]; i++)  				{  					await items.SendAsync(rgelt[i]);  				}  				if (result == VSConstants.S_OK)  				{  					await Task.Delay(100).ConfigureAwait(true);  				}  			} while (result == VSConstants.S_OK);
Missing Default,ErrorHighlighter,ErrorHighlighter,C:\repos\madskristensen_ErrorHighlighter\src\ErrorHighlighter.cs,ProcessItems,The following switch statement is missing a default case: switch (errorCategory)  				{  					case __VSERRORCATEGORY.EC_ERROR:  						localErrors++;  						break;  					case __VSERRORCATEGORY.EC_WARNING:  						localWarnings++;  						break;  					case __VSERRORCATEGORY.EC_MESSAGE:  						localMessages++;  						break;  				}
