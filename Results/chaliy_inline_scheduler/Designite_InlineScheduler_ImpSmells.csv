Implementation smell,Namespace,Class,File,Method,Description
Complex Method,InlineScheduler.Server.Advanced.Service.Content,Accessor,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,Cyclomatic complexity of the method is 15
Long Parameter List,InlineScheduler.Advanced,JobDefinition,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobDefinition.cs,JobDefinition,The method has 4 parameters.
Long Parameter List,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,Schedule,The method has 4 parameters.
Long Parameter List,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,Schedule,The method has 4 parameters.
Long Parameter List,InlineScheduler,JobFactory,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Schedules.cs,Schedule,The method has 4 parameters.
Long Parameter List,InlineScheduler,JobFactory,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Schedules.cs,Schedule,The method has 4 parameters.
Long Parameter List,InlineScheduler,JobFactory,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Schedules.cs,Interval,The method has 4 parameters.
Long Parameter List,InlineScheduler,JobFactory,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Schedules.cs,Interval,The method has 4 parameters.
Long Parameter List,InlineScheduler,JobFactory,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Schedules.cs,Daily,The method has 4 parameters.
Long Parameter List,WebApiContrib.Formatters.JsonNet,JsonNetFormatter,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Temp\JsonNetFormatter.cs,ReadFromStreamAsync,The method has 4 parameters.
Long Parameter List,WebApiContrib.Formatters.JsonNet,JsonNetFormatter,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Temp\JsonNetFormatter.cs,WriteToStreamAsync,The method has 5 parameters.
Long Statement,InlineScheduler.Advanced,JobManager,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobManager.cs,Add,The length of the statement  "		throw new InvalidOperationException ("Job with key " + item.JobKey + " already registered.\r\n" + "You can use IsJobRegisterd to check if job is already registered"); " is 166.
Long Statement,InlineScheduler.Advanced,JobManager,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobManager.cs,Register,The length of the statement  "		throw new InvalidOperationException ("Job with key " + def.JobKey + " already registered.\r\n" + "You can use IsJobRegisterd to check if job is already registered"); " is 165.
Long Statement,InlineScheduler.Advanced,JobItem,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,Run,The length of the statement  "			//_trace.Value.Error("Command " + cmdKey + " failed to execute.\r\n" + ex.Message' new { Exception = ex' Command = cmd }); " is 122.
Long Statement,InlineScheduler,OveralStats,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\OveralStats.cs,ToString,The length of the statement  "	return "Pending: " + PendingJobs + "; Scheduled: " + ScheduledJobs + " Running: " + RunningJobs + "; Current: " + JobsCount; " is 124.
Long Statement,InlineScheduler,SchedulerJobStats,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\SchedulerJobStats.cs,ToString,The length of the statement  "	return "JobKey: " + JobKey + " Status: " + CurrentStatus + " LastRunStarted: " + LastRunStarted + " LastRunCompleted: " + LastRunCompleted + " PreviousRuns Count: " + PreviousRuns.Count; " is 186.
Long Statement,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,Init,The length of the statement  "		config.Routes.MapHttpRoute (name: prefix + "InlineScheduler/Work/Force"' routeTemplate: prefix + "Work/{workKey}/Force"' defaults: new { " is 136.
Long Statement,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,Init,The length of the statement  "		config.Routes.MapHttpRoute (name: prefix + "InlineScheduler/Stats/Job"' routeTemplate: prefix + "Stats/Job/{workKey}"' defaults: new { " is 134.
Long Statement,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,Init,The length of the statement  "		config.Routes.MapHttpRoute (name: prefix + "InlineScheduler/Stats/List"' routeTemplate: prefix + "Stats/List/{filter}"' defaults: new { " is 135.
Long Statement,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,Init,The length of the statement  "		config.Routes.MapHttpRoute (name: prefix + "InlineScheduler/Default"' routeTemplate: prefix + "{*path}"' defaults: new { " is 120.
Empty Catch Block,InlineScheduler.Advanced.State,TempFolderStateProvider,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\State\TempFolderStateProvider.cs,Retrieve,The method has an empty catch block.
Magic Number,InlineScheduler.Advanced,IntervalJobSchedule,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\IntervalJobSchedule.cs,NextExecution,The following statement contains a magic number: if (state.LastComplete != null) {  	return state.LastComplete + _interval;  } else {  	var shift = context.GetNextRandom (200' (int)_interval.TotalMilliseconds / 3);  	return state.Created.AddMilliseconds (shift);  }  
Magic Number,InlineScheduler.Advanced,IntervalJobSchedule,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\IntervalJobSchedule.cs,NextExecution,The following statement contains a magic number: if (state.LastComplete != null) {  	return state.LastComplete + _interval;  } else {  	var shift = context.GetNextRandom (200' (int)_interval.TotalMilliseconds / 3);  	return state.Created.AddMilliseconds (shift);  }  
Magic Number,InlineScheduler.Advanced,JobItem,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,UpdateState,The following statement contains a magic number: if (_previousRuns.Count > 5) {  	_previousRuns.RemoveRange (0' _previousRuns.Count - 5);  }  
Magic Number,InlineScheduler.Advanced,JobItem,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,UpdateState,The following statement contains a magic number: if (_previousRuns.Count > 5) {  	_previousRuns.RemoveRange (0' _previousRuns.Count - 5);  }  
Magic Number,InlineScheduler.Advanced,JobItem,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,UpdateState,The following statement contains a magic number: _previousRuns.RemoveRange (0' _previousRuns.Count - 5);  
Magic Number,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,Scheduler,The following statement contains a magic number: _timer.Change (TimeSpan.Zero' TimeSpan.FromMilliseconds (1000));  
Magic Number,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (!_stopped) {  	var runningCount = _work.GetRuningWork ();  	if (runningCount < 20) {  		var applicableDefs = _work.GetApplicableToRun (20);  		foreach (var def in applicableDefs) {  			def.Run ();  		}  	}  }  
Magic Number,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (!_stopped) {  	var runningCount = _work.GetRuningWork ();  	if (runningCount < 20) {  		var applicableDefs = _work.GetApplicableToRun (20);  		foreach (var def in applicableDefs) {  			def.Run ();  		}  	}  }  
Magic Number,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (runningCount < 20) {  	var applicableDefs = _work.GetApplicableToRun (20);  	foreach (var def in applicableDefs) {  		def.Run ();  	}  }  
Magic Number,InlineScheduler,Scheduler,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (runningCount < 20) {  	var applicableDefs = _work.GetApplicableToRun (20);  	foreach (var def in applicableDefs) {  		def.Run ();  	}  }  
Magic Number,InlineScheduler.Server.Advanced.Hosting,HostingRegistration,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Hosting\HostingRegistration.cs,Stop,The following statement contains a magic number: if (immediate) {  	_underline.Stop ();  	Do.TryWaitUntil (() => _underline.IsRunningJobsNow' TimeSpan.FromSeconds (15));  }  
Magic Number,InlineScheduler.Server.Advanced.Hosting,HostingRegistration,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Hosting\HostingRegistration.cs,Stop,The following statement contains a magic number: Do.TryWaitUntil (() => _underline.IsRunningJobsNow' TimeSpan.FromSeconds (15));  
Magic Number,InlineScheduler.Server.Advanced.Service.Content,Accessor,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,The following statement contains a magic number: if (path != "index.html" && path != "js/app.js") {  	content.Headers.Expires = DateTimeOffset.Now.AddMonths (1);  	msg.Headers.CacheControl = new CacheControlHeaderValue {  		Public = true'  		MaxAge = TimeSpan.FromDays (30)  	};  }  
Magic Number,InlineScheduler.Server.Advanced.Service.Content,Accessor,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,The following statement contains a magic number: msg.Headers.CacheControl = new CacheControlHeaderValue {  	Public = true'  	MaxAge = TimeSpan.FromDays (30)  };  
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: if (selfHosted != null) {  	selfHosted.MaxReceivedMessageSize = 16777216;  	selfHosted.MaxBufferSize = 16777216;  }  
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: if (selfHosted != null) {  	selfHosted.MaxReceivedMessageSize = 16777216;  	selfHosted.MaxBufferSize = 16777216;  }  
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: selfHosted.MaxReceivedMessageSize = 16777216;  
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: selfHosted.MaxBufferSize = 16777216;  
Magic Number,InlineScheduler.Server.Utility,Do,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Utility\Do.cs,TryWaitUntil,The following statement contains a magic number: for (var i = 0; i < iterations; i++) {  	if (!check ()) {  		return;  	}  	Thread.Sleep (200);  }  
Magic Number,InlineScheduler.Server.Utility,Do,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Utility\Do.cs,TryWaitUntil,The following statement contains a magic number: Thread.Sleep (200);  
Missing Default,InlineScheduler.Server.Advanced.Service.Content,Accessor,D:\newReposJune17\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,The following switch statement is missing a default case: switch (extension) {  case ".css":  	content.Headers.ContentType = new MediaTypeHeaderValue ("text/css");  	break;  case ".js":  	content.Headers.ContentType = new MediaTypeHeaderValue ("application/javascript");  	break;  case ".gif":  	content.Headers.ContentType = new MediaTypeHeaderValue ("image/gif");  	break;  case ".png":  	content.Headers.ContentType = new MediaTypeHeaderValue ("image/png");  	break;  }  
