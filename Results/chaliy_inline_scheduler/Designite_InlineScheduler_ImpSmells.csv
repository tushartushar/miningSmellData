Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,WebApiContrib.Formatters.JsonNet,JsonNetFormatter,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Temp\JsonNetFormatter.cs,WriteToStreamAsync,The method has 5 parameters. Parameters: type' value' writeStream' content' transportContext
Long Statement,InlineScheduler.Advanced,JobItem,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,Run,The length of the statement  "                    //_trace.Value.Error("Command " + cmdKey + " failed to execute.\r\n" + ex.Message' new { Exception = ex' Command = cmd }); " is 122.
Long Statement,InlineScheduler,OveralStats,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\OveralStats.cs,ToString,The length of the statement  "            return "Pending: " + PendingJobs + "; Scheduled: " + ScheduledJobs + " Running: " + RunningJobs + "; Current: " + JobsCount; " is 124.
Long Statement,InlineScheduler,SchedulerJobStats,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\SchedulerJobStats.cs,ToString,The length of the statement  "            return "JobKey: " + JobKey + " Status: " + CurrentStatus + " LastRunStarted: " + LastRunStarted + " LastRunCompleted: " + LastRunCompleted + " PreviousRuns Count: " + PreviousRuns.Count; " is 186.
Long Statement,InlineScheduler.Server,InlineSchedulerWebHost,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,Init,The length of the statement  "                    defaults: new { x_inline_scheduler_prefx = prefix' controller = "Scheduler"' action = "Default"' path = RouteParameter.Optional } " is 129.
Empty Catch Block,InlineScheduler.Advanced.State,TempFolderStateProvider,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\State\TempFolderStateProvider.cs,Retrieve,The method has an empty catch block.
Magic Number,InlineScheduler.Advanced,IntervalJobSchedule,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\IntervalJobSchedule.cs,NextExecution,The following statement contains a magic number: if (state.LastComplete != null)              {                  return state.LastComplete + _interval;                              }              else              {                  var shift = context.GetNextRandom(200' (int) _interval.TotalMilliseconds/3);                  return state.Created.AddMilliseconds(shift);              }
Magic Number,InlineScheduler.Advanced,IntervalJobSchedule,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\IntervalJobSchedule.cs,NextExecution,The following statement contains a magic number: if (state.LastComplete != null)              {                  return state.LastComplete + _interval;                              }              else              {                  var shift = context.GetNextRandom(200' (int) _interval.TotalMilliseconds/3);                  return state.Created.AddMilliseconds(shift);              }
Magic Number,InlineScheduler.Advanced,StatsHelper,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\StatsHelper.cs,GatherJobReport,The following statement contains a magic number: var average = Math.Round(jobItem.PreviousRuns.Average(x => (x.Completed - x.Started).TotalSeconds)' 2);
Magic Number,InlineScheduler.Advanced,JobItem,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,UpdateState,The following statement contains a magic number: if (_previousRuns.Count > 5)               {                  _previousRuns.RemoveRange(0' _previousRuns.Count - 5);              }
Magic Number,InlineScheduler.Advanced,JobItem,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Advanced\JobItem.cs,UpdateState,The following statement contains a magic number: if (_previousRuns.Count > 5)               {                  _previousRuns.RemoveRange(0' _previousRuns.Count - 5);              }
Magic Number,InlineScheduler,Scheduler,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,Scheduler,The following statement contains a magic number: _timer.Change(TimeSpan.Zero' TimeSpan.FromMilliseconds(1000));
Magic Number,InlineScheduler,Scheduler,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (!_stopped)              {                  var runningCount = _work.GetRuningWork();                    if (runningCount < 20)                  {                      var applicableDefs = _work.GetApplicableToRun(20);                        foreach (var def in applicableDefs)                      {                          def.Run();                      }                  }              }
Magic Number,InlineScheduler,Scheduler,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Scheduler.cs,OnTimerElapsed,The following statement contains a magic number: if (!_stopped)              {                  var runningCount = _work.GetRuningWork();                    if (runningCount < 20)                  {                      var applicableDefs = _work.GetApplicableToRun(20);                        foreach (var def in applicableDefs)                      {                          def.Run();                      }                  }              }
Magic Number,InlineScheduler.Server.Advanced.Hosting,HostingRegistration,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Hosting\HostingRegistration.cs,Stop,The following statement contains a magic number: if (immediate)              {                  _underline.Stop();                  Do.TryWaitUntil(() => _underline.IsRunningJobsNow' TimeSpan.FromSeconds(15));              }
Magic Number,InlineScheduler.Server.Advanced.Service.Content,Accessor,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,The following statement contains a magic number: if (path != "index.html" && path != "js/app.js")              {                  content.Headers.Expires = DateTimeOffset.Now.AddMonths(1);                  msg.Headers.CacheControl = new CacheControlHeaderValue                  {                      Public = true'                      MaxAge = TimeSpan.FromDays(30)                  };              }
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: if (selfHosted != null)              {                  selfHosted.MaxReceivedMessageSize = 16777216;                  selfHosted.MaxBufferSize = 16777216;              }
Magic Number,InlineScheduler.Server,InlineSchedulerWebHost,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\InlineSchedulerWebHost.cs,SetUp,The following statement contains a magic number: if (selfHosted != null)              {                  selfHosted.MaxReceivedMessageSize = 16777216;                  selfHosted.MaxBufferSize = 16777216;              }
Magic Number,InlineScheduler.Server.Utility,Do,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Utility\Do.cs,TryWaitUntil,The following statement contains a magic number: var iterations = timeout.TotalMilliseconds / 200;
Magic Number,InlineScheduler.Server.Utility,Do,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Utility\Do.cs,TryWaitUntil,The following statement contains a magic number: for (var i = 0; i < iterations; i++)              {                  if (!check())                   {                      return;                  }                  Thread.Sleep(200);              }
Missing Default,InlineScheduler.Server.Advanced.Service.Content,Accessor,C:\repos\chaliy_inline_scheduler\src\InlineScheduler\Server\Advanced\Service\Content\Accessor.cs,Get,The following switch statement is missing a default case: switch (extension)              {                  case ".css":                      content.Headers.ContentType = new MediaTypeHeaderValue("text/css");                      break;                    case ".js":                      content.Headers.ContentType = new MediaTypeHeaderValue("application/javascript");                      break;                    case ".gif":                      content.Headers.ContentType = new MediaTypeHeaderValue("image/gif");                      break;                    case ".png":                      content.Headers.ContentType = new MediaTypeHeaderValue("image/png");                      break;              }
