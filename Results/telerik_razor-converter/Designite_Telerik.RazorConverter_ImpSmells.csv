Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Telerik.RazorConverter.Razor.Converters,RazorNodeConverterProvider,C:\repos\telerik_razor-converter\Telerik.RazorConverter\Razor\Converters\RazorNodeConverterProvider.cs,RazorNodeConverterProvider,The method has 7 parameters. Parameters: directiveNodeFactory' sectionNodeFactory' codeNodeFactory' textNodeFactory' commentNodeFactory' expressionNodeFactory' contentTagConverterConfig
Long Statement,Telerik.RazorConverter.Razor.Converters,ExpressionBlockConverter,C:\repos\telerik_razor-converter\Telerik.RazorConverter\Razor\Converters\ExpressionBlockConverter.cs,RemoveHtmlEncode,The length of the statement  "            var searchRegex = new Regex(@"(Html\.Encode|HttpUtility\.HtmlEncode)\s*\((?<statement>(?>[^()]+|\((?<Depth>)|\)(?<-Depth>))*(?(Depth)(?!)))\)"' RegexOptions.Singleline | RegexOptions.Multiline); " is 194.
Long Statement,Telerik.RazorConverter.Razor.Converters,ExpressionBlockConverter,C:\repos\telerik_razor-converter\Telerik.RazorConverter\Razor\Converters\ExpressionBlockConverter.cs,WrapHtmlDecode,The length of the statement  "            var searchRegex = new Regex(@"HttpUtility.HtmlDecode\((?<statement>.*)\)"' RegexOptions.Singleline | RegexOptions.Multiline); " is 125.
Long Statement,Telerik.RazorConverter.WebForms.Filters,AddBlockBracesFilter,C:\repos\telerik_razor-converter\Telerik.RazorConverter\WebForms\Filters\AddBlockBracesFilter.cs,Filter,The length of the statement  "            var isCompleteCodeNode = node is IWebFormsCodeBlockNode && ((IWebFormsCodeBlockNode)node).BlockType == CodeBlockNodeType.Complete; " is 130.
Long Statement,Telerik.RazorConverter.WebForms.Parsing,WebFormsNodeFactory,C:\repos\telerik_razor-converter\Telerik.RazorConverter\WebForms\DOM\WebFormsNodeFactory.cs,ServerControlNodeBuilder,The length of the statement  "                    @"((?<attrname>\w[-\w:]*)(\s*=\s*\""(?<attrval>[^\""]*)\""|\s*=\s*'(?<attrval>[^']*)'|\s*=\s*(?<attrval><%#.*?%>)|\s*=\s*(?<attrval>[^\s=/>]*)|(?<attrval>\s*?)))"' " is 163.
Long Statement,Telerik.RazorConverter.WebForms.Parsing,WebFormsParser,C:\repos\telerik_razor-converter\Telerik.RazorConverter\WebForms\Parsing\WebFormsParser.cs,Parse,The length of the statement  "                    else if ((match = aspExprRegex.Match(input' startAt)).Success || (match = aspEncodedExprRegex.Match(input' startAt)).Success) " is 125.
Long Statement,Telerik.RazorConverter.WebForms.Parsing,WebFormsParser,C:\repos\telerik_razor-converter\Telerik.RazorConverter\WebForms\Parsing\WebFormsParser.cs,Parse,The length of the statement  "                    else if ((match = scriptRegex.Match(input' startAt)).Success) // Relocated to enable processing of <% %> tags within the script block. " is 134.
Magic Number,Telerik.RazorConverter.WebForms.Parsing,WebFormsParser,C:\repos\telerik_razor-converter\Telerik.RazorConverter\WebForms\Parsing\WebFormsParser.cs,Parse,The following statement contains a magic number: do              {                  if ((match = textRegex.Match(input' startAt)).Success)                  {                      AppendTextNode(parentNode' match);                      startAt = match.Index + match.Length;                  }                    if (startAt != input.Length)                  {                      if ((match = directiveRegex.Match(input' startAt)).Success)                      {                          var directiveNode = NodeFactory.CreateNode(match' NodeType.Directive);                          parentNode.Children.Add(directiveNode);                      }                      else if ((match = commentRegex.Match(input' startAt)).Success)                      {                          var commentNode = NodeFactory.CreateNode(match' NodeType.Comment);                          parentNode.Children.Add(commentNode);                      }                      else if ((match = runatServerTagRegex.Match(input' startAt)).Success)                      {                          var serverControlNode = NodeFactory.CreateNode(match' NodeType.ServerControl);                          parentNode.Children.Add(serverControlNode);  						if(!match.Value.EndsWith("/>"))  						{  	                        parentNode = serverControlNode;  						}                      }                      else if ((match = doctypeRegex.Match(input' startAt)).Success)                      {                          AppendTextNode(parentNode' match);                      }                      else if ((match = startTagOpeningBracketRegex.Match(input' startAt)).Success)                      {                          AppendTextNode(parentNode' match);                      }                      else if ((match = endTagRegex.Match(input' startAt)).Success)                      {                          var tagName = match.Groups["tagname"].Captures[0].Value;                          var serverControlParent = parentNode as IWebFormsServerControlNode;                          if (serverControlParent != null && tagName.ToLowerInvariant() == serverControlParent.TagName.ToLowerInvariant())                          {                              parentNode = parentNode.Parent;                          }                          else                          {                              AppendTextNode(parentNode' match);                          }                      }                      else if ((match = aspExprRegex.Match(input' startAt)).Success || (match = aspEncodedExprRegex.Match(input' startAt)).Success)                      {                          var expressionBlockNode = NodeFactory.CreateNode(match' NodeType.ExpressionBlock);                          parentNode.Children.Add(expressionBlockNode);                      }                      else if ((match = aspCodeRegex.Match(input' startAt)).Success)                      {                          var codeBlockNode = NodeFactory.CreateNode(match' NodeType.CodeBlock);                          parentNode.Children.Add(codeBlockNode);                      }                      else if ((match = scriptRegex.Match(input' startAt)).Success) // Relocated to enable processing of <% %> tags within the script block.                      {                          AppendTextNode(parentNode' match);                      }                      else                      {                          throw new Exception(                              string.Format("Unrecognized page element: {0}..."' input.Substring(startAt' 20)));                      }                        startAt = match.Index + match.Length;                  }              }              while (startAt != input.Length);
