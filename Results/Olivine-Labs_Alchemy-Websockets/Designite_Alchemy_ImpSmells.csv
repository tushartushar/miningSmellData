Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Alchemy.Classes,Header,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Classes\Header.cs,Header,Cyclomatic complexity of the method is 9
Complex Method,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,CheckAuthentication,Cyclomatic complexity of the method is 8
Complex Method,Alchemy.Handlers.WebSocket.rfc6455,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\Authentication.cs,CheckAuthentication,Cyclomatic complexity of the method is 8
Long Statement,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,Authenticate,The length of the statement  "            _handshake = new ClientHandshake { Version = "8"' Origin = Origin' Host = _host' Key = GenerateKey()' ResourcePath = _path' SubProtocols = SubProtocols}; " is 153.
Long Statement,Alchemy.Handlers.WebSocket.hybi00,ClientHandshake,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Handshakes.cs,ToString,The length of the statement  "            return String.Format(Handshake' ResourcePath' Origin' Host' Key1' Key2' additionalFields).ToString(CultureInfo.InvariantCulture); " is 129.
Long Statement,Alchemy.Handlers.WebSocket.rfc6455,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\Authentication.cs,GenerateResponseHandshake,The length of the statement  "            var responseHandshake = new ServerHandshake {Accept = GenerateAccept(handshake.Key)' Server = server' RequestProtocols = handshake.SubProtocols}; " is 145.
Long Statement,Alchemy.Handlers.WebSocket.rfc6455,ClientHandshake,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\Handshakes.cs,ToString,The length of the statement  "            return String.Format(Handshake' ResourcePath' Origin' Host' Key' additionalFields).ToString(CultureInfo.InvariantCulture); " is 122.
Empty Catch Block,Alchemy,AccessPolicyServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\AccessPolicyServer.cs,OnRunClient,The method has an empty catch block.
Empty Catch Block,Alchemy,AccessPolicyServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\AccessPolicyServer.cs,SendResponse,The method has an empty catch block.
Empty Catch Block,Alchemy,TcpServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\TcpServer.cs,Listen,The method has an empty catch block.
Empty Catch Block,Alchemy,WebSocketServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketServer.cs,StartReceive,The method has an empty catch block.
Empty Catch Block,Alchemy.Classes,Context,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Classes\Context.cs,Dispose,The method has an empty catch block.
Magic Number,Alchemy,AccessPolicyServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\AccessPolicyServer.cs,OnRunClient,The following statement contains a magic number: try              {                  connection.Client.Receive(new byte[32]);                  SendResponse(connection);                  connection.Client.Close();              }              catch (SocketException)              {                  /* Ignore */              }
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,HandleClientThread,The following statement contains a magic number: while (!cancellation.IsCancellationRequested)              {                  Context context = null;                    while (NewClients.Count == 0)                  {                      Thread.Sleep(10);                      if (cancellation.IsCancellationRequested) return;                  }                    lock (NewClients)                  {                      if (NewClients.Count == 0)                      {                          continue;                      }                        context = NewClients.Dequeue();                  }                    lock (ContextMapping)                  {                      WebSocketClient client = ContextMapping[context];                      client.SetupContext(context);                  }              }
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,WebSocketClient,The following statement contains a magic number: _host = matches.Groups[2].Value;
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,WebSocketClient,The following statement contains a magic number: _port = Int32.Parse(matches.Groups[3].Value);
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,WebSocketClient,The following statement contains a magic number: _path = matches.Groups[4].Value;
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,Connect,The following statement contains a magic number: try              {                  ReadyState = ReadyStates.CONNECTING;                    _client = new TcpClient();                  _connecting = true;                  _client.BeginConnect(_host' _port' OnRunClient' null);                    var waiting = new TimeSpan();                  while (_connecting && waiting < ConnectTimeout)                  {                      var timeSpan = new TimeSpan(0' 0' 0' 0' 100);                      waiting = waiting.Add(timeSpan);                      Thread.Sleep(timeSpan.Milliseconds);                  }              }              catch (Exception)              {                  Disconnect();              }
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,OnRunClient,The following statement contains a magic number: using (_context = new Context(null' _client))              {                  _context = new Context(null' _client);                  _context.BufferSize = 512;                  _context.UserContext.DataFrame = new DataFrame();                  _context.UserContext.SetOnConnect(OnConnect);                  _context.UserContext.SetOnConnected(OnConnected);                  _context.UserContext.SetOnDisconnect(OnDisconnect);                  _context.UserContext.SetOnSend(OnSend);                  _context.UserContext.SetOnReceive(OnReceive);                  _context.UserContext.OnConnect();                    if (connectError)                  {                      _context.UserContext.OnDisconnect();                      return;                  }                    lock (ContextMapping)                  {                      ContextMapping[_context] = this;                  }                    lock (NewClients)                  {                      NewClients.Enqueue(_context);                  }              }
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,GenerateKey,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Alchemy,WebSocketClient,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketClient.cs,GenerateKey,The following statement contains a magic number: for (var index = 0; index < bytes.Length; index++)              {                  bytes[index] = (byte) random.Next(0' 255);              }
Magic Number,Alchemy,WebSocketServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketServer.cs,HandleClientThread,The following statement contains a magic number: while (!cancellation.Token.IsCancellationRequested)              {                  Context context;                    while (ContextQueue.Count == 0)                  {                      Thread.Sleep(10);                      if (cancellation.Token.IsCancellationRequested) return;                  }                    if (!ContextQueue.TryDequeue(out context))                  {                      continue;                  }                    lock (ContextMapping)                  {                      WebSocketServer client = ContextMapping[context];                      client.SetupContext(context);                  }                    lock(CurrentConnections){                      CurrentConnections.Add(context);                  }              }
Magic Number,Alchemy,WebSocketServer,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\WebSocketServer.cs,HandleContextCleanupThread,The following statement contains a magic number: while (!cancellation.IsCancellationRequested)              {                  Thread.Sleep(100);                    List<Context> currentConnections = new List<Context>();                    lock (CurrentConnections)                  {                      currentConnections.AddRange(CurrentConnections);                  }                    foreach (var connection in currentConnections)                  {                      if (cancellation.IsCancellationRequested) break;                                            if (!connection.Connected)                      {                          lock (CurrentConnections)                          {                              CurrentConnections.Remove(connection);                          }                            lock (ContextMapping)                          {                              ContextMapping.Remove(connection);                          }                            connection.Handler.UnregisterContext(connection);                            connection.Dispose();                      }                  }              }
Magic Number,Alchemy.Classes,Header,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Classes\Header.cs,Header,The following statement contains a magic number: Protocol = version < 8 ? Protocol.WebSocketHybi00 : Protocol.WebSocketRFC6455;
Magic Number,Alchemy.Handlers,Handler,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\Handler.cs,ProcessSend,The following statement contains a magic number: while (!cancellation.IsCancellationRequested)              {                  while (MessageQueue.IsEmpty)                  {                      Thread.Sleep(10);                      if (cancellation.IsCancellationRequested) return;                  }                    HandlerMessage message;                    if (!MessageQueue.TryDequeue(out message))                  {                      continue;                  }                    Send(message);              }
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,CheckAuthentication,The following statement contains a magic number: if (context.ReceivedByteCount > 8)              {                  var handshake =                      new ClientHandshake(new ArraySegment<byte>(context.Buffer' context.ReceivedByteCount - 8' 8)'                                          context.Header);                  // See if our header had the required information                  if (handshake.IsValid())                  {                      // Optionally check Origin and Location if they're set.                      if (!String.IsNullOrEmpty(Origin))                      {                          var expectedOrigin = Origin;                          if (!Origin.Contains("://"))                          {                              expectedOrigin = "http://" + Origin;                          }                            if (!handshake.Origin.Equals(expectedOrigin' StringComparison.InvariantCultureIgnoreCase))                          {                              return false;                          }                      }                      if (!String.IsNullOrEmpty(Destination))                      {                          if (handshake.Host != Destination + ":" + context.Server.Port)                          {                              return false;                          }                      }                      // Generate response handshake for the client                      var serverShake = GenerateResponseHandshake(handshake' context.Server);                      // Send the response handshake                      SendServerHandshake(serverShake' context);                      return true;                  }              }
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,CheckAuthentication,The following statement contains a magic number: if (context.ReceivedByteCount > 8)              {                  var handshake =                      new ClientHandshake(new ArraySegment<byte>(context.Buffer' context.ReceivedByteCount - 8' 8)'                                          context.Header);                  // See if our header had the required information                  if (handshake.IsValid())                  {                      // Optionally check Origin and Location if they're set.                      if (!String.IsNullOrEmpty(Origin))                      {                          var expectedOrigin = Origin;                          if (!Origin.Contains("://"))                          {                              expectedOrigin = "http://" + Origin;                          }                            if (!handshake.Origin.Equals(expectedOrigin' StringComparison.InvariantCultureIgnoreCase))                          {                              return false;                          }                      }                      if (!String.IsNullOrEmpty(Destination))                      {                          if (handshake.Host != Destination + ":" + context.Server.Port)                          {                              return false;                          }                      }                      // Generate response handshake for the client                      var serverShake = GenerateResponseHandshake(handshake' context.Server);                      // Send the response handshake                      SendServerHandshake(serverShake' context);                      return true;                  }              }
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,CheckAuthentication,The following statement contains a magic number: if (context.ReceivedByteCount > 8)              {                  var handshake =                      new ClientHandshake(new ArraySegment<byte>(context.Buffer' context.ReceivedByteCount - 8' 8)'                                          context.Header);                  // See if our header had the required information                  if (handshake.IsValid())                  {                      // Optionally check Origin and Location if they're set.                      if (!String.IsNullOrEmpty(Origin))                      {                          var expectedOrigin = Origin;                          if (!Origin.Contains("://"))                          {                              expectedOrigin = "http://" + Origin;                          }                            if (!handshake.Origin.Equals(expectedOrigin' StringComparison.InvariantCultureIgnoreCase))                          {                              return false;                          }                      }                      if (!String.IsNullOrEmpty(Destination))                      {                          if (handshake.Host != Destination + ":" + context.Server.Port)                          {                              return false;                          }                      }                      // Generate response handshake for the client                      var serverShake = GenerateResponseHandshake(handshake' context.Server);                      // Send the response handshake                      SendServerHandshake(serverShake' context);                      return true;                  }              }
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,SendServerHandshake,The following statement contains a magic number: Array.Copy(handshake.AnswerBytes' 0' handshakeBytes' handshakeBytes.Length - 16' 16);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,SendServerHandshake,The following statement contains a magic number: Array.Copy(handshake.AnswerBytes' 0' handshakeBytes' handshakeBytes.Length - 16' 16);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: var rawAnswer = new byte[16];
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: Array.Copy(TranslateKey(key1)' 0' rawAnswer' 0' 4);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: Array.Copy(TranslateKey(key2)' 0' rawAnswer' 4' 4);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: Array.Copy(TranslateKey(key2)' 0' rawAnswer' 4' 4);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Alchemy.Handlers.WebSocket.hybi00,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\hybi00\Authentication.cs,GenerateAnswerBytes,The following statement contains a magic number: Array.Copy(challenge.Array' challenge.Offset' rawAnswer' 8' 8);
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,DataFrame,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\DataFrame.cs,Mask,The following statement contains a magic number: for (int index = 0; index < someBytes.Length; index++)              {                  someBytes[index] = (byte) (someBytes[index] ^ byteKeys[_header.CurrentMaskIndex]);                  if (_header.CurrentMaskIndex == 3)                  {                      _header.CurrentMaskIndex = 0;                  }                  else                  {                      _header.CurrentMaskIndex++;                  }              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: int dataBegin = 2;
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: IsMasked = Convert.ToBoolean((data[1] & 0x80) >> 7);
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following statement contains a magic number: if (IsMasked)             {                 Mask = BitConverter.ToInt32(data' dataBegin);                 dataBegin += 4;             }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,ToBytes,The following statement contains a magic number: if (PayloadSize <= 125)             {                 data = new byte[1];                 data[0] = (byte) PayloadSize;                 //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                 headerBytes.Add(data);             }             else             {                 if (PayloadSize <= ushort.MaxValue)                 {                     data = new byte[1];                     data[0] = 126;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                      data = BitConverter.GetBytes(Convert.ToUInt16(PayloadSize));                     Array.Reverse(data);                     headerBytes.Add(data);                 }                 else                 {                     data = new byte[1];                     data[0] = 127;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                     data = BitConverter.GetBytes(PayloadSize);                     Array.Reverse(data);                     headerBytes.Add(data);                 }             }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,ToBytes,The following statement contains a magic number: if (PayloadSize <= 125)             {                 data = new byte[1];                 data[0] = (byte) PayloadSize;                 //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                 headerBytes.Add(data);             }             else             {                 if (PayloadSize <= ushort.MaxValue)                 {                     data = new byte[1];                     data[0] = 126;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                      data = BitConverter.GetBytes(Convert.ToUInt16(PayloadSize));                     Array.Reverse(data);                     headerBytes.Add(data);                 }                 else                 {                     data = new byte[1];                     data[0] = 127;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                     data = BitConverter.GetBytes(PayloadSize);                     Array.Reverse(data);                     headerBytes.Add(data);                 }             }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,ToBytes,The following statement contains a magic number: if (PayloadSize <= 125)             {                 data = new byte[1];                 data[0] = (byte) PayloadSize;                 //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                 headerBytes.Add(data);             }             else             {                 if (PayloadSize <= ushort.MaxValue)                 {                     data = new byte[1];                     data[0] = 126;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                      data = BitConverter.GetBytes(Convert.ToUInt16(PayloadSize));                     Array.Reverse(data);                     headerBytes.Add(data);                 }                 else                 {                     data = new byte[1];                     data[0] = 127;                     //data[0] = (byte) (data[0] | 0x80); //Tells us that this data is masked                     headerBytes.Add(data);                     data = BitConverter.GetBytes(PayloadSize);                     Array.Reverse(data);                     headerBytes.Add(data);                 }             }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,Authentication,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\Authentication.cs,CheckAuthentication,The following statement contains a magic number: if (context.ReceivedByteCount > 8)              {                  var handshake = new ClientHandshake(context.Header);                  // See if our header had the required information                  if (handshake.IsValid())                  {                      // Optionally check Origin and Location if they're set.                      if (!String.IsNullOrEmpty(Origin))                      {                          var expectedOrigin = Origin;                          if (!Origin.Contains("://"))                          {                              expectedOrigin = "http://" + Origin;                          }                            if (!handshake.Origin.Equals(expectedOrigin' StringComparison.InvariantCultureIgnoreCase))                          {                              return false;                          }                      }                      if (!String.IsNullOrEmpty(Destination))                      {                          if (handshake.Host != Destination + ":" + context.Server.Port)                          {                              return false;                          }                      }                      // Generate response handshake for the client                      var serverShake = GenerateResponseHandshake(handshake' context.Server);                      // Send the response handshake                      SendServerHandshake(serverShake' context);                      return true;                  }              }
Magic Number,Alchemy.Handlers.WebSocket.rfc6455,ClientHandshake,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\Handshakes.cs,IsValid,The following statement contains a magic number: return (                         (Host != null) &&                         (Key != null) &&                         (Int32.Parse(Version) >= 8)                     );
Missing Default,Alchemy.Handlers.WebSocket,WebSocketHandler,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\WebSocketHandler.cs,HandleRequest,The following switch statement is missing a default case: switch (context.UserContext.DataFrame.State)                      {                          case DataFrame.DataState.Complete:                              context.UserContext.OnReceive();                              break;                          case DataFrame.DataState.Closed:                              DataFrame closeFrame = context.UserContext.DataFrame.CreateInstance();  							closeFrame.State = DataFrame.DataState.Closed;  							closeFrame.Append(new byte[] { 0x8 }' true);  							context.UserContext.Send(closeFrame' false' true);                              break;                          case DataFrame.DataState.Ping:                              context.UserContext.DataFrame.State = DataFrame.DataState.Complete;                              DataFrame dataFrame = context.UserContext.DataFrame.CreateInstance();                              dataFrame.State = DataFrame.DataState.Pong;                              List<ArraySegment<byte>> pingData = context.UserContext.DataFrame.AsRaw();                              foreach (var item in pingData)                              {                                  dataFrame.Append(item.Array);                              }                              context.UserContext.Send(dataFrame);                              break;                          case DataFrame.DataState.Pong:                              context.UserContext.DataFrame.State = DataFrame.DataState.Complete;                              break;                      }
Missing Default,Alchemy.Handlers.WebSocket.rfc6455,DataFrame,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\DataFrame.cs,AsFrame,The following switch statement is missing a default case: switch (State)                  {                      case DataState.Pong:                          _header.OpCode = OpCode.Pong;                          //Setup Opcode for Pong frame if application has specified that we're sending a pong.                          break;                  }
Missing Default,Alchemy.Handlers.WebSocket.rfc6455,FrameHeader,C:\repos\Olivine-Labs_Alchemy-Websockets\src\Alchemy\Handlers\WebSocket\rfc6455\FrameHeader.cs,FromBytes,The following switch statement is missing a default case: switch (PayloadSize)              {                  case 126:                      Array.Reverse(data' dataBegin' 2);                      PayloadSize = BitConverter.ToUInt16(data' dataBegin);                      dataBegin += 2;                      break;                  case 127:                      Array.Reverse(data' dataBegin' 8);                      PayloadSize = BitConverter.ToUInt64(data' dataBegin);                      dataBegin += 8;                      break;              }
