Implementation smell,Namespace,Class,File,Method,Description
Complex Method,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,CreateMailMessageFromEntity,Cyclomatic complexity of the method is 20
Complex Method,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,ProcessHeaders,Cyclomatic complexity of the method is 20
Complex Method,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,GetResponseLines,Cyclomatic complexity of the method is 8
Long Parameter List,sidepop.Mail,DefaultPop3Client,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\DefaultPop3Client.cs,DefaultPop3Client,The method has 5 parameters.
Long Parameter List,sidepop.Mail,DefaultPop3Client,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\DefaultPop3Client.cs,DefaultPop3Client,The method has 6 parameters.
Long Parameter List,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,SidePopEmailWatcher,The method has 5 parameters.
Long Parameter List,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,SidePopEmailWatcher,The method has 5 parameters.
Long Parameter List,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,SidePopEmailWatcher,The method has 6 parameters.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,file_copy,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("Attempting to copy from \"{0}\" to \"{1}\"."' source_file_name' destination_file_name); " is 138.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,is_system_file,The length of the statement  "		Log.bound_to (this).log_a_debug_event_containing ("Is directory \"{0}\" a system directory? {1}"' file.DirectoryName' is_system_file.ToString ()); " is 146.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,is_encrypted_file,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("Is file \"{0}\" an encrypted file? {1}"' file.FullName' is_encrypted.ToString ()); " is 133.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,file_in_file_types,The length of the statement  "	if (Array.IndexOf (file_types' ".*") > -1 || Array.IndexOf (file_types' get_file_extension_from (file_name).to_lower ()) > -1) { " is 128.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,file_in_file_types,The length of the statement  "		Log.bound_to (this).log_a_debug_event_containing ("File \"{0}\" is in the approved file types of \"{1}\"."' file_name' string.Join (";"' file_types)); " is 150.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,file_in_file_types,The length of the statement  "	Log.bound_to (this).log_an_info_event_containing ("File \"{0}\" is not in the approved file types of \"{1}\"."' file_name' string.Join (";"' file_types)); " is 154.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,get_file_date,The length of the statement  "	return file.CreationTime < file.LastWriteTime ? file.CreationTime.Date.ToString ("yyyyMMdd") : file.LastWriteTime.Date.ToString ("yyyyMMdd"); " is 141.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,verify_or_create_directory,The length of the statement  "			Log.bound_to (this).log_an_error_event_containing ("Cannot create directory \"{0}\". Error was:{1}{2}"' get_full_path (directory)' Environment.NewLine' e); " is 155.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,create_directory,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("Attempting to create directory \"{0}\"."' get_full_path (directory)); " is 120.
Long Statement,sidepop.infrastructure.filesystem,WindowsFileSystemAccess,F:\newReposMay17\chucknorris_sidepop\product\sidepop\infrastructure\filesystem\WindowsFileSystemAccess.cs,delete_directory,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("Attempting to delete directory \"{0}\"."' get_full_path (directory)); " is 120.
Long Statement,sidepop.Mime,EncodedWord,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\EncodedWord.cs,IsCompatibleWith,The length of the statement  "	return string.Equals (EncodingName' other.EncodingName' StringComparison.InvariantCultureIgnoreCase) && string.Equals (EncodingType' other.EncodingType' StringComparison.InvariantCultureIgnoreCase); " is 198.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,GetEncoding,The length of the statement  "	//In this method'' We should eventually use an external library for detecting encoding in case Encoding.GetEncoding fails " is 121.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,ToMailMessageEx,The length of the statement  "	else if (string.Equals (entity.ContentType.MediaType' MediaTypes.MessageRfc822' StringComparison.InvariantCultureIgnoreCase)) { " is 127.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,BuildMultiPartMessage,The length of the statement  "		if (string.Equals (child.ContentType.MediaType' MediaTypes.MultipartAlternative' StringComparison.InvariantCultureIgnoreCase) || string.Equals (child.ContentType.MediaType' MediaTypes.MultipartMixed' StringComparison.InvariantCultureIgnoreCase)) { " is 247.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,BuildMultiPartMessage,The length of the statement  "		else if (!IsAttachment (child) && (string.Equals (child.ContentType.MediaType' MediaTypes.TextPlain) || string.Equals (child.ContentType.MediaType' MediaTypes.TextHtml))) { " is 172.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,BuildMultiPartMessage,The length of the statement  "		else if (string.Equals (child.ContentType.MediaType' MediaTypes.MessageRfc822' StringComparison.InvariantCultureIgnoreCase) && child.ContentDisposition != null // RFC 2183 specifies the 'Content-Disposition' header field' which is optional and valid for any MIME entity ("message" or "body part") " is 296.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,BuildMultiPartMessage,The length of the statement  "		&& string.Equals (child.ContentDisposition.DispositionType' DispositionTypeNames.Attachment' StringComparison.InvariantCultureIgnoreCase)) { " is 140.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,IsAttachment,The length of the statement  "	return (child.ContentDisposition != null) && (string.Equals (child.ContentDisposition.DispositionType' DispositionTypeNames.Attachment' StringComparison.InvariantCultureIgnoreCase)); " is 182.
Long Statement,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,SetMessageBody,The length of the statement  "	message.IsBodyHtml = string.Equals (MediaTypes.TextHtml' child.ContentType.MediaType' StringComparison.InvariantCultureIgnoreCase); " is 131.
Long Statement,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,CreateMimeEntity,The length of the statement  "		MimeParserException exception = new MimeParserException (_rawBytes' "An error occured while creating the Mime Entity"' _entity' ex); " is 132.
Long Statement,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,ParseBody,The length of the statement  "			else if (string.Equals (_entity.ContentType.MediaType' MediaTypes.MessageRfc822' StringComparison.InvariantCultureIgnoreCase)) { " is 128.
Long Statement,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,GetContentType,The length of the statement  "		Log.bound_to (typeof(MimeReader)).log_a_warning_event_containing ("{0} was not able to use content type \"{1}\". Defaulting to \"text/plain; charset=us-ascii\".{2}{3}"' ApplicationParameters.name' contentType' Environment.NewLine' ex.ToString ()); " is 247.
Long Statement,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The length of the statement  "		if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) { " is 235.
Long Statement,sidepop.Mime,ContentDecoder,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\ContentDecoder.cs,DetectRealEncoding,The length of the statement  "	//Convention is that when any char in the range 0x80 through 0x92 is present' chances are that the encoding is Windows-1252 " is 123.
Long Statement,sidepop.Mime,ContentDecoder,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\ContentDecoder.cs,DetectRealEncoding,The length of the statement  "	if (encoding.HeaderName.Equals ("ISO-8859-1"' StringComparison.InvariantCultureIgnoreCase) && decodedBytes.Any (b => b >= 0x80 && b <= 0x92)) { " is 143.
Long Statement,sidepop.Mail.Commands,ConnectCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ConnectCommand.cs,SetClientStream,The length of the statement  "			throw new Pop3Exception ("There was a problem attempting to authenticate this SSL stream for hostname: " + _hostname' e); " is 121.
Long Statement,sidepop.Mail.Commands,ConnectCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ConnectCommand.cs,SetClientStream,The length of the statement  "			Log.bound_to (this).log_a_warning_event_containing ("There was an error during connection: {0}{1}"' Environment.NewLine' e.ToString ()); " is 136.
Long Statement,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,EnsurePop3State,The length of the statement  "		throw new Pop3Exception (string.Format ("This command is being executed" + "in an invalid execution state.  Current:{0}' Valid:{1}"' currentState' ValidExecuteState)); " is 167.
Long Statement,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,GetSingleLineResponseCallback,The length of the statement  "		Log.bound_to (this).log_an_error_event_containing ("{0} encountered an error during single line callback:{1}{2}"' ApplicationParameters.name' Environment.NewLine' ex.ToString ()); " is 179.
Long Statement,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,GetMultiLineResponseCallback,The length of the statement  "		Log.bound_to (this).log_an_error_event_containing ("{0} encountered an error during multiline callback:{1}{2}"' ApplicationParameters.name' Environment.NewLine' ex.ToString ()); " is 177.
Long Statement,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,GetMultiLineResponseCallback,The length of the statement  "	if (message.EndsWith (MultilineMessageTerminator) || bytesReceived == 0)//if the POP3 server times out we'll get an error message' then we'll get a following callback w/ 0 bytes. " is 178.
Long Statement,sidepop.Mail.Commands,TopCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\TopCommand.cs,CreateRequestMessage,The length of the statement  "	return GetRequestMessage (Pop3Commands.Top' _messageNumber.ToString ()' " "' _lineCount.ToString ()' Pop3Commands.Crlf); " is 120.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,default_timer_elapsed,The length of the statement  "	Log.bound_to (this).log_an_info_event_containing ("{0} is checking email for {1} at {2}."' ApplicationParameters.name' pop3_client.Username' pop3_client.Hostname); " is 163.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,default_timer_elapsed,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("{0} will notify if there are new messages. There were {1} messages."' ApplicationParameters.name' messages.Count); " is 165.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,check_email,The length of the statement  "		Log.bound_to (this).log_an_error_event_containing ("{0} had an error:{1}{2}"' ApplicationParameters.name' Environment.NewLine' ex.ToString ()); " is 143.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,check_email,The length of the statement  "			Log.bound_to (this).log_an_error_event_containing ("{0} had an error:{1}{2}"' ApplicationParameters.name' Environment.NewLine' ex.ToString ()); " is 143.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,send_notices,The length of the statement  "	Log.bound_to (this).log_a_debug_event_containing ("{0} is sending notice of {1} messages."' ApplicationParameters.name' messages.Count); " is 136.
Long Statement,sidepop.runners,SidePopEmailWatcher,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopEmailWatcher.cs,send_notices,The length of the statement  "		Log.bound_to (this).log_a_debug_event_containing ("{0} is sending notice of message id \"{1}\"."' ApplicationParameters.name' message.MessageId); " is 145.
Long Statement,sidepop.runners,SidePopXmlConfigurator,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopXmlConfigurator.cs,configure_mail_watchers,The length of the statement  "			watchers.Add (new SidePopEmailWatcher (new DefaultPop3Client (account.hostName' account.hostPort' account.useSSL' account.userName' account.password' account.timeout_in_minutes)' account.minutes_between_checks)); " is 212.
Long Statement,sidepop.runners,SidePopXmlConfigurator,F:\newReposMay17\chucknorris_sidepop\product\sidepop\runners\SidePopXmlConfigurator.cs,configure_mail_watchers,The length of the statement  "			Log.bound_to (this).log_an_info_event_containing ("{0} is configured to watch for messages with user {1} at {2} every {3} minutes."' ApplicationParameters.name' account.userName' account.hostName' account.minutes_between_checks); " is 229.
Complex Conditional,sidepop.Mime,MimeEntity,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeEntity.cs,CreateAttachment,The conditional expression  "key == "creation-date" || key == "modification-date" || key == "read-date" || key == "size" || key == "filename""  is complex.
Magic Number,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,CreateMailAddress,The following statement contains a magic number: if (match.Success) {  	return CreateMailAddress (match.Groups [1].Value' match.Groups [2].Value);  } else {  	ArgumentException ex = new ArgumentException ("The received mail address is not valid"' "address");  	ex.Data.Add ("address"' address);  	throw ex;  }  
Magic Number,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,CreateMailAddress,The following statement contains a magic number: return CreateMailAddress (match.Groups [1].Value' match.Groups [2].Value);  
Magic Number,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,GetMailAddresses,The following statement contains a magic number: foreach (Match match in email.Matches (addressList)) {  	yield return CreateMailAddress (match.Groups [1].Value' match.Groups [2].Value);  }  
Magic Number,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,GetMailAddresses,The following statement contains a magic number: yield return CreateMailAddress (match.Groups [1].Value' match.Groups [2].Value);  
Magic Number,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,SplitByteArrayWithCrLf,The following statement contains a magic number: for (int i = 0; i < byteArray.Length - 1; i++) {  	byte byte1 = byteArray [i];  	byte byte2 = byteArray [i + 1];  	if (byte1 == Pop3Commands.Cr && byte2 == Pop3Commands.Lf) {  		byte[] line = new byte[i - startIndex];  		Array.Copy (byteArray' startIndex' line' 0' i - startIndex);  		lines.Add (line);  		startIndex = i + 2;  		i++;  	}  }  
Magic Number,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,SplitByteArrayWithCrLf,The following statement contains a magic number: if (byte1 == Pop3Commands.Cr && byte2 == Pop3Commands.Lf) {  	byte[] line = new byte[i - startIndex];  	Array.Copy (byteArray' startIndex' line' 0' i - startIndex);  	lines.Add (line);  	startIndex = i + 2;  	i++;  }  
Magic Number,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,SplitByteArrayWithCrLf,The following statement contains a magic number: startIndex = i + 2;  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: while (encodedByteIndex < encodedBytes.Length) {  	if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  		string hexadecimalString = new String (new char[] {  			(char)(encodedBytes [encodedByteIndex + 1])'  			(char)(encodedBytes [encodedByteIndex + 2])  		});  		int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  		decodedBytes.Add ((byte)hexadecimal);  		encodedByteIndex += 3;  	} else {  		decodedBytes.Add (encodedBytes [encodedByteIndex]);  		encodedByteIndex += 1;  	}  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: while (encodedByteIndex < encodedBytes.Length) {  	if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  		string hexadecimalString = new String (new char[] {  			(char)(encodedBytes [encodedByteIndex + 1])'  			(char)(encodedBytes [encodedByteIndex + 2])  		});  		int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  		decodedBytes.Add ((byte)hexadecimal);  		encodedByteIndex += 3;  	} else {  		decodedBytes.Add (encodedBytes [encodedByteIndex]);  		encodedByteIndex += 1;  	}  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: while (encodedByteIndex < encodedBytes.Length) {  	if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  		string hexadecimalString = new String (new char[] {  			(char)(encodedBytes [encodedByteIndex + 1])'  			(char)(encodedBytes [encodedByteIndex + 2])  		});  		int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  		decodedBytes.Add ((byte)hexadecimal);  		encodedByteIndex += 3;  	} else {  		decodedBytes.Add (encodedBytes [encodedByteIndex]);  		encodedByteIndex += 1;  	}  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  	string hexadecimalString = new String (new char[] {  		(char)(encodedBytes [encodedByteIndex + 1])'  		(char)(encodedBytes [encodedByteIndex + 2])  	});  	int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  	decodedBytes.Add ((byte)hexadecimal);  	encodedByteIndex += 3;  } else {  	decodedBytes.Add (encodedBytes [encodedByteIndex]);  	encodedByteIndex += 1;  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  	string hexadecimalString = new String (new char[] {  		(char)(encodedBytes [encodedByteIndex + 1])'  		(char)(encodedBytes [encodedByteIndex + 2])  	});  	int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  	decodedBytes.Add ((byte)hexadecimal);  	encodedByteIndex += 3;  } else {  	decodedBytes.Add (encodedBytes [encodedByteIndex]);  	encodedByteIndex += 1;  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: if (encodedBytes [encodedByteIndex] == (byte)'=' && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 1])' 1)' @"[0-9A-F]") && Regex.IsMatch (new String ((char)(encodedBytes [encodedByteIndex + 2])' 1)' @"[0-9A-F]")) {  	string hexadecimalString = new String (new char[] {  		(char)(encodedBytes [encodedByteIndex + 1])'  		(char)(encodedBytes [encodedByteIndex + 2])  	});  	int hexadecimal = Int32.Parse (hexadecimalString' NumberStyles.HexNumber);  	decodedBytes.Add ((byte)hexadecimal);  	encodedByteIndex += 3;  } else {  	decodedBytes.Add (encodedBytes [encodedByteIndex]);  	encodedByteIndex += 1;  }  
Magic Number,sidepop.Mime,QuotedPrintableEncoding,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\QuotedPrintableEncoding.cs,DecodeLine,The following statement contains a magic number: encodedByteIndex += 3;  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: if (IsMultiline) {  	items = new List<Pop3ListItemResult> ();  	string[] values;  	string[] lines = GetResponseLines (StripPop3HostMessage (buffer' response.HostMessage));  	foreach (string line in lines) {  		//each line should consist of 'n m' where n is the message number and m is the number of octets  		values = line.Split (' ');  		if (values.Length < 2) {  			throw new Pop3Exception (string.Concat ("Invalid line in multiline response:  "' line));  		}  		items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [0])' Convert.ToInt64 (values [1])));  	}  } //Parse the multiline response.  else {  	items = new List<Pop3ListItemResult> (1);  	string[] values = response.HostMessage.Split (' ');  	//should consist of '+OK messageNumber octets'  	if (values.Length < 3) {  		throw new Pop3Exception (string.Concat ("Invalid response message: "' response.HostMessage));  	}  	items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [1])' Convert.ToInt64 (values [2])));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: if (IsMultiline) {  	items = new List<Pop3ListItemResult> ();  	string[] values;  	string[] lines = GetResponseLines (StripPop3HostMessage (buffer' response.HostMessage));  	foreach (string line in lines) {  		//each line should consist of 'n m' where n is the message number and m is the number of octets  		values = line.Split (' ');  		if (values.Length < 2) {  			throw new Pop3Exception (string.Concat ("Invalid line in multiline response:  "' line));  		}  		items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [0])' Convert.ToInt64 (values [1])));  	}  } //Parse the multiline response.  else {  	items = new List<Pop3ListItemResult> (1);  	string[] values = response.HostMessage.Split (' ');  	//should consist of '+OK messageNumber octets'  	if (values.Length < 3) {  		throw new Pop3Exception (string.Concat ("Invalid response message: "' response.HostMessage));  	}  	items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [1])' Convert.ToInt64 (values [2])));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: if (IsMultiline) {  	items = new List<Pop3ListItemResult> ();  	string[] values;  	string[] lines = GetResponseLines (StripPop3HostMessage (buffer' response.HostMessage));  	foreach (string line in lines) {  		//each line should consist of 'n m' where n is the message number and m is the number of octets  		values = line.Split (' ');  		if (values.Length < 2) {  			throw new Pop3Exception (string.Concat ("Invalid line in multiline response:  "' line));  		}  		items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [0])' Convert.ToInt64 (values [1])));  	}  } //Parse the multiline response.  else {  	items = new List<Pop3ListItemResult> (1);  	string[] values = response.HostMessage.Split (' ');  	//should consist of '+OK messageNumber octets'  	if (values.Length < 3) {  		throw new Pop3Exception (string.Concat ("Invalid response message: "' response.HostMessage));  	}  	items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [1])' Convert.ToInt64 (values [2])));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: foreach (string line in lines) {  	//each line should consist of 'n m' where n is the message number and m is the number of octets  	values = line.Split (' ');  	if (values.Length < 2) {  		throw new Pop3Exception (string.Concat ("Invalid line in multiline response:  "' line));  	}  	items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [0])' Convert.ToInt64 (values [1])));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: if (values.Length < 2) {  	throw new Pop3Exception (string.Concat ("Invalid line in multiline response:  "' line));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: if (values.Length < 3) {  	throw new Pop3Exception (string.Concat ("Invalid response message: "' response.HostMessage));  }  
Magic Number,sidepop.Mail.Commands,ListCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\ListCommand.cs,CreateResponse,The following statement contains a magic number: items.Add (new Pop3ListItemResult (Convert.ToInt32 (values [1])' Convert.ToInt64 (values [2])));  
Magic Number,sidepop.Mail.Commands,Pop3Command,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\Pop3Command.cs,Pop3Command,The following statement contains a magic number: _lastBytesTracker = new LastBytesTracker (5);  
Magic Number,sidepop.Mail.Commands,StatisticsCommand,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Commands\StatisticsCommand.cs,CreateResponse,The following statement contains a magic number: if (values.Length < 3) {  	throw new Pop3Exception (string.Concat ("Invalid response message: "' response.HostMessage));  }  
Magic Number,sidepop.Mail.Responses,RetrieveResponse,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\Responses\RetrieveResponse.cs,RetrieveResponse,The following statement contains a magic number: if (values.Length == 2) {  	Octets = Convert.ToInt64 (values [1]);  }  
Missing Default,sidepop.Mail,SidePOPMailMessage,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mail\SidePOPMailMessage.cs,CreateMailMessageFromEntity,The following switch statement is missing a default case: switch (key.ToLowerInvariant ()) {  case MailHeaders.Bcc:  	PopulateAddressList (value' message.Bcc);  	break;  case MailHeaders.Cc:  	PopulateAddressList (value' message.CC);  	break;  case MailHeaders.From:  	message.From = CreateMailAddress (value);  	break;  case MailHeaders.ReplyTo:  	message.ReplyToList.Add (CreateMailAddress (value));  	break;  case MailHeaders.Subject:  	message.Subject = value;  	break;  case MailHeaders.To:  	PopulateAddressList (value' message.To);  	break;  }  
Missing Default,sidepop.Mime,MimeReader,F:\newReposMay17\chucknorris_sidepop\product\sidepop\Mime\MimeReader.cs,ProcessHeaders,The following switch statement is missing a default case: switch (key) {  case "content-description":  	_entity.ContentDescription = _entity.Headers [key];  	break;  case "content-disposition":  	_entity.ContentDisposition = GetContentDisposition (_entity.Headers [key]);  	break;  case "content-id":  	_entity.ContentId = _entity.Headers [key];  	break;  case "content-transfer-encoding":  	_entity.TransferEncoding = _entity.Headers [key];  	_entity.ContentTransferEncoding = GetTransferEncoding (_entity.Headers [key]);  	break;  case "content-type":  	_entity.SetContentType (GetContentType (_entity.Headers [key]' _throwOnInvalidContentType));  	break;  case "mime-version":  	_entity.MimeVersion = _entity.Headers [key];  	break;  }  
