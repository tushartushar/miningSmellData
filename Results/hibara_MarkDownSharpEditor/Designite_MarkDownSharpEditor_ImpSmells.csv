Implementation smell,Namespace,Class,File,Method,Description
Long Method,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The method has 142 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Load,The method has 100 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,ShowHeaderListContextMenu,The method has 113 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OpenFile,The method has 152 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,backgroundWorker1_DoWork,The method has 110 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OutputToHtmlFile,The method has 157 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The method has 140 lines of code.
Long Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The method has 934 lines of code.
Long Method,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The method has 156 lines of code.
Long Method,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The method has 293 lines of code.
Long Method,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The method has 195 lines of code.
Long Method,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The method has 1391 lines of code.
Long Method,MarkdownDeep,Block,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Block.cs,Render,The method has 153 lines of code.
Long Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The method has 226 lines of code.
Long Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The method has 232 lines of code.
Long Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanHtml,The method has 147 lines of code.
Long Method,MarkdownDeep,LinkDefinition,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\LinkDefinition.cs,ParseLinkTarget,The method has 106 lines of code.
Long Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The method has 155 lines of code.
Long Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessLinkOrImageOrFootnote,The method has 108 lines of code.
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Load,Cyclomatic complexity of the method is 14
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Shown,Cyclomatic complexity of the method is 13
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,ShowHeaderListContextMenu,Cyclomatic complexity of the method is 8
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,Cyclomatic complexity of the method is 14
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,richTextBox1_DragDrop,Cyclomatic complexity of the method is 12
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OpenFile,Cyclomatic complexity of the method is 21
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,backgroundWorker1_DoWork,Cyclomatic complexity of the method is 10
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OutputToHtmlFile,Cyclomatic complexity of the method is 16
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuNewFile_Click,Cyclomatic complexity of the method is 11
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuOutputHtmlFile_Click,Cyclomatic complexity of the method is 8
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,mnuCheckForUpdate_Click,Cyclomatic complexity of the method is 18
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,cmdSearchNext_Click,Cyclomatic complexity of the method is 8
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,cmdSearchPrev_Click,Cyclomatic complexity of the method is 9
Complex Method,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,Cyclomatic complexity of the method is 30
Complex Method,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,Cyclomatic complexity of the method is 46
Complex Method,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,Cyclomatic complexity of the method is 40
Complex Method,MarkdownDeep,Block,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Block.cs,Render,Cyclomatic complexity of the method is 97
Complex Method,MarkdownDeep,Block,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Block.cs,RenderPlain,Cyclomatic complexity of the method is 40
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,Cyclomatic complexity of the method is 36
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,CollapseLines,Cyclomatic complexity of the method is 32
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,Cyclomatic complexity of the method is 42
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessMarkdownEnabledHtml,Cyclomatic complexity of the method is 17
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanHtml,Cyclomatic complexity of the method is 23
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildList,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildDefinitionLists,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,HtmlTag,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\HtmlTag.cs,ParseHelper,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,LinkDefinition,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\LinkDefinition.cs,ParseLinkTarget,Cyclomatic complexity of the method is 22
Complex Method,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,Transform,Cyclomatic complexity of the method is 13
Complex Method,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,HtmlEncode,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,Cyclomatic complexity of the method is 28
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,MakeID,Cyclomatic complexity of the method is 14
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Render,Cyclomatic complexity of the method is 42
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,RenderPlain,Cyclomatic complexity of the method is 28
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,Cyclomatic complexity of the method is 43
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,CreateEmphasisMark,Cyclomatic complexity of the method is 12
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,Cyclomatic complexity of the method is 10
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,Cyclomatic complexity of the method is 17
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,Cyclomatic complexity of the method is 8
Complex Method,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessLinkOrImageOrFootnote,Cyclomatic complexity of the method is 16
Complex Method,MarkdownDeep,StringScanner,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\StringScanner.cs,IsUrlChar,Cyclomatic complexity of the method is 21
Complex Method,MarkdownDeep,TableSpec,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\TableSpec.cs,RenderRow,Cyclomatic complexity of the method is 11
Complex Method,MarkdownDeep,TableSpec,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\TableSpec.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SkipHtmlEntity,Cyclomatic complexity of the method is 9
Complex Method,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SmartHtmlEncodeAmpsAndAngles,Cyclomatic complexity of the method is 19
Complex Method,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SmartHtmlEncodeAmps,Cyclomatic complexity of the method is 10
Complex Method,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,IsEscapableChar,Cyclomatic complexity of the method is 20
Long Statement,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,ReadFromXMLFile,The length of the statement  "				MessageBox.Show ("Failed to load the file of settings. Launch with default options."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 145.
Long Statement,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,SaveToXMLFile,The length of the statement  "			MessageBox.Show ("Failed writing the file of settings.\nExit without saving options."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 146.
Long Statement,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,OptimizeHistoryData,The length of the statement  "		Instance.ArrayHistoryEditedFiles.RemoveRange (ArrayHistoryFilesLimit' Instance.ArrayHistoryEditedFiles.Count - ArrayHistoryFilesLimit - 1); " is 139.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"  $"' Color.FromArgb (settings.ForeColor_LineBreak)' Color.FromArgb (settings.BackColor_LineBreak))' " is 129.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^#[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [1])' Color.FromArgb (settings.BackColor_Headlines [1]))' " is 143.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^.*\n=+$"' Color.FromArgb (settings.ForeColor_Headlines [1])' Color.FromArgb (settings.BackColor_Headlines [1]))' " is 142.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^##[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [2])' Color.FromArgb (settings.BackColor_Headlines [2]))' " is 144.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^###[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [3])' Color.FromArgb (settings.BackColor_Headlines [3]))' " is 145.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^####[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [4])' Color.FromArgb (settings.BackColor_Headlines [4]))' " is 146.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^#####[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [5])' Color.FromArgb (settings.BackColor_Headlines [5]))' " is 147.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^#####[^#]*?$"' Color.FromArgb (settings.ForeColor_Headlines [6])' Color.FromArgb (settings.BackColor_Headlines [6]))' " is 147.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^>.*$"' Color.FromArgb (settings.ForeColor_Blockquotes)' Color.FromArgb (settings.BackColor_Blockquotes))' " is 135.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^ {0'3}\*[ \t]+.*$|^ {0'3}\+[ \t]+.*$|^ {0'3}-[ \t]+.*$|^ {0'3}[0-9]+\.[ \t]+.*$"' Color.FromArgb (settings.ForeColor_Lists)' Color.FromArgb (settings.BackColor_Lists))' " is 198.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^ {4'}$|^\t{1'}$"' Color.FromArgb (settings.ForeColor_CodeBlocks)' Color.FromArgb (settings.BackColor_CodeBlocks))' " is 144.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (horisontal_regex' Color.FromArgb (settings.ForeColor_Horizontal)' Color.FromArgb (settings.BackColor_Horizontal))' " is 141.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"^.+\n-+$"' Color.FromArgb (settings.ForeColor_Headlines [2])' Color.FromArgb (settings.BackColor_Headlines [2]))' " is 142.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"\[.*\]\((https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$'%#]+)[\t{1'}| {1'}]"".*""\)"' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 204.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"\[.*\]\((https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$'%#]+)\)"' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 184.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"\[.*\]\((https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$'%#]+)\)"' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 184.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"\[.*\]:[\t{1'}| {1'}](https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$'%#]+)[\t{1'}| {1'}]"".*"""' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 215.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"\*.*\*|_.*_|\*\*.*\*\*|__.*__"' Color.FromArgb (settings.ForeColor_Emphasis)' Color.FromArgb (settings.BackColor_Emphasis))' " is 153.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"`.*`"' Color.FromArgb (settings.ForeColor_Code)' Color.FromArgb (settings.BackColor_Emphasis))' " is 124.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"!\[.*\]\(.*\)|!\[.*\]\[.*\]|\[.*\]: .*"".*"""' Color.FromArgb (settings.ForeColor_Images)' Color.FromArgb (settings.BackColor_Emphasis))' " is 166.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"<(https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$'%#]+)>"' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 176.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (mail_regex' Color.FromArgb (settings.ForeColor_Links)' Color.FromArgb (settings.BackColor_Links))' " is 125.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		new MarkdownSyntaxKeyword (@"<!--((?:.|\n)+)-->"' Color.FromArgb (settings.ForeColor_Comments)' Color.FromArgb (settings.BackColor_Comments)) " is 141.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("\\s*markdown\\s*=\\s*(?>([\"\'])(.*?)\\1|([^\\s>]*))()"' Color.FromArgb (settings.ForeColor_MarkdownInsideHTMLBlocks)' Color.FromArgb (settings.BackColor_MarkdownInsideHTMLBlocks))); " is 224.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("(</?[\\w:$]+(?:(?=[\\s\"\'/a-zA-Z0-9])(?>\".*?\"|\'.*?\'|.+?)*?)?>|<!--.*?-->|<\\?.*?\\?>|<%.*?%>|<!\\[CDATA\\[.*?\\]\\]>)"' Color.FromArgb (settings.ForeColor_MarkdownInsideHTMLBlocks)' Color.FromArgb (settings.BackColor_MarkdownInsideHTMLBlocks))); " is 292.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("(^.+?)(?:[ ]+.+?)?[ ]*\n(=+|-+)[ ]*\n+"' Color.FromArgb (settings.ForeColor_SpecialAttributes)' Color.FromArgb (settings.BackColor_SpecialAttributes))); " is 194.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("^(\\#{1'6})[ ]*(.+?)[ ]*\\#*(?:[ ]+.+?)?[ ]*\n+"' Color.FromArgb (settings.ForeColor_SpecialAttributes)' Color.FromArgb (settings.BackColor_SpecialAttributes))); " is 203.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("(?:\\n|\\A)(~{3'})[ ]*(?:\\.?([-_:a-zA-Z0-9]+)|\\{.+?\\})?[ ]*\\n((?>(?!\\1[ ]*\\n).*\\n+)+)\\1[ ]*\\n"' Color.FromArgb (settings.ForeColor_FencedCodeBlocks)' Color.FromArgb (settings.BackColor_FencedCodeBlocks))); " is 256.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("^[ ]{0'2}[|](.+)\\n[ ]{0'2}[|]([ ]*[-:]+[-| :]*)\\n((?:[ ]*[|].*\\n)*)(?=\\n|\\Z)"' Color.FromArgb (settings.ForeColor_Tables)' Color.FromArgb (settings.BackColor_Tables))); " is 215.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("^[ ]{0'2}(\\S.*[|].*)\\n[ ]{0'2}([-:]+[ ]*[|][-| :]*)\\n((?:.*[|].*\\n)*)(?=\\n|\\Z)"' Color.FromArgb (settings.ForeColor_Tables)' Color.FromArgb (settings.BackColor_Tables))); " is 218.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("(?>\\A\\n?|(?<=\n\n))(?>(([ ]{0'}((?>.*\\S.*\\n)+)\\n?[ ]{0'}:[ ]+)(?s:.+?)(\\z|\\n{2'}(?=\\S)(?![ ]{0'}(?: \\S.*\\n )+?\\n?[ ]{0'}:[ ]+)(?![ ]{0'}:[ ]+))))"' Color.FromArgb (settings.ForeColor_DefinitionLists)' Color.FromArgb (settings.BackColor_DefinitionLists))); " is 308.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("^[ ]{0'}\\[\\^(.+?)\\][ ]?:[ ]*\n?((?:.+|\n(?!\\[\\^.+?\\]:\\s)(?!\\n+[ ]{0'3}\\S))*)"' Color.FromArgb (settings.ForeColor_Footnotes)' Color.FromArgb (settings.BackColor_Footnotes))); " is 225.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("^[ ]{0'}\\*\\[(.+?)\\][ ]?:(.*)"' Color.FromArgb (settings.ForeColor_Abbreviations)' Color.FromArgb (settings.BackColor_Abbreviations))); " is 179.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword ("\".*?\""' Color.FromArgb (settings.ForeColor_MainText)' Color.FromArgb (settings.BackColor_MainText))); " is 145.
Long Statement,MarkDownSharpEditor,MarkdownSyntaxKeyword,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdownSyntaxKeyword.cs,CreateKeywordList,The length of the statement  "		keywords.Add (new MarkdownSyntaxKeyword (@"\\:|\\\|"' Color.FromArgb (settings.ForeColor_BackslashEscapes)' Color.FromArgb (settings.BackColor_BackslashEscapes))); " is 163.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Shown,The length of the statement  "			DialogResult ret = MessageBox.Show (Resources.MsgConvertAllFilesToHTML' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information); " is 162.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,ShowHeaderListContextMenu,The length of the statement  "		Regex r = new Regex ((string)mkObject [i] [1]' RegexOptions.Multiline | RegexOptions.IgnoreCase | RegexOptions.Compiled); " is 121.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,ShowHeaderListContextMenu,The length of the statement  "				string title = new String ('　'' (int)mkObject [i] [0]) + richTextBox1.Text.Substring (m.Groups [0].Index' m.Groups [0].Length); " is 127.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The length of the statement  "		DialogResult ret = MessageBox.Show (Resources.MsgSaveFileToEnd' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 151.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,richTextBox1_DragDrop,The length of the statement  "			DialogResult ret = MessageBox.Show ("MsgConvertAllFilesToHTML"' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information); " is 154.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OpenFile,The length of the statement  "		DialogResult ret = MessageBox.Show (Resources.MsgSaveFileToEnd' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 151.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Delete_TemporaryHtmlFilePath,The length of the statement  "			MessageBox.Show (Resources.MsgErrorDeleteTemporaryFile + TempHtmlFilePath' Resources.DialogTitleError' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 147.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,PreviewToBrowser,The length of the statement  "		ResultText = richTextBox1.Text.Substring (0' ParagraphStart) + "<!-- edit -->" + richTextBox1.Text.Substring (ParagraphStart); " is 126.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,backgroundWorker1_DoWork,The length of the statement  "		using (FileStream fs = new FileStream (_TemporaryHtmlFilePath' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.Read | FileShare.Delete)) { " is 145.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuNewFile_Click,The length of the statement  "		DialogResult ret = MessageBox.Show (Resources.MsgSaveFileToNewFile' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 155.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuOutputHtmlFile_Click,The length of the statement  "			DialogResult ret = MessageBox.Show (Resources.MsgSameFileOverwrite + "\n" + OutputFilePath' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 212.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuOutputHtmlToClipboard_Click,The length of the statement  "		MessageBox.Show (Resources.MsgOutputToClipboard' Resources.DialogTitleNotice' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 128.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuVieｗJapanese_Click,The length of the statement  "	DialogResult result = MessageBox.Show (Resources.MsgRestartApplication' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 159.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuViewEnglish_Click,The length of the statement  "	DialogResult result = MessageBox.Show (Resources.MsgRestartApplication' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 159.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuContents_Click,The length of the statement  "		MessageBox.Show (Resources.MsgNoHelpFile' Resources.DialogTitleError' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 120.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,mnuCheckForUpdate_Click,The length of the statement  "		if (DialogResult.Yes == MessageBox.Show (this' MsgText' Resources.DialogTitleQuestion' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 139.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuViewSample_Click,The length of the statement  "		MessageBox.Show (Resources.MsgNoSampleFile' Resources.DialogTitleError' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 122.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,cmdSearchNext_Click,The length of the statement  "			result = MessageBox.Show (MsgText' Resources.DialogTitleNotice' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 147.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,cmdSearchPrev_Click,The length of the statement  "			result = MessageBox.Show (MsgText' Resources.DialogTitleNotice' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 147.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,cmdReplaceAll_Click,The length of the statement  "		MsgText = Resources.MsgThisWord + "\"" + ReplaceCount.ToString () + "\"" + Resources.MsgReplaced + "\n" + textBoxSearch.Text + " -> " + textBoxReplace.Text; " is 156.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The length of the statement  "		if (((0x81 <= b1 && b1 <= 0x9F) || (0xE0 <= b1 && b1 <= 0xFC)) && ((0x40 <= b2 && b2 <= 0x7E) || (0x80 <= b2 && b2 <= 0xFC))) { " is 127.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Form1)); " is 126.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler (this.webBrowser1_DocumentCompleted); " is 140.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.contextMenu1.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.contextMenu1_ItemClicked); " is 123.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.contextMenu2.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.contextMenu2_ItemClicked); " is 123.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker1.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler (this.backgroundWorker1_ProgressChanged); " is 137.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler (this.backgroundWorker1_RunWorkerCompleted); " is 146.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker2.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler (this.backgroundWorker2_ProgressChanged); " is 137.
Long Statement,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker2.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler (this.backgroundWorker2_RunWorkerCompleted); " is 146.
Long Statement,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,Form2_Load,The length of the statement  "	AssemblyCopyrightAttribute[] CopyrightAttribute = (AssemblyCopyrightAttribute[])assembly.GetCustomAttributes (typeof(AssemblyCopyrightAttribute)' false); " is 153.
Long Statement,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Form2)); " is 126.
Long Statement,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The length of the statement  "	this.cmdOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The length of the statement  "	this.labelSpecialThanks.Text = "Markdown  -  A text-to-HTML conversion tool for web writers\r\nCopyright (c) 2004 J" + "ohn Gruber\r\n"; " is 136.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelMarkdownInsideHTMLBlocksColor.ForeColor = labelMarkdownInsideHTMLBlocksForeColor.BackColor = Color.FromArgb (obj.ForeColor_MarkdownInsideHTMLBlocks); " is 154.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelMarkdownInsideHTMLBlocksColor.BackColor = labelMarkdownInsideHTMLBlocksBackColor.BackColor = Color.FromArgb (obj.BackColor_MarkdownInsideHTMLBlocks); " is 154.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelSpecialAttributesColor.ForeColor = labelSpecialAttributesForeColor.BackColor = Color.FromArgb (obj.ForeColor_SpecialAttributes); " is 133.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelSpecialAttributesColor.BackColor = labelMarkdownInsideHTMLBlocksBackColor.BackColor = Color.FromArgb (obj.BackColor_SpecialAttributes); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelFencedCodeBlocksColor.ForeColor = labelFencedCodeBlocksForeColor.BackColor = Color.FromArgb (obj.ForeColor_FencedCodeBlocks); " is 130.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelFencedCodeBlocksColor.BackColor = labelFencedCodeBlocksBackColor.BackColor = Color.FromArgb (obj.BackColor_FencedCodeBlocks); " is 130.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelDefinitionListsColor.ForeColor = labelDefinitionListsForeColor.BackColor = Color.FromArgb (obj.ForeColor_DefinitionLists); " is 127.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelDefinitionListsColor.BackColor = labelDefinitionListsBackColor.BackColor = Color.FromArgb (obj.BackColor_DefinitionLists); " is 127.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelAbbreviationsColor.ForeColor = labelAbbreviationsForeColor.BackColor = Color.FromArgb (obj.ForeColor_Abbreviations); " is 121.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelAbbreviationsColor.BackColor = labelAbbreviationsBackColor.BackColor = Color.FromArgb (obj.BackColor_Abbreviations); " is 121.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelBackslashEscapesColor.ForeColor = labelBackslashEscapesForeColor.BackColor = Color.FromArgb (obj.ForeColor_BackslashEscapes); " is 130.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The length of the statement  "	labelBackslashEscapesColor.BackColor = labelBackslashEscapesBackColor.BackColor = Color.FromArgb (obj.BackColor_BackslashEscapes); " is 130.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,RunElevated,The length of the statement  "		MessageBox.Show (Resources.MsgNotFoundAssociationTool + "\n" + MrkSetupAppPath' Resources.DialogTitleError' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 158.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,listViewCssFiles_DragDrop,The length of the statement  "						MessageBox.Show (Resources.MsgSameCSSFileExists + "\n" + FilePath' Resources.DialogTitleInfo' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdAddCssFile_Click,The length of the statement  "					MessageBox.Show (Resources.MsgSameCSSFileExists + "\n" + FilePath' Resources.DialogTitleInfo' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdAddCssFolder_Click,The length of the statement  "		DialogResult ret = MessageBox.Show (Resources.MsgTheseCSSFilesFound + "\n" + MsgText' Resources.DialogTitleQuestion' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 170.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdDeleteCssItem_Click,The length of the statement  "	DialogResult ret = MessageBox.Show (Resources.MsgMoveToTrash + "\n" + FilePath' Resources.DialogTitleQuestion' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2); " is 200.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdDeleteCssItem_Click,The length of the statement  "			Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile (FilePath' Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs' Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin); " is 179.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Form3)); " is 126.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.comboBoxMarkdownType.SelectedIndexChanged += new System.EventHandler (this.comboBoxMarkdownType_SelectedIndexChanged); " is 123.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.comboPreviewInterval.SelectionChangeCommitted += new System.EventHandler (this.comboPreviewInterval_SelectionChangeCommitted); " is 131.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHighLightColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMainBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMainForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMainColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 135.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBlockquotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 146.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBlockquotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 146.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBlockquotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 142.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeBlockBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeBlockForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeBlockColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCommentsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 143.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCommentsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 143.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHorizontalBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 145.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHorizontalForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 145.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelEmphasisBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 143.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelEmphasisForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 143.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLinksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLinksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelImagesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelImagesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine6BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine6ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine5BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine5ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine4BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine4ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine3BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine3ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine2BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine2ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine1BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine1ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLineBreakBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLineBreakForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCommentsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelImagesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 137.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelEmphasisColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 139.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHorizontalColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLinksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 136.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelCodeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 135.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 136.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine6Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine5Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine4Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine3Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine2Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelHeadLine1Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelLineBreakColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMarkdownExtraNotice.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBackslashEscapesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 151.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBackslashEscapesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 151.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelAbbreviationsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 148.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelAbbreviationsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 148.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFootnotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFootnotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelDefinitionListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 150.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelDefinitionListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 150.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelTablesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelTablesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 141.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFencedCodeBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 151.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFencedCodeBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 151.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelSpecialAttributesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 152.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelSpecialAttributesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 152.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelBackslashEscapesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 147.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelAbbreviationsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 144.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFootnotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 140.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelDefinitionListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 146.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelTablesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 137.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelFencedCodeBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 147.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelSpecialAttributesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 148.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMarkdownInsideHTMLBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 159.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMarkdownInsideHTMLBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 159.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.labelMarkdownInsideHTMLBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200))))); " is 155.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.radioButtonChangeEncoding.CheckedChanged += new System.EventHandler (this.radioButtonChangeEncoding_CheckedChanged); " is 121.
Long Statement,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The length of the statement  "	this.radioButtonDefaultEncoding.CheckedChanged += new System.EventHandler (this.radioButtonDefaultEncoding_CheckedChanged); " is 123.
Long Statement,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The length of the statement  "				if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) { " is 146.
Long Statement,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildList,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.ul_li || lines [i - 1].blockType == BlockType.ol_li)) { " is 179.
Long Statement,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildList,The length of the statement  "		while (end_of_li < lines.Count - 1 && lines [end_of_li + 1].blockType != BlockType.ul_li && lines [end_of_li + 1].blockType != BlockType.ol_li) " is 143.
Long Statement,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildDefinition,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.dd)) { " is 130.
Long Statement,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildFootnote,The length of the statement  "		if ((lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.footnote)) { " is 136.
Long Statement,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,OnPrepareLink,The length of the statement  "	if ((NewWindowForExternalLinks && Utils.IsUrlFullyQualified (url)) || (NewWindowForLocalLinks && !Utils.IsUrlFullyQualified (url))) { " is 133.
Long Statement,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,IsWebAddress,The length of the statement  "	return str.StartsWith ("http://") || str.StartsWith ("https://") || str.StartsWith ("ftp://") || str.StartsWith ("file://"); " is 124.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB"  is complex.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "((0x81 <= b1 && b1 <= 0x9F) || (0xE0 <= b1 && b1 <= 0xFC)) && ((0x40 <= b2 && b2 <= 0x7E) || (0x80 <= b2 && b2 <= 0xFC))"  is complex.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))"  is complex.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)"  is complex.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "(0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)"  is complex.
Complex Conditional,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The conditional expression  "(0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The conditional expression  "prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The conditional expression  "(ch == '*' || ch == '+' || ch == '-') && IsLineSpace (CharAtOffset (1))"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanHtml,The conditional expression  "!bHeadBlock && !tag.closing && m_markdown.ExtraMode && !bHasUnsafeContent"  is complex.
Complex Conditional,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,BuildList,The conditional expression  "(lines [i].blockType == BlockType.p) && (lines [i - 1].blockType == BlockType.p || lines [i - 1].blockType == BlockType.ul_li || lines [i - 1].blockType == BlockType.ol_li)"  is complex.
Complex Conditional,MarkdownDeep,LinkDefinition,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\LinkDefinition.cs,ParseLinkTarget,The conditional expression  "(id == null && p.current != ')') || (id != null && !p.eol)"  is complex.
Complex Conditional,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,OnPrepareLink,The conditional expression  "(NewWindowForExternalLinks && Utils.IsUrlFullyQualified (url)) || (NewWindowForLocalLinks && !Utils.IsUrlFullyQualified (url))"  is complex.
Complex Conditional,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,MakeID,The conditional expression  "char.IsLetterOrDigit (ch) || ch == '_' || ch == '-' || ch == '.'"  is complex.
Complex Conditional,MarkdownDeep,StringScanner,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\StringScanner.cs,SkipFootnoteID,The conditional expression  "char.IsLetterOrDigit (ch) || ch == '-' || ch == '_' || ch == ':' || ch == '.' || ch == ' '"  is complex.
Complex Conditional,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SkipHtmlEntity,The conditional expression  "!(char.IsDigit (ch) || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))"  is complex.
Complex Conditional,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,IsValidHtmlID,The conditional expression  "Char.IsLetterOrDigit (ch) || ch == '_' || ch == '-' || ch == ':' || ch == '.'"  is complex.
Empty Catch Block,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Load,The method has an empty catch block.
Empty Catch Block,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The method has an empty catch block.
Empty Catch Block,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,OpenFile,The method has an empty catch block.
Empty Catch Block,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuNewFile_Click,The method has an empty catch block.
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _FormSize.Width = 840;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _FormSize.Height = 640;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _richEditWidth = 320;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _HtmlHighLightColor = Color.FromArgb (255' 255' 200).ToArgb ();  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _HtmlHighLightColor = Color.FromArgb (255' 255' 200).ToArgb ();  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _HtmlHighLightColor = Color.FromArgb (255' 255' 200).ToArgb ();  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _AutoBrowserPreviewInterval = 1000;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_MainText = -16777216;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_LineBreak = -16777216;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_LineBreak = -19276;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [0] = -16777216;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [1] = -16777216;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [2] = -11513776;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [2] = -11513776;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [3] = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [3] = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [4] = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [4] = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [5] = -6250336;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [5] = -6250336;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [6] = -3618616;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Headlines [6] = -3618616;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [1] = -3294317;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [2] = -2240591;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [2] = -2240591;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [3] = -1581625;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [3] = -1581625;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [4] = -1120296;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [4] = -1120296;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [5] = -527382;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [5] = -527382;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [6] = -328976;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Headlines [6] = -328976;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Blockquotes = -4934476;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Lists = -3057141;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_CodeBlocks = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_CodeBlocks = -986896;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Horizontal = -6946666;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Links = -16776961;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Emphasis = -65536;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Code = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Code = -986896;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Images = -16777216;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Images = -12787;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Comments = -16731136;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_MarkdownInsideHTMLBlocks = -26265;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_SpecialAttributes = -10027161;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_FencedCodeBlocks = -10197916;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_FencedCodeBlocks = -986896;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Tables = -6697779;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_DefinitionLists = -3355545;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _BackColor_Footnotes = -16777164;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_Abbreviations = -3342540;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ForeColor_BackslashEscapes = -6710886;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _CodePageNumber = 65001;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ListViewColumnHeader1Width = 128;  
Magic Number,MarkDownSharpEditor,AppSettings,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\AppSettings.cs,AppSettings,The following statement contains a magic number: _ListViewColumnHeader2Width = 512;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Load,The following statement contains a magic number: if (obj.FormState == 1) {  	//最小化 ( Minimize )  	this.WindowState = FormWindowState.Minimized;  } else if (obj.FormState == 2) {  	//最大化 ( Maximize )  	this.WindowState = FormWindowState.Maximized;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_Load,The following statement contains a magic number: if (obj.FormState == 2) {  	//最大化 ( Maximize )  	this.WindowState = FormWindowState.Maximized;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: MarkDownSharpEditor.AppSettings.Instance.Version = ver.Major * 1000 + ver.Minor * 100 + ver.Build * 10 + ver.Revision;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: MarkDownSharpEditor.AppSettings.Instance.Version = ver.Major * 1000 + ver.Minor * 100 + ver.Build * 10 + ver.Revision;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: MarkDownSharpEditor.AppSettings.Instance.Version = ver.Major * 1000 + ver.Minor * 100 + ver.Build * 10 + ver.Revision;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: if (this.WindowState == FormWindowState.Minimized) {  	//最小化 ( Minimize )  	MarkDownSharpEditor.AppSettings.Instance.FormState = 1;  	//一時記憶していた位置・サイズを保存 ( Save temporary position & size value )  	MarkDownSharpEditor.AppSettings.Instance.FormPos = new Point (_preFormPos.X' _preFormPos.Y);  	MarkDownSharpEditor.AppSettings.Instance.FormSize = new Size (_preFormSize.Width' _preFormSize.Height);  } else if (this.WindowState == FormWindowState.Maximized) {  	//最大化 ( Maximize )  	MarkDownSharpEditor.AppSettings.Instance.FormState = 2;  	//一時記憶していた位置・サイズを保存 ( Save temporary position & size value )  	MarkDownSharpEditor.AppSettings.Instance.FormPos = new Point (_preFormPos.X' _preFormPos.Y);  	MarkDownSharpEditor.AppSettings.Instance.FormSize = new Size (_preFormSize.Width' _preFormSize.Height);  } else {  	//通常 ( Normal window )  	MarkDownSharpEditor.AppSettings.Instance.FormState = 0;  	MarkDownSharpEditor.AppSettings.Instance.FormPos = new Point (this.Left' this.Top);  	MarkDownSharpEditor.AppSettings.Instance.FormSize = new Size (this.Width' this.Height);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: if (this.WindowState == FormWindowState.Maximized) {  	//最大化 ( Maximize )  	MarkDownSharpEditor.AppSettings.Instance.FormState = 2;  	//一時記憶していた位置・サイズを保存 ( Save temporary position & size value )  	MarkDownSharpEditor.AppSettings.Instance.FormPos = new Point (_preFormPos.X' _preFormPos.Y);  	MarkDownSharpEditor.AppSettings.Instance.FormSize = new Size (_preFormSize.Width' _preFormSize.Height);  } else {  	//通常 ( Normal window )  	MarkDownSharpEditor.AppSettings.Instance.FormState = 0;  	MarkDownSharpEditor.AppSettings.Instance.FormPos = new Point (this.Left' this.Top);  	MarkDownSharpEditor.AppSettings.Instance.FormSize = new Size (this.Width' this.Height);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_FormClosing,The following statement contains a magic number: MarkDownSharpEditor.AppSettings.Instance.FormState = 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_ResizeEnd,The following statement contains a magic number: if (menuViewWidthEvenly.Checked == true) {  	this.richTextBox1.Width = (splitContainer1.Width - splitContainer1.SplitterWidth) / 2;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,Form1_ResizeEnd,The following statement contains a magic number: this.richTextBox1.Width = (splitContainer1.Width - splitContainer1.SplitterWidth) / 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,browserWaitTimer_Tick,The following statement contains a magic number: if (this.webBrowser1.ReadyState == WebBrowserReadyState.Complete) {  	waitObject.SetResult ("OK");  	waitObject = null;  	browserWaitTimer.Enabled = false;  } else if (timerCount > 20) {  	// 反応ないので終わりにする  	waitObject.SetResult ("OK");  	waitObject = null;  	browserWaitTimer.Enabled = false;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,browserWaitTimer_Tick,The following statement contains a magic number: if (timerCount > 20) {  	// 反応ないので終わりにする  	waitObject.SetResult ("OK");  	waitObject = null;  	browserWaitTimer.Enabled = false;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuSearch_Click,The following statement contains a magic number: panelSearch.Height = 58;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuReplace_Click,The following statement contains a magic number: panelSearch.Height = 58;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuFont_Click,The following statement contains a magic number: fontDialog1.MinSize = 6;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,menuFont_Click,The following statement contains a magic number: fontDialog1.MaxSize = 72;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 2; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	b3 = bytes [i + 2];  	if (b1 == bEscape) {  		if (b2 == bDollar && b3 == bAt) {  			//JIS_0208 1978  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bDollar && b3 == bB) {  			//JIS_0208 1983  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  			//JIS_ASC  			//JIS  			return Encoding.GetEncoding (50220);  		} else if (b2 == bOpen && b3 == bI) {  			//JIS_KANA  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 3) {  			b4 = bytes [i + 3];  			if (b2 == bDollar && b3 == bOpen && b4 == bD) {  				//JIS_0212  				//JIS  				return Encoding.GetEncoding (50220);  			}  			if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  				//JIS_0208 1990  				//JIS  				return Encoding.GetEncoding (50220);  			}  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: b3 = bytes [i + 2];  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == bEscape) {  	if (b2 == bDollar && b3 == bAt) {  		//JIS_0208 1978  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bDollar && b3 == bB) {  		//JIS_0208 1983  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  		//JIS_ASC  		//JIS  		return Encoding.GetEncoding (50220);  	} else if (b2 == bOpen && b3 == bI) {  		//JIS_KANA  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 3) {  		b4 = bytes [i + 3];  		if (b2 == bDollar && b3 == bOpen && b4 == bD) {  			//JIS_0212  			//JIS  			return Encoding.GetEncoding (50220);  		}  		if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  			//JIS_0208 1990  			//JIS  			return Encoding.GetEncoding (50220);  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bAt) {  	//JIS_0208 1978  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bAt) {  	//JIS_0208 1978  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bAt) {  	//JIS_0208 1978  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bAt) {  	//JIS_0208 1978  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bB) {  	//JIS_0208 1983  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bOpen && (b3 == bB || b3 == bJ)) {  	//JIS_ASC  	//JIS  	return Encoding.GetEncoding (50220);  } else if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bOpen && b3 == bI) {  	//JIS_KANA  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 3) {  	b4 = bytes [i + 3];  	if (b2 == bDollar && b3 == bOpen && b4 == bD) {  		//JIS_0212  		//JIS  		return Encoding.GetEncoding (50220);  	}  	if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  		//JIS_0208 1990  		//JIS  		return Encoding.GetEncoding (50220);  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: b4 = bytes [i + 3];  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b2 == bDollar && b3 == bOpen && b4 == bD) {  	//JIS_0212  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  	//JIS_0208 1990  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  	//JIS_0208 1990  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  	//JIS_0208 1990  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 5 && b2 == bAnd && b3 == bAt && b4 == bEscape && bytes [i + 4] == bDollar && bytes [i + 5] == bB) {  	//JIS_0208 1990  	//JIS  	return Encoding.GetEncoding (50220);  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (50220);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0x81 <= b1 && b1 <= 0x9F) || (0xE0 <= b1 && b1 <= 0xFC)) && ((0x40 <= b2 && b2 <= 0x7E) || (0x80 <= b2 && b2 <= 0xFC))) {  		//SJIS_C  		sjis += 2;  		i++;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0x81 <= b1 && b1 <= 0x9F) || (0xE0 <= b1 && b1 <= 0xFC)) && ((0x40 <= b2 && b2 <= 0x7E) || (0x80 <= b2 && b2 <= 0xFC))) {  	//SJIS_C  	sjis += 2;  	i++;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: sjis += 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  		//EUC_C  		//EUC_KANA  		euc += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  			//EUC_0212  			euc += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  		//EUC_C  		//EUC_KANA  		euc += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  			//EUC_0212  			euc += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  		//EUC_C  		//EUC_KANA  		euc += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  			//EUC_0212  			euc += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  		//EUC_C  		//EUC_KANA  		euc += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  			//EUC_0212  			euc += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  		//EUC_C  		//EUC_KANA  		euc += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  			//EUC_0212  			euc += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  	//EUC_C  	//EUC_KANA  	euc += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  	//EUC_C  	//EUC_KANA  	euc += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  	//EUC_C  	//EUC_KANA  	euc += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  	//EUC_C  	//EUC_KANA  	euc += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (((0xA1 <= b1 && b1 <= 0xFE) && (0xA1 <= b2 && b2 <= 0xFE)) || (b1 == 0x8E && (0xA1 <= b2 && b2 <= 0xDF))) {  	//EUC_C  	//EUC_KANA  	euc += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: euc += 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  		//EUC_0212  		euc += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: b3 = bytes [i + 2];  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  	//EUC_0212  	euc += 3;  	i += 2;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (b1 == 0x8F && (0xA1 <= b2 && b2 <= 0xFE) && (0xA1 <= b3 && b3 <= 0xFE)) {  	//EUC_0212  	euc += 3;  	i += 2;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: euc += 3;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: i += 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  		//UTF8  		utf8 += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  			//UTF8  			utf8 += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  		//UTF8  		utf8 += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  			//UTF8  			utf8 += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  		//UTF8  		utf8 += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  			//UTF8  			utf8 += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  		//UTF8  		utf8 += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  			//UTF8  			utf8 += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: for (int i = 0; i < len - 1; i++) {  	b1 = bytes [i];  	b2 = bytes [i + 1];  	if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  		//UTF8  		utf8 += 2;  		i++;  	} else if (i < len - 2) {  		b3 = bytes [i + 2];  		if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  			//UTF8  			utf8 += 3;  			i += 2;  		}  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  	//UTF8  	utf8 += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  	//UTF8  	utf8 += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  	//UTF8  	utf8 += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  	//UTF8  	utf8 += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xC0 <= b1 && b1 <= 0xDF) && (0x80 <= b2 && b2 <= 0xBF)) {  	//UTF8  	utf8 += 2;  	i++;  } else if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: utf8 += 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (i < len - 2) {  	b3 = bytes [i + 2];  	if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  		//UTF8  		utf8 += 3;  		i += 2;  	}  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: b3 = bytes [i + 2];  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  	//UTF8  	utf8 += 3;  	i += 2;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if ((0xE0 <= b1 && b1 <= 0xEF) && (0x80 <= b2 && b2 <= 0xBF) && (0x80 <= b3 && b3 <= 0xBF)) {  	//UTF8  	utf8 += 3;  	i += 2;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: utf8 += 3;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: i += 2;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (euc > sjis && euc > utf8) {  	//EUC  	return Encoding.GetEncoding (51932);  } else if (sjis > euc && sjis > utf8) {  	//SJIS  	return Encoding.GetEncoding (932);  } else if (utf8 > euc && utf8 > sjis) {  	//UTF8  	return Encoding.UTF8;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (euc > sjis && euc > utf8) {  	//EUC  	return Encoding.GetEncoding (51932);  } else if (sjis > euc && sjis > utf8) {  	//SJIS  	return Encoding.GetEncoding (932);  } else if (utf8 > euc && utf8 > sjis) {  	//UTF8  	return Encoding.UTF8;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (51932);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: if (sjis > euc && sjis > utf8) {  	//SJIS  	return Encoding.GetEncoding (932);  } else if (utf8 > euc && utf8 > sjis) {  	//UTF8  	return Encoding.UTF8;  }  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,GetCode,The following statement contains a magic number: return Encoding.GetEncoding (932);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelTextEncoding.Padding = new System.Windows.Forms.Padding (0' 0' 32' 0);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelFontInfo.Padding = new System.Windows.Forms.Padding (0' 0' 32' 0);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelCssFileName.Padding = new System.Windows.Forms.Padding (0' 0' 32' 0);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelHtmlEncoding.Margin = new System.Windows.Forms.Padding (0' 2' 0' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelHtmlEncoding.Margin = new System.Windows.Forms.Padding (0' 2' 0' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelHtmlEncoding.Padding = new System.Windows.Forms.Padding (32' 0' 0' 0);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonStop.Margin = new System.Windows.Forms.Padding (0' 1' 16' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonStop.Margin = new System.Windows.Forms.Padding (0' 1' 16' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonRefresh.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonRefresh.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonForward.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonForward.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonBack.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonBack.Margin = new System.Windows.Forms.Padding (0' 1' 4' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonBrowserPreview.Margin = new System.Windows.Forms.Padding (0' 1' 16' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripButtonBrowserPreview.Margin = new System.Windows.Forms.Padding (0' 1' 16' 2);  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 10;  
Magic Number,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,InitializeComponent,The following statement contains a magic number: this.timer2.Interval = 1000;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.cmdOK.Location = new System.Drawing.Point (276' 277);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.cmdOK.Location = new System.Drawing.Point (276' 277);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.cmdOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.cmdOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point (17' 11);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point (17' 11);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size (48' 48);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size (48' 48);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelAppName.Location = new System.Drawing.Point (79' 11);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelAppName.Location = new System.Drawing.Point (79' 11);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelAppName.Size = new System.Drawing.Size (78' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelAppName.Size = new System.Drawing.Size (78' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelAppName.TabIndex = 2;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Location = new System.Drawing.Point (79' 29);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Location = new System.Drawing.Point (79' 29);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Size = new System.Drawing.Size (68' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Size = new System.Drawing.Size (68' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.TabIndex = 3;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelCopyright.Location = new System.Drawing.Point (79' 47);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelCopyright.Location = new System.Drawing.Point (79' 47);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelCopyright.Size = new System.Drawing.Size (78' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelCopyright.Size = new System.Drawing.Size (78' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelCopyright.TabIndex = 4;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (79' 68);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point (79' 68);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (94' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size (94' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.TabIndex = 5;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialThanks.Location = new System.Drawing.Point (15' 96);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialThanks.Location = new System.Drawing.Point (15' 96);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialThanks.Size = new System.Drawing.Size (335' 24);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialThanks.Size = new System.Drawing.Size (335' 24);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialThanks.TabIndex = 6;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel2.Location = new System.Drawing.Point (15' 121);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel2.Location = new System.Drawing.Point (15' 121);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel2.Size = new System.Drawing.Size (233' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel2.Size = new System.Drawing.Size (233' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel2.TabIndex = 7;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (15' 143);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (15' 143);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (335' 24);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (335' 24);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel3.Location = new System.Drawing.Point (15' 168);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel3.Location = new System.Drawing.Point (15' 168);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel3.Size = new System.Drawing.Size (251' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel3.Size = new System.Drawing.Size (251' 12);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel3.TabIndex = 9;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point (12' 187);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point (12' 187);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Margin = new System.Windows.Forms.Padding (4);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size (338' 82);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size (338' 82);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 10;  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (363' 311);  
Magic Number,MarkDownSharpEditor,Form2,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form2.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (363' 311);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: switch (obj.AutoBrowserPreviewInterval) {  case -1:  	comboPreviewInterval.SelectedIndex = 0;  	break;  case 100:  	comboPreviewInterval.SelectedIndex = 1;  	break;  case 500:  	comboPreviewInterval.SelectedIndex = 2;  	break;  case 1000:  	comboPreviewInterval.SelectedIndex = 3;  	break;  case 2000:  	comboPreviewInterval.SelectedIndex = 4;  	break;  case 3000:  	comboPreviewInterval.SelectedIndex = 5;  	break;  case 4000:  	comboPreviewInterval.SelectedIndex = 6;  	break;  case 5000:  	comboPreviewInterval.SelectedIndex = 7;  	break;  case 10000:  	comboPreviewInterval.SelectedIndex = 8;  	break;  case 30000:  	comboPreviewInterval.SelectedIndex = 9;  	break;  case 60000:  	comboPreviewInterval.SelectedIndex = 10;  	break;  default:  	// 1000ms  	comboPreviewInterval.SelectedIndex = 3;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 2;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 3;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 4;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 5;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 6;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 7;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 8;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 9;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 10;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: comboPreviewInterval.SelectedIndex = 3;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine2Color.ForeColor = labelHeadLine2ForeColor.BackColor = Color.FromArgb (obj.ForeColor_Headlines [2]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine2Color.BackColor = labelHeadLine2BackColor.BackColor = Color.FromArgb (obj.BackColor_Headlines [2]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine3Color.ForeColor = labelHeadLine3ForeColor.BackColor = Color.FromArgb (obj.ForeColor_Headlines [3]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine3Color.BackColor = labelHeadLine3BackColor.BackColor = Color.FromArgb (obj.BackColor_Headlines [3]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine4Color.ForeColor = labelHeadLine4ForeColor.BackColor = Color.FromArgb (obj.ForeColor_Headlines [4]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine4Color.BackColor = labelHeadLine4BackColor.BackColor = Color.FromArgb (obj.BackColor_Headlines [4]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine5Color.ForeColor = labelHeadLine5ForeColor.BackColor = Color.FromArgb (obj.ForeColor_Headlines [5]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine5Color.BackColor = labelHeadLine5BackColor.BackColor = Color.FromArgb (obj.BackColor_Headlines [5]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine6Color.ForeColor = labelHeadLine6ForeColor.BackColor = Color.FromArgb (obj.ForeColor_Headlines [6]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,Form3_Load,The following statement contains a magic number: labelHeadLine6Color.BackColor = labelHeadLine6BackColor.BackColor = Color.FromArgb (obj.BackColor_Headlines [6]);  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: switch (comboPreviewInterval.SelectedIndex) {  case 0:  	//Manual Update  	obj.AutoBrowserPreviewInterval = -1;  	break;  case 1:  	obj.AutoBrowserPreviewInterval = 100;  	break;  case 2:  	obj.AutoBrowserPreviewInterval = 500;  	break;  case 3:  	obj.AutoBrowserPreviewInterval = 1000;  	break;  case 4:  	obj.AutoBrowserPreviewInterval = 2000;  	break;  case 5:  	obj.AutoBrowserPreviewInterval = 3000;  	break;  case 6:  	obj.AutoBrowserPreviewInterval = 4000;  	break;  case 7:  	obj.AutoBrowserPreviewInterval = 5000;  	break;  case 8:  	obj.AutoBrowserPreviewInterval = 10000;  	break;  case 9:  	obj.AutoBrowserPreviewInterval = 30000;  	break;  case 10:  	obj.AutoBrowserPreviewInterval = 60000;  	break;  default:  	// default = 1 sec.  	obj.AutoBrowserPreviewInterval = 1000;  	break;  }  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 100;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 500;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 1000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 2000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 3000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 4000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 5000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 10000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 30000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 60000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.AutoBrowserPreviewInterval = 1000;  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.ForeColor_Headlines [2] = labelHeadLine2Color.ForeColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.BackColor_Headlines [2] = labelHeadLine2Color.BackColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.ForeColor_Headlines [3] = labelHeadLine3Color.ForeColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.BackColor_Headlines [3] = labelHeadLine3Color.BackColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.ForeColor_Headlines [4] = labelHeadLine4Color.ForeColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.BackColor_Headlines [4] = labelHeadLine4Color.BackColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.ForeColor_Headlines [5] = labelHeadLine5Color.ForeColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.BackColor_Headlines [5] = labelHeadLine5Color.BackColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.ForeColor_Headlines [6] = labelHeadLine6Color.ForeColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,cmdApply_Click,The following statement contains a magic number: obj.BackColor_Headlines [6] = labelHeadLine6Color.BackColor.ToArgb ();  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHighLightColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHighLightColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHighLightColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMainColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBlockquotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBlockColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1BackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1ForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCommentsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelImagesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelEmphasisColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHorizontalColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLinksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelCodeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine6Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine5Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine4Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine3Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine2Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelHeadLine1Color.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelLineBreakColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownExtraNotice.ForeColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(0))))' ((int)(((byte)(0)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelBackslashEscapesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelAbbreviationsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFootnotesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelDefinitionListsColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelTablesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelFencedCodeBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelSpecialAttributesColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksBackColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksForeColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkDownSharpEditor,Form3,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form3.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkdownInsideHTMLBlocksColor.BackColor = System.Drawing.Color.FromArgb (((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(200)))));  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: while (!eof) {  	// Remember if the previous line was blank  	bool bPreviousBlank = PrevBlockType == BlockType.Blank;  	// Get the next block  	var b = EvaluateLine ();  	PrevBlockType = b.blockType;  	// For dd blocks' we need to know if it was preceeded by a blank line  	// so store that fact as the block's data.  	if (b.blockType == BlockType.dd) {  		b.data = bPreviousBlank;  	}  	// SetExt header?  	if (b.blockType == BlockType.post_h1 || b.blockType == BlockType.post_h2) {  		if (lines.Count > 0) {  			// Remove the previous line and collapse the current paragraph  			var prevline = lines.Pop ();  			CollapseLines (blocks' lines);  			// If previous line was blank'   			if (prevline.blockType != BlockType.Blank) {  				// Convert the previous line to a heading and add to block list  				prevline.RevertToPlain ();  				prevline.blockType = b.blockType == BlockType.post_h1 ? BlockType.h1 : BlockType.h2;  				blocks.Add (prevline);  				continue;  			}  		}  		// Couldn't apply setext header to a previous line  		if (b.blockType == BlockType.post_h1) {  			// `===` gets converted to normal paragraph  			b.RevertToPlain ();  			lines.Add (b);  		} else {  			// `---` gets converted to hr  			if (b.contentLen >= 3) {  				b.blockType = BlockType.hr;  				blocks.Add (b);  			} else {  				b.RevertToPlain ();  				lines.Add (b);  			}  		}  		continue;  	}  	// Work out the current paragraph type  	BlockType currentBlockType = lines.Count > 0 ? lines [0].blockType : BlockType.Blank;  	// Starting a table?  	if (b.blockType == BlockType.table_spec) {  		// Get the table spec' save position  		TableSpec spec = (TableSpec)b.data;  		int savepos = position;  		if (!StartTable (spec' lines)) {  			// Not a table' revert the tablespec row to plain'  			// fast forward back to where we were up to and continue  			// on as if nothing happened  			position = savepos;  			b.RevertToPlain ();  		} else {  			blocks.Add (b);  			continue;  		}  	}  	// Process this line  	switch (b.blockType) {  	case BlockType.Blank:  		switch (currentBlockType) {  		case BlockType.Blank:  			FreeBlock (b);  			break;  		case BlockType.p:  			CollapseLines (blocks' lines);  			FreeBlock (b);  			break;  		case BlockType.quote:  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  		case BlockType.indent:  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.p:  		switch (currentBlockType) {  		case BlockType.Blank:  		case BlockType.p:  			lines.Add (b);  			break;  		case BlockType.quote:  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank) {  				CollapseLines (blocks' lines);  				lines.Add (b);  			} else {  				lines.Add (b);  			}  			break;  		case BlockType.indent:  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.indent:  		switch (currentBlockType) {  		case BlockType.Blank:  			// Start a code block  			lines.Add (b);  			break;  		case BlockType.p:  		case BlockType.quote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank) {  				// Start a code block after a paragraph  				CollapseLines (blocks' lines);  				lines.Add (b);  			} else {  				// indented line in paragraph' just continue it  				b.RevertToPlain ();  				lines.Add (b);  			}  			break;  		case BlockType.ol_li:  		case BlockType.ul_li:  		case BlockType.dd:  		case BlockType.footnote:  		case BlockType.indent:  			lines.Add (b);  			break;  		default:  			System.Diagnostics.Debug.Assert (false);  			break;  		}  		break;  	case BlockType.quote:  		if (currentBlockType != BlockType.quote) {  			CollapseLines (blocks' lines);  		}  		lines.Add (b);  		break;  	case BlockType.ol_li:  	case BlockType.ul_li:  		switch (currentBlockType) {  		case BlockType.Blank:  			lines.Add (b);  			break;  		case BlockType.p:  		case BlockType.quote:  			var prevline = lines.Last ();  			if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) {  				// List starting after blank line after paragraph or quote  				CollapseLines (blocks' lines);  				lines.Add (b);  			} else {  				// List's can't start in middle of a paragraph  				b.RevertToPlain ();  				lines.Add (b);  			}  			break;  		case BlockType.ol_li:  		case BlockType.ul_li:  			if (b.blockType != BlockType.ol_li && b.blockType != BlockType.ul_li) {  				CollapseLines (blocks' lines);  			}  			lines.Add (b);  			break;  		case BlockType.dd:  		case BlockType.footnote:  			if (b.blockType != currentBlockType) {  				CollapseLines (blocks' lines);  			}  			lines.Add (b);  			break;  		case BlockType.indent:  			// List after code block  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		}  		break;  	case BlockType.dd:  	case BlockType.footnote:  		switch (currentBlockType) {  		case BlockType.Blank:  		case BlockType.p:  		case BlockType.dd:  		case BlockType.footnote:  			CollapseLines (blocks' lines);  			lines.Add (b);  			break;  		default:  			b.RevertToPlain ();  			lines.Add (b);  			break;  		}  		break;  	default:  		CollapseLines (blocks' lines);  		blocks.Add (b);  		break;  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.blockType == BlockType.post_h1 || b.blockType == BlockType.post_h2) {  	if (lines.Count > 0) {  		// Remove the previous line and collapse the current paragraph  		var prevline = lines.Pop ();  		CollapseLines (blocks' lines);  		// If previous line was blank'   		if (prevline.blockType != BlockType.Blank) {  			// Convert the previous line to a heading and add to block list  			prevline.RevertToPlain ();  			prevline.blockType = b.blockType == BlockType.post_h1 ? BlockType.h1 : BlockType.h2;  			blocks.Add (prevline);  			continue;  		}  	}  	// Couldn't apply setext header to a previous line  	if (b.blockType == BlockType.post_h1) {  		// `===` gets converted to normal paragraph  		b.RevertToPlain ();  		lines.Add (b);  	} else {  		// `---` gets converted to hr  		if (b.contentLen >= 3) {  			b.blockType = BlockType.hr;  			blocks.Add (b);  		} else {  			b.RevertToPlain ();  			lines.Add (b);  		}  	}  	continue;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.blockType == BlockType.post_h1) {  	// `===` gets converted to normal paragraph  	b.RevertToPlain ();  	lines.Add (b);  } else {  	// `---` gets converted to hr  	if (b.contentLen >= 3) {  		b.blockType = BlockType.hr;  		blocks.Add (b);  	} else {  		b.RevertToPlain ();  		lines.Add (b);  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The following statement contains a magic number: if (b.contentLen >= 3) {  	b.blockType = BlockType.hr;  	blocks.Add (b);  } else {  	b.RevertToPlain ();  	lines.Add (b);  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '#') {  	// Work out heading level  	int level = 1;  	SkipForward (1);  	while (current == '#') {  		level++;  		SkipForward (1);  	}  	// Limit of 6  	if (level > 6)  		level = 6;  	// Skip any whitespace  	SkipLinespace ();  	// Save start position  	b.contentStart = position;  	// Jump to end  	SkipToEol ();  	// In extra mode' check for a trailing HTML ID  	if (m_markdown.ExtraMode && !m_markdown.SafeMode) {  		int end = position;  		string strID = Utils.StripHtmlID (input' b.contentStart' ref end);  		if (strID != null) {  			b.data = strID;  			position = end;  		}  	}  	// Rewind over trailing hashes  	while (position > b.contentStart && CharAtOffset (-1) == '#') {  		SkipForward (-1);  	}  	// Rewind over trailing spaces  	while (position > b.contentStart && char.IsWhiteSpace (CharAtOffset (-1))) {  		SkipForward (-1);  	}  	// Create the heading block  	b.contentEnd = position;  	SkipToEol ();  	return BlockType.h1 + (level - 1);  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '#') {  	// Work out heading level  	int level = 1;  	SkipForward (1);  	while (current == '#') {  		level++;  		SkipForward (1);  	}  	// Limit of 6  	if (level > 6)  		level = 6;  	// Skip any whitespace  	SkipLinespace ();  	// Save start position  	b.contentStart = position;  	// Jump to end  	SkipToEol ();  	// In extra mode' check for a trailing HTML ID  	if (m_markdown.ExtraMode && !m_markdown.SafeMode) {  		int end = position;  		string strID = Utils.StripHtmlID (input' b.contentStart' ref end);  		if (strID != null) {  			b.data = strID;  			position = end;  		}  	}  	// Rewind over trailing hashes  	while (position > b.contentStart && CharAtOffset (-1) == '#') {  		SkipForward (-1);  	}  	// Rewind over trailing spaces  	while (position > b.contentStart && char.IsWhiteSpace (CharAtOffset (-1))) {  		SkipForward (-1);  	}  	// Create the heading block  	b.contentEnd = position;  	SkipToEol ();  	return BlockType.h1 + (level - 1);  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (level > 6)  	level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (level > 6)  	level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: level = 6;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (leadingSpaces >= 4) {  	b.contentStart = line_start + 4;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (leadingSpaces >= 4) {  	b.contentStart = line_start + 4;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: b.contentStart = line_start + 4;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (tabPos >= 0 && tabPos - line_start < 4) {  	b.contentStart = tabPos + 1;  	return BlockType.indent;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '>') {  	// Block quote followed by space  	if (IsLineSpace (CharAtOffset (1))) {  		// Skip it and create quote block  		SkipForward (2);  		b.contentStart = position;  		return BlockType.quote;  	}  	SkipForward (1);  	b.contentStart = position;  	return BlockType.quote;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (IsLineSpace (CharAtOffset (1))) {  	// Skip it and create quote block  	SkipForward (2);  	b.contentStart = position;  	return BlockType.quote;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '-' || ch == '_' || ch == '*') {  	int count = 0;  	while (!eol) {  		char chType = current;  		if (current == ch) {  			count++;  			SkipForward (1);  			continue;  		}  		if (IsLineSpace (current)) {  			SkipForward (1);  			continue;  		}  		break;  	}  	if (eol && count >= 3) {  		if (m_markdown.UserBreaks)  			return BlockType.user_break;  		else  			return BlockType.hr;  	}  	// Rewind  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (eol && count >= 3) {  	if (m_markdown.UserBreaks)  		return BlockType.user_break;  	else  		return BlockType.hr;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && ch == '*' && CharAtOffset (1) == '[') {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	while (!eol && current != ']') {  		SkipForward (1);  	}  	var abbr = Extract ().Trim ();  	if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  		SkipForward (2);  		SkipLinespace ();  		Mark ();  		SkipToEol ();  		var title = Extract ();  		m_markdown.AddAbbreviation (abbr' title);  		return BlockType.Blank;  	}  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && ch == '*' && CharAtOffset (1) == '[') {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	while (!eol && current != ']') {  		SkipForward (1);  	}  	var abbr = Extract ().Trim ();  	if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  		SkipForward (2);  		SkipLinespace ();  		Mark ();  		SkipToEol ();  		var title = Extract ();  		m_markdown.AddAbbreviation (abbr' title);  		return BlockType.Blank;  	}  	position = b.contentStart;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (current == ']' && CharAtOffset (1) == ':' && !string.IsNullOrEmpty (abbr)) {  	SkipForward (2);  	SkipLinespace ();  	Mark ();  	SkipToEol ();  	var title = Extract ();  	m_markdown.AddAbbreviation (abbr' title);  	return BlockType.Blank;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (ch == '[') {  	// Footnote definition?  	if (m_markdown.ExtraMode && CharAtOffset (1) == '^') {  		var savepos = position;  		SkipForward (2);  		string id;  		if (SkipFootnoteID (out id) && SkipChar (']') && SkipChar (':')) {  			SkipLinespace ();  			b.contentStart = position;  			b.data = id;  			return BlockType.footnote;  		}  		position = savepos;  	}  	// Parse a link definition  	LinkDefinition l = LinkDefinition.ParseLinkDefinition (this' m_markdown.ExtraMode);  	if (l != null) {  		m_markdown.AddLinkDefinition (l);  		return BlockType.Blank;  	}  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: if (m_markdown.ExtraMode && CharAtOffset (1) == '^') {  	var savepos = position;  	SkipForward (2);  	string id;  	if (SkipFootnoteID (out id) && SkipChar (']') && SkipChar (':')) {  		SkipLinespace ();  		b.contentStart = position;  		b.data = id;  		return BlockType.footnote;  	}  	position = savepos;  }  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,EvaluateLine,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (strFence.Length < 3)  	return false;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\r' && input [endCode - 2] == '\n')  	endCode -= 2;  else if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: endCode -= 2;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: if (input [endCode - 1] == '\n' && input [endCode - 2] == '\r')  	endCode -= 2;  else  	endCode--;  
Magic Number,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessFencedCodeBlock,The following statement contains a magic number: endCode -= 2;  
Magic Number,MarkdownDeep,HtmlTag,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: if (p.SkipString ("!--")) {  	p.Mark ();  	if (p.Find ("-->")) {  		var t = new HtmlTag ("!");  		t.m_attributes.Add ("content"' p.Extract ());  		t.m_closed = true;  		p.SkipForward (3);  		return t;  	}  }  
Magic Number,MarkdownDeep,HtmlTag,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: if (p.Find ("-->")) {  	var t = new HtmlTag ("!");  	t.m_attributes.Add ("content"' p.Extract ());  	t.m_closed = true;  	p.SkipForward (3);  	return t;  }  
Magic Number,MarkdownDeep,HtmlTag,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\HtmlTag.cs,ParseHelper,The following statement contains a magic number: p.SkipForward (3);  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: if (url.StartsWith ("/")) {  	if (!string.IsNullOrEmpty (UrlRootLocation)) {  		return UrlRootLocation + url;  	}  	// Need to find domain root  	int pos = UrlBaseLocation.IndexOf ("://");  	if (pos == -1)  		pos = 0;  	else  		pos += 3;  	// Find the first slash after the protocol separator  	pos = UrlBaseLocation.IndexOf ('/'' pos);  	// Get the domain name  	string strDomain = pos < 0 ? UrlBaseLocation : UrlBaseLocation.Substring (0' pos);  	// Join em  	return strDomain + url;  } else {  	if (!UrlBaseLocation.EndsWith ("/"))  		return UrlBaseLocation + "/" + url;  	else  		return UrlBaseLocation + url;  }  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: if (pos == -1)  	pos = 0;  else  	pos += 3;  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,OnQualifyUrl,The following statement contains a magic number: pos += 3;  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: while (!p.eof) {  	char ch = p.current;  	switch (ch) {  	case '\t':  		dest.Append (' ');  		pos++;  		while ((pos % 4) != 0) {  			dest.Append (' ');  			pos++;  		}  		pos--;  		// Compensate for the pos++ below  		break;  	case '\r':  	case '\n':  		dest.Append ('\n');  		pos = 0;  		p.SkipEol ();  		continue;  	case '&':  		dest.Append ("&amp;");  		break;  	case '<':  		dest.Append ("&lt;");  		break;  	case '>':  		dest.Append ("&gt;");  		break;  	case '\"':  		dest.Append ("&quot;");  		break;  	default:  		dest.Append (ch);  		break;  	}  	p.SkipForward (1);  	pos++;  }  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: switch (ch) {  case '\t':  	dest.Append (' ');  	pos++;  	while ((pos % 4) != 0) {  		dest.Append (' ');  		pos++;  	}  	pos--;  	// Compensate for the pos++ below  	break;  case '\r':  case '\n':  	dest.Append ('\n');  	pos = 0;  	p.SkipEol ();  	continue;  case '&':  	dest.Append ("&amp;");  	break;  case '<':  	dest.Append ("&lt;");  	break;  case '>':  	dest.Append ("&gt;");  	break;  case '\"':  	dest.Append ("&quot;");  	break;  default:  	dest.Append (ch);  	break;  }  
Magic Number,MarkdownDeep,Markdown,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\MardownDeep.cs,HtmlEncodeAndConvertTabsToSpaces,The following statement contains a magic number: while ((pos % 4) != 0) {  	dest.Append (' ');  	pos++;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			} else {  				// No' rewrite and encode it  				position = save;  			}  		} else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	} else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			} else {  				// No' rewrite and encode it  				position = save;  			}  		} else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	} else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: while (!eof) {  	int end_text_token = position;  	// Work out token  	Token token = null;  	switch (current) {  	case '*':  	case '_':  		// Create emphasis mark  		token = CreateEmphasisMark ();  		if (token != null) {  			// Store marks in a separate list the we'll resolve later  			switch (token.type) {  			case TokenType.internal_mark:  			case TokenType.opening_mark:  			case TokenType.closing_mark:  				if (emphasis_marks == null) {  					emphasis_marks = new List<Token> ();  				}  				emphasis_marks.Add (token);  				break;  			}  		}  		break;  	case '`':  		token = ProcessCodeSpan ();  		break;  	case '[':  	case '!': {  		// Process link reference  		int linkpos = position;  		token = ProcessLinkOrImageOrFootnote ();  		// Rewind if invalid syntax  		// (the '[' or '!' will be treated as a regular character and processed below)  		if (token == null)  			position = linkpos;  		break;  	}  	case '<': {  		// Is it a valid html tag?  		int save = position;  		HtmlTag tag = HtmlTag.Parse (this);  		if (tag != null) {  			if (!m_Markdown.SafeMode || tag.IsSafe ()) {  				// Yes' create a token for it  				token = CreateToken (TokenType.HtmlTag' save' position - save);  			} else {  				// No' rewrite and encode it  				position = save;  			}  		} else {  			// No' rewind and check if it's a valid autolink eg: <google.com>  			position = save;  			token = ProcessAutoLink ();  			if (token == null)  				position = save;  		}  		break;  	}  	case '&': {  		// Is it a valid html entity  		int save = position;  		string unused = null;  		if (SkipHtmlEntity (ref unused)) {  			// Yes' create a token for it  			token = CreateToken (TokenType.Html' save' position - save);  		}  		break;  	}  	case ' ': {  		// Check for double space at end of a line  		if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  			// Yes' skip it  			SkipForward (2);  			// Don't put br's at the end of a paragraph  			if (!eof) {  				SkipEol ();  				token = CreateToken (TokenType.br' end_text_token' 0);  			}  		}  		break;  	}  	case '\\': {  		// Special handling for escaping <autolinks>  		/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  			// Check followed by an escapable character  			if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  				token = CreateToken (TokenType.Text' position + 1' 1);  				SkipForward (2);  			}  		}  		break;  	}  	}  	// Look for abbreviations.  	if (token == null && Abbreviations != null && !Char.IsLetterOrDigit (CharAtOffset (-1))) {  		var savepos = position;  		foreach (var abbr in Abbreviations) {  			if (SkipString (abbr.Abbr) && !Char.IsLetterOrDigit (current)) {  				token = CreateToken (TokenType.abbreviation' abbr);  				break;  			}  			position = savepos;  		}  	}  	// If token found' append any preceeding text and the new token to the token list  	if (token != null) {  		// Create a token for everything up to the special character  		if (end_text_token > start_text_token) {  			m_Tokens.Add (CreateToken (TokenType.Text' start_text_token' end_text_token - start_text_token));  		}  		// Add the new token  		m_Tokens.Add (token);  		// Remember where the next text token starts  		start_text_token = position;  	} else {  		// Skip a single character and keep looking  		SkipForward (1);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		} else {  			// No' rewrite and encode it  			position = save;  		}  	} else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		} else {  			// No' rewrite and encode it  			position = save;  		}  	} else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		} else {  			// No' rewrite and encode it  			position = save;  		}  	} else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  	// Yes' skip it  	SkipForward (2);  	// Don't put br's at the end of a paragraph  	if (!eof) {  		SkipEol ();  		token = CreateToken (TokenType.br' end_text_token' 0);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  	// Yes' skip it  	SkipForward (2);  	// Don't put br's at the end of a paragraph  	if (!eof) {  		SkipEol ();  		token = CreateToken (TokenType.br' end_text_token' 0);  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  	token = CreateToken (TokenType.Text' position + 1' 1);  	SkipForward (2);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following statement contains a magic number: SkipForward (2);  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: while (bContinue) {  	bContinue = false;  	for (int i = 0; i < marks.Count; i++) {  		// Get the next opening or internal mark  		Token opening_mark = marks [i];  		if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  			continue;  		// Look for a matching closing mark  		for (int j = i + 1; j < marks.Count; j++) {  			// Get the next closing or internal mark  			Token closing_mark = marks [j];  			if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  				break;  			// Ignore if different type (ie: `*` vs `_`)  			if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  				continue;  			// strong or em?  			int style = Math.Min (opening_mark.length' closing_mark.length);  			// Triple or more on both ends?  			if (style >= 3) {  				style = (style % 2) == 1 ? 1 : 2;  			}  			// Split the opening mark' keeping the RHS  			if (opening_mark.length > style) {  				opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  				i--;  			}  			// Split the closing mark' keeping the LHS  			if (closing_mark.length > style) {  				SplitMarkToken (tokens' marks' closing_mark' style);  			}  			// Connect them  			opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  			closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  			// Remove the matched marks  			marks.Remove (opening_mark);  			marks.Remove (closing_mark);  			bContinue = true;  			break;  		}  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			break;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// strong or em?  		int style = Math.Min (opening_mark.length' closing_mark.length);  		// Triple or more on both ends?  		if (style >= 3) {  			style = (style % 2) == 1 ? 1 : 2;  		}  		// Split the opening mark' keeping the RHS  		if (opening_mark.length > style) {  			opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  			i--;  		}  		// Split the closing mark' keeping the LHS  		if (closing_mark.length > style) {  			SplitMarkToken (tokens' marks' closing_mark' style);  		}  		// Connect them  		opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  		closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  		// Remove the matched marks  		marks.Remove (opening_mark);  		marks.Remove (closing_mark);  		bContinue = true;  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		break;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// strong or em?  	int style = Math.Min (opening_mark.length' closing_mark.length);  	// Triple or more on both ends?  	if (style >= 3) {  		style = (style % 2) == 1 ? 1 : 2;  	}  	// Split the opening mark' keeping the RHS  	if (opening_mark.length > style) {  		opening_mark = SplitMarkToken (tokens' marks' opening_mark' opening_mark.length - style);  		i--;  	}  	// Split the closing mark' keeping the LHS  	if (closing_mark.length > style) {  		SplitMarkToken (tokens' marks' closing_mark' style);  	}  	// Connect them  	opening_mark.type = style == 1 ? TokenType.open_em : TokenType.open_strong;  	closing_mark.type = style == 1 ? TokenType.close_em : TokenType.close_strong;  	// Remove the matched marks  	marks.Remove (opening_mark);  	marks.Remove (closing_mark);  	bContinue = true;  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: if (style >= 3) {  	style = (style % 2) == 1 ? 1 : 2;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: style = (style % 2) == 1 ? 1 : 2;  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks,The following statement contains a magic number: style = (style % 2) == 1 ? 1 : 2;  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int i = 0; i < marks.Count; i++) {  	// Get the next opening or internal mark  	Token opening_mark = marks [i];  	if (opening_mark.type != TokenType.opening_mark && opening_mark.type != TokenType.internal_mark)  		continue;  	if (opening_mark.length < 2)  		continue;  	// Look for a matching closing mark  	for (int j = i + 1; j < marks.Count; j++) {  		// Get the next closing or internal mark  		Token closing_mark = marks [j];  		if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  			continue;  		// Ignore if different type (ie: `*` vs `_`)  		if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  			continue;  		// Must be at least two  		if (closing_mark.length < 2)  			continue;  		// Split the opening mark' keeping the LHS  		if (opening_mark.length > 2) {  			SplitMarkToken (tokens' marks' opening_mark' 2);  		}  		// Split the closing mark' keeping the RHS  		if (closing_mark.length > 2) {  			closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  		}  		// Connect them  		opening_mark.type = TokenType.open_strong;  		closing_mark.type = TokenType.close_strong;  		// Continue after the closing mark  		i = marks.IndexOf (closing_mark);  		break;  	}  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length < 2)  	continue;  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: for (int j = i + 1; j < marks.Count; j++) {  	// Get the next closing or internal mark  	Token closing_mark = marks [j];  	if (closing_mark.type != TokenType.closing_mark && closing_mark.type != TokenType.internal_mark)  		continue;  	// Ignore if different type (ie: `*` vs `_`)  	if (input [opening_mark.startOffset] != input [closing_mark.startOffset])  		continue;  	// Must be at least two  	if (closing_mark.length < 2)  		continue;  	// Split the opening mark' keeping the LHS  	if (opening_mark.length > 2) {  		SplitMarkToken (tokens' marks' opening_mark' 2);  	}  	// Split the closing mark' keeping the RHS  	if (closing_mark.length > 2) {  		closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  	}  	// Connect them  	opening_mark.type = TokenType.open_strong;  	closing_mark.type = TokenType.close_strong;  	// Continue after the closing mark  	i = marks.IndexOf (closing_mark);  	break;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length < 2)  	continue;  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length > 2) {  	SplitMarkToken (tokens' marks' opening_mark' 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (opening_mark.length > 2) {  	SplitMarkToken (tokens' marks' opening_mark' 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: SplitMarkToken (tokens' marks' opening_mark' 2);  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length > 2) {  	closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: if (closing_mark.length > 2) {  	closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ResolveEmphasisMarks_classic,The following statement contains a magic number: closing_mark = SplitMarkToken (tokens' marks' closing_mark' closing_mark.length - 2);  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: while (!eof) {  	char ch = current;  	// No whitespace allowed  	if (char.IsWhiteSpace (ch))  		break;  	// End found?  	if (ch == '>') {  		string url = Utils.UnescapeString (Extract ()' ExtraMode);  		LinkInfo li = null;  		if (Utils.IsEmailAddress (url)) {  			string link_text;  			if (url.StartsWith ("mailto:")) {  				link_text = url.Substring (7);  			} else {  				link_text = url;  				url = "mailto:" + url;  			}  			li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  		} else if (Utils.IsWebAddress (url)) {  			li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  		}  		if (li != null) {  			SkipForward (1);  			return CreateToken (TokenType.link' li);  		}  		return null;  	}  	this.SkipEscapableChar (ExtraMode);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (ch == '>') {  	string url = Utils.UnescapeString (Extract ()' ExtraMode);  	LinkInfo li = null;  	if (Utils.IsEmailAddress (url)) {  		string link_text;  		if (url.StartsWith ("mailto:")) {  			link_text = url.Substring (7);  		} else {  			link_text = url;  			url = "mailto:" + url;  		}  		li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  	} else if (Utils.IsWebAddress (url)) {  		li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  	}  	if (li != null) {  		SkipForward (1);  		return CreateToken (TokenType.link' li);  	}  	return null;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (Utils.IsEmailAddress (url)) {  	string link_text;  	if (url.StartsWith ("mailto:")) {  		link_text = url.Substring (7);  	} else {  		link_text = url;  		url = "mailto:" + url;  	}  	li = new LinkInfo (new LinkDefinition ("auto"' url' null)' link_text);  } else if (Utils.IsWebAddress (url)) {  	li = new LinkInfo (new LinkDefinition ("auto"' url' null)' url);  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: if (url.StartsWith ("mailto:")) {  	link_text = url.Substring (7);  } else {  	link_text = url;  	url = "mailto:" + url;  }  
Magic Number,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,ProcessAutoLink,The following statement contains a magic number: link_text = url.Substring (7);  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	} else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	} else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	} else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	} else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: foreach (char ch in str) {  	int x = r.Next () % 100;  	if (x > 90 && ch != '@') {  		dest.Append (ch);  	} else if (x > 45) {  		dest.Append ("&#");  		dest.Append (((int)ch).ToString ());  		dest.Append (";");  	} else {  		dest.Append ("&#x");  		dest.Append (((int)ch).ToString ("x"));  		dest.Append (";");  	}  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 90 && ch != '@') {  	dest.Append (ch);  } else if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  } else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 90 && ch != '@') {  	dest.Append (ch);  } else if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  } else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,HtmlRandomize,The following statement contains a magic number: if (x > 45) {  	dest.Append ("&#");  	dest.Append (((int)ch).ToString ());  	dest.Append (";");  } else {  	dest.Append ("&#x");  	dest.Append (((int)ch).ToString ("x"));  	dest.Append (";");  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SkipEscapableChar,The following statement contains a magic number: if (p.current == '\\' && IsEscapableChar (p.CharAtOffset (1)' ExtraMode)) {  	p.SkipForward (2);  } else {  	p.SkipForward (1);  }  
Magic Number,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,SkipEscapableChar,The following statement contains a magic number: p.SkipForward (2);  
Missing Default,MarkDownSharpEditor,Form1,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\Form1.cs,mnuCheckForUpdate_Click,The following switch statement is missing a default case: switch (elementName) {  case "version":  	newVersion = new Version (reader.Value);  	break;  case "url":  	url = reader.Value;  	break;  case "date":  	dt = reader.Value;  	break;  }  
Missing Default,MarkdownDeep,Block,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Block.cs,RenderPlain,The following switch statement is missing a default case: switch (blockType) {  case BlockType.Blank:  	return;  case BlockType.p:  case BlockType.span:  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" ");  	break;  case BlockType.h1:  case BlockType.h2:  case BlockType.h3:  case BlockType.h4:  case BlockType.h5:  case BlockType.h6:  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" - ");  	break;  case BlockType.ol_li:  case BlockType.ul_li:  	b.Append ("* ");  	m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	b.Append (" ");  	break;  case BlockType.dd:  	if (children != null) {  		b.Append ("\n");  		RenderChildrenPlain (m' b);  	} else  		m.SpanFormatter.FormatPlain (b' buf' contentStart' contentLen);  	break;  case BlockType.dt: {  	if (children == null) {  		foreach (var l in Content.Split ('\n')) {  			var str = l.Trim ();  			m.SpanFormatter.FormatPlain (b' str' 0' str.Length);  		}  	} else {  		RenderChildrenPlain (m' b);  	}  	break;  }  case BlockType.dl:  	RenderChildrenPlain (m' b);  	return;  case BlockType.codeblock:  	foreach (var line in children) {  		b.Append (line.buf' line.contentStart' line.contentLen);  		b.Append (" ");  	}  	return;  case BlockType.quote:  case BlockType.li:  case BlockType.ol:  case BlockType.ul:  case BlockType.HtmlTag:  	RenderChildrenPlain (m' b);  	return;  }  
Missing Default,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ScanLines,The following switch statement is missing a default case: switch (currentBlockType) {  case BlockType.Blank:  	lines.Add (b);  	break;  case BlockType.p:  case BlockType.quote:  	var prevline = lines.Last ();  	if (prevline.blockType == BlockType.Blank || m_parentType == BlockType.ol_li || m_parentType == BlockType.ul_li || m_parentType == BlockType.dd) {  		// List starting after blank line after paragraph or quote  		CollapseLines (blocks' lines);  		lines.Add (b);  	} else {  		// List's can't start in middle of a paragraph  		b.RevertToPlain ();  		lines.Add (b);  	}  	break;  case BlockType.ol_li:  case BlockType.ul_li:  	if (b.blockType != BlockType.ol_li && b.blockType != BlockType.ul_li) {  		CollapseLines (blocks' lines);  	}  	lines.Add (b);  	break;  case BlockType.dd:  case BlockType.footnote:  	if (b.blockType != currentBlockType) {  		CollapseLines (blocks' lines);  	}  	lines.Add (b);  	break;  case BlockType.indent:  	// List after code block  	CollapseLines (blocks' lines);  	lines.Add (b);  	break;  }  
Missing Default,MarkdownDeep,BlockProcessor,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\BlockProcessor.cs,ProcessMarkdownEnabledHtml,The following switch statement is missing a default case: switch (mode) {  case MarkdownInHtmlMode.Span: {  	Block span = this.CreateBlock ();  	span.buf = input;  	span.blockType = BlockType.span;  	span.contentStart = inner_pos;  	span.contentLen = tagpos - inner_pos;  	b.children = new List<Block> ();  	b.children.Add (span);  	break;  }  case MarkdownInHtmlMode.Block:  case MarkdownInHtmlMode.Deep: {  	// Scan the internal content  	var bp = new BlockProcessor (m_markdown' mode == MarkdownInHtmlMode.Deep);  	b.children = bp.ScanLines (input' inner_pos' tagpos - inner_pos);  	break;  }  case MarkdownInHtmlMode.Off: {  	if (bHasUnsafeContent) {  		b.blockType = BlockType.unsafe_html;  		b.contentEnd = position;  	} else {  		Block span = this.CreateBlock ();  		span.buf = input;  		span.blockType = BlockType.html;  		span.contentStart = inner_pos;  		span.contentLen = tagpos - inner_pos;  		b.children = new List<Block> ();  		b.children.Add (span);  	}  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,MakeID,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.link:  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  
Missing Default,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Render,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	// Append encoded text  	m_Markdown.HtmlEncode (sb' str' t.startOffset' t.length);  	break;  case TokenType.HtmlTag:  	// Append html as is  	Utils.SmartHtmlEncodeAmps (sb' str' t.startOffset' t.length);  	break;  case TokenType.Html:  case TokenType.opening_mark:  case TokenType.closing_mark:  case TokenType.internal_mark:  	// Append html as is  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.br:  	sb.Append ("<br />\n");  	break;  case TokenType.open_em:  	sb.Append ("<em>");  	break;  case TokenType.close_em:  	sb.Append ("</em>");  	break;  case TokenType.open_strong:  	sb.Append ("<strong>");  	break;  case TokenType.close_strong:  	sb.Append ("</strong>");  	break;  case TokenType.code_span:  	sb.Append ("<code>");  	m_Markdown.HtmlEncode (sb' str' t.startOffset' t.length);  	sb.Append ("</code>");  	break;  case TokenType.link: {  	LinkInfo li = (LinkInfo)t.data;  	var sf = new SpanFormatter (m_Markdown);  	sf.DisableLinks = true;  	li.def.RenderLink (m_Markdown' sb' sf.Format (li.link_text));  	break;  }  case TokenType.img: {  	LinkInfo li = (LinkInfo)t.data;  	li.def.RenderImg (m_Markdown' sb' li.link_text);  	break;  }  case TokenType.footnote: {  	FootnoteReference r = (FootnoteReference)t.data;  	sb.Append ("<sup id=\"fnref:");  	sb.Append (r.id);  	sb.Append ("\"><a href=\"#fn:");  	sb.Append (r.id);  	sb.Append ("\" rel=\"footnote\">");  	sb.Append (r.index + 1);  	sb.Append ("</a></sup>");  	break;  }  case TokenType.abbreviation: {  	Abbreviation a = (Abbreviation)t.data;  	sb.Append ("<abbr");  	if (!String.IsNullOrEmpty (a.Title)) {  		sb.Append (" title=\"");  		m_Markdown.HtmlEncode (sb' a.Title' 0' a.Title.Length);  		sb.Append ("\"");  	}  	sb.Append (">");  	m_Markdown.HtmlEncode (sb' a.Abbr' 0' a.Abbr.Length);  	sb.Append ("</abbr>");  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,RenderPlain,The following switch statement is missing a default case: switch (t.type) {  case TokenType.Text:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.HtmlTag:  	break;  case TokenType.Html:  case TokenType.opening_mark:  case TokenType.closing_mark:  case TokenType.internal_mark:  	break;  case TokenType.br:  	break;  case TokenType.open_em:  case TokenType.close_em:  case TokenType.open_strong:  case TokenType.close_strong:  	break;  case TokenType.code_span:  	sb.Append (str' t.startOffset' t.length);  	break;  case TokenType.link: {  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  case TokenType.img: {  	LinkInfo li = (LinkInfo)t.data;  	sb.Append (li.link_text);  	break;  }  case TokenType.footnote:  case TokenType.abbreviation:  	break;  }  
Missing Default,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following switch statement is missing a default case: switch (current) {  case '*':  case '_':  	// Create emphasis mark  	token = CreateEmphasisMark ();  	if (token != null) {  		// Store marks in a separate list the we'll resolve later  		switch (token.type) {  		case TokenType.internal_mark:  		case TokenType.opening_mark:  		case TokenType.closing_mark:  			if (emphasis_marks == null) {  				emphasis_marks = new List<Token> ();  			}  			emphasis_marks.Add (token);  			break;  		}  	}  	break;  case '`':  	token = ProcessCodeSpan ();  	break;  case '[':  case '!': {  	// Process link reference  	int linkpos = position;  	token = ProcessLinkOrImageOrFootnote ();  	// Rewind if invalid syntax  	// (the '[' or '!' will be treated as a regular character and processed below)  	if (token == null)  		position = linkpos;  	break;  }  case '<': {  	// Is it a valid html tag?  	int save = position;  	HtmlTag tag = HtmlTag.Parse (this);  	if (tag != null) {  		if (!m_Markdown.SafeMode || tag.IsSafe ()) {  			// Yes' create a token for it  			token = CreateToken (TokenType.HtmlTag' save' position - save);  		} else {  			// No' rewrite and encode it  			position = save;  		}  	} else {  		// No' rewind and check if it's a valid autolink eg: <google.com>  		position = save;  		token = ProcessAutoLink ();  		if (token == null)  			position = save;  	}  	break;  }  case '&': {  	// Is it a valid html entity  	int save = position;  	string unused = null;  	if (SkipHtmlEntity (ref unused)) {  		// Yes' create a token for it  		token = CreateToken (TokenType.Html' save' position - save);  	}  	break;  }  case ' ': {  	// Check for double space at end of a line  	if (CharAtOffset (1) == ' ' && IsLineEnd (CharAtOffset (2))) {  		// Yes' skip it  		SkipForward (2);  		// Don't put br's at the end of a paragraph  		if (!eof) {  			SkipEol ();  			token = CreateToken (TokenType.br' end_text_token' 0);  		}  	}  	break;  }  case '\\': {  	// Special handling for escaping <autolinks>  	/* 							if (CharAtOffset(1) == '<') 							{ 								// Is it an autolink? 								int savepos = position; 								SkipForward(1); 								bool AutoLink = ProcessAutoLink() != null; 								position = savepos;  								if (AutoLink) 								{ 									token = CreateToken(TokenType.Text' position + 1' 1); 									SkipForward(2); 								} 							} 							else 							 */{  		// Check followed by an escapable character  		if (Utils.IsEscapableChar (CharAtOffset (1)' ExtraMode)) {  			token = CreateToken (TokenType.Text' position + 1' 1);  			SkipForward (2);  		}  	}  	break;  }  }  
Missing Default,MarkdownDeep,SpanFormatter,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\SpanFormatter.cs,Tokenize,The following switch statement is missing a default case: switch (token.type) {  case TokenType.internal_mark:  case TokenType.opening_mark:  case TokenType.closing_mark:  	if (emphasis_marks == null) {  		emphasis_marks = new List<Token> ();  	}  	emphasis_marks.Add (token);  	break;  }  
Missing Default,MarkdownDeep,TableSpec,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\TableSpec.cs,RenderRow,The following switch statement is missing a default case: switch (Columns [i]) {  case ColumnAlignment.Left:  	b.Append (" align=\"left\"");  	break;  case ColumnAlignment.Right:  	b.Append (" align=\"right\"");  	break;  case ColumnAlignment.Center:  	b.Append (" align=\"center\"");  	break;  }  
Missing Default,MarkdownDeep,Utils,F:\newReposMay17\hibara_MarkDownSharpEditor\MarkDownSharpEditor\MarkdonnDeep\Utils.cs,IsEscapableChar,The following switch statement is missing a default case: switch (ch) {  case '\\':  case '`':  case '*':  case '_':  case '{':  case '}':  case '[':  case ']':  case '(':  case ')':  case '>':  // Not in markdown documentation' but is in markdown.pl  case '#':  case '+':  case '-':  case '.':  case '!':  	return true;  case ':':  case '|':  case '=':  // Added for escaping Setext H1  case '<':  	return ExtraMode;  }  
