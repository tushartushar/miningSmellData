Implementation smell,Namespace,Class,File,Method,Description
Long Method,Couchbase.Query,QueryOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryOptions.cs,GetFormValues,The method has 132 lines of code.
Long Method,Couchbase.Search,SearchDataMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\SearchDataMapper.cs,ReadStatus,The method has 109 lines of code.
Complex Method,Couchbase,ConnectionString,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\ConnectionString.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core.Configuration.Server,BucketConfigExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfigExtensions.cs,ReplacePlaceholderWithBootstrapHost,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core.Diagnostics.Tracing,OrphanedResponseLogger,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\OrphanedResponseLogger.cs,DoWork,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Core.Diagnostics.Tracing,SpanSummary,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\SpanSummary.cs,PopulateSummary,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.Diagnostics.Tracing,ThresholdLoggingTracer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\ThresholdLoggingTracer.cs,DoWork,Cyclomatic complexity of the method is 11
Complex Method,Couchbase.Core.IO,SocketAsyncStateExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\SocketAsyncStateExtensions.cs,ThrowException,Cyclomatic complexity of the method is 28
Complex Method,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,GetMessage,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core.IO.Operations,OperationResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationResult.cs,SetException,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.IO.Transcoders,DefaultTranscoder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Transcoders\DefaultTranscoder.cs,Encode,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.IO.Transcoders,DefaultTranscoder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Transcoders\DefaultTranscoder.cs,Decode,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core.IO.Transcoders,DefaultTranscoder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Transcoders\DefaultTranscoder.cs,Decode,Cyclomatic complexity of the method is 24
Complex Method,Couchbase.Core.Retry,ExceptionExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ExceptionExtensions.cs,ResolveRetryReason,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ContentAs,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Query,QueryOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryOptions.cs,GetFormValues,Cyclomatic complexity of the method is 29
Complex Method,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,GetEnumerator,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ReadResponseAttributes,Cyclomatic complexity of the method is 23
Complex Method,Couchbase.Search,SearchDataMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\SearchDataMapper.cs,ReadStatus,Cyclomatic complexity of the method is 21
Complex Method,Couchbase.Search,SearchOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\SearchOptions.cs,ToJson,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Views,ViewQuery,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Views\ViewQuery.cs,GetQueryParams,Cyclomatic complexity of the method is 19
Long Parameter List,Couchbase.Core.Configuration.Server.Streaming,HttpStreamingConfigListener,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\Streaming\HttpStreamingConfigListener.cs,HttpStreamingConfigListener,The method has 5 parameters. Parameters: bucketName' clusterOptions' httpClient' couchbaseContext' cancellationToken
Long Parameter List,Couchbase.Core.Diagnostics.Tracing,Span,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\Span.cs,Span,The method has 6 parameters. Parameters: tracer' operationName' parentContext' startTimestamp' tags' references
Long Parameter List,Couchbase.Core.IO.Transcoders,TypeTranscoderExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Transcoders\TypeTranscoderExtensions.cs,Decode,The method has 6 parameters. Parameters: typeTranscoder' buffer' offset' length' flags' opcode
Long Parameter List,Couchbase.Core.IO.Transcoders,TypeTranscoderExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Transcoders\TypeTranscoderExtensions.cs,Decode,The method has 6 parameters. Parameters: typeTranscoder' buffer' offset' length' flags' opcode
Long Parameter List,Couchbase.Core.Sharding,VBucket,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucket.cs,VBucket,The method has 7 parameters. Parameters: endPoints' index' primary' replicas' rev' vBucketServerMap' bucketName
Long Parameter List,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,The method has 5 parameters. Parameters: context' clusterNodes' ping' serviceTypes' token
Long Parameter List,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,CreateEndpointHealth,The method has 5 parameters. Parameters: bucketName' serviceType' createdAt' lastActivity' endPoint
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,CreateSpec,The method has 6 parameters. Parameters: opCode' path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,Insert,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,Upsert,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayAppend,The method has 5 parameters. Parameters: path' values' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayAppend,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayPrepend,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayPrepend,The method has 5 parameters. Parameters: path' values' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayInsert,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayInsert,The method has 5 parameters. Parameters: path' values' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,ArrayAddUnique,The method has 5 parameters. Parameters: path' value' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,Increment,The method has 5 parameters. Parameters: path' delta' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\MutateInSpec.cs,Decrement,The method has 5 parameters. Parameters: path' delta' createPath' isXattr' removeBrackets
Long Parameter List,Couchbase.KeyValue,MutateInOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\Options.cs,WithExpiry,The method has 5 parameters. Parameters: days' hours' minutes' seconds' milliseconds
Long Parameter List,Couchbase.Management.Query,QueryIndexManagerExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Query\QueryIndexManagerExtensions.cs,CreateIndexAsync,The method has 5 parameters. Parameters: queryIndexManager' bucketName' indexName' fields' configureOptions
Long Parameter List,Couchbase.Search.Sort,FieldSearchSort,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\Sort\FieldSearchSort.cs,FieldSearchSort,The method has 5 parameters. Parameters: field' type' mode' missing' decending
Long Parameter List,Couchbase.Search.Sort,GeoDistanceSearchSort,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\Sort\GeoDistanceSearchSort.cs,GeoDistanceSearchSort,The method has 5 parameters. Parameters: longitude' latitude' field' unit' decending
Long Identifier,Couchbase.Core.IO.Serializers,DefaultSerializer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Serializers\DefaultSerializer.cs,,The length of the parameter StaticSupportedDeserializationOptions is 37.
Long Identifier,Couchbase.Query,QueryClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryClient.cs,,The length of the parameter Error5000MsgQueryPortIndexNotFound is 34.
Long Identifier,Couchbase.Query,QueryClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryClient.cs,,The length of the parameter EnhancedPreparedStatementsEnabled is 33.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter MissingOrEmptyServerResolverType is 32.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter ErrorRetrievingServersUsingServerResolver is 41.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter UnrecognisedServerResolverType is 30.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter ServerResolverTypeDoesntImplementInterface is 42.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter ServerResolverReturnedNoservers is 31.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter XAttriburesNotAvailableMessage is 30.
Long Identifier,Couchbase.Utils,ExceptionUtil,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ExceptionUtil.cs,,The length of the parameter ParameterCannotBeNullOrEmptyFormat is 34.
Long Statement,Couchbase.Analytics,AnalyticsClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsClient.cs,QueryAsync,The length of the statement  "                    //using (var scope = ClientConfiguration.Tracer.BuildSpan(queryRequest' CouchbaseOperationNames.ResponseDecoding).StartActive()) " is 128.
Long Statement,Couchbase.Analytics,AnalyticsClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsClient.cs,QueryAsync,The length of the statement  "                        //result.MetaData.Success = result.MetaData.Status == QueryStatus.Success || result.MetaData.Status == QueryStatus.Running; " is 123.
Long Statement,Couchbase.Analytics,AnalyticsClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsClient.cs,QueryAsync,The length of the statement  "                    //var operationContext = OperationContext.CreateAnalyticsContext(queryRequest.CurrentContextId' Context.BucketName' uri?.Authority); " is 132.
Long Statement,Couchbase.Analytics,AnalyticsDeferredResultHandle<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsDeferredResultHandle.cs,GetStatusAsync,The length of the statement  "                    ProcessError($"Error trying to get the query status using handle {HandleUri}. {result.StatusCode} - {result.ReasonPhrase}."); " is 125.
Long Statement,Couchbase.Analytics,AnalyticsDeferredResultHandle<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsDeferredResultHandle.cs,GetRowsAsync,The length of the statement  "                ProcessError($"Error when trying to retrieve query results using handle {HandleUri}. {result.StatusCode} - {result.ReasonPhrase}."); " is 132.
Long Statement,Couchbase.Analytics,AnalyticsRequest,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsRequest.cs,AddCredentials,The length of the statement  "                throw new ArgumentOutOfRangeException(username' ExceptionUtil.GetMessage(ExceptionUtil.ParameterCannotBeNullOrEmptyFormat' usernameParameter)); " is 143.
Long Statement,Couchbase,Cluster,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Cluster.cs,DiagnosticsAsync,The length of the statement  "            return Task.FromResult(DiagnosticsReportProvider.CreateDiagnosticsReport(_context' options?.ReportId ?? Guid.NewGuid().ToString())); " is 132.
Long Statement,Couchbase.Core.Configuration.Server,ConfigHandler,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\ConfigHandler.cs,Subscribe,The length of the statement  "                var httpListener = new HttpStreamingConfigListener(bucket.Name' _context.ClusterOptions' _httpClient' this' TokenSource.Token); " is 127.
Long Statement,Couchbase.Core.Diagnostics.Tracing,OrphanedResponseLogger,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\OrphanedResponseLogger.cs,DoWork,The length of the statement  "                    while (!_source.IsCancellationRequested && !_queue.IsAddingCompleted && _queue.TryTake(out var context' WorkerSleep' _source.Token)) " is 132.
Long Statement,Couchbase.Core.Diagnostics.Tracing,SpanBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\SpanBuilder.cs,Start,The length of the statement  "            var span = new Span(_tracer' _operationName' activeSpanContext' _startTimestamp ?? Stopwatch.GetTimestamp()' _tags' _references); " is 129.
Long Statement,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,GetSuccess,The length of the statement  "            return (Header.Status == ResponseStatus.Success || Header.Status == ResponseStatus.AuthenticationContinue) && Exception == null; " is 128.
Long Statement,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,GetResponseBodyAsString,The length of the statement  "                    body = Converter.ToString(Data.Span.Slice(OperationHeader.Length' Math.Min(Data.Length - OperationHeader.Length' TotalLength - OperationHeader.Length))); " is 153.
Long Statement,Couchbase.Core.IO.Operations.SubDocument,MutateInBuilder<TDocument>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MutateInBuilder.cs,ArrayAppend,The length of the statement  "            return ArrayAppend(string.Empty' createParents ? SubdocPathFlags.CreatePath : SubdocPathFlags.None' SubdocDocFlags.None' values); " is 129.
Long Statement,Couchbase.Core.IO.Operations.SubDocument,MutateInBuilder<TDocument>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MutateInBuilder.cs,ArrayAppend,The length of the statement  "            return ArrayAppend(path' createParents ? SubdocPathFlags.CreatePath : SubdocPathFlags.None' SubdocDocFlags.None' values); " is 121.
Long Statement,Couchbase.Core.IO.Operations.SubDocument,MutateInBuilder<TDocument>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MutateInBuilder.cs,ArrayPrepend,The length of the statement  "            return ArrayPrepend(string.Empty' createParents ? SubdocPathFlags.CreatePath : SubdocPathFlags.None' SubdocDocFlags.None' values); " is 130.
Long Statement,Couchbase.Core.IO.Operations.SubDocument,MutateInBuilder<TDocument>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MutateInBuilder.cs,ArrayPrepend,The length of the statement  "            return ArrayPrepend(path' createParents ? SubdocPathFlags.CreatePath : SubdocPathFlags.None' SubdocDocFlags.None' values); " is 122.
Long Statement,Couchbase.Core.IO.Serializers,DefaultSerializer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Serializers\DefaultSerializer.cs,Deserialize,The length of the statement  "                        if (typeof(T).GetTypeInfo().IsValueType && (!typeof(T).GetTypeInfo().IsGenericType || typeof(T).GetGenericTypeDefinition() != typeof(Nullable<>))) " is 146.
Long Statement,Couchbase.Core.IO.Serializers,DefaultSerializer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Serializers\DefaultSerializer.cs,GetDeserializationSettings,The length of the statement  "                // Backwards compatibility issue in Newtonsoft.Json 7.0.1 causes setting a null reference resolver to error instead of using default " is 132.
Long Statement,Couchbase.Core.Sharding,VBucketKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketKeyMapper.cs,CreateVBucketMapForwards,The length of the statement  "                    vBucketMapForwards.Add((short)i' new VBucket(_endPoints' (short)i' primary' replicas' Rev' _vBucketServerMap' _bucketName)); " is 124.
Long Statement,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,The length of the statement  "                       var endPointDiagnostics = CreateEndpointHealth(bucket.Name' ServiceType.Views' DateTime.UtcNow' clusterNode.LastViewActivity' clusterNode.EndPoint); " is 148.
Long Statement,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,The length of the statement  "                   var endPointDiagnostics = CreateEndpointHealth("Cluster"' ServiceType.Query' DateTime.UtcNow' clusterNode.LastQueryActivity' clusterNode.EndPoint); " is 147.
Long Statement,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,The length of the statement  "                   var endPointDiagnostics = CreateEndpointHealth("Cluster"' ServiceType.Analytics' DateTime.UtcNow' clusterNode.LastQueryActivity' clusterNode.EndPoint); " is 151.
Long Statement,Couchbase.Diagnostics,DiagnosticsReportProvider,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\DiagnosticsReportProvider.cs,GetEndpointDiagnostics,The length of the statement  "                   var endPointDiagnostics = CreateEndpointHealth("Cluster"' ServiceType.Search' DateTime.UtcNow' clusterNode.LastQueryActivity' clusterNode.EndPoint); " is 148.
Long Statement,Couchbase.KeyValue,CouchbaseCollection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\CouchbaseCollection.cs,GetAnyReplicaAsync,The length of the statement  "                Log.LogWarning($"Call to GetAnyReplica for key [{id}] but none are configured. Only the active document will be retrieved."); " is 125.
Long Statement,Couchbase.KeyValue,CouchbaseCollection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\CouchbaseCollection.cs,GetAllReplicasAsync,The length of the statement  "                Log.LogWarning($"Call to GetAllReplicas for key [{id}] but none are configured. Only the active document will be retrieved."); " is 126.
Long Statement,Couchbase.KeyValue,LookupInSpecBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\LookupInSpecBuilder.cs,Validate,The length of the statement  "                throw new ArgumentException($"Only a single XAttr key may be accessed at the same time: {op}(\"{path}\"' isXattr: true);"); " is 123.
Long Statement,Couchbase.Management.Buckets,BucketManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Buckets\BucketManager.cs,GetBucketSettings,The length of the statement  "                EnumExtensions.TryGetFromDescription(conflictResolutionToken.Value<string>()' out ConflictResolutionType conflictResolutionType)) " is 129.
Long Statement,Couchbase.Management.Collections,CollectionManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Collections\CollectionManager.cs,GetAllScopesAsync,The length of the statement  "                            var collectionName = collection.Path.Substring(collection.Path.LastIndexOf("."' StringComparison.InvariantCulture) + 1); " is 120.
Long Statement,Couchbase.Management.Query,QueryIndexManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Query\QueryIndexManger.cs,CreateIndexAsync,The length of the statement  "                var statement = $"CREATE INDEX {indexName} ON {bucketName}({string.Join("'"' fields)}) USING GSI WITH {{\"defer_build\":{options.Deferred}}};"; " is 143.
Long Statement,Couchbase.Management.Views,ViewIndexManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Views\ViewIndexManager.cs,PublishDesignDocumentAsync,The length of the statement  "                var designDocument = await GetDesignDocumentAsync(designDocName' DesignDocumentNamespace.Development' GetDesignDocumentOptions.Default).ConfigureAwait(false); " is 158.
Long Statement,Couchbase.Query,QueryOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryOptions.cs,AddCredentials,The length of the statement  "                throw new ArgumentOutOfRangeException(username' ExceptionUtil.GetMessage(ExceptionUtil.ParameterCannotBeNullOrEmptyFormat' usernameParameter)); " is 143.
Long Statement,Couchbase.Query,QueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\QueryResult.cs,ShouldRetry,The length of the statement  "                        (error.Code == (int) ErrorPrepared.Generic && error.Message != null && error.Message.Contains(QueryClient.Error5000MsgQueryPortIndexNotFound)) " is 142.
Long Statement,Couchbase.Utils,ClientIdentifier,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ClientIdentifier.cs,GetClientDescription,The length of the statement  "            return string.Format(DescriptionFormat' CurrentAssembly.Version' RuntimeInformation.FrameworkDescription' RuntimeInformation.OSDescription); " is 140.
Complex Conditional,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ContentAs,The conditional expression  "OpCode == OpCode.Get || OpCode == OpCode.ReplicaRead || OpCode == OpCode.GetL || OpCode == OpCode.GAT"  is complex.
Complex Conditional,Couchbase.Search.Queries.Geo,GeoBoundingBoxQuery,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\Queries\Geo\GeoBoundingBoxQuery.cs,Export,The conditional expression  "!_topLeftLongitude.HasValue ||                  !_topLeftLatitude.HasValue ||                  !_bottomRightLongitude.HasValue ||                  !_bottomRightLatitude.HasValue"  is complex.
Empty Catch Block,Couchbase.Core.Diagnostics.Tracing,OrphanedResponseLogger,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\OrphanedResponseLogger.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.Diagnostics.Tracing,OrphanedResponseLogger,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\OrphanedResponseLogger.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.Diagnostics.Tracing,ThresholdLoggingTracer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\ThresholdLoggingTracer.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.Diagnostics.Tracing,ThresholdLoggingTracer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\ThresholdLoggingTracer.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.Diagnostics.Tracing,ThresholdLoggingTracer,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\ThresholdLoggingTracer.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,ReceiveThreadBody,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,GetMessage,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.IO.Operations,OperationResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationResult'.cs,ToString,The method has an empty catch block.
Empty Catch Block,Couchbase.Management.Query,QueryIndexManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Query\QueryIndexManger.cs,WatchIndexesAsync,The method has an empty catch block.
Magic Number,Couchbase.Analytics,AnalyticsRequest,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsRequest.cs,GetFormValues,The following statement contains a magic number: formValues.Add("timeout"' $"{Lifespan.Duration * 1000}ms");
Magic Number,Couchbase.Analytics,AnalyticsResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsResult.cs,ShouldRetry,The following statement contains a magic number: switch (MetaData.Status)              {                  case QueryStatus.Errors:                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      return MetaData.Errors != null && MetaData.Errors.Any(error =>                                     error.Code == 21002 || // Request timed out and will be cancelled                                     error.Code == 23000 || // Analytics Service is temporarily unavailable                                     error.Code == 23003 || // Operation cannot be performed during rebalance                                     error.Code == 23007    // Job queue is full with [string] jobs                             );                  default:                      return false;              }
Magic Number,Couchbase.Analytics,AnalyticsResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsResult.cs,ShouldRetry,The following statement contains a magic number: switch (MetaData.Status)              {                  case QueryStatus.Errors:                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      return MetaData.Errors != null && MetaData.Errors.Any(error =>                                     error.Code == 21002 || // Request timed out and will be cancelled                                     error.Code == 23000 || // Analytics Service is temporarily unavailable                                     error.Code == 23003 || // Operation cannot be performed during rebalance                                     error.Code == 23007    // Job queue is full with [string] jobs                             );                  default:                      return false;              }
Magic Number,Couchbase.Analytics,AnalyticsResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsResult.cs,ShouldRetry,The following statement contains a magic number: switch (MetaData.Status)              {                  case QueryStatus.Errors:                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      return MetaData.Errors != null && MetaData.Errors.Any(error =>                                     error.Code == 21002 || // Request timed out and will be cancelled                                     error.Code == 23000 || // Analytics Service is temporarily unavailable                                     error.Code == 23003 || // Operation cannot be performed during rebalance                                     error.Code == 23007    // Job queue is full with [string] jobs                             );                  default:                      return false;              }
Magic Number,Couchbase.Analytics,AnalyticsResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\AnalyticsResult.cs,ShouldRetry,The following statement contains a magic number: switch (MetaData.Status)              {                  case QueryStatus.Errors:                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      return MetaData.Errors != null && MetaData.Errors.Any(error =>                                     error.Code == 21002 || // Request timed out and will be cancelled                                     error.Code == 23000 || // Analytics Service is temporarily unavailable                                     error.Code == 23003 || // Operation cannot be performed during rebalance                                     error.Code == 23007    // Job queue is full with [string] jobs                             );                  default:                      return false;              }
Magic Number,Couchbase.Analytics,IngestOptions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Analytics\IngestOptions.cs,IngestOptions,The following statement contains a magic number: Timeout = TimeSpan.FromSeconds(75);
Magic Number,Couchbase,Cluster,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Cluster.cs,AnalyticsQueryAsync,The following statement contains a magic number: query.ConfigureLifespan(30);
Magic Number,Couchbase,Optional,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Optional.cs,GetHashCode,The following statement contains a magic number: return (EqualityComparer<T>.Default.GetHashCode(_value) * 397) ^ HasValue.GetHashCode();
Magic Number,Couchbase.Core,BucketBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\BucketBase.cs,LoadManifest,The following statement contains a magic number: collections.Add(new CouchbaseCollection(this' Context'                              Convert.ToUInt32(collectionDef.uid' 16)' collectionDef.name));
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: var result = VBucketId ^ (VBucketId >> 32);
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31*result + (int) (VBucketUuid ^ (VBucketUuid >> 32));
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31*result + (int) (VBucketUuid ^ (VBucketUuid >> 32));
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31*result + (int) (SequenceNumber ^ (SequenceNumber >> 32));
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31*result + (int) (SequenceNumber ^ (SequenceNumber >> 32));
Magic Number,Couchbase.Core,MutationToken,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31*result + BucketRef.GetHashCode();
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,Node,The following statement contains a magic number: Ports = new Ports              {                  Direct = 11210'                  Proxy = 11211'                  SslDirect = 11207'                  HttpsCapi = 18092'                  HttpsMgmt = 18091              };
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,Node,The following statement contains a magic number: Ports = new Ports              {                  Direct = 11210'                  Proxy = 11211'                  SslDirect = 11207'                  HttpsCapi = 18092'                  HttpsMgmt = 18091              };
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,Node,The following statement contains a magic number: Ports = new Ports              {                  Direct = 11210'                  Proxy = 11211'                  SslDirect = 11207'                  HttpsCapi = 18092'                  HttpsMgmt = 18091              };
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,Node,The following statement contains a magic number: Ports = new Ports              {                  Direct = 11210'                  Proxy = 11211'                  SslDirect = 11207'                  HttpsCapi = 18092'                  HttpsMgmt = 18091              };
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,Node,The following statement contains a magic number: Ports = new Ports              {                  Direct = 11210'                  Proxy = 11211'                  SslDirect = 11207'                  HttpsCapi = 18092'                  HttpsMgmt = 18091              };
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Hostname != null ? Hostname.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,Node,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ports != null ? Ports.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MgmtSsl;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexAdmin;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexScan;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexHttp;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexStreamInit;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexStreamCatchup;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexStreamMaint;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IndexHttps;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Kv;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ KvSsl;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Capi;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CapiSsl;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Projector;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ N1Ql;
Magic Number,Couchbase.Core.Configuration.Server,Services,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ N1QlSsl;
Magic Number,Couchbase.Core.Configuration.Server,NodesExt,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: return ((Services != null ? Services.GetHashCode() : 0) * 397);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Uri != null ? Uri.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StreamingUri != null ? StreamingUri.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Nodes != null ? Nodes.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (NodesExt != null ? NodesExt.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (NodeLocator != null ? NodeLocator.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Uuid != null ? Uuid.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ddocs != null ? Ddocs.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (VBucketServerMap != null ? VBucketServerMap.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (BucketCapabilitiesVer != null ? BucketCapabilitiesVer.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,BucketConfig,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (BucketCapabilities != null ? BucketCapabilities.GetHashCode() : 0);
Magic Number,Couchbase.Core.Configuration.Server,NodeAdapter,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\NodeAdapter.cs,GetHostname,The following statement contains a magic number: switch (parts.Length)              {                  case 1: // hostname or IPv4 no port                      hostname = parts[0];                      break;                  case 2: // hostname or IPv4 with port                      hostname = parts[0];                      break;                  default: // IPv6                      // is it [a:b:c:d]:<port>                      if (parts.First().StartsWith("[") && parts[parts.Length - 2].EndsWith("]"))                      {                          hostname = string.Join(":"' parts.Take(parts.Length - 1));                      }                      else                      {                          hostname = string.Join(":"' parts);                      }                        break;              }
Magic Number,Couchbase.Core.Configuration.Server,NodeAdapter,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Configuration\Server\NodeAdapter.cs,GetHostname,The following statement contains a magic number: switch (parts.Length)              {                  case 1: // hostname or IPv4 no port                      hostname = parts[0];                      break;                  case 2: // hostname or IPv4 with port                      hostname = parts[0];                      break;                  default: // IPv6                      // is it [a:b:c:d]:<port>                      if (parts.First().StartsWith("[") && parts[parts.Length - 2].EndsWith("]"))                      {                          hostname = string.Join(":"' parts.Take(parts.Length - 1));                      }                      else                      {                          hostname = string.Join(":"' parts);                      }                        break;              }
Magic Number,Couchbase.Core.IO,AsyncState,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\AsyncState.cs,Cancel,The following statement contains a magic number: var response = MemoryPool<byte>.Shared.RentAndSlice(24);
Magic Number,Couchbase.Core.IO,AsyncState,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\AsyncState.cs,Complete,The following statement contains a magic number: response = MemoryPool<byte>.Shared.RentAndSlice(24);
Magic Number,Couchbase.Core.IO,SocketExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\SocketExtensions.cs,SetKeepAlives,The following statement contains a magic number: var values = new byte[Marshal.SizeOf(temp)*3];
Magic Number,Couchbase.Core.IO,SocketExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\SocketExtensions.cs,SetKeepAlives,The following statement contains a magic number: BitConverter.GetBytes(interval).CopyTo(values' Marshal.SizeOf(temp)*2);
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,MultiplexingConnection,The following statement contains a magic number: _receiveBuffer = new byte[1024 * 16];
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,MultiplexingConnection,The following statement contains a magic number: _receiveBuffer = new byte[1024 * 16];
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,SendAsync,The following statement contains a magic number: state.Timer = new Timer(o =>              {                  AsyncState a = (AsyncState)o;                  _statesInFlight.TryRemove(a.Opaque' out _);                  a.Cancel(ResponseStatus.OperationTimeout' new TimeoutException());              }' state' 75000' Timeout.Infinite);
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: var buffer = new byte[_receiveBuffer.Length*2];
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: _receiveBuffer.Length < _receiveBufferLength*2
Magic Number,Couchbase.Core.IO.Connections,MultiplexingConnection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Connections\MultiplexingConnection.cs,ParseReceivedData,The following statement contains a magic number: var responseSize = Converter.ToInt32(_receiveBuffer.AsSpan(parsedOffset + HeaderOffsets.BodyLength)) + 24;
Magic Number,Couchbase.Core.IO.Operations,Decrement,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Decrement.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[20];
Magic Number,Couchbase.Core.IO.Operations,Decrement,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Decrement.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt64(Initial' extras.Slice(8));
Magic Number,Couchbase.Core.IO.Operations,Decrement,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Decrement.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt32(Expires' extras.Slice(16));
Magic Number,Couchbase.Core.IO.Operations,FramingExtraInfo,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\FramingExtraInfo.cs,FramingExtraInfo,The following statement contains a magic number: Byte = (byte)(((byte) type << 4) | (length & 0x0F));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(flags' 2));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(flags' 2));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(flags' 3));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(flags' 3));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(flags' 4));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(flags' 4));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(flags' 5));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(flags' 5));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(flags' 6));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(flags' 6));
Magic Number,Couchbase.Core.IO.Operations,Get<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: var typeCode = (TypeCode)(Converter.ToUInt16(buffer.Slice(26)) & 0xff);
Magic Number,Couchbase.Core.IO.Operations,GetL<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\GetL.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[4];
Magic Number,Couchbase.Core.IO.Operations,GetT<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\GetT.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[4];
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,WriteBody,The following statement contains a magic number: body = body.Slice(2);
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,WriteBody,The following statement contains a magic number: builder.Write(bufferOwner.Memory.Slice(0' contentLength * 2));
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: result = new short[Header.BodyLength/2];
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: buffer = buffer.Slice(2);
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,BuildHelloKey,The following statement contains a magic number: agent = agent.Substring(0' 200);
Magic Number,Couchbase.Core.IO.Operations,Hello,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Hello.cs,BuildHelloKey,The following statement contains a magic number: agent.Length > 200
Magic Number,Couchbase.Core.IO.Operations,Increment,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Increment.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[20];
Magic Number,Couchbase.Core.IO.Operations,Increment,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Increment.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt64(Initial' extras.Slice(8));
Magic Number,Couchbase.Core.IO.Operations,Increment,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Increment.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt32(Expires' extras.Slice(16));
Magic Number,Couchbase.Core.IO.Operations,MutationOperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\MutationOperationBase'.cs,WriteFramingExtras,The following statement contains a magic number: Span<byte> bytes = stackalloc byte[2];
Magic Number,Couchbase.Core.IO.Operations,MutationOperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\MutationOperationBase.cs,WriteFramingExtras,The following statement contains a magic number: Span<byte> bytes = stackalloc byte[2];
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,WriteBody,The following statement contains a magic number: var keyLength = WriteKey(buffer.Slice(4));
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,WriteBody,The following statement contains a magic number: Converter.FromInt16((short) keyLength' buffer.Slice(2));
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,WriteBody,The following statement contains a magic number: builder.Write(bufferOwner.Memory.Slice(0' keyLength + 4));
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: var keylength = Converter.ToInt16(buffer.Slice(26));
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,Observe,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState                      {                          PersistStat = Converter.ToUInt32(buffer.Slice(16))'                          ReplState = Converter.ToUInt32(buffer.Slice(20))'                          VBucket = Converter.ToInt16(buffer.Slice(24))'                          KeyLength = keylength'                          Key = Converter.ToString(buffer.Slice(28' keylength))'                          KeyState = (KeyState) buffer[28 + keylength]'                          Cas = Converter.ToUInt64(buffer.Slice(28 + keylength + 1))                      };
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[8];
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 2' BitUtils.GetBit(format' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 2' BitUtils.GetBit(format' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 3' BitUtils.GetBit(format' 3));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 3' BitUtils.GetBit(format' 3));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 4' false);
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 5' BitUtils.GetBit(compression' 0));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 6' BitUtils.GetBit(compression' 1));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 7' BitUtils.GetBit(compression' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: BitUtils.SetBit(ref extras[0]' 7' BitUtils.GetBit(compression' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt16(typeCode' extras.Slice(2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase'.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt32(Expires' extras.Slice(4));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(flags' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(flags' 2));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(flags' 3));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(flags' 3));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(flags' 4));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(flags' 4));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(flags' 5));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(flags' 5));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(flags' 6));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(flags' 6));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: var typeCode = (TypeCode)(Converter.ToUInt16(buffer.Slice(26)) & 0xff);
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Expires = Converter.ToUInt32(buffer.Slice(25));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,TryReadMutationToken,The following statement contains a magic number: var seqno = Converter.ToInt64(buffer.Slice(Header.ExtrasOffset + 8));
Magic Number,Couchbase.Core.IO.Operations,OperationBase,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBase.cs,TryReadMutationToken,The following statement contains a magic number: buffer.Length >= 40 && VBucketId.HasValue
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,BeginOperationSpec,The following statement contains a magic number: var headerSize = isMutation ? 8 : 4;
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,BeginOperationSpec,The following statement contains a magic number: var headerSize = isMutation ? 8 : 4;
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,CompleteOperationSpec,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[_operationSpecIsMutation ? 8 : 4];
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,CompleteOperationSpec,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[_operationSpecIsMutation ? 8 : 4];
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,CompleteOperationSpec,The following statement contains a magic number: _converter.FromUInt16((ushort) _operationSpecPathLength' buffer.Slice(2));
Magic Number,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,CompleteOperationSpec,The following statement contains a magic number: _converter.FromUInt32((uint) _operationSpecFragmentLength' buffer.Slice(4));
Magic Number,Couchbase.Core.IO.Operations,OperationHeaderExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationHeaderExtensions.cs,GetServerDuration,The following statement contains a magic number: return (long) Math.Pow(encoded' 1.74) / 2;
Magic Number,Couchbase.Core.IO.Operations,OperationHeaderExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationHeaderExtensions.cs,GetServerDuration,The following statement contains a magic number: return (long) Math.Pow(encoded' 1.74) / 2;
Magic Number,Couchbase.Core.IO.Operations,SequenceGenerator,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SequenceGenerator.cs,GetRandomLong,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Couchbase.Core.IO.Operations,Touch,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Touch.cs,WriteExtras,The following statement contains a magic number: Span<byte> extras = stackalloc byte[4];
Magic Number,Couchbase.Core.IO.Operations.EnhancedDurability,ObserveSeqno,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse                          {                              IsHardFailover = true'                              VBucketId = Converter.ToInt16(buffer.Slice(1))'                              VBucketUuid = Converter.ToInt64(buffer.Slice(3))'                              LastPersistedSeqno = Converter.ToInt64(buffer.Slice(11))'                              CurrentSeqno = Converter.ToInt64(buffer.Slice(19))'                              OldVBucketUuid = Converter.ToInt64(buffer.Slice(27))'                              LastSeqnoReceived = Converter.ToInt64(buffer.Slice(35))                          };
Magic Number,Couchbase.Core.IO.Operations.EnhancedDurability,ObserveSeqno,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse                          {                              IsHardFailover = true'                              VBucketId = Converter.ToInt16(buffer.Slice(1))'                              VBucketUuid = Converter.ToInt64(buffer.Slice(3))'                              LastPersistedSeqno = Converter.ToInt64(buffer.Slice(11))'                              CurrentSeqno = Converter.ToInt64(buffer.Slice(19))'                              OldVBucketUuid = Converter.ToInt64(buffer.Slice(27))'                              LastSeqnoReceived = Converter.ToInt64(buffer.Slice(35))                          };
Magic Number,Couchbase.Core.IO.Operations.EnhancedDurability,ObserveSeqno,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse                          {                              IsHardFailover = true'                              VBucketId = Converter.ToInt16(buffer.Slice(1))'                              VBucketUuid = Converter.ToInt64(buffer.Slice(3))'                              LastPersistedSeqno = Converter.ToInt64(buffer.Slice(11))'                              CurrentSeqno = Converter.ToInt64(buffer.Slice(19))'                              OldVBucketUuid = Converter.ToInt64(buffer.Slice(27))'                              LastSeqnoReceived = Converter.ToInt64(buffer.Slice(35))                          };
Magic Number,Couchbase.Core.IO.Operations.EnhancedDurability,ObserveSeqno,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse                          {                              IsHardFailover = true'                              VBucketId = Converter.ToInt16(buffer.Slice(1))'                              VBucketUuid = Converter.ToInt64(buffer.Slice(3))'                              LastPersistedSeqno = Converter.ToInt64(buffer.Slice(11))'                              CurrentSeqno = Converter.ToInt64(buffer.Slice(19))'                              OldVBucketUuid = Converter.ToInt64(buffer.Slice(27))'                              LastSeqnoReceived = Converter.ToInt64(buffer.Slice(35))                          };
Magic Number,Couchbase.Core.IO.Operations.EnhancedDurability,ObserveSeqno,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse                          {                              IsHardFailover = true'                              VBucketId = Converter.ToInt16(buffer.Slice(1))'                              VBucketUuid = Converter.ToInt64(buffer.Slice(3))'                              LastPersistedSeqno = Converter.ToInt64(buffer.Slice(11))'                              CurrentSeqno = Converter.ToInt64(buffer.Slice(19))'                              OldVBucketUuid = Converter.ToInt64(buffer.Slice(27))'                              LastSeqnoReceived = Converter.ToInt64(buffer.Slice(35))                          };
Magic Number,Couchbase.Core.IO.Operations.Errors,GetErrorMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Errors\GetErrorMap.cs,WriteBody,The following statement contains a magic number: Span<byte> body = stackalloc byte[2];
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiLookup<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: var bodyLength = Converter.ToInt32(responseSpan.Slice(2));
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiLookup<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: responseSpan.Slice(6' bodyLength).CopyTo(payLoad);
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiLookup<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: responseSpan = responseSpan.Slice(6 + bodyLength);
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiMutation<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiMutation.cs,WriteFramingExtras,The following statement contains a magic number: Span<byte> bytes = stackalloc byte[2];
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiMutation<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: var valueLength = Converter.ToInt32(responseSpan.Slice(3));
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiMutation<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: responseSpan.Slice(7' valueLength).CopyTo(payLoad);
Magic Number,Couchbase.Core.IO.Operations.SubDocument,MultiMutation<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: responseSpan = responseSpan.Slice(7 + valueLength);
Magic Number,Couchbase.Core.IO.Operations.SubDocument,OperationSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,OperationSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + (spec.Path == null ? 0 : spec.Path.GetHashCode());
Magic Number,Couchbase.Core.IO.Operations.SubDocument,OperationSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + spec.OpCode.GetHashCode();
Magic Number,Couchbase.Core.IO.Operations.SubDocument,OperationSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + PathFlags.GetHashCode();
Magic Number,Couchbase.Core.IO.Operations.SubDocument,OperationSpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + DocFlags.GetHashCode();
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularLookupBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,WriteExtras,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[CurrentSpec.DocFlags != SubdocDocFlags.None ? 4 : 3];
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularLookupBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,WriteExtras,The following statement contains a magic number: Span<byte> buffer = stackalloc byte[CurrentSpec.DocFlags != SubdocDocFlags.None ? 4 : 3];
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularLookupBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,WriteExtras,The following statement contains a magic number: buffer[2] = (byte) CurrentSpec.PathFlags;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularLookupBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,WriteExtras,The following statement contains a magic number: buffer[3] = (byte) CurrentSpec.DocFlags;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: var length = CurrentSpec.DocFlags != SubdocDocFlags.None ? 4 : 3;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: var length = CurrentSpec.DocFlags != SubdocDocFlags.None ? 4 : 3;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: length += 4;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: buffer[2] = (byte) CurrentSpec.PathFlags;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt32(Expires' buffer.Slice(3));
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: buffer[hasExpiry ? 7 : 3] = (byte) CurrentSpec.DocFlags;
Magic Number,Couchbase.Core.IO.Operations.SubDocument,SubDocSingularMutationBase<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: buffer[hasExpiry ? 7 : 3] = (byte) CurrentSpec.DocFlags;
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ControlledBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ControlledBackoff.cs,CalculateBackoff,The following statement contains a magic number: switch (operation.Attempts)              {                  case 0:                      return TimeSpan.FromMilliseconds(1);                  case 1:                      return TimeSpan.FromMilliseconds(10);                  case 2:                      return TimeSpan.FromMilliseconds(50);                  case 3:                      return TimeSpan.FromMilliseconds(100);                  case 4:                      return TimeSpan.FromMilliseconds(500);                  default:                      return TimeSpan.FromMilliseconds(1000);              }
Magic Number,Couchbase.Core.Retry,ExponentialBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ExponentialBackoff.cs,ExponentialBackoff,The following statement contains a magic number: _power = 2;
Magic Number,Couchbase.Core.Retry,ExponentialBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ExponentialBackoff.cs,CalculateBackoff,The following statement contains a magic number: op.Attempts < 31
Magic Number,Couchbase.Core.Retry,ExponentialBackoff,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Retry\ExponentialBackoff.cs,CalculateBackoff,The following statement contains a magic number: return TimeSpan.FromMilliseconds(Math.Min(_delayMillis * (_power - 1) / 2' _maxDelayMillis));
Magic Number,Couchbase.Core.Sharding,Crc32,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\Crc32.cs,HashCore,The following statement contains a magic number: _hash = (_hash >> 8) ^ Table[array[i] ^ _hash & 0xff];
Magic Number,Couchbase.Core.Sharding,Crc32,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\Crc32.cs,HashFinal,The following statement contains a magic number: _hash = ((~_hash) >> 16) & 0x7fff;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: var result = ((long) (hash[3] & 0xFF) << 24)                               | ((long) (hash[2] & 0xFF) << 16)                               | ((long) (hash[1] & 0xFF) << 8)                               | (uint) hash[0] & 0xFF;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: var result = ((long) (hash[3] & 0xFF) << 24)                               | ((long) (hash[2] & 0xFF) << 16)                               | ((long) (hash[1] & 0xFF) << 8)                               | (uint) hash[0] & 0xFF;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: var result = ((long) (hash[3] & 0xFF) << 24)                               | ((long) (hash[2] & 0xFF) << 16)                               | ((long) (hash[1] & 0xFF) << 8)                               | (uint) hash[0] & 0xFF;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: var result = ((long) (hash[3] & 0xFF) << 24)                               | ((long) (hash[2] & 0xFF) << 16)                               | ((long) (hash[1] & 0xFF) << 8)                               | (uint) hash[0] & 0xFF;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: var result = ((long) (hash[3] & 0xFF) << 24)                               | ((long) (hash[2] & 0xFF) << 16)                               | ((long) (hash[1] & 0xFF) << 8)                               | (uint) hash[0] & 0xFF;
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: var key = ((long) (hash[3 + j * 4] & 0xFF) << 24)                                        | ((long) (hash[2 + j * 4] & 0xFF) << 16)                                        | ((long) (hash[1 + j * 4] & 0xFF) << 8)                                        | (uint) (hash[0 + j * 4] & 0xFF);
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: j < 4
Magic Number,Couchbase.Core.Sharding,KetamaKeyMapper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: rep < 40
Magic Number,Couchbase.Core.Sharding,VBucketServerMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Couchbase.Core.Sharding,VBucketServerMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + ServerList.GetCombinedHashcode();
Magic Number,Couchbase.Core.Sharding,VBucketServerMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + VBucketMap.GetCombinedHashcode();
Magic Number,Couchbase.Core.Sharding,VBucketServerMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + NumReplicas.GetHashCode();
Magic Number,Couchbase.Core.Sharding,VBucketServerMap,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Sharding\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + HashAlgorithm.GetHashCode();
Magic Number,Couchbase.Core.Utils,Leb128,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Utils\Leb128.cs,Write,The following statement contains a magic number: value >>= 7;
Magic Number,Couchbase.Core.Utils,Leb128,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Utils\Leb128.cs,Read,The following statement contains a magic number: result |= (current & 0x7f) << (count * 7);
Magic Number,Couchbase.Core.Utils,Leb128,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Utils\Leb128.cs,WrittenSize,The following statement contains a magic number: var remaining = value >> 7;
Magic Number,Couchbase.Core.Utils,Leb128,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Utils\Leb128.cs,WrittenSize,The following statement contains a magic number: remaining >>= 7;
Magic Number,Couchbase.Diagnostics,EndpointDiagnostics,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Diagnostics\EndpointDiagnostics.cs,SetLatency,The following statement contains a magic number: Latency = latency / 10;
Magic Number,Couchbase.KeyValue,CouchbaseCollection,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\CouchbaseCollection.cs,GetAsync,The following statement contains a magic number: projectList.Count + specs.Count > 16
Magic Number,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ContentAs,The following statement contains a magic number: _projectList?.Count > 16
Magic Number,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ParseSpecs,The following statement contains a magic number: var bodyLength = _converter.ToInt32(response.Span.Slice(2));
Magic Number,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ParseSpecs,The following statement contains a magic number: var payLoad = response.Slice(6' bodyLength);
Magic Number,Couchbase.KeyValue,GetResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\GetResult.cs,ParseSpecs,The following statement contains a magic number: response = response.Slice(6 + bodyLength);
Magic Number,Couchbase.KeyValue,LookupInResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\LookupInResult.cs,ContentAs,The following statement contains a magic number: var bodyLength = _converter.ToInt32(response.Span.Slice(2));
Magic Number,Couchbase.KeyValue,LookupInResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\LookupInResult.cs,ContentAs,The following statement contains a magic number: var payLoad = response.Slice(6' bodyLength);
Magic Number,Couchbase.KeyValue,LookupInResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\KeyValue\LookupInResult.cs,ContentAs,The following statement contains a magic number: response = response.Slice(6 + bodyLength);
Magic Number,Couchbase.Management.Buckets,BucketManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Buckets\BucketManager.cs,GetUri,The following statement contains a magic number: var builder = new UriBuilder              {                  Scheme = _context.ClusterOptions.UseSsl ? "https" : "http"'                  Host = _context.ClusterOptions.Servers.GetRandom().Host'                  Port = _context.ClusterOptions.UseSsl ? 18091 : 8091'                  Path = "pools/default/buckets"              };
Magic Number,Couchbase.Management.Buckets,BucketManager,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Management\Buckets\BucketManager.cs,GetUri,The following statement contains a magic number: var builder = new UriBuilder              {                  Scheme = _context.ClusterOptions.UseSsl ? "https" : "http"'                  Host = _context.ClusterOptions.Servers.GetRandom().Host'                  Port = _context.ClusterOptions.UseSsl ? 18091 : 8091'                  Path = "pools/default/buckets"              };
Magic Number,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ShouldRetry,The following statement contains a magic number: switch (Status)              {                  case QueryStatus.Success:                  case QueryStatus.Errors:                  case QueryStatus.Running:                  case QueryStatus.Completed:                  case QueryStatus.Stopped:                      break;                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      var status = (int)HttpStatusCode;                      if (status > 399)                      {                          break;                      }                      retry = true;                      break;              }
Magic Number,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,GetEnumerator,The following statement contains a magic number: _reader.Depth == 2
Magic Number,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: switch (_reader.Path)                  {                      case "requestID" when _reader.TokenType == JsonToken.String:                          RequestId = Guid.Parse(_reader.Value.ToString());                          break;                      case "status" when _reader.TokenType == JsonToken.String:                          if (Enum.TryParse(_reader.Value.ToString()' true' out QueryStatus status))                          {                              Status = status;                              Success = status == QueryStatus.Success;                          }                            break;                      case "clientContextID" when _reader.TokenType == JsonToken.String:                          ClientContextId = _reader.Value.ToString();                          break;                      case "signature":                          Signature = JToken.ReadFrom(_reader);                          break;                      case "prepared" when _reader.TokenType == JsonToken.String:                          _preparedPlanName = _reader.Value.ToString();;                          break;                      case "profile":                          Profile = JToken.ReadFrom(_reader);                          break;                      case "metrics.elapsedTime" when _reader.TokenType == JsonToken.String:                          _metrics.ElaspedTime = _reader.Value.ToString();                          break;                      case "metrics.executionTime" when _reader.TokenType == JsonToken.String:                          _metrics.ExecutionTime = _reader.Value.ToString();                          break;                      case "metrics.resultCount" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultCount))                          {                              _metrics.ResultCount = resultCount;                          }                            break;                      case "metrics.resultSize" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultSize))                          {                              _metrics.ResultSize = resultSize;                          }                            break;                      case "results":                          // We've reached the result rows' return now                            return;                      case "warnings":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Warnings.Add(ReadItem<Warning>(_reader));                              }                              if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                      case "errors":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Errors.Add(ReadItem<Error>(_reader));                              }                              if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                  }
Magic Number,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: switch (_reader.Path)                  {                      case "requestID" when _reader.TokenType == JsonToken.String:                          RequestId = Guid.Parse(_reader.Value.ToString());                          break;                      case "status" when _reader.TokenType == JsonToken.String:                          if (Enum.TryParse(_reader.Value.ToString()' true' out QueryStatus status))                          {                              Status = status;                              Success = status == QueryStatus.Success;                          }                            break;                      case "clientContextID" when _reader.TokenType == JsonToken.String:                          ClientContextId = _reader.Value.ToString();                          break;                      case "signature":                          Signature = JToken.ReadFrom(_reader);                          break;                      case "prepared" when _reader.TokenType == JsonToken.String:                          _preparedPlanName = _reader.Value.ToString();;                          break;                      case "profile":                          Profile = JToken.ReadFrom(_reader);                          break;                      case "metrics.elapsedTime" when _reader.TokenType == JsonToken.String:                          _metrics.ElaspedTime = _reader.Value.ToString();                          break;                      case "metrics.executionTime" when _reader.TokenType == JsonToken.String:                          _metrics.ExecutionTime = _reader.Value.ToString();                          break;                      case "metrics.resultCount" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultCount))                          {                              _metrics.ResultCount = resultCount;                          }                            break;                      case "metrics.resultSize" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultSize))                          {                              _metrics.ResultSize = resultSize;                          }                            break;                      case "results":                          // We've reached the result rows' return now                            return;                      case "warnings":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Warnings.Add(ReadItem<Warning>(_reader));                              }                              if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                      case "errors":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Errors.Add(ReadItem<Error>(_reader));                              }                              if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                  }
Magic Number,Couchbase.Search,SearchQuery,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\SearchQuery.cs,Timeout,The following statement contains a magic number: TimeoutValue = (uint) timeout.TotalMilliseconds * 1000;
Magic Number,Couchbase.Search,SearchResult,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Search\SearchResult.cs,ShouldRetry,The following statement contains a magic number: (int) HttpStatusCode == 429
Magic Number,Couchbase.Utils,ArrayExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ArrayExtensions.cs,GetCombinedHashcode,The following statement contains a magic number: return 31*hash + count.GetHashCode();
Magic Number,Couchbase.Utils,ArrayExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ArrayExtensions.cs,StripBrackets,The following statement contains a magic number: return theArray.Slice(1' theArray.Length - 2);
Magic Number,Couchbase.Utils,ClientIdentifier,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\ClientIdentifier.cs,GetRandomLong,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Couchbase.Utils,IpEndPointExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\IPEndPointExtensions.cs,GetIPv4EndPoint,The following statement contains a magic number: const int maxSplits = 2;
Magic Number,Couchbase.Utils,IpEndPointExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\IPEndPointExtensions.cs,GetConnection,The following statement contains a magic number: const int connectionTimedOut = 10060;
Magic Number,Couchbase.Utils,IpEndPointExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\IPEndPointExtensions.cs,GetConnection,The following statement contains a magic number: !waitHandle.WaitOne(10000)
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,ToTtl,The following statement contains a magic number: duration <= TimeSpan.FromDays(30)
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,The following statement contains a magic number: switch (result.Groups.Count)              {                  case 2: // just a value                      duration = long.Parse(result.Groups[1].Value);                      break;                  case 3: // value & suffix                      duration = long.Parse(result.Groups[1].Value);                        var suffix = result.Groups[2].Value;                      if (!string.IsNullOrWhiteSpace(suffix))                      {                          switch (suffix)                          {                              case MicrosSuffix: // don't need to change                                  break;                              case MillisSuffix:                                  duration = duration * 1000;                                  break;                              case SecondSuffix:                                  duration = duration * 1000000;                                  break;                              default:                                  //Log.Debug($"Unable to convert unknown precision suffix: {suffix}");                                  break;                          }                      }                      break;              }
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,The following statement contains a magic number: switch (result.Groups.Count)              {                  case 2: // just a value                      duration = long.Parse(result.Groups[1].Value);                      break;                  case 3: // value & suffix                      duration = long.Parse(result.Groups[1].Value);                        var suffix = result.Groups[2].Value;                      if (!string.IsNullOrWhiteSpace(suffix))                      {                          switch (suffix)                          {                              case MicrosSuffix: // don't need to change                                  break;                              case MillisSuffix:                                  duration = duration * 1000;                                  break;                              case SecondSuffix:                                  duration = duration * 1000000;                                  break;                              default:                                  //Log.Debug($"Unable to convert unknown precision suffix: {suffix}");                                  break;                          }                      }                      break;              }
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,The following statement contains a magic number: switch (result.Groups.Count)              {                  case 2: // just a value                      duration = long.Parse(result.Groups[1].Value);                      break;                  case 3: // value & suffix                      duration = long.Parse(result.Groups[1].Value);                        var suffix = result.Groups[2].Value;                      if (!string.IsNullOrWhiteSpace(suffix))                      {                          switch (suffix)                          {                              case MicrosSuffix: // don't need to change                                  break;                              case MillisSuffix:                                  duration = duration * 1000;                                  break;                              case SecondSuffix:                                  duration = duration * 1000000;                                  break;                              default:                                  //Log.Debug($"Unable to convert unknown precision suffix: {suffix}");                                  break;                          }                      }                      break;              }
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,The following statement contains a magic number: switch (result.Groups.Count)              {                  case 2: // just a value                      duration = long.Parse(result.Groups[1].Value);                      break;                  case 3: // value & suffix                      duration = long.Parse(result.Groups[1].Value);                        var suffix = result.Groups[2].Value;                      if (!string.IsNullOrWhiteSpace(suffix))                      {                          switch (suffix)                          {                              case MicrosSuffix: // don't need to change                                  break;                              case MillisSuffix:                                  duration = duration * 1000;                                  break;                              case SecondSuffix:                                  duration = duration * 1000000;                                  break;                              default:                                  //Log.Debug($"Unable to convert unknown precision suffix: {suffix}");                                  break;                          }                      }                      break;              }
Magic Number,Couchbase.Utils,TimeSpanExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Utils\TimeSpanExtensions.cs,TryConvertToMicros,The following statement contains a magic number: switch (result.Groups.Count)              {                  case 2: // just a value                      duration = long.Parse(result.Groups[1].Value);                      break;                  case 3: // value & suffix                      duration = long.Parse(result.Groups[1].Value);                        var suffix = result.Groups[2].Value;                      if (!string.IsNullOrWhiteSpace(suffix))                      {                          switch (suffix)                          {                              case MicrosSuffix: // don't need to change                                  break;                              case MillisSuffix:                                  duration = duration * 1000;                                  break;                              case SecondSuffix:                                  duration = duration * 1000000;                                  break;                              default:                                  //Log.Debug($"Unable to convert unknown precision suffix: {suffix}");                                  break;                          }                      }                      break;              }
Magic Number,Couchbase.Views,ViewClient,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Views\ViewClient.cs,ViewClient,The following statement contains a magic number: _viewTimeout = (uint) Context.ClusterOptions.ViewTimeout.TotalMilliseconds * 1000;
Magic Number,Couchbase.Views,ViewQuery,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Views\ViewQuery.cs,GetRelativeUri,The following statement contains a magic number: designDocName = designDocName.Substring(4);
Missing Default,Couchbase.Core.Diagnostics.Tracing,SpanSummary,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\Diagnostics\Tracing\SpanSummary.cs,PopulateSummary,The following switch statement is missing a default case: switch (span.OperationName)                  {                      case CouchbaseOperationNames.RequestEncoding:                          EncodingDuration += span.Duration;                          break;                      case CouchbaseOperationNames.DispatchToServer:                          DispatchDuration += span.Duration;                          LastDispatchDuration = span.Duration;                            if (span.Tags.TryGetValue(CouchbaseTags.LocalAddress' out var local))                          {                              LastLocalAddress = local.ToString();                          }                            if (span.Tags.TryGetValue(Tags.PeerHostIpv4.Key' out var remote))                          {                              LastRemoteAddress = remote.ToString();                          }                            if (span.Tags.TryGetValue(CouchbaseTags.LocalId' out var localId))                          {                              LastLocalId = localId.ToString();                          }                            if (span.Tags.TryGetValue(CouchbaseTags.PeerLatency' out var duration))                          {                              if (TimeSpanExtensions.TryConvertToMicros(duration' out var value))                              {                                  if (ServerDuration.HasValue)                                  {                                      ServerDuration += value;                                  }                                  else                                  {                                      ServerDuration = value;                                  }                              }                          }                          break;                      case CouchbaseOperationNames.ResponseDecoding:                          DecodingDuration += span.Duration;                          break;                  }
Missing Default,Couchbase.Core.IO.Operations,OperationBuilder,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\OperationBuilder.cs,Advance,The following switch statement is missing a default case: switch (CurrentSegment)              {                  case OperationSegment.FramingExtras:                      _framingExtrasLength += bytes;                      break;                    case OperationSegment.Extras:                      _extrasLength += bytes;                      break;                    case OperationSegment.Key:                      _keyLength += bytes;                      break;                    case OperationSegment.Body:                      _bodyLength += bytes;                      break;                    case OperationSegment.OperationSpecPath:                      _bodyLength += bytes;                      _operationSpecPathLength += bytes;                      break;                    case OperationSegment.OperationSpecFragment:                      _bodyLength += bytes;                      _operationSpecFragmentLength += bytes;                      break;              }
Missing Default,Couchbase.Core.IO.Operations.Errors,RetrySpec,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Core\IO\Operations\Errors\RetrySpec.cs,GetNextInterval,The following switch statement is missing a default case: switch (Strategy)              {                  case RetryStrategy.Constant:                      nextInterval += Interval;                      break;                  case RetryStrategy.Linear:                      nextInterval += (int)adjustedAttempts * Interval;                      break;                  case RetryStrategy.Exponential:                      nextInterval += (int) Math.Pow(Interval' adjustedAttempts);                      break;              }
Missing Default,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ShouldRetry,The following switch statement is missing a default case: switch (Status)              {                  case QueryStatus.Success:                  case QueryStatus.Errors:                  case QueryStatus.Running:                  case QueryStatus.Completed:                  case QueryStatus.Stopped:                      break;                  case QueryStatus.Timeout:                  case QueryStatus.Fatal:                      var status = (int)HttpStatusCode;                      if (status > 399)                      {                          break;                      }                      retry = true;                      break;              }
Missing Default,Couchbase.Query,StreamingQueryResult<T>,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\src\Couchbase\Query\StreamingQueryResult.cs,ReadResponseAttributes,The following switch statement is missing a default case: switch (_reader.Path)                  {                      case "requestID" when _reader.TokenType == JsonToken.String:                          RequestId = Guid.Parse(_reader.Value.ToString());                          break;                      case "status" when _reader.TokenType == JsonToken.String:                          if (Enum.TryParse(_reader.Value.ToString()' true' out QueryStatus status))                          {                              Status = status;                              Success = status == QueryStatus.Success;                          }                            break;                      case "clientContextID" when _reader.TokenType == JsonToken.String:                          ClientContextId = _reader.Value.ToString();                          break;                      case "signature":                          Signature = JToken.ReadFrom(_reader);                          break;                      case "prepared" when _reader.TokenType == JsonToken.String:                          _preparedPlanName = _reader.Value.ToString();;                          break;                      case "profile":                          Profile = JToken.ReadFrom(_reader);                          break;                      case "metrics.elapsedTime" when _reader.TokenType == JsonToken.String:                          _metrics.ElaspedTime = _reader.Value.ToString();                          break;                      case "metrics.executionTime" when _reader.TokenType == JsonToken.String:                          _metrics.ExecutionTime = _reader.Value.ToString();                          break;                      case "metrics.resultCount" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultCount))                          {                              _metrics.ResultCount = resultCount;                          }                            break;                      case "metrics.resultSize" when _reader.TokenType == JsonToken.Integer:                          if (uint.TryParse(_reader.Value.ToString()' out var resultSize))                          {                              _metrics.ResultSize = resultSize;                          }                            break;                      case "results":                          // We've reached the result rows' return now                            return;                      case "warnings":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Warnings.Add(ReadItem<Warning>(_reader));                              }                              if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                      case "errors":                          while (_reader.Read())                          {                              if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject)                              {                                  Errors.Add(ReadItem<Error>(_reader));                              }                              if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray)                              {                                  break;                              }                          }                            break;                  }
