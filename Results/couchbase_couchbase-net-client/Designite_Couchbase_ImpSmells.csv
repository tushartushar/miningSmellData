Implementation smell,Namespace,Class,File,Method,Description
Long Method,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,ClientConfiguration,The method has 146 lines of code.
Complex Method,Couchbase.Analytics,AnalyticsClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Analytics\AnalyticsClient.cs,QueryAsync,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Authentication,AuthenticatorExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\AuthenticatorExtensions.cs,GetCredentials,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.Authentication,ClusterCredentials,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\ClusterCredentials.cs,GetCredentials,Cyclomatic complexity of the method is 11
Complex Method,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,OptimizeSingleMutation,Cyclomatic complexity of the method is 11
Complex Method,Couchbase,OperationResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\OperationResult'.cs,ShouldRetry,Cyclomatic complexity of the method is 22
Complex Method,Couchbase,OperationResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\OperationResult'.cs,SetException,Cyclomatic complexity of the method is 53
Complex Method,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,Cyclomatic complexity of the method is 24
Complex Method,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,SetAuthenticator,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Configuration,MemcachedConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\MemcachedConfigContext.cs,LoadConfig,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithDurabilityAsync,Cyclomatic complexity of the method is 11
Complex Method,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Core.Buckets,RequestExecuterBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\RequestExecuterBase.cs,ReadFromReplica,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,CreateBucket,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,WriteEscapedString,Cyclomatic complexity of the method is 35
Complex Method,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Core.Diagnostics,OperationTimer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Diagnostics\OperationTimer.cs,Dispose,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,GetFormat,Cyclomatic complexity of the method is 25
Complex Method,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Encode,Cyclomatic complexity of the method is 14
Complex Method,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Encode,Cyclomatic complexity of the method is 37
Complex Method,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Decode,Cyclomatic complexity of the method is 20
Complex Method,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Decode,Cyclomatic complexity of the method is 52
Complex Method,Couchbase.Core.Transcoders,BinaryToJsonTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\BinaryToJsonTranscoder.cs,Decode,Cyclomatic complexity of the method is 56
Complex Method,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,GetConfig,Cyclomatic complexity of the method is 14
Complex Method,Couchbase.Configuration.Server.Providers.Streaming,ConfigThreadState,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\ConfigThreadState.cs,ListenForConfigChanges,Cyclomatic complexity of the method is 15
Complex Method,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,GetConfig,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,CreateConfigInfo,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,OnCompleted,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.IO.Operations.SubDocument,SubDocSingularBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularBase.cs,GetParentStatus,Cyclomatic complexity of the method is 43
Complex Method,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,UpsertUserAsync,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,GetUsersAsync,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ShouldRetry,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,GetEnumerator,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,Cyclomatic complexity of the method is 22
Complex Method,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,GetFormValues,Cyclomatic complexity of the method is 21
Complex Method,Couchbase.N1QL,StreamingQueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryClient.cs,ExecuteQueryAsync,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.N1QL,QueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryResult.cs,ShouldRetry,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.N1QL,QueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryClient.cs,ExecuteQueryAsync,Cyclomatic complexity of the method is 11
Complex Method,Couchbase.Search,SearchDataMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchDataMapper.cs,ReadStatus,Cyclomatic complexity of the method is 21
Complex Method,Couchbase.Search,SearchClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchClient.cs,QueryAsync,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Search,SearchParams,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchParams.cs,ToJson,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Utils,UriExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UriExtensions.cs,GetIpAddress,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Views,SpatialViewQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\SpatialViewQuery.cs,GetQueryParams,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Views,ViewResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\ViewResult'.cs,CannotRetry,Cyclomatic complexity of the method is 30
Complex Method,Couchbase.Views,StaleStateExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\StaleState.cs,ToLowerString,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Views,ViewQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\ViewQuery.cs,GetQueryParams,Cyclomatic complexity of the method is 18
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,CouchbaseBucket,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Observe,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ObserveAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Replace,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ReplaceAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,MemcachedBucket,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Observe,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,ObserveAsync,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Replace,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,ReplaceAsync,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The method has 9 parameters.
Long Parameter List,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,CouchbaseConfigContext,The method has 6 parameters.
Long Parameter List,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,ConfigContextBase,The method has 6 parameters.
Long Parameter List,Couchbase.Configuration,MemcachedConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\MemcachedConfigContext.cs,MemcachedConfigContext,The method has 6 parameters.
Long Parameter List,Couchbase.Configuration.Server.Providers,ConfigProviderBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\ConfigProviderBase.cs,ConfigProviderBase,The method has 6 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeySeqnoObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeySeqnoObserver.cs,KeySeqnoObserver,The method has 6 parameters.
Long Parameter List,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,KeyObserver,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,ObserveRemoveAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,ObserveAddAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,ObserveAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,Observe,The method has 5 parameters.
Long Parameter List,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,ClusterController,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,ObserveAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Observe,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Upsert,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,UpsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Upsert,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,UpsertAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Replace,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,ReplaceAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,ReplaceAsync,The method has 6 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,Insert,The method has 5 parameters.
Long Parameter List,Couchbase.Core,IBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IBucket.cs,InsertAsync,The method has 5 parameters.
Long Parameter List,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,Server,The method has 5 parameters.
Long Parameter List,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,Server,The method has 6 parameters.
Long Parameter List,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,Server,The method has 11 parameters.
Long Parameter List,Couchbase.Core,VBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\VBucket.cs,VBucket,The method has 7 parameters.
Long Parameter List,Couchbase.Core.Transcoders,ITypeTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\ITypeTranscoder.cs,Decode,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Transcoders,ITypeTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\ITypeTranscoder.cs,Decode,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Decode,The method has 5 parameters.
Long Parameter List,Couchbase.Core.Transcoders,DefaultTranscoder,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Transcoders\DefaultTranscoder.cs,Decode,The method has 5 parameters.
Long Parameter List,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,CarrierPublicationProvider,The method has 6 parameters.
Long Parameter List,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,HttpStreamingProvider,The method has 6 parameters.
Long Parameter List,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SslConnection,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.Authentication,SaslList,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Authentication\SaslList.cs,SaslList,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations.Authentication,SaslStart,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Authentication\SaslStart.cs,SaslStart,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations.Authentication,SaslStep,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Authentication\SaslStep.cs,SaslStep,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,Hello,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,GetK,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\GetK.cs,GetK,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,GetL,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\GetL.cs,GetL,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,GetQ,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\GetQ.cs,GetQ,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,GetT,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\GetT.cs,GetT,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,MutationOperationBase,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,MutationOperationBase,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Noop,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Noop.cs,Noop,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,OperationBase,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,OperationBase,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,ReplicaRead,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\ReplicaRead.cs,ReplicaRead,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Add,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Add.cs,Add,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Add,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Add.cs,Add,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Add,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Add.cs,Add,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Append,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Append.cs,Append,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Append,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Append.cs,Append,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Config,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Config.cs,Config,The method has 7 parameters.
Long Parameter List,Couchbase.IO.Operations,Config,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Config.cs,Config,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Decrement,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Decrement.cs,Decrement,The method has 7 parameters.
Long Parameter List,Couchbase.IO.Operations,Decrement,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Decrement.cs,Decrement,The method has 8 parameters.
Long Parameter List,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,Get,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Increment,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Increment.cs,Increment,The method has 7 parameters.
Long Parameter List,Couchbase.IO.Operations,Increment,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Increment.cs,Increment,The method has 8 parameters.
Long Parameter List,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,Observe,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Prepend,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Prepend.cs,Prepend,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Prepend,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Prepend.cs,Prepend,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Replace,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Replace.cs,Replace,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Replace,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Replace.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Replace,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Replace.cs,Replace,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations,Set,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Set.cs,Set,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations,Set,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Set.cs,Set,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,MultiLookup,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,MultiMutation,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocDictUpsert,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDictUpsert.cs,SubDocDictUpsert,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocReplace,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocReplace.cs,SubDocReplace,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocDictAdd,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDictAdd.cs,SubDocDictAdd,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocDelete,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDelete.cs,SubDocDelete,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubCounter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubCounter.cs,SubCounter,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubArrayPushLast,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayPushLast.cs,SubArrayPushLast,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubArrayPushFirst,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayPushFirst.cs,SubArrayPushFirst,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubArrayAddUnique,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayAddUnique.cs,SubArrayAddUnique,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubArrayInsert,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayInsert.cs,SubArrayInsert,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocSingularBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularBase.cs,SubDocSingularBase,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocSingularBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularBase.cs,SubDocSingularBase,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocSingularLookupBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,SubDocSingularLookupBase,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,SubDocSingularMutationBase,The method has 6 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,SubDocSingularMutationBase,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubExists,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubExists.cs,SubExists,The method has 5 parameters.
Long Parameter List,Couchbase.IO.Operations.SubDocument,SubGet,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubGet.cs,SubGet,The method has 5 parameters.
Long Parameter List,Couchbase.Management,MemcachedBucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\MemcachedBucketManager.cs,MemcachedBucketManager,The method has 5 parameters.
Long Parameter List,Couchbase.Management,BucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketManager.cs,BucketManager,The method has 6 parameters.
Long Parameter List,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,ClusterManager,The method has 6 parameters.
Long Parameter List,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucket,The method has 10 parameters.
Long Parameter List,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucketAsync,The method has 10 parameters.
Long Parameter List,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucket,The method has 11 parameters.
Long Parameter List,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucketAsync,The method has 11 parameters.
Long Parameter List,Couchbase.Management,IClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\IClusterManager.cs,CreateBucket,The method has 10 parameters.
Long Parameter List,Couchbase.Management,IClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\IClusterManager.cs,CreateBucket,The method has 11 parameters.
Long Parameter List,Couchbase.Management,IClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\IClusterManager.cs,CreateBucketAsync,The method has 10 parameters.
Long Parameter List,Couchbase.Management,IClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\IClusterManager.cs,CreateBucketAsync,The method has 11 parameters.
Long Parameter List,Couchbase.Search.Sort,FieldSearchSort,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\Sort\FieldSearchSort.cs,FieldSearchSort,The method has 5 parameters.
Long Parameter List,Couchbase.Search.Sort,GeoDistanceSearchSort,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\Sort\GeoDistanceSearchSort.cs,GeoDistanceSearchSort,The method has 5 parameters.
Long Identifier,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The length of the parameter timeoutCancellationTokenSource is 30.
Long Statement,Couchbase.Analytics,AnalyticsRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Analytics\AnalyticsRequest.cs,Credentials,The length of the statement  "		throw new ArgumentOutOfRangeException (username' ExceptionUtil.GetMessage (ExceptionUtil.ParameterCannotBeNullOrEmptyFormat' usernameParameter)); " is 145.
Long Statement,Couchbase.Analytics,AnalyticsClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Analytics\AnalyticsClient.cs,QueryAsync,The length of the statement  "	using (var content = new StringContent (queryRequest.GetFormValuesAsJson ()' System.Text.Encoding.UTF8' MediaType.Json)) { " is 122.
Long Statement,Couchbase.Authentication.SASL,CramMd5Mechanism,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\SASL\CramMd5Mechanism.cs,Authenticate,The length of the statement  "		Log.Debug ("Authentication for socket {0} failed for a non-auth related reason: {1} - {2}"' temp.Identity' tempResult.Message' tempResult.Status); " is 146.
Long Statement,Couchbase.Authentication.SASL,PlainTextMechanism,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\SASL\PlainTextMechanism.cs,Authenticate,The length of the statement  "		var operation = new SaslStart (MechanismType' GetAuthData (username' password)' _transcoder' SaslFactory.DefaultTimeout); " is 121.
Long Statement,Couchbase.Authentication.SASL,ScramShaMechanism,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\SASL\ScramShaMechanism.cs,Authenticate,The length of the statement  "	Log.Debug ("Client First Message {0} - {1}: {2} [U:{3}|P:{4}"' connection.EndPoint' connection.Identity' ClientFirstMessage' username' password); " is 145.
Long Statement,Couchbase,Cluster,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Cluster.cs,CreateManager,The length of the statement  "	return new ClusterManager (Configuration' serverConfig' new JsonDataMapper (Configuration)' new CouchbaseHttpClient (username' password)' username' password); " is 158.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,NotifyConfigChanged,The length of the statement  "	Log.Info ("Config updated old/new: {0}' {1}"' _configInfo != null ? _configInfo.BucketConfig.Rev : 0' configInfo.BucketConfig.Rev); " is 131.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,NotifyConfigChanged,The length of the statement  "	Interlocked.Exchange (ref _requestExecuter' new CouchbaseRequestExecuter (_clusterController' _configInfo' Name' _pending)); " is 124.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Exists,The length of the statement  "	return result.Success && result.Value.KeyState != KeyState.NotFound && result.Value.KeyState != KeyState.LogicalDeleted; " is 120.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ExistsAsync,The length of the statement  "	return result.Success && result.Value.KeyState != KeyState.NotFound && result.Value.KeyState != KeyState.LogicalDeleted; " is 120.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,CreateManager,The length of the statement  "	return new BucketManager (this' _configInfo.ClientConfig' new JsonDataMapper (_configInfo.ClientConfig)' new CouchbaseHttpClient (username' password)' username' password); " is 171.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,InsertAsync,The length of the statement  "		var result = await InsertAsync<T> (document.Id' document.Content' document.Expiry.ToTtl ()' replicateTo' persistTo).ContinueOnAnyContext (); " is 140.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Observe,The length of the statement  "	var observer = new KeyObserver (_pending' _configInfo' _clusterController' config.ObserveInterval' config.ObserveTimeout); " is 122.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Observe,The length of the statement  "	return observer.Observe (key' cas' deletion' replicateTo' persistTo) ? ObserveResponse.DurabilitySatisfied : ObserveResponse.DurabilityNotSatisfied; " is 148.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ObserveAsync,The length of the statement  "	var observer = new KeyObserver (_pending' _configInfo' _clusterController' config.ObserveInterval' config.ObserveTimeout); " is 122.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ReplaceAsync,The length of the statement  "		var result = await ReplaceAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()).ContinueOnAnyContext (); " is 131.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,ReplaceAsync,The length of the statement  "		var result = await ReplaceAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()' replicateTo' persistTo).ContinueOnAnyContext (); " is 155.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The length of the statement  "		var result = await UpsertAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()).ContinueOnAnyContext (); " is 130.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,UpsertAsync,The length of the statement  "		var result = await UpsertAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()' replicateTo' persistTo).ContinueOnAnyContext (); " is 154.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,CheckDisposed,The length of the statement  "		var message = string.Format ("This bucket [{0}] has been disposed! Performing operations on a disposed bucket is not supported!"' Name); " is 136.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,CheckForConfigUpdates,The length of the statement  "				Log.Info ("New config found {0}|{1}: {2}"' bucketConfig.Rev' _configInfo.BucketConfig.Rev' JsonConvert.SerializeObject (bucketConfig)); " is 135.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,Equals,The length of the statement  "	return Equals (_clusterController' other._clusterController) && _disposed.Equals (other._disposed) && string.Equals (Name' other.Name); " is 135.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,InvokeAsync,The length of the statement  "		return (DocumentFragment<T>)await _requestExecuter.SendWithRetryAsync (OptimizeSingleMutation (theBuilder)).ContinueOnAnyContext (); " is 132.
Long Statement,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,InvokeAsync,The length of the statement  "		return (DocumentFragment<T>)await _requestExecuter.SendWithRetryAsync (OptimizeSingleLookup (theBuilder)).ContinueOnAnyContext (); " is 130.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,NotifyConfigChanged,The length of the statement  "	Log.Info ("Config updated old/new: {0}' {1}"' _configInfo != null ? _configInfo.BucketConfig.Rev : 0' configInfo.BucketConfig.Rev); " is 131.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,NotifyConfigChanged,The length of the statement  "	Interlocked.Exchange (ref _requestExecuter' new MemcachedRequestExecuter (_clusterController' _configInfo' Name' _pending)); " is 124.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,CreateManager,The length of the statement  "	return new MemcachedBucketManager (this' _configInfo.ClientConfig' new JsonDataMapper (_configInfo.ClientConfig)' username' password); " is 134.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,UpsertAsync,The length of the statement  "		var result = await UpsertAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()).ContinueOnAnyContext (); " is 130.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,ReplaceAsync,The length of the statement  "		var result = await ReplaceAsync<T> (document.Id' document.Content' document.Cas' document.Expiry.ToTtl ()).ContinueOnAnyContext (); " is 131.
Long Statement,Couchbase,MemcachedBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\MemcachedBucket.cs,CheckDisposed,The length of the statement  "		var message = string.Format ("This bucket [{0}] has been disposed! Performing operations on a disposed bucket is not supported!"' Name); " is 136.
Long Statement,Couchbase,Document,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Document.cs,ToString,The length of the statement  "	return new JObject (new JProperty ("id"' Id)' new JProperty ("cas"' Cas)' new JProperty ("token"' Token != null ? Token.ToString () : null)' new JProperty ("content"' content)).ToString (Formatting.None); " is 204.
Long Statement,Couchbase,DocumentResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\DocumentResult'.cs,ToString,The length of the statement  "	return new JObject (new JProperty ("id"' Id)' new JProperty ("cas"' Document != null ? Document.Cas : 0)' new JProperty ("token"' Document != null && Document.Token != null ? Document.Token.ToString () : null)' new JProperty ("content"' content)).ToString (Formatting.None); " is 274.
Long Statement,Couchbase,SubdocExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\SubdocExtensions.cs,ParsePath,The length of the statement  "	var generatedSerializer = typeSerializerProvider != null ? typeSerializerProvider.Serializer as IExtendedTypeSerializer : null; " is 127.
Long Statement,Couchbase,OperationResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\OperationResult'.cs,ToString,The length of the statement  "	return new JObject (new JProperty ("id"' Id)' new JProperty ("cas"' Cas)' new JProperty ("token"' Token != null ? Token.ToString () : null)' new JProperty ("content"' content)).ToString (Formatting.None); " is 204.
Long Statement,Couchbase,OperationResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\OperationResult'.cs,ToString,The length of the statement  "	return new JObject (new JProperty ("id"' Id)' new JProperty ("cas"' Cas)' new JProperty ("token"' Token != null ? Token.ToString () : null)).ToString (Formatting.None); " is 168.
Long Statement,Couchbase.Configuration.Client,ServerResolverUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ServerResolverUtil.cs,GetServerResolver,The length of the statement  "		var message = ExceptionUtil.ServerResolverTypeDoesntImplementInterface.WithParams (serverResolverType' typeof(IServerResolver).Name); " is 133.
Long Statement,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The length of the statement  "	if (TcpKeepAliveInterval != Defaults.TcpKeepAliveInterval && PoolConfiguration.TcpKeepAliveInterval == Defaults.TcpKeepAliveInterval) { " is 135.
Long Statement,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The length of the statement  "	if (EnableTcpKeepAlives != Defaults.EnableTcpKeepAlives && PoolConfiguration.EnableTcpKeepAlives == Defaults.EnableTcpKeepAlives) { " is 131.
Long Statement,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,Clone,The length of the statement  "	return new PoolConfiguration (MaxSize' MinSize' WaitTimeout' RecieveTimeout' ShutdownTimeout' OperationTimeout' MaxAcquireIterationCount' ConnectTimeout' ClientConfiguration) " is 174.
Long Statement,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,ValidateConnectionValues,The length of the statement  "		throw new ArgumentOutOfRangeException ("maxSize"' maxSize' ExceptionUtil.PoolConfigNumberOfConnections.WithParams ("maximum"' Defaults.MinConnectionValue' Defaults.MaxConnectionValue)); " is 185.
Long Statement,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,ValidateConnectionValues,The length of the statement  "		throw new ArgumentOutOfRangeException ("minSize"' minSize' ExceptionUtil.PoolConfigNumberOfConnections.WithParams ("minimum"' 0' Defaults.MaxConnectionValue)); " is 159.
Long Statement,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,ValidateConnectionValues,The length of the statement  "		throw new ArgumentOutOfRangeException ("maxSize"' maxSize' ExceptionUtil.PoolConfigMaxGreaterThanMin.WithParams (maxSize' minSize)); " is 132.
Long Statement,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,The length of the statement  "			var vBucketKeyMapper = new VBucketKeyMapper (Servers' bucketConfig.VBucketServerMap' bucketConfig.Rev' bucketConfig.Name); " is 122.
Long Statement,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,The length of the statement  "				var vBucketKeyMapper = new VBucketKeyMapper (Servers' bucketConfig.VBucketServerMap' bucketConfig.Rev' bucketConfig.Name); " is 122.
Long Statement,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,The length of the statement  "		var vBucketKeyMapper = new VBucketKeyMapper (Servers' BucketConfig.VBucketServerMap' BucketConfig.Rev' BucketConfig.Name); " is 122.
Long Statement,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,The length of the statement  "		var vBucketKeyMapper = new VBucketKeyMapper (Servers' BucketConfig.VBucketServerMap' BucketConfig.Rev' BucketConfig.Name); " is 122.
Long Statement,Couchbase.Configuration.Server.Monitoring,ConfigMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Monitoring\ConfigMonitor.cs,StartMonitoring,The length of the statement  "				var lastCheckedPlus = ClusterController.LastConfigCheckedTime.AddMilliseconds (Configuration.HeartbeatConfigCheckFloor); " is 120.
Long Statement,Couchbase.Configuration.Server.Monitoring,ConfigMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Monitoring\ConfigMonitor.cs,StartMonitoring,The length of the statement  "						var configResult = server.Send (new Config (ClusterController.Transcoder' Configuration.DefaultOperationLifespan' server.EndPoint)); " is 132.
Long Statement,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,Equals,The length of the statement  "	return (other != null && other.Name == Name && other.AuthType == AuthType && other.NodeLocator == NodeLocator && other.SaslPassword == SaslPassword && other.Uuid == Uuid && other.BucketType == BucketType && other.Nodes.AreEqual<Node> (Nodes) && other.VBucketServerMap.Equals (VBucketServerMap)); " is 295.
Long Statement,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetTerseStreamingUri,The length of the statement  "		hostName = hostName.Replace (((int)DefaultPorts.MgmtApi).ToString (CultureInfo.InvariantCulture)' ((int)DefaultPorts.HttpsMgmt).ToString (CultureInfo.InvariantCulture)); " is 169.
Long Statement,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetTerseUri,The length of the statement  "		hostName = hostName.Replace (((int)DefaultPorts.MgmtApi).ToString (CultureInfo.InvariantCulture)' ((int)DefaultPorts.HttpsMgmt).ToString (CultureInfo.InvariantCulture)); " is 169.
Long Statement,Couchbase.Configuration.Server.Serialization,BootstrapExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BootstrapExtensions.cs,GetPoolsUri,The length of the statement  "		const string msg = "No servers returned by bootstrap url. This may indicate that you are attempting to bootstrap to a server that has not joined a cluster yet."; " is 161.
Long Statement,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,Equals,The length of the statement  "	return (other != null && ServerList.AreEqual<string> (other.ServerList) && VBucketMap.AreEqual (other.VBucketMap)) && VBucketMapForward.AreEqual (other.VBucketMapForward); " is 171.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithDurability,The length of the statement  "				var seqnoObserver = new KeySeqnoObserver (operation.Key' Pending' ConfigInfo' ClusterController' config.ObserveInterval' (uint)config.ObserveTimeout); " is 150.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithDurability,The length of the statement  "				var seqnoObserver = new KeySeqnoObserver (operation.Key' Pending' ConfigInfo' ClusterController' config.ObserveInterval' (uint)config.ObserveTimeout); " is 150.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithDurabilityAsync,The length of the statement  "					var seqnoObserver = new KeySeqnoObserver (operation.Key' Pending' ConfigInfo' ClusterController' config.ObserveInterval' (uint)config.ObserveTimeout); " is 150.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithDurabilityAsync,The length of the statement  "					var observed = await observer.ObserveAsync (operation.Key' result.Cas' deletion' replicateTo' persistTo' cts).ContinueOnAnyContext (); " is 134.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The length of the statement  "			if (viewResult.Success || viewResult.CannotRetry () || viewQuery.RetryAttempts >= ConfigInfo.ClientConfig.MaxViewRetries) { " is 123.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The length of the statement  "			Log.Debug ("Operation {0} succeeded {1} for key {2} : {3}"' operation.GetType ().Name' operation.Attempts' operation.Key' operationResult); " is 139.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The length of the statement  "			Log.Debug ("Operation {0} succeeded {1} for key {2} : {3}"' operation.GetType ().Name' operation.Attempts' operation.Key' operationResult.Value); " is 145.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "			tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data"))); " is 126.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "		operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token); " is 124.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "			tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data"))); " is 126.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "		operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token); " is 124.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "			var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource; " is 203.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The length of the statement  "		result = RetryRequest (ConfigInfo.GetAnalyticsNode' (server' req) => server.Send<T> (req)' (req' res) => !req.TimedOut () && !res.Success && res.ShouldRetry ()' request); " is 170.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "		result = await RetryRequestAsync (ConfigInfo.GetAnalyticsNode' async (server' req' token) => await server.SendAsync<T> (req' token).ContinueOnAnyContext ()' (req' res) => !req.TimedOut () && !res.Success && res.ShouldRetry ()' request' cancellationToken' (int)ConfigInfo.ClientConfig.AnalyticsRequestTimeout).ContinueOnAnyContext (); " is 333.
Long Statement,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The length of the statement  "		var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource; " is 203.
Long Statement,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,CheckPersistToAsync,The length of the statement  "		Log.Debug ("Mutation detected {0} - {1} - opaque: {2} key:{3}"' server.EndPoint' result.Value' operation.Opaque' observeParams.Key); " is 132.
Long Statement,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,CheckPersistToAsync,The length of the statement  "		throw new DocumentMutationException (string.Format ("Document mutation detected during observe for key '{0}'"' observeParams.Key)); " is 131.
Long Statement,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,CheckPersistToAsync,The length of the statement  "		Log.Debug ("Durability met {0} - {1} - opaque: {2} key:{3}"' server.EndPoint' result.Value' operation.Opaque' observeParams.Key); " is 129.
Long Statement,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,GetReplicas,The length of the statement  "	return maxReplicas > vBucket.Replicas.Length ? vBucket.Replicas.Where (x => x > -1).ToList () : vBucket.Replicas.Where (x => x > -1).Take (maxReplicas).ToList (); " is 162.
Long Statement,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,CheckReplicaAsync,The length of the statement  "	Log.Debug ("Replica {0} - {1} {2} - opaque: {3} key:{4}"' replica.EndPoint' result.Value.KeyState' replicaIndex' operation.Opaque' observeParams.Key); " is 150.
Long Statement,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "		operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token); " is 124.
Long Statement,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The length of the statement  "		operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token); " is 124.
Long Statement,Couchbase.Core.Buckets,RequestExecuterBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\RequestExecuterBase.cs,ReadFromReplica,The length of the statement  "		if (operation.TimedOut () && (result.Status != ResponseStatus.NoReplicasFound && result.Status != ResponseStatus.KeyNotFound)) { " is 128.
Long Statement,Couchbase.Core.Buckets,RequestExecuterBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\RequestExecuterBase.cs,LogFailure,The length of the statement  "		const string msg1 = "Operation for key {0} failed after {1} retries using vb{2} from rev{3} and opaque{4}. Reason: {5}"; " is 120.
Long Statement,Couchbase.Core.Buckets,RequestExecuterBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\RequestExecuterBase.cs,LogFailure,The length of the statement  "		Log.Debug (msg1' operation.Key' operation.Attempts' vBucket.Index' vBucket.Rev' operation.Opaque' operationResult.Message); " is 123.
Long Statement,Couchbase.Core.Buckets,RequestExecuterBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\RequestExecuterBase.cs,UpdateConfig,The length of the statement  "		var result = node.Send (new Config (ClusterController.Transcoder' ConfigInfo.ClientConfig.DefaultOperationLifespan' node.EndPoint)); " is 132.
Long Statement,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The length of the statement  "		var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF; " is 136.
Long Statement,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The length of the statement  "					var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF); " is 167.
Long Statement,Couchbase.Core.Buckets,VBucketKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\VBucketKeyMapper.cs,CreateVBucketMap,The length of the statement  "	Log.Info ("Creating VBuckets {0} and FMaps {1} for Rev#{2}"' vBucketMap.Length' vBucketForwardMap == null ? 0 : vBucketForwardMap.Length' Rev); " is 143.
Long Statement,Couchbase.Core,CouchbaseKeyValueResponseException,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\CouchbaseKeyValueResponseException.cs,FromResult,The length of the statement  "	return new CouchbaseKeyValueResponseException (ExceptionUtil.GetResponseExceptionMessage (result.Message' result.Status)' result.Status' result.Exception); " is 155.
Long Statement,Couchbase.Core,CouchbaseKeyValueResponseException,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\CouchbaseKeyValueResponseException.cs,FromResult,The length of the statement  "	return new CouchbaseKeyValueResponseException (ExceptionUtil.GetResponseExceptionMessage (result.Message' result.Status)' result.Status' result.Exception); " is 155.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,Initialize,The length of the statement  "	_configProviders.Add (new CarrierPublicationProvider (_clientConfig' _ioServiceFactory' _connectionPoolFactory' _saslFactory' Converter' Transcoder)); " is 150.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,Initialize,The length of the statement  "	_configProviders.Add (new HttpStreamingProvider (_clientConfig' _ioServiceFactory' _connectionPoolFactory' _saslFactory' Converter' Transcoder)); " is 145.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,CreateBucket,The length of the statement  "					bucket = _buckets.GetOrAdd (bucketName' name => new CouchbaseBucket (this' bucketName' Converter' Transcoder' authenticator)); " is 126.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,CreateBucket,The length of the statement  "					bucket = _buckets.GetOrAdd (bucketName' name => new MemcachedBucket (this' bucketName' Converter' Transcoder' authenticator)); " is 126.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,CheckConfigUpdate,The length of the statement  "			Log.Info ("Not checking config because {0} > {1} or a lock ({2}) could not be acquired."' lastCheckedPlus' now' lockAcquired); " is 126.
Long Statement,Couchbase.Core,ClusterController,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ClusterController.cs,CheckConfigUpdate,The length of the statement  "			var servers = configInfo.Servers.Where (x => x.IsDataNode && !x.IsDown && !x.EndPoint.Equals (excludeEndPoint)).ToList ().Shuffle (); " is 133.
Long Statement,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,CheckOnline,The length of the statement  "			Log.Info ("Checking if node {0} should be down - last: {1}' current: {2}' count: {3}"' EndPoint' last.TimeOfDay' current.TimeOfDay' _ioErrorCount); " is 147.
Long Statement,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,CheckOnline,The length of the statement  "					Log.Info ("Marking node {0} as down - last: {1}' current: {2}' count: {3}"' EndPoint' last.TimeOfDay' current.TimeOfDay' _ioErrorCount); " is 136.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,VisitLambda,The length of the statement  "		throw new NotSupportedException ("The first statement in a subdocument path must be a reference to the lambda parameter."); " is 123.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,VisitMember,The length of the statement  "	if (expression.Type.GetTypeInfo ().IsGenericType && expression.Type.GetGenericTypeDefinition () == typeof(Nullable<>) && (node.Member.Name == "Value")) { " is 153.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,VisitMethodCall,The length of the statement  "	if ((node.Method.DeclaringType == null) || (node.Object == null) || !node.Method.IsSpecialName || !node.Method.Name.StartsWith ("get_")) { " is 138.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,VisitMethodCall,The length of the statement  "			throw new NotSupportedException ("Array/dictionary indices with more than one dimension are not supported in subdocument paths."); " is 130.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,EnsureNotInSpecialExpression,The length of the statement  "		throw new NotSupportedException ("Non-constant expressions are not supported as dictionary indices in subdocument paths."); " is 123.
Long Statement,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,CreateExpressionNotSupportedException,The length of the statement  "	return new NotSupportedException (string.Format ("{0} expressions are not supported in subdocument paths."' node.NodeType)); " is 124.
Long Statement,Couchbase.Core.Monitoring,ClusterMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Monitoring\ClusterMonitor.cs,StartMonitoring,The length of the statement  "				await Task.Delay (TimeSpan.FromMilliseconds (_clusterController.Configuration.NodeAvailableCheckInterval)' _cancellationTokenSource.Token); " is 139.
Long Statement,Couchbase.Core.Monitoring,ClusterMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Monitoring\ClusterMonitor.cs,StartMonitoring,The length of the statement  "				var tests = ConfigContextBase.QueryUris.Where (p => !p.IsHealthy (_clusterController.Configuration.QueryFailedThreshold)).Select (p => _queryUriTester.TestUri (p' _cancellationTokenSource.Token)); " is 196.
Long Statement,Couchbase.Core.Monitoring,ClusterMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Monitoring\ClusterMonitor.cs,StartMonitoring,The length of the statement  "				tests = tests.Concat (ConfigContextBase.SearchUris.Where (p => !p.IsHealthy (ConfigContextBase.SearchNodeFailureThreshold)).Select (p => _searchUriTester.TestUri (p' _cancellationTokenSource.Token))); " is 200.
Long Statement,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,GetDefaultContractResolver,The length of the statement  "	if (JsonConvert.DefaultSettings != null && JsonConvert.DefaultSettings () != null && JsonConvert.DefaultSettings ().ContractResolver != null) { " is 143.
Long Statement,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,Deserialize,The length of the statement  "				if (typeof(T).GetTypeInfo ().IsValueType && (!typeof(T).GetTypeInfo ().IsGenericType || typeof(T).GetGenericTypeDefinition () != typeof(Nullable<>))) { " is 151.
Long Statement,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,GetDeserializationSettings,The length of the statement  "		// Backwards compatibility issue in Newtonsoft.Json 7.0.1 causes setting a null reference resolver to error instead of using default " is 132.
Long Statement,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,GetConfig,The length of the statement  "				var selectBucketResult = ioService.Execute (new SelectBucket (bucketName' Transcoder' ClientConfig.DefaultOperationLifespan)); " is 126.
Long Statement,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,GetConfig,The length of the statement  "				configInfo = new CouchbaseConfigContext (bucketConfig' ClientConfig' IOServiceFactory' ConnectionPoolFactory' SaslFactory' Transcoder); " is 135.
Long Statement,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,GetConfig,The length of the statement  "			const string msg = "A failure to authenticate may mean that the server has not joined the cluster" + " yet or that the Bucket does not exist. Please check that {0} has joined that" + " cluster and that the Bucket '{1}' exists."; " is 228.
Long Statement,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,UpdateConfig,The length of the statement  "							Log.Info ("Config changed (forced:{0}) new Rev#{1} | old Rev#{2} CCCP: {3}"' force' bucketConfig.Rev' oldBucketConfig.Rev' JsonConvert.SerializeObject (bucketConfig)); " is 167.
Long Statement,Couchbase.Configuration.Server.Providers.CarrierPublication,CarrierPublicationProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\CarrierPublication\CarrierPublicationProvider.cs,UpdateConfig,The length of the statement  "							Log.Debug ("3. Completed checking config with rev#{0} on thread {1}"' bucketConfig.Rev' Thread.CurrentThread.ManagedThreadId); " is 126.
Long Statement,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,RegisterObserver,The length of the statement  "		var configThreadState = new ConfigThreadState (bucketConfig' ConfigChangedHandler' ErrorOccurredHandler' cancellationTokenSource.Token); " is 136.
Long Statement,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,UpdateConfig,The length of the statement  "			Log.Info ("Config changed new Rev#{0} | old Rev#{1} HTTP: {2}"' bucketConfig.Rev' staleBucketConfig.Rev' JsonConvert.SerializeObject (bucketConfig)); " is 149.
Long Statement,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,CreateConfigInfo,The length of the statement  "		configInfo = new CouchbaseConfigContext (bucketConfig' ClientConfig' IOServiceFactory' ConnectionPoolFactory' SaslFactory' Transcoder); " is 135.
Long Statement,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,CreateConfigInfo,The length of the statement  "		configInfo = new MemcachedConfigContext (bucketConfig' ClientConfig' IOServiceFactory' ConnectionPoolFactory' SaslFactory' Transcoder); " is 135.
Long Statement,Couchbase.IO,ConnectionPoolBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPoolBase.cs,Authenticate,The length of the statement  "	Log.Trace ("1. Checking authentication [{0}|{1}]: {2} - {3}"' connection.IsAuthenticated' connection.IsDead' EndPoint' connection.Identity); " is 140.
Long Statement,Couchbase.IO,ConnectionPoolBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPoolBase.cs,Authenticate,The length of the statement  "	Log.Trace ("2. Checking authentication [{0}|{1}]: {2} - {3}"' connection.IsAuthenticated' connection.IsDead' EndPoint' connection.Identity); " is 140.
Long Statement,Couchbase.IO,ConnectionPoolBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPoolBase.cs,Authenticate,The length of the statement  "			Log.Info ("4. Authenticated {0} using {1} - {2} - {3} [{4}]."' SaslMechanism.Username' SaslMechanism.GetType ()' Identity' connection.Identity' EndPoint); " is 154.
Long Statement,Couchbase.IO,ConnectionPoolBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPoolBase.cs,Authenticate,The length of the statement  "			Log.Info ("4. Could not authenticate {0} using {1} - {2} [{3}]."' SaslMechanism.Username' SaslMechanism.GetType ()' Identity' EndPoint); " is 136.
Long Statement,Couchbase.IO,SharedConnectionPool,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SharedConnectionPool.cs,CreateAndAuthConnection,The length of the statement  "	Log.Debug ("Acquire new: {0} | {1} | [{2}' {3}] - {4} - Disposed: {5}"' connection.Identity' EndPoint' _connections.Count' Configuration.MaxSize' _identity' _disposed); " is 168.
Long Statement,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Send,The length of the statement  "			var bufferLength = state.Buffer.Length - state.BytesSent < Configuration.BufferSize ? state.Buffer.Length - state.BytesSent : Configuration.BufferSize; " is 151.
Long Statement,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The length of the statement  "		Log.Debug ("Receive {0} bytes for opaque{1} with {2} on server {3} offset{4}"' e.BytesTransferred' state.Opaque' Identity' EndPoint' state.SendOffset); " is 151.
Long Statement,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The length of the statement  "			var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None); " is 142.
Long Statement,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The length of the statement  "		HandleDisconnect (new RemoteHostClosedException (ExceptionUtil.GetMessage (ExceptionUtil.RemoteHostClosedMsg' EndPoint))); " is 122.
Long Statement,Couchbase.IO,ConnectionBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionBase.cs,HandleException,The length of the statement  "		var message = string.Format ("Opcode={0} | Key={1} | Host={2}"' operation.OperationCode' operation.Key' ConnectionPool.EndPoint); " is 129.
Long Statement,Couchbase.IO,ConnectionBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionBase.cs,CountdownToClose,The length of the statement  "			Log.Debug ("Restarting timer for connection for {0} after {1}ms"' _identity' (DateTime.Now - startTime).TotalMilliseconds); " is 123.
Long Statement,Couchbase.IO,ConnectionPool,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPool.cs,Initialize,The length of the statement  "				Log.Info ("Initializing connection on [{0} | {1}] - {2} - Disposed: {3}"' EndPoint' connection.Identity' Identity' _disposed); " is 126.
Long Statement,Couchbase.IO,ConnectionPool,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPool.cs,Acquire,The length of the statement  "			Log.Debug ("Acquire new: {0} | {1} | [{2}' {3}] - {4} - Disposed: {5}"' connection.Identity' EndPoint' _store.Count' _count' Identity' _disposed); " is 146.
Long Statement,Couchbase.IO,ConnectionPool,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPool.cs,AcquireFromPool,The length of the statement  "		Log.Debug ("Acquire existing: {0} | {1} | [{2}' {3}] - {4} - Disposed: {5} - Refs={6}"' connection.Identity' EndPoint' _store.Count' _count' Identity' _disposed' _refs.Count); " is 175.
Long Statement,Couchbase.IO,ConnectionPool,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\ConnectionPool.cs,Release,The length of the statement  "		Log.Debug ("Connection is dead: {0} on {1} - {2} - [{3}' {4}] "' connection.Identity' EndPoint' Identity' _store.Count' _count); " is 128.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,ServerCertificateValidationCallback,The length of the statement  "	Log.Info ("Validating certificate [IgnoreRemoteCertificateNameMismatch={0}]: {1}"' ClientConfiguration.IgnoreRemoteCertificateNameMismatch' sslPolicyErrors); " is 157.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The length of the statement  "		state.BytesReceived = await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' state.BufferLength).ContinueOnAnyContext (); " is 128.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The length of the statement  "			var bufferLength = state.BufferLength - state.BytesSent < state.BufferLength ? state.BufferLength - state.BytesSent : state.BufferLength; " is 137.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The length of the statement  "			state.BytesReceived += await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' bufferLength).ContinueOnAnyContext (); " is 123.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The length of the statement  "			await state.Data.WriteAsync (state.Buffer' state.BufferOffset' state.BytesReceived - (int)state.Data.Length).ContinueOnAnyContext (); " is 133.
Long Statement,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The length of the statement  "			var bytesReceived = await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' state.BufferLength' cancellationToken).ContinueOnAnyContext (); " is 145.
Long Statement,Couchbase.IO,DefaultConnectionFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\DefaultConnectionFactory.cs,GetGeneric,The length of the statement  "			socket.SetKeepAlives (p.Configuration.EnableTcpKeepAlives' p.Configuration.TcpKeepAliveTime' p.Configuration.TcpKeepAliveInterval); " is 131.
Long Statement,Couchbase.IO.Http,CouchbaseHttpClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Http\CouchbaseHttpClient.cs,CreateClientHandler,The length of the statement  "	if (clientConfiguration.HasCredentials && clientConfiguration.Authenticator.AuthenticatorType == AuthenticatorType.Password) { " is 126.
Long Statement,Couchbase.IO.Http,CouchbaseHttpClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Http\CouchbaseHttpClient.cs,OnCertificateValidation,The length of the statement  "	Log.Info ("Validating certificate [IgnoreRemoteCertificateNameMismatch={0}]: {1}"' ClientConfiguration.IgnoreRemoteCertificateNameMismatch' sslPolicyErrors); " is 157.
Long Statement,Couchbase.IO.Operations,ErrorCode,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\GetErrorMap.cs,ToString,The length of the statement  "	return string.Format ("KV Error: {{Name=\"{0}\"' Description=\"{1}\"' Attributes=\"{2}\"}}"' name' desc ?? string.Empty' string.Join ("'"' attrs ?? new string[0])); " is 164.
Long Statement,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,Write,The length of the statement  "	var buffer = new byte[extras.GetLengthSafe () + body.GetLengthSafe () + key.GetLengthSafe () + header.GetLengthSafe ()]; " is 120.
Long Statement,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,Write,The length of the statement  "	var buffer = new byte[extras.GetLengthSafe () + body.GetLengthSafe () + key.GetLengthSafe () + header.GetLengthSafe ()]; " is 120.
Long Statement,Couchbase.IO.Operations.SubDocument,SubDocDictUpsert,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDictUpsert.cs,Clone,The length of the statement  "	return new SubDocDictUpsert<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 128.
Long Statement,Couchbase.IO.Operations.SubDocument,SubDocReplace,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocReplace.cs,Clone,The length of the statement  "	return new SubDocReplace<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 125.
Long Statement,Couchbase.IO.Operations.SubDocument,SubDocDictAdd,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDictAdd.cs,Clone,The length of the statement  "	return new SubDocDictAdd<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 125.
Long Statement,Couchbase.IO.Operations.SubDocument,SubDocDelete,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocDelete.cs,Clone,The length of the statement  "	return new SubDocDelete<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 124.
Long Statement,Couchbase.IO.Operations.SubDocument,SubCounter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubCounter.cs,Clone,The length of the statement  "	return new SubCounter<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 122.
Long Statement,Couchbase.IO.Operations.SubDocument,SubArrayPushLast,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayPushLast.cs,Clone,The length of the statement  "	return new SubArrayPushLast<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 128.
Long Statement,Couchbase.IO.Operations.SubDocument,SubArrayPushFirst,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayPushFirst.cs,Clone,The length of the statement  "	return new SubArrayPushFirst<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 129.
Long Statement,Couchbase.IO.Operations.SubDocument,SubArrayAddUnique,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayAddUnique.cs,Clone,The length of the statement  "	return new SubArrayAddUnique<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 129.
Long Statement,Couchbase.IO.Operations.SubDocument,SubArrayInsert,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubArrayInsert.cs,Clone,The length of the statement  "	return new SubArrayInsert<T> ((MutateInBuilder<T>)((MutateInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 126.
Long Statement,Couchbase.IO.Operations.SubDocument,SubExists,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubExists.cs,Clone,The length of the statement  "	return new SubExists<T> ((LookupInBuilder<T>)((LookupInBuilder<T>)Builder).Clone ()' Key' VBucket' Transcoder' Timeout) { " is 121.
Long Statement,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The length of the statement  "	return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]; " is 220.
Long Statement,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The length of the statement  "	return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]); " is 229.
Long Statement,Couchbase.Management,ClusterProvisioner,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterProvisioner.cs,ProvisionNodesAsync,The length of the statement  "		var ioe = new InvalidOperationException ("Not enough nodes defined in ClientConfiguration.Servers to provision the cluster"); " is 125.
Long Statement,Couchbase.Management,BucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketManager.cs,CreateN1qlPrimaryIndexAsync,The length of the statement  "	var statement = string.Format (Statements.CreateNamedPrimaryIndex' customName.N1QlEscape ()' BucketName.N1QlEscape ()' defer.ToString ().ToLower ()); " is 149.
Long Statement,Couchbase.Management,BucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketManager.cs,CreateN1qlIndexAsync,The length of the statement  "	var statement = string.Format (Statements.CreateIndexWithFields' indexName.N1QlEscape ()' BucketName.N1QlEscape ()' fieldStr' defer.ToString ().ToLower ()); " is 156.
Long Statement,Couchbase.Management,BucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketManager.cs,CreateN1qlPrimaryIndex,The length of the statement  "	var statement = string.Format (Statements.CreateNamedPrimaryIndex' customName.N1QlEscape ()' BucketName.N1QlEscape ()' defer.ToString ().ToLower ()); " is 149.
Long Statement,Couchbase.Management,BucketManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketManager.cs,CreateN1qlIndex,The length of the statement  "	var statement = string.Format (Statements.CreateIndexWithFields' indexName.N1QlEscape ()' BucketName.N1QlEscape ()' fieldStr' defer.ToString ().ToLower ()); " is 156.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,RebalanceAsync,The length of the statement  "	var ejectedNodes = config.Pools.Nodes.Where (x => x.ClusterMembership.Equals ("inactiveFailed")).Select (x => x.OtpNode); " is 121.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucket,The length of the statement  "		return CreateBucketAsync (name' ramQuota' bucketType' replicaNumber' authType' indexReplicas' flushEnabled' parallelDbAndViewCompaction' saslPassword' threadNumber).Result; " is 172.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucketAsync,The length of the statement  "	return CreateBucketAsync (settings.Name' settings.ProxyPort' settings.RamQuota' settings.BucketType' settings.ReplicaNumber' settings.AuthType' settings.IndexReplicas' settings.FlushEnabled' settings.ParallelDbAndViewCompaction' settings.SaslPassword' settings.ThreadNumber); " is 275.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucketAsync,The length of the statement  "	return CreateBucketAsync (name' 0' ramQuota' bucketType' replicaNumber' authType' indexReplicas' flushEnabled' parallelDbAndViewCompaction' saslPassword' threadNumber); " is 168.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,CreateBucket,The length of the statement  "		return CreateBucketAsync (name' proxyPort' ramQuota' bucketType' replicaNumber' authType' indexReplicas' flushEnabled' parallelDbAndViewCompaction' saslPassword' threadNumber).Result; " is 183.
Long Statement,Couchbase.Management,ClusterManager,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterManager.cs,GetUserFormValues,The length of the statement  "	var rolesValue = string.Join ("'"' roles.Select (role => string.IsNullOrWhiteSpace (role.BucketName) ? role.Name : string.Format ("{0}[{1}]"' role.Name' role.BucketName))); " is 172.
Long Statement,Couchbase.IO.Services,MultiplexingIOService,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Services\MultiplexingIOService.cs,HandleException,The length of the statement  "	if (sourceException is SocketException || sourceException is TransportFailureException || sourceException is SendTimeoutExpiredException) { " is 139.
Long Statement,Couchbase.IO.Services,MultiplexingIOService,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Services\MultiplexingIOService.cs,HandleException,The length of the statement  "	if (capturedException is SocketException || capturedException is TransportFailureException || capturedException is SendTimeoutExpiredException) { " is 145.
Long Statement,Couchbase.N1QL,CouchbaseQueryResponseException,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\CouchbaseQueryResponseException.cs,FromResult,The length of the statement  "	return new CouchbaseQueryResponseException (ExceptionUtil.GetResponseExceptionMessage (result.Message' result.Status)' result.Status' result.Errors' result.Exception); " is 167.
Long Statement,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadObject,The length of the statement  "	if (jtr.TokenType == JsonToken.StartObject || jtr.TokenType == JsonToken.StartArray || jtr.TokenType == JsonToken.StartConstructor) { " is 133.
Long Statement,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,AddCredentials,The length of the statement  "		throw new ArgumentOutOfRangeException (username' ExceptionUtil.GetMessage (ExceptionUtil.ParameterCannotBeNullOrEmptyFormat' usernameParameter)); " is 145.
Long Statement,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,GetQueryParametersAsFormUrlencoded,The length of the statement  "		sb.AppendFormat (QueryArgPattern' WebUtility.UrlEncode (formValue.Key)' WebUtility.UrlEncode (formValue.Value.ToString ())); " is 124.
Long Statement,Couchbase.N1QL,StreamingQueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryClient.cs,ExecuteQueryAsync,The length of the statement  "	using (var content = new StringContent (queryRequest.GetFormValuesAsJson ()' System.Text.Encoding.UTF8' MediaType.Json)) { " is 122.
Long Statement,Couchbase.N1QL,StreamingQueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryClient.cs,ExecuteQueryAsync,The length of the statement  "			var response = await HttpClient.SendAsync (requestMessage' HttpCompletionOption.ResponseHeadersRead' cancellationToken).ContinueOnAnyContext (); " is 144.
Long Statement,Couchbase.N1QL,QueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryClient.cs,CheckRetry,The length of the statement  "	return result.Errors.Any (error => error.Code == (int)ErrorPrepared.Unrecognized || error.Code == (int)ErrorPrepared.UnableToDecode || error.Code == (int)ErrorPrepared.IndexNotFound || (error.Code == (int)ErrorPrepared.Generic && error.Message != null && error.Message.Contains (ERROR_5000_MSG_QUERYPORT_INDEXNOTFOUND))); " is 321.
Long Statement,Couchbase.N1QL,QueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryClient.cs,PrepareStatementIfNotAdHoc,The length of the statement  "			Log.Warn ("Failure to prepare plan for query {0} (it will be reattempted next time it is issued): {1}"' originalStatement' result.GetErrorsAsString ()); " is 152.
Long Statement,Couchbase.N1QL,QueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryClient.cs,PrepareStatementIfNotAdHocAsync,The length of the statement  "			Log.Warn ("Failure to prepare async plan for query {0} (it will be reattempted next time it is issued): {1}"' originalStatement' result.GetErrorsAsString ()); " is 158.
Long Statement,Couchbase.N1QL,QueryClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryClient.cs,ExecuteQueryAsync,The length of the statement  "	using (var content = new StringContent (queryRequest.GetFormValuesAsJson ()' System.Text.Encoding.UTF8' MediaType.Json)) { " is 122.
Long Statement,Couchbase.Search,CouchbaseSearchResponseException,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\CouchbaseSearchResponseException.cs,FromResult,The length of the statement  "	return new CouchbaseSearchResponseException (ExceptionUtil.GetResponseExceptionMessage (result.Errors.FirstOrDefault ()' result.Status)' result.Status' result.Errors' result.Exception); " is 185.
Long Statement,Couchbase.Search,DateRangeFacet,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\DateRangeFacet.cs,ToJson,The length of the statement  "	return new JProperty (Name' new JObject (new JProperty ("field"' Field)' new JProperty ("size"' Size)' new JProperty ("date_ranges"' ranges))); " is 143.
Long Statement,Couchbase.Search,NumericRangeFacet,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\NumericRangeFacet.cs,ToJson,The length of the statement  "	return new JProperty (Name' new JObject (new JProperty ("field"' Field)' new JProperty ("size"' Size)' new JProperty ("numeric_ranges"' ranges))); " is 146.
Long Statement,Couchbase.Search,SearchParams,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchParams.cs,ToJson,The length of the statement  "		parameters.Add (new JProperty ("highlight"' new JObject (new JProperty ("style"' _highLightStyle)' new JProperty ("fields"' _highLightFields)))); " is 145.
Long Statement,Couchbase.Search.Queries.Geo,GeoBoundingBoxQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\Queries\Geo\GeoBoundingBoxQuery.cs,Export,The length of the statement  "	if (!_topLeftLongitude.HasValue || !_topLeftLatitude.HasValue || !_bottomRightLongitude.HasValue || !_bottomRightLatitude.HasValue) { " is 133.
Long Statement,Couchbase.Utils,ClientIdentifier,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ClientIdentifier.cs,GetClientDescription,The length of the statement  "	            return string.Format(DescriptionFormat' CurrentAssembly.Version' RuntimeInformation.FrameworkDescription' RuntimeInformation.OSDescription);" is 140.
Long Statement,Couchbase.Utils,UrlUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UrlUtil.cs,GetSearchBaseUri,The length of the statement  "	var uriAsString = string.Format (BaseUriFormat' config.UseSsl ? Https : Http' adapter.Hostname' config.UseSsl ? adapter.FtsSsl : adapter.Fts); " is 142.
Long Statement,Couchbase.Utils,UrlUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UrlUtil.cs,GetViewBaseUriAsString,The length of the statement  "	var uriAsString = string.Format (ViewUriFormat' config.UseSsl ? Https : Http' adapter.Hostname' config.UseSsl ? adapter.ViewsSsl : adapter.Views' config.BucketName); " is 165.
Long Statement,Couchbase.Utils,UrlUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UrlUtil.cs,GetN1QLBaseUriAsString,The length of the statement  "	var uriAsString = string.Format (N1QLUriFormat' config.UseSsl ? Https : Http' adapter.Hostname' config.UseSsl ? adapter.N1QLSsl : adapter.N1QL); " is 144.
Long Statement,Couchbase.Utils,UrlUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UrlUtil.cs,GetBaseUriAsString,The length of the statement  "	var uriAsString = string.Format (BaseUriFormat' config.UseSsl ? Https : Http' adapter.Hostname' config.UseSsl ? adapter.MgmtApiSsl : adapter.MgmtApi); " is 150.
Long Statement,Couchbase.Utils,UrlUtil,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UrlUtil.cs,GetAnalyticsUri,The length of the statement  "	var uri = string.Format (AnalyticsUriFormat' config.UseSsl ? Https : Http' adapter.Hostname' config.UseSsl ? adapter.AnalyticsSsl : adapter.Analytics); " is 151.
Long Statement,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,CompareItems,The length of the statement  "	return array.Rank == other.Rank && Enumerable.Range (0' array.Rank).All (dim => array.GetLength (dim) == other.GetLength (dim)) && array.Cast<T> ().SequenceEqual (other.Cast<T> ()); " is 181.
Long Statement,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,IsJson,The length of the statement  "	return (theArray.Length > 1 && theArray [startIndex] == 0x5b && theArray [endIndex] == 0x5d) || (theArray.Length > 1 && theArray [startIndex] == 0x7b && theArray [endIndex] == 0x7d); " is 182.
Long Statement,Couchbase.Utils,UriExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\UriExtensions.cs,GetIpAddress,The length of the statement  "			var hosts = useInterNetworkV6Addresses ? hostEntry.AddressList.Where (x => x.AddressFamily == AddressFamily.InterNetworkV6) : hostEntry.AddressList.Where (x => x.AddressFamily == AddressFamily.InterNetwork); " is 207.
Long Statement,Couchbase.Views,CouchbaseViewResponseException,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\CouchbaseViewResponseException.cs,FromResult,The length of the statement  "	return new CouchbaseViewResponseException (ExceptionUtil.GetResponseExceptionMessage (result.Message' result.StatusCode)' result.StatusCode' result.Exception); " is 159.
Long Statement,Couchbase.Views,SpatialViewQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\SpatialViewQuery.cs,GetRelativeUri,The length of the statement  "	if (!string.IsNullOrWhiteSpace (BucketName) && string.IsNullOrWhiteSpace (_baseUri.PathAndQuery) || _baseUri.PathAndQuery.Equals ("/")) { " is 137.
Long Statement,Couchbase.Views,StreamingViewClient,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\StreamingViewClient.cs,ExecuteAsync,The length of the statement  "		viewResult = new StreamingViewResult<T> (response.IsSuccessStatusCode' response.StatusCode' Success' await response.Content.ReadAsStreamAsync ().ContinueOnAnyContext ()); " is 170.
Long Statement,Couchbase.Views,ViewQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\ViewQuery.cs,GetRelativeUri,The length of the statement  "	if (!string.IsNullOrWhiteSpace (BucketName) && string.IsNullOrWhiteSpace (_baseUri.PathAndQuery) || _baseUri.PathAndQuery.Equals ("/")) { " is 137.
Complex Conditional,Couchbase.Configuration,CouchbaseConfigContext,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\CouchbaseConfigContext.cs,LoadConfig,The conditional expression  "BucketConfig == null || !nodes.AreEqual (_bucketConfig.GetNodes ()) || !Servers.Any () || force"  is complex.
Complex Conditional,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryQueryEveryAsync,The conditional expression  "result.Success || query.TimedOut () || !result.ShouldRetry () || attempts >= maxAttempts"  is complex.
Complex Conditional,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,VisitMethodCall,The conditional expression  "(node.Method.DeclaringType == null) || (node.Object == null) || !node.Method.IsSpecialName || !node.Method.Name.StartsWith ("get_")"  is complex.
Complex Conditional,Couchbase.Search.Queries.Geo,GeoBoundingBoxQuery,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\Queries\Geo\GeoBoundingBoxQuery.cs,Export,The conditional expression  "!_topLeftLongitude.HasValue || !_topLeftLatitude.HasValue || !_bottomRightLongitude.HasValue || !_bottomRightLatitude.HasValue"  is complex.
Virtual Method Call from Constructor,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Connection,The constructor "Connection" calls a virtual method "SetBuffer".
Empty Catch Block,Couchbase,Document,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Document.cs,ToString,The method has an empty catch block.
Empty Catch Block,Couchbase,DocumentResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\DocumentResult'.cs,ToString,The method has an empty catch block.
Empty Catch Block,Couchbase,OperationResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\OperationResult'.cs,ToString,The method has an empty catch block.
Empty Catch Block,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,MarkDead,The method has an empty catch block.
Empty Catch Block,Couchbase.Core.Monitoring,ClusterMonitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Monitoring\ClusterMonitor.cs,StartMonitoring,The method has an empty catch block.
Empty Catch Block,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The method has an empty catch block.
Empty Catch Block,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The method has an empty catch block.
Magic Number,Couchbase.Authentication.SASL,ScramShaMechanism,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\SASL\ScramShaMechanism.cs,Authenticate,The following statement contains a magic number: ClientFirstMessageBare = ClientFirstMessage.Substring (3);  
Magic Number,Couchbase.Authentication.SASL,ScramShaMechanism,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Authentication\SASL\ScramShaMechanism.cs,DecodeResponse,The following statement contains a magic number: return message.Split (''').ToDictionary (att => att.Substring (0' 1)' att => att.Substring (2));  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hashCode = (_clusterController != null ? _clusterController.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,SetRemove,The following statement contains a magic number: do {  	var result = GetDocument<List<T>> (key);  	if (!result.Success) {  		return new DefaultResult {  			Success = result.Success'  			Exception = result.Exception'  			Message = result.Message  		};  	}  	var doc = result.Content;  	if (doc.Contains (value)) {  		doc.Remove (value);  	}  	var update = Upsert (new Document<List<T>> {  		Id = key'  		Content = doc'  		Cas = result.Document.Cas  	});  	//return on success or anything but a CAS mismatch  	if (update.Success || update.Status != ResponseStatus.KeyExists) {  		return new DefaultResult {  			Success = update.Success'  			Exception = update.Exception'  			Message = update.Message  		};  	}  	Thread.Sleep (100);  	//could be made a configurable in a later commit  } while (attempted++ < maxAttempts);  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,SetRemove,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,QueuePop,The following statement contains a magic number: while (attempts++ < 10) {  	var getResult = Get<List<T>> (key);  	if (!getResult.Success) {  		result = new DefaultResult<T> {  			Success = false'  			Message = getResult.Message'  			Exception = getResult.Exception  		};  		break;  	}  	if (!getResult.Value.Any ()) {  		result = new DefaultResult<T> {  			Success = false'  			Message = "No items in queue"  		};  		break;  	}  	var item = getResult.Value.First ();  	var mutateResult = MutateIn<List<T>> (key).Remove ("[-1]").WithCas (getResult.Cas).Execute ();  	if (!mutateResult.Success && mutateResult.Exception is CasMismatchException) {  		continue;  	}  	result = new DefaultResult<T> {  		Success = mutateResult.Success'  		Message = mutateResult.Message'  		Exception = mutateResult.Exception'  		Value = mutateResult.Success ? item : default(T)  	};  	break;  }  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,SetRemoveAsync,The following statement contains a magic number: do {  	var result = await GetDocumentAsync<List<T>> (key);  	if (!result.Success) {  		return new DefaultResult {  			Success = result.Success'  			Exception = result.Exception'  			Message = result.Message  		};  	}  	var doc = result.Content;  	if (doc.Contains (value)) {  		doc.Remove (value);  	}  	result = await UpsertAsync (new Document<List<T>> {  		Content = doc'  		Cas = result.Document.Cas'  		Id = key  	});  	if (result.Success || result.Status != ResponseStatus.KeyExists) {  		return new DefaultResult {  			Success = result.Success'  			Exception = result.Exception'  			Message = result.Message  		};  	}  	await Task.Delay (100);  	//could be made a configurable in a later commit  } while (attempted++ < maxAttempts);  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,SetRemoveAsync,The following statement contains a magic number: await Task.Delay (100);  
Magic Number,Couchbase,CouchbaseBucket,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\CouchbaseBucket.cs,QueuePopAsync,The following statement contains a magic number: while (attempts++ < 10) {  	var getResult = await GetAsync<List<T>> (key);  	if (!getResult.Success) {  		result = new DefaultResult<T> {  			Success = false'  			Message = getResult.Message'  			Exception = getResult.Exception  		};  		break;  	}  	if (!getResult.Value.Any ()) {  		result = new DefaultResult<T> {  			Success = false'  			Message = "No items in queue"  		};  		break;  	}  	var item = getResult.Value.First ();  	var mutateResult = await MutateIn<List<T>> (key).Remove ("[-1]").WithCas (getResult.Cas).ExecuteAsync ();  	if (!mutateResult.Success && mutateResult.Exception is CasMismatchException) {  		continue;  	}  	result = new DefaultResult<T> {  		Success = mutateResult.Success'  		Message = mutateResult.Message'  		Exception = mutateResult.Exception'  		Value = mutateResult.Success ? item : default(T)  	};  	break;  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (_serversChanged) {  	for (var i = 0; i < _servers.Count (); i++) {  		if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  			var builder = new UriBuilder (_servers [i]) {  				Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  				Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  			};  			_servers [i] = builder.Uri;  		}  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (_serversChanged) {  	for (var i = 0; i < _servers.Count (); i++) {  		if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  			var builder = new UriBuilder (_servers [i]) {  				Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  				Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  			};  			_servers [i] = builder.Uri;  		}  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (_serversChanged) {  	for (var i = 0; i < _servers.Count (); i++) {  		if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  			var builder = new UriBuilder (_servers [i]) {  				Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  				Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  			};  			_servers [i] = builder.Uri;  		}  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: for (var i = 0; i < _servers.Count (); i++) {  	if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  		var builder = new UriBuilder (_servers [i]) {  			Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  			Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  		};  		_servers [i] = builder.Uri;  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: for (var i = 0; i < _servers.Count (); i++) {  	if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  		var builder = new UriBuilder (_servers [i]) {  			Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  			Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  		};  		_servers [i] = builder.Uri;  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: for (var i = 0; i < _servers.Count (); i++) {  	if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  		var builder = new UriBuilder (_servers [i]) {  			Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  			Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  		};  		_servers [i] = builder.Uri;  	}  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  	var builder = new UriBuilder (_servers [i]) {  		Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  		Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  	};  	_servers [i] = builder.Uri;  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  	var builder = new UriBuilder (_servers [i]) {  		Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  		Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  	};  	_servers [i] = builder.Uri;  }  
Magic Number,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,Initialize,The following statement contains a magic number: if (!_servers [i].OriginalString.EndsWith ("/pools") || _servers [i].Port == 80) {  	var builder = new UriBuilder (_servers [i]) {  		Port = _servers [i].Port == 80 ? 8091 : _servers [i].Port'  		Path = _servers [i].OriginalString.EndsWith ("/") ? "pools" : "/pools"  	};  	_servers [i] = builder.Uri;  }  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: TcpKeepAliveTime = (uint)2 * 60 * 60 * 1000;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: TcpKeepAliveTime = (uint)2 * 60 * 60 * 1000;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: TcpKeepAliveTime = (uint)2 * 60 * 60 * 1000;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: TcpKeepAliveTime = (uint)2 * 60 * 60 * 1000;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: TcpKeepAliveInterval = (uint)1000;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,PoolConfiguration,The following statement contains a magic number: MaxCloseAttempts = 5;  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,Clone,The following statement contains a magic number: return new PoolConfiguration (MaxSize' MinSize' WaitTimeout' RecieveTimeout' ShutdownTimeout' OperationTimeout' MaxAcquireIterationCount' ConnectTimeout' ClientConfiguration)  #pragma   {  	Uri = uri'  	SendTimeout = SendTimeout'  	BufferAllocator = BufferAllocator'  	BufferSize = BufferSize'  	CloseAttemptInterval = CloseAttemptInterval'  	MaxCloseAttempts = MaxCloseAttempts'  	UseEnhancedDurability = UseEnhancedDurability'  	UseKvErrorMap = UseKvErrorMap'  	UseSsl = UseSsl'  	TcpKeepAliveTime = TcpKeepAliveTime'  	EnableTcpKeepAlives = EnableTcpKeepAlives'  	TcpKeepAliveInterval = TcpKeepAliveInterval  };  
Magic Number,Couchbase.Configuration.Client,PoolConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\PoolConfiguration.cs,Clone,The following statement contains a magic number: return new PoolConfiguration (MaxSize' MinSize' WaitTimeout' RecieveTimeout' ShutdownTimeout' OperationTimeout' MaxAcquireIterationCount' ConnectTimeout' ClientConfiguration)  #pragma   {  	Uri = uri'  	SendTimeout = SendTimeout'  	BufferAllocator = BufferAllocator'  	BufferSize = BufferSize'  	CloseAttemptInterval = CloseAttemptInterval'  	MaxCloseAttempts = MaxCloseAttempts'  	UseEnhancedDurability = UseEnhancedDurability'  	UseKvErrorMap = UseKvErrorMap'  	UseSsl = UseSsl'  	TcpKeepAliveTime = TcpKeepAliveTime'  	EnableTcpKeepAlives = EnableTcpKeepAlives'  	TcpKeepAliveInterval = TcpKeepAliveInterval  };  
Magic Number,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,GetAnalyticsUri,The following statement contains a magic number: return AnalyticsUris.Where (x => x.IsHealthy (2)).GetRandom ();  
Magic Number,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,GetServer,The following statement contains a magic number: try {  	Lock.EnterReadLock ();  	if (!Servers.Any ()) {  		throw new ServerUnavailableException ();  	}  	IServer server;  	do {  		server = Servers.Values.Where (x => !x.IsDown).GetRandom ();  		//cannot find a server - usually a temp state  		if (server == null) {  			try {  				Lock.ExitReadLock ();  				var sleepTime = (int)Math.Pow (2' attempts);  				Thread.Sleep (sleepTime);  			} finally {  				Lock.EnterReadLock ();  			}  		} else {  			break;  		}  	} while (attempts++ < maxAttempts);  	if (server == null) {  		throw new ServerUnavailableException ();  	}  	return server;  } finally {  	Lock.ExitReadLock ();  }  
Magic Number,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,GetServer,The following statement contains a magic number: do {  	server = Servers.Values.Where (x => !x.IsDown).GetRandom ();  	//cannot find a server - usually a temp state  	if (server == null) {  		try {  			Lock.ExitReadLock ();  			var sleepTime = (int)Math.Pow (2' attempts);  			Thread.Sleep (sleepTime);  		} finally {  			Lock.EnterReadLock ();  		}  	} else {  		break;  	}  } while (attempts++ < maxAttempts);  
Magic Number,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,GetServer,The following statement contains a magic number: if (server == null) {  	try {  		Lock.ExitReadLock ();  		var sleepTime = (int)Math.Pow (2' attempts);  		Thread.Sleep (sleepTime);  	} finally {  		Lock.EnterReadLock ();  	}  } else {  	break;  }  
Magic Number,Couchbase.Configuration,ConfigContextBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\ConfigContextBase.cs,GetServer,The following statement contains a magic number: try {  	Lock.ExitReadLock ();  	var sleepTime = (int)Math.Pow (2' attempts);  	Thread.Sleep (sleepTime);  } finally {  	Lock.EnterReadLock ();  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + VBucketServerMap.GetHashCode ();  	hash = hash * 23 + BucketType.GetHashCode ();  	hash = hash * 23 + Name.GetHashCode ();  	hash = hash * 23 + AuthType.GetHashCode ();  	hash = hash * 23 + NodeLocator.GetHashCode ();  	hash = hash * 23 + SaslPassword.GetHashCode ();  	hash = hash * 23 + Uuid.GetHashCode ();  	hash = hash * 23 + Nodes.GetCombinedHashcode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + VBucketServerMap.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + BucketType.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Name.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + AuthType.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + NodeLocator.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + SaslPassword.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Uuid.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,BucketConfig,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\BucketConfig.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Nodes.GetCombinedHashcode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,Node,The following statement contains a magic number: Ports = new Ports {  	Direct = 11210'  	Proxy = 11211'  	SslDirect = 11207'  	HttpsCapi = 18092'  	HttpsMgmt = 18091  };  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,Node,The following statement contains a magic number: Ports = new Ports {  	Direct = 11210'  	Proxy = 11211'  	SslDirect = 11207'  	HttpsCapi = 18092'  	HttpsMgmt = 18091  };  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,Node,The following statement contains a magic number: Ports = new Ports {  	Direct = 11210'  	Proxy = 11211'  	SslDirect = 11207'  	HttpsCapi = 18092'  	HttpsMgmt = 18091  };  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,Node,The following statement contains a magic number: Ports = new Ports {  	Direct = 11210'  	Proxy = 11211'  	SslDirect = 11207'  	HttpsCapi = 18092'  	HttpsMgmt = 18091  };  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,Node,The following statement contains a magic number: Ports = new Ports {  	Direct = 11210'  	Proxy = 11211'  	SslDirect = 11207'  	HttpsCapi = 18092'  	HttpsMgmt = 18091  };  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + Hostname.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + Hostname.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,Node,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\Node.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Hostname.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + ServerList.GetCombinedHashcode ();  	hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  	hash = hash * 23 + NumReplicas.GetHashCode ();  	hash = hash * 23 + HashAlgorithm.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + ServerList.GetCombinedHashcode ();  	hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  	hash = hash * 23 + NumReplicas.GetHashCode ();  	hash = hash * 23 + HashAlgorithm.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + ServerList.GetCombinedHashcode ();  	hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  	hash = hash * 23 + NumReplicas.GetHashCode ();  	hash = hash * 23 + HashAlgorithm.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + ServerList.GetCombinedHashcode ();  	hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  	hash = hash * 23 + NumReplicas.GetHashCode ();  	hash = hash * 23 + HashAlgorithm.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = 17;  	hash = hash * 23 + ServerList.GetCombinedHashcode ();  	hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  	hash = hash * 23 + NumReplicas.GetHashCode ();  	hash = hash * 23 + HashAlgorithm.GetHashCode ();  	return hash;  }  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + ServerList.GetCombinedHashcode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + VBucketMap.GetCombinedHashcode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + NumReplicas.GetHashCode ();  
Magic Number,Couchbase.Configuration.Server.Serialization,VBucketServerMap,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Serialization\VBucketServerMap.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + HashAlgorithm.GetHashCode ();  
Magic Number,Couchbase.Core.Buckets,KeySeqnoObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeySeqnoObserver.cs,GetServerAsync,The following statement contains a magic number: while ((master = p.VBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,KeySeqnoObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeySeqnoObserver.cs,GetServerAsync,The following statement contains a magic number: while ((master = p.VBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,KeySeqnoObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeySeqnoObserver.cs,GetServerAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,KeySeqnoObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeySeqnoObserver.cs,GetServerAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(VBucketUUID ^ (VBucketUUID >> 32));  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(VBucketUUID ^ (VBucketUUID >> 32));  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(SequenceNumber ^ (SequenceNumber >> 32));  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + (int)(SequenceNumber ^ (SequenceNumber >> 32));  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: if (BucketRef != null) {  	result = 31 * result + BucketRef.GetHashCode ();  }  
Magic Number,Couchbase.Core.Buckets,MutationToken,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MutationToken.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + BucketRef.GetHashCode ();  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	var actual = (IOperation<T>)op;  	try {  		//check if an error occurred earlier  		if (s.Exception != null) {  			actual.Exception = s.Exception;  			actual.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (actual.GetResultWithValue ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = actual.GetResultWithValue ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var mappedNode = keyMapper.MapKey (cloned.Key);  					IServer server;  					var attempts = 0;  					while ((server = mappedNode.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (actual.GetResultWithValue ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.SetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	var actual = (IOperation<T>)op;  	try {  		//check if an error occurred earlier  		if (s.Exception != null) {  			actual.Exception = s.Exception;  			actual.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (actual.GetResultWithValue ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = actual.GetResultWithValue ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var mappedNode = keyMapper.MapKey (cloned.Key);  					IServer server;  					var attempts = 0;  					while ((server = mappedNode.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (actual.GetResultWithValue ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.SetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: try {  	//check if an error occurred earlier  	if (s.Exception != null) {  		actual.Exception = s.Exception;  		actual.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = actual.GetResultWithValue ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var mappedNode = keyMapper.MapKey (cloned.Key);  				IServer server;  				var attempts = 0;  				while ((server = mappedNode.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (actual.GetResultWithValue ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: try {  	//check if an error occurred earlier  	if (s.Exception != null) {  		actual.Exception = s.Exception;  		actual.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = actual.GetResultWithValue ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var mappedNode = keyMapper.MapKey (cloned.Key);  				IServer server;  				var attempts = 0;  				while ((server = mappedNode.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (actual.GetResultWithValue ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var mappedNode = keyMapper.MapKey (cloned.Key);  			IServer server;  			var attempts = 0;  			while ((server = mappedNode.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var mappedNode = keyMapper.MapKey (cloned.Key);  			IServer server;  			var attempts = 0;  			while ((server = mappedNode.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var mappedNode = keyMapper.MapKey (cloned.Key);  		IServer server;  		var attempts = 0;  		while ((server = mappedNode.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var mappedNode = keyMapper.MapKey (cloned.Key);  		IServer server;  		var attempts = 0;  		while ((server = mappedNode.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: while ((server = mappedNode.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: while ((server = mappedNode.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	try {  		//check if an error occurred earlier  		if (s.Exception != null) {  			op.Exception = s.Exception;  			op.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (op.GetResult ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = op.GetResult ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var mappedNode = keyMapper.MapKey (cloned.Key);  					IServer server;  					var attempts = 0;  					while ((server = mappedNode.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (op.GetResult ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.SetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	try {  		//check if an error occurred earlier  		if (s.Exception != null) {  			op.Exception = s.Exception;  			op.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (op.GetResult ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = op.GetResult ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var mappedNode = keyMapper.MapKey (cloned.Key);  					IServer server;  					var attempts = 0;  					while ((server = mappedNode.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (op.GetResult ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.SetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: try {  	//check if an error occurred earlier  	if (s.Exception != null) {  		op.Exception = s.Exception;  		op.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (op.GetResult ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = op.GetResult ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var mappedNode = keyMapper.MapKey (cloned.Key);  				IServer server;  				var attempts = 0;  				while ((server = mappedNode.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (op.GetResult ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: try {  	//check if an error occurred earlier  	if (s.Exception != null) {  		op.Exception = s.Exception;  		op.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (op.GetResult ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = op.GetResult ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var mappedNode = keyMapper.MapKey (cloned.Key);  				IServer server;  				var attempts = 0;  				while ((server = mappedNode.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (op.GetResult ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var mappedNode = keyMapper.MapKey (cloned.Key);  			IServer server;  			var attempts = 0;  			while ((server = mappedNode.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var mappedNode = keyMapper.MapKey (cloned.Key);  			IServer server;  			var attempts = 0;  			while ((server = mappedNode.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var mappedNode = keyMapper.MapKey (cloned.Key);  		IServer server;  		var attempts = 0;  		while ((server = mappedNode.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var mappedNode = keyMapper.MapKey (cloned.Key);  		IServer server;  		var attempts = 0;  		while ((server = mappedNode.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: while ((server = mappedNode.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: while ((server = mappedNode.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForMemcached,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	var actual = (IOperation<T>)op;  	try {  		if (s.Status == ResponseStatus.TransportFailure) {  			controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  		}  		//check if an error occurred earlier  		if (s.Exception != null) {  			actual.Exception = s.Exception;  			actual.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (actual.GetResultWithValue ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = actual.GetResultWithValue ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  					cloned.LastConfigRevisionTried = vBucket.Rev;  					cloned.VBucket = vBucket;  					IServer server;  					var attempts = 0;  					while ((server = vBucket.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.TrySetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	var actual = (IOperation<T>)op;  	try {  		if (s.Status == ResponseStatus.TransportFailure) {  			controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  		}  		//check if an error occurred earlier  		if (s.Exception != null) {  			actual.Exception = s.Exception;  			actual.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (actual.GetResultWithValue ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = actual.GetResultWithValue ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  					cloned.LastConfigRevisionTried = vBucket.Rev;  					cloned.VBucket = vBucket;  					IServer server;  					var attempts = 0;  					while ((server = vBucket.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.TrySetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: try {  	if (s.Status == ResponseStatus.TransportFailure) {  		controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  	}  	//check if an error occurred earlier  	if (s.Exception != null) {  		actual.Exception = s.Exception;  		actual.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = actual.GetResultWithValue ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  				cloned.LastConfigRevisionTried = vBucket.Rev;  				cloned.VBucket = vBucket;  				IServer server;  				var attempts = 0;  				while ((server = vBucket.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' s.Status);  	tcs.SetResult (actual.GetResultWithValue ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: try {  	if (s.Status == ResponseStatus.TransportFailure) {  		controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  	}  	//check if an error occurred earlier  	if (s.Exception != null) {  		actual.Exception = s.Exception;  		actual.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (actual.GetResultWithValue ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = actual.GetResultWithValue ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  				cloned.LastConfigRevisionTried = vBucket.Rev;  				cloned.VBucket = vBucket;  				IServer server;  				var attempts = 0;  				while ((server = vBucket.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' s.Status);  	tcs.SetResult (actual.GetResultWithValue ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  			cloned.LastConfigRevisionTried = vBucket.Rev;  			cloned.VBucket = vBucket;  			IServer server;  			var attempts = 0;  			while ((server = vBucket.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  			cloned.LastConfigRevisionTried = vBucket.Rev;  			cloned.VBucket = vBucket;  			IServer server;  			var attempts = 0;  			while ((server = vBucket.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  		cloned.LastConfigRevisionTried = vBucket.Rev;  		cloned.VBucket = vBucket;  		IServer server;  		var attempts = 0;  		while ((server = vBucket.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult<T>> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  		cloned.LastConfigRevisionTried = vBucket.Rev;  		cloned.VBucket = vBucket;  		IServer server;  		var attempts = 0;  		while ((server = vBucket.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' actual' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	try {  		if (s.Status == ResponseStatus.TransportFailure) {  			controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  		}  		//check if an error occurred earlier  		if (s.Exception != null) {  			op.Exception = s.Exception;  			op.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (op.GetResult ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = op.GetResult ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  					cloned.LastConfigRevisionTried = vBucket.Rev;  					cloned.VBucket = vBucket;  					IServer server;  					var attempts = 0;  					while ((server = vBucket.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (op.GetResult ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.TrySetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (pending.TryRemove (s.Opaque' out op)) {  	try {  		if (s.Status == ResponseStatus.TransportFailure) {  			controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  		}  		//check if an error occurred earlier  		if (s.Exception != null) {  			op.Exception = s.Exception;  			op.HandleClientError (s.Exception.Message' s.Status);  			tcs.SetResult (op.GetResult ());  			return;  		}  		var response = s.Data.ToArray ();  		await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  		var result = op.GetResult ();  		if (result.Success) {  			tcs.SetResult (result);  		} else {  			if (result.IsNmv ()) {  				var config = op.GetConfig ();  				if (config != null) {  					controller.NotifyConfigPublished (config);  				}  			}  			if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  				Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  				var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  					var retryTcs = new TaskCompletionSource<IOperationResult> ();  					var cloned = o.Clone ();  					cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  					pending.TryAdd (cloned.Opaque' cloned);  					var keyMapper = c.GetKeyMapper ();  					var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  					cloned.LastConfigRevisionTried = vBucket.Rev;  					cloned.VBucket = vBucket;  					IServer server;  					var attempts = 0;  					while ((server = vBucket.LocatePrimary ()) == null) {  						if (attempts++ > 10) {  							throw new TimeoutException ("Could not acquire a server.");  						}  						Thread.Sleep ((int)Math.Pow (2' attempts));  					}  					server.SendAsync (o).ContinueOnAnyContext ();  					return retryTcs.Task;  				}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  				tcs.SetResult (retryResult);  			} else {  				((OperationResult)result).SetException ();  				tcs.SetResult (result);  			}  		}  	} catch (Exception e) {  		op.Exception = e;  		op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  		tcs.SetResult (op.GetResult ());  	} finally {  		s.Dispose ();  	}  } else {  	s.Dispose ();  	const string msg = "Cannot find callback object for operation: {0}";  	tcs.TrySetException (new InvalidOperationException (string.Format (msg' s.Opaque)));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: try {  	if (s.Status == ResponseStatus.TransportFailure) {  		controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  	}  	//check if an error occurred earlier  	if (s.Exception != null) {  		op.Exception = s.Exception;  		op.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (op.GetResult ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = op.GetResult ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  				cloned.LastConfigRevisionTried = vBucket.Rev;  				cloned.VBucket = vBucket;  				IServer server;  				var attempts = 0;  				while ((server = vBucket.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (op.GetResult ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: try {  	if (s.Status == ResponseStatus.TransportFailure) {  		controller.CheckConfigUpdate (op.BucketName' s.EndPoint);  	}  	//check if an error occurred earlier  	if (s.Exception != null) {  		op.Exception = s.Exception;  		op.HandleClientError (s.Exception.Message' s.Status);  		tcs.SetResult (op.GetResult ());  		return;  	}  	var response = s.Data.ToArray ();  	await op.ReadAsync (response' 0' response.Length).ContinueOnAnyContext ();  	var result = op.GetResult ();  	if (result.Success) {  		tcs.SetResult (result);  	} else {  		if (result.IsNmv ()) {  			var config = op.GetConfig ();  			if (config != null) {  				controller.NotifyConfigPublished (config);  			}  		}  		if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  			Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  			var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  				var retryTcs = new TaskCompletionSource<IOperationResult> ();  				var cloned = o.Clone ();  				cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  				pending.TryAdd (cloned.Opaque' cloned);  				var keyMapper = c.GetKeyMapper ();  				var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  				cloned.LastConfigRevisionTried = vBucket.Rev;  				cloned.VBucket = vBucket;  				IServer server;  				var attempts = 0;  				while ((server = vBucket.LocatePrimary ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					Thread.Sleep ((int)Math.Pow (2' attempts));  				}  				server.SendAsync (o).ContinueOnAnyContext ();  				return retryTcs.Task;  			}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  			tcs.SetResult (retryResult);  		} else {  			((OperationResult)result).SetException ();  			tcs.SetResult (result);  		}  	}  } catch (Exception e) {  	op.Exception = e;  	op.HandleClientError (e.Message' ResponseStatus.ClientFailure);  	tcs.SetResult (op.GetResult ());  } finally {  	s.Dispose ();  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  			cloned.LastConfigRevisionTried = vBucket.Rev;  			cloned.VBucket = vBucket;  			IServer server;  			var attempts = 0;  			while ((server = vBucket.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.Success) {  	tcs.SetResult (result);  } else {  	if (result.IsNmv ()) {  		var config = op.GetConfig ();  		if (config != null) {  			controller.NotifyConfigPublished (config);  		}  	}  	if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  		Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  		var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  			var retryTcs = new TaskCompletionSource<IOperationResult> ();  			var cloned = o.Clone ();  			cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  			pending.TryAdd (cloned.Opaque' cloned);  			var keyMapper = c.GetKeyMapper ();  			var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  			cloned.LastConfigRevisionTried = vBucket.Rev;  			cloned.VBucket = vBucket;  			IServer server;  			var attempts = 0;  			while ((server = vBucket.LocatePrimary ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				Thread.Sleep ((int)Math.Pow (2' attempts));  			}  			server.SendAsync (o).ContinueOnAnyContext ();  			return retryTcs.Task;  		}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  		tcs.SetResult (retryResult);  	} else {  		((OperationResult)result).SetException ();  		tcs.SetResult (result);  	}  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  		cloned.LastConfigRevisionTried = vBucket.Rev;  		cloned.VBucket = vBucket;  		IServer server;  		var attempts = 0;  		while ((server = vBucket.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (result.IsNmv () || (op.CanRetry () && result.ShouldRetry ())) {  	Log.Trace ("Retry {0} on {1}: {2}"' op.Opaque' op.CurrentHost' result.Status);  	var retryResult = await executer.RetryOperationEveryAsync ((o' c) => {  		var retryTcs = new TaskCompletionSource<IOperationResult> ();  		var cloned = o.Clone ();  		cloned.Completed = CompletedFuncForRetry (pending' controller' retryTcs);  		pending.TryAdd (cloned.Opaque' cloned);  		var keyMapper = c.GetKeyMapper ();  		var vBucket = (IVBucket)keyMapper.MapKey (cloned.Key' cloned.LastConfigRevisionTried);  		cloned.LastConfigRevisionTried = vBucket.Rev;  		cloned.VBucket = vBucket;  		IServer server;  		var attempts = 0;  		while ((server = vBucket.LocatePrimary ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		server.SendAsync (o).ContinueOnAnyContext ();  		return retryTcs.Task;  	}' op' executer.ConfigInfo' cancellationToken).ContinueOnAnyContext ();  	tcs.SetResult (retryResult);  } else {  	((OperationResult)result).SetException ();  	tcs.SetResult (result);  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CallbackFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CallbackFactory.cs,CompletedFuncWithRetryForCouchbase,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryViewEveryAsync,The following statement contains a magic number: while (true) {  	var result = await execute (query' configInfo).ContinueOnAnyContext ();  	if (query.RetryAttempts >= configInfo.ClientConfig.MaxViewRetries || result.Success || result.CannotRetry ()) {  		return result;  	}  	Log.Debug ("trying again: {0}"' ++query.RetryAttempts);  	var sleepTime = (int)Math.Pow (2' query.RetryAttempts);  	var task = Task.Delay (sleepTime' cancellationToken).ContinueOnAnyContext ();  	try {  		await task;  	} catch (TaskCanceledException) {  		return result;  	}  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryQueryEveryAsync,The following statement contains a magic number: while (true) {  	IResult result = await execute (query' configInfo).ContinueOnAnyContext ();  	if (result.Success || query.TimedOut () || !result.ShouldRetry () || attempts >= maxAttempts) {  		return (IQueryResult<T>)result;  	}  	Log.Debug ("trying query again: {0}"' attempts);  	var sleepTime = (int)Math.Pow (2' attempts++);  	var task = Task.Delay (sleepTime' cancellationToken).ContinueOnAnyContext ();  	try {  		await task;  	} catch (TaskCanceledException) {  		return (IQueryResult<T>)result;  	}  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: try {  	//Is the cluster configured for View services?  	if (!ConfigInfo.IsViewCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "View"));  	}  	while (true) {  		var server = ConfigInfo.GetViewNode ();  		viewResult = server.Send<T> (viewQuery);  		if (viewResult.Success || viewResult.CannotRetry () || viewQuery.RetryAttempts >= ConfigInfo.ClientConfig.MaxViewRetries) {  			break;  		}  		Log.Debug ("trying again: {0}"' ++viewQuery.RetryAttempts);  		var sleepTime = (int)Math.Pow (2' viewQuery.RetryAttempts);  		Thread.Sleep (sleepTime);  	}  } catch (Exception e) {  	Log.Info (e);  	const string message = "View request failed' check Error and Exception fields for details.";  	viewResult = new ViewResult<T> {  		Message = message'  		Error = e.Message'  		StatusCode = HttpStatusCode.BadRequest'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: while (true) {  	var server = ConfigInfo.GetViewNode ();  	viewResult = server.Send<T> (viewQuery);  	if (viewResult.Success || viewResult.CannotRetry () || viewQuery.RetryAttempts >= ConfigInfo.ClientConfig.MaxViewRetries) {  		break;  	}  	Log.Debug ("trying again: {0}"' ++viewQuery.RetryAttempts);  	var sleepTime = (int)Math.Pow (2' viewQuery.RetryAttempts);  	Thread.Sleep (sleepTime);  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Data services?  	if (!ConfigInfo.IsDataCapable) {  		tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data")));  	}  	var keyMapper = ConfigInfo.GetKeyMapper ();  	var vBucket = (IVBucket)keyMapper.MapKey (operation.Key' operation.LastConfigRevisionTried);  	operation.VBucket = vBucket;  	operation.LastConfigRevisionTried = vBucket.Rev;  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = vBucket.LocatePrimary ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult<T> {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Data services?  	if (!ConfigInfo.IsDataCapable) {  		tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data")));  	}  	var keyMapper = ConfigInfo.GetKeyMapper ();  	var vBucket = (IVBucket)keyMapper.MapKey (operation.Key' operation.LastConfigRevisionTried);  	operation.VBucket = vBucket;  	operation.LastConfigRevisionTried = vBucket.Rev;  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = vBucket.LocatePrimary ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult<T> {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Data services?  	if (!ConfigInfo.IsDataCapable) {  		tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data")));  	}  	var keyMapper = ConfigInfo.GetKeyMapper ();  	var vBucket = (IVBucket)keyMapper.MapKey (operation.Key' operation.LastConfigRevisionTried);  	operation.VBucket = vBucket;  	operation.LastConfigRevisionTried = vBucket.Rev;  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = vBucket.LocatePrimary ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	Log.Debug ("Starting send for {0} with {1}"' operation.Opaque' server.EndPoint);  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Data services?  	if (!ConfigInfo.IsDataCapable) {  		tcs.SetException (new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data")));  	}  	var keyMapper = ConfigInfo.GetKeyMapper ();  	var vBucket = (IVBucket)keyMapper.MapKey (operation.Key' operation.LastConfigRevisionTried);  	operation.VBucket = vBucket;  	operation.LastConfigRevisionTried = vBucket.Rev;  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForCouchbase (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = vBucket.LocatePrimary ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	Log.Debug ("Starting send for {0} with {1}"' operation.Opaque' server.EndPoint);  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = vBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: try {  	if (!ConfigInfo.IsSearchCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "FTS"));  	}  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetSearchNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		Thread.Sleep ((int)Math.Pow (2' attempts));  	}  	searchResult = server.Send (searchQuery);  } catch (Exception e) {  	Log.Info (e);  	searchResult = new SearchQueryResult {  		Status = SearchStatus.Failed'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: try {  	if (!ConfigInfo.IsSearchCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "FTS"));  	}  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetSearchNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		Thread.Sleep ((int)Math.Pow (2' attempts));  	}  	searchResult = server.Send (searchQuery);  } catch (Exception e) {  	Log.Info (e);  	searchResult = new SearchQueryResult {  		Status = SearchStatus.Failed'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: while ((server = ConfigInfo.GetSearchNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: while ((server = ConfigInfo.GetSearchNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	if (!ConfigInfo.IsSearchCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "FTS"));  	}  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetSearchNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	searchResult = await server.SendAsync (searchQuery).ContinueOnAnyContext ();  } catch (Exception e) {  	Log.Info (e);  	searchResult = new SearchQueryResult {  		Status = SearchStatus.Failed'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	if (!ConfigInfo.IsSearchCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "FTS"));  	}  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetSearchNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	searchResult = await server.SendAsync (searchQuery).ContinueOnAnyContext ();  } catch (Exception e) {  	Log.Info (e);  	searchResult = new SearchQueryResult {  		Status = SearchStatus.Failed'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = ConfigInfo.GetSearchNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = ConfigInfo.GetSearchNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: try {  	//Is the cluster configured for Query services?  	if (!ConfigInfo.IsQueryCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data"));  	}  	queryRequest.Lifespan = new Lifespan {  		CreationTime = DateTime.UtcNow'  		Duration = ConfigInfo.ClientConfig.QueryRequestTimeout  	};  	do {  		var attempts = 0;  		IServer server;  		while ((server = ConfigInfo.GetQueryNode ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		queryResult = server.Send<T> (queryRequest);  		//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  		var exception = queryResult.Exception;  		if (exception != null) {  			UpdateConfig ();  		}  	} while (!queryResult.Success && queryResult.ShouldRetry () && !queryRequest.TimedOut ());  } catch (Exception e) {  	Log.Info (e);  	const string message = "The query request failed' check Error and Exception fields for details.";  	queryResult = new QueryResult<T> {  		Message = message'  		Status = QueryStatus.Fatal'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: try {  	//Is the cluster configured for Query services?  	if (!ConfigInfo.IsQueryCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Data"));  	}  	queryRequest.Lifespan = new Lifespan {  		CreationTime = DateTime.UtcNow'  		Duration = ConfigInfo.ClientConfig.QueryRequestTimeout  	};  	do {  		var attempts = 0;  		IServer server;  		while ((server = ConfigInfo.GetQueryNode ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			Thread.Sleep ((int)Math.Pow (2' attempts));  		}  		queryResult = server.Send<T> (queryRequest);  		//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  		var exception = queryResult.Exception;  		if (exception != null) {  			UpdateConfig ();  		}  	} while (!queryResult.Success && queryResult.ShouldRetry () && !queryRequest.TimedOut ());  } catch (Exception e) {  	Log.Info (e);  	const string message = "The query request failed' check Error and Exception fields for details.";  	queryResult = new QueryResult<T> {  		Message = message'  		Status = QueryStatus.Fatal'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: do {  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetQueryNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		Thread.Sleep ((int)Math.Pow (2' attempts));  	}  	queryResult = server.Send<T> (queryRequest);  	//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  	var exception = queryResult.Exception;  	if (exception != null) {  		UpdateConfig ();  	}  } while (!queryResult.Success && queryResult.ShouldRetry () && !queryRequest.TimedOut ());  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: do {  	var attempts = 0;  	IServer server;  	while ((server = ConfigInfo.GetQueryNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		Thread.Sleep ((int)Math.Pow (2' attempts));  	}  	queryResult = server.Send<T> (queryRequest);  	//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  	var exception = queryResult.Exception;  	if (exception != null) {  		UpdateConfig ();  	}  } while (!queryResult.Success && queryResult.ShouldRetry () && !queryRequest.TimedOut ());  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: while ((server = ConfigInfo.GetQueryNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: while ((server = ConfigInfo.GetQueryNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetry,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Query services?  	if (!ConfigInfo.IsQueryCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Query"));  	}  	queryRequest.Lifespan = new Lifespan {  		CreationTime = DateTime.UtcNow'  		Duration = ConfigInfo.ClientConfig.QueryRequestTimeout  	};  	using (var timeoutCancellationTokenSource = new CancellationTokenSource (ConfigInfo.ClientConfig.ViewRequestTimeout)) {  		// If we received a functional cancellationToken (not just CancellationToken.None)'  		// then combine with the timeout token source  		var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource;  		using (cancellationTokenSource) {  			// Note: it is safe to dispose the same CTS twice' so this using statement is safe  			queryResult = await RetryQueryEveryAsync (async (e' c) => {  				var attempts = 0;  				IServer server;  				while ((server = c.GetQueryNode ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  				}  				// Don't forward our new cancellation token to the query layer'  				// it has its own timeout implementation.  Just forward the cancellation token  				// which was passed as a parameter.  				var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  				if (!result.Success) {  					//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  					var exception = result.Exception;  					if (exception != null && !(exception is TaskCanceledException)) {  						lock (_syncObj) {  							Log.Trace ("Request failed checking config:"' exception);  							UpdateConfig ();  						}  					}  				}  				return result;  			}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  		}  	}  } catch (Exception e) {  	Log.Info (e);  	const string message = "The Query request failed' check Error and Exception fields for details.";  	queryResult = new QueryResult<T> {  		Message = message'  		Status = QueryStatus.Fatal'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	//Is the cluster configured for Query services?  	if (!ConfigInfo.IsQueryCapable) {  		throw new ServiceNotSupportedException (ExceptionUtil.GetMessage (ExceptionUtil.ServiceNotSupportedMsg' "Query"));  	}  	queryRequest.Lifespan = new Lifespan {  		CreationTime = DateTime.UtcNow'  		Duration = ConfigInfo.ClientConfig.QueryRequestTimeout  	};  	using (var timeoutCancellationTokenSource = new CancellationTokenSource (ConfigInfo.ClientConfig.ViewRequestTimeout)) {  		// If we received a functional cancellationToken (not just CancellationToken.None)'  		// then combine with the timeout token source  		var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource;  		using (cancellationTokenSource) {  			// Note: it is safe to dispose the same CTS twice' so this using statement is safe  			queryResult = await RetryQueryEveryAsync (async (e' c) => {  				var attempts = 0;  				IServer server;  				while ((server = c.GetQueryNode ()) == null) {  					if (attempts++ > 10) {  						throw new TimeoutException ("Could not acquire a server.");  					}  					await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  				}  				// Don't forward our new cancellation token to the query layer'  				// it has its own timeout implementation.  Just forward the cancellation token  				// which was passed as a parameter.  				var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  				if (!result.Success) {  					//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  					var exception = result.Exception;  					if (exception != null && !(exception is TaskCanceledException)) {  						lock (_syncObj) {  							Log.Trace ("Request failed checking config:"' exception);  							UpdateConfig ();  						}  					}  				}  				return result;  			}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  		}  	}  } catch (Exception e) {  	Log.Info (e);  	const string message = "The Query request failed' check Error and Exception fields for details.";  	queryResult = new QueryResult<T> {  		Message = message'  		Status = QueryStatus.Fatal'  		Success = false'  		Exception = e  	};  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: using (var timeoutCancellationTokenSource = new CancellationTokenSource (ConfigInfo.ClientConfig.ViewRequestTimeout)) {  	// If we received a functional cancellationToken (not just CancellationToken.None)'  	// then combine with the timeout token source  	var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource;  	using (cancellationTokenSource) {  		// Note: it is safe to dispose the same CTS twice' so this using statement is safe  		queryResult = await RetryQueryEveryAsync (async (e' c) => {  			var attempts = 0;  			IServer server;  			while ((server = c.GetQueryNode ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  			}  			// Don't forward our new cancellation token to the query layer'  			// it has its own timeout implementation.  Just forward the cancellation token  			// which was passed as a parameter.  			var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  			if (!result.Success) {  				//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  				var exception = result.Exception;  				if (exception != null && !(exception is TaskCanceledException)) {  					lock (_syncObj) {  						Log.Trace ("Request failed checking config:"' exception);  						UpdateConfig ();  					}  				}  			}  			return result;  		}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  	}  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: using (var timeoutCancellationTokenSource = new CancellationTokenSource (ConfigInfo.ClientConfig.ViewRequestTimeout)) {  	// If we received a functional cancellationToken (not just CancellationToken.None)'  	// then combine with the timeout token source  	var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource;  	using (cancellationTokenSource) {  		// Note: it is safe to dispose the same CTS twice' so this using statement is safe  		queryResult = await RetryQueryEveryAsync (async (e' c) => {  			var attempts = 0;  			IServer server;  			while ((server = c.GetQueryNode ()) == null) {  				if (attempts++ > 10) {  					throw new TimeoutException ("Could not acquire a server.");  				}  				await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  			}  			// Don't forward our new cancellation token to the query layer'  			// it has its own timeout implementation.  Just forward the cancellation token  			// which was passed as a parameter.  			var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  			if (!result.Success) {  				//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  				var exception = result.Exception;  				if (exception != null && !(exception is TaskCanceledException)) {  					lock (_syncObj) {  						Log.Trace ("Request failed checking config:"' exception);  						UpdateConfig ();  					}  				}  			}  			return result;  		}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  	}  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: using (cancellationTokenSource) {  	// Note: it is safe to dispose the same CTS twice' so this using statement is safe  	queryResult = await RetryQueryEveryAsync (async (e' c) => {  		var attempts = 0;  		IServer server;  		while ((server = c.GetQueryNode ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  		}  		// Don't forward our new cancellation token to the query layer'  		// it has its own timeout implementation.  Just forward the cancellation token  		// which was passed as a parameter.  		var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  		if (!result.Success) {  			//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  			var exception = result.Exception;  			if (exception != null && !(exception is TaskCanceledException)) {  				lock (_syncObj) {  					Log.Trace ("Request failed checking config:"' exception);  					UpdateConfig ();  				}  			}  		}  		return result;  	}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: using (cancellationTokenSource) {  	// Note: it is safe to dispose the same CTS twice' so this using statement is safe  	queryResult = await RetryQueryEveryAsync (async (e' c) => {  		var attempts = 0;  		IServer server;  		while ((server = c.GetQueryNode ()) == null) {  			if (attempts++ > 10) {  				throw new TimeoutException ("Could not acquire a server.");  			}  			await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  		}  		// Don't forward our new cancellation token to the query layer'  		// it has its own timeout implementation.  Just forward the cancellation token  		// which was passed as a parameter.  		var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  		if (!result.Success) {  			//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  			var exception = result.Exception;  			if (exception != null && !(exception is TaskCanceledException)) {  				lock (_syncObj) {  					Log.Trace ("Request failed checking config:"' exception);  					UpdateConfig ();  				}  			}  		}  		return result;  	}' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: queryResult = await RetryQueryEveryAsync (async (e' c) => {  	var attempts = 0;  	IServer server;  	while ((server = c.GetQueryNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  	}  	// Don't forward our new cancellation token to the query layer'  	// it has its own timeout implementation.  Just forward the cancellation token  	// which was passed as a parameter.  	var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  	if (!result.Success) {  		//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  		var exception = result.Exception;  		if (exception != null && !(exception is TaskCanceledException)) {  			lock (_syncObj) {  				Log.Trace ("Request failed checking config:"' exception);  				UpdateConfig ();  			}  		}  	}  	return result;  }' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: queryResult = await RetryQueryEveryAsync (async (e' c) => {  	var attempts = 0;  	IServer server;  	while ((server = c.GetQueryNode ()) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  	}  	// Don't forward our new cancellation token to the query layer'  	// it has its own timeout implementation.  Just forward the cancellation token  	// which was passed as a parameter.  	var result = await server.SendAsync<T> (queryRequest' cancellationToken).ContinueOnAnyContext ();  	if (!result.Success) {  		//if this is too loose' we may need to constrain it to HttpRequestException or another exception later on  		var exception = result.Exception;  		if (exception != null && !(exception is TaskCanceledException)) {  			lock (_syncObj) {  				Log.Trace ("Request failed checking config:"' exception);  				UpdateConfig ();  			}  		}  	}  	return result;  }' queryRequest' ConfigInfo' cancellationTokenSource.Token).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = c.GetQueryNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = c.GetQueryNode ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)' cancellationTokenSource.Token).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,GetServerWithRetry,The following statement contains a magic number: do {  	var server = getServer ();  	if (server != null) {  		return server;  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  } while (attempts++ <= maxAttempts);  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,GetServerWithRetry,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,GetServerWithRetryAsync,The following statement contains a magic number: do {  	var server = getServer ();  	if (server != null) {  		return server;  	}  	try {  		await Task.Delay ((int)Math.Pow (2' attempts)' cancellationToken).ContinueOnAnyContext ();  	} catch (TaskCanceledException) {  		break;  	}  } while (attempts++ <= maxAttempts);  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,GetServerWithRetryAsync,The following statement contains a magic number: try {  	await Task.Delay ((int)Math.Pow (2' attempts)' cancellationToken).ContinueOnAnyContext ();  } catch (TaskCanceledException) {  	break;  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,GetServerWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)' cancellationToken).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequest,The following statement contains a magic number: do {  	var server = GetServerWithRetry (getServer);  	result = sendRequest (server' request);  	if (!canRetry (request' result)) {  		break;  	}  	Thread.Sleep ((int)Math.Pow (2' attempts));  } while (attempts++ <= maxAttempts);  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequest,The following statement contains a magic number: Thread.Sleep ((int)Math.Pow (2' attempts));  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The following statement contains a magic number: using (var timeoutCancellationTokenSource = new CancellationTokenSource (getServerTimeout)) {  	// If we received a functional cancellationToken (not just CancellationToken.None)'  	// then combine with the timeout token source  	var cancellationTokenSource = cancellationToken.CanBeCanceled ? CancellationTokenSource.CreateLinkedTokenSource (cancellationToken' timeoutCancellationTokenSource.Token) : timeoutCancellationTokenSource;  	using (cancellationTokenSource) {  		do {  			var server = await GetServerWithRetryAsync (getServer' cancellationTokenSource.Token).ContinueOnAnyContext ();  			// Don't forward our new cancellation token to the next layer'  			// it has its own timeout implementation.  Just forward the cancellation token  			// which was passed as a parameter.  			result = await sendRequest (server' request' cancellationToken).ContinueOnAnyContext ();  			if (!canRetry (request' result)) {  				break;  			}  			try {  				await Task.Delay ((int)Math.Pow (2' attempts++)' cancellationToken).ContinueOnAnyContext ();  			} catch (TaskCanceledException) {  				break;  			}  		} while (attempts++ <= maxAttempts);  	}  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The following statement contains a magic number: using (cancellationTokenSource) {  	do {  		var server = await GetServerWithRetryAsync (getServer' cancellationTokenSource.Token).ContinueOnAnyContext ();  		// Don't forward our new cancellation token to the next layer'  		// it has its own timeout implementation.  Just forward the cancellation token  		// which was passed as a parameter.  		result = await sendRequest (server' request' cancellationToken).ContinueOnAnyContext ();  		if (!canRetry (request' result)) {  			break;  		}  		try {  			await Task.Delay ((int)Math.Pow (2' attempts++)' cancellationToken).ContinueOnAnyContext ();  		} catch (TaskCanceledException) {  			break;  		}  	} while (attempts++ <= maxAttempts);  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The following statement contains a magic number: do {  	var server = await GetServerWithRetryAsync (getServer' cancellationTokenSource.Token).ContinueOnAnyContext ();  	// Don't forward our new cancellation token to the next layer'  	// it has its own timeout implementation.  Just forward the cancellation token  	// which was passed as a parameter.  	result = await sendRequest (server' request' cancellationToken).ContinueOnAnyContext ();  	if (!canRetry (request' result)) {  		break;  	}  	try {  		await Task.Delay ((int)Math.Pow (2' attempts++)' cancellationToken).ContinueOnAnyContext ();  	} catch (TaskCanceledException) {  		break;  	}  } while (attempts++ <= maxAttempts);  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The following statement contains a magic number: try {  	await Task.Delay ((int)Math.Pow (2' attempts++)' cancellationToken).ContinueOnAnyContext ();  } catch (TaskCanceledException) {  	break;  }  
Magic Number,Couchbase.Core.Buckets,CouchbaseRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\CouchbaseRequestExecuter.cs,RetryRequestAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts++)' cancellationToken).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,GetServerAsync,The following statement contains a magic number: while ((master = p.VBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,GetServerAsync,The following statement contains a magic number: while ((master = p.VBucket.LocatePrimary ()) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,GetServerAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,KeyObserver,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KeyObserver.cs,GetServerAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = GetServer (operation.Key)) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult<T> {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = GetServer (operation.Key)) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult<T> {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = GetServer (operation.Key)) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = GetServer (operation.Key)) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = GetServer (operation.Key)) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: try {  	operation.Completed = CallbackFactory.CompletedFuncWithRetryForMemcached (this' Pending' ClusterController' tcs' cts.Token);  	Pending.TryAdd (operation.Opaque' operation);  	IServer server;  	var attempts = 0;  	while ((server = GetServer (operation.Key)) == null) {  		if (attempts++ > 10) {  			throw new TimeoutException ("Could not acquire a server.");  		}  		await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  	}  	await server.SendAsync (operation).ContinueOnAnyContext ();  } catch (Exception e) {  	tcs.TrySetResult (new OperationResult {  		Id = operation.Key'  		Exception = e'  		Status = ResponseStatus.ClientFailure  	});  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = GetServer (operation.Key)) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: while ((server = GetServer (operation.Key)) == null) {  	if (attempts++ > 10) {  		throw new TimeoutException ("Could not acquire a server.");  	}  	await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: if (attempts++ > 10) {  	throw new TimeoutException ("Could not acquire a server.");  }  
Magic Number,Couchbase.Core.Buckets,MemcachedRequestExecuter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\MemcachedRequestExecuter.cs,SendWithRetryAsync,The following statement contains a magic number: await Task.Delay ((int)Math.Pow (2' attempts)).ContinueOnAnyContext ();  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF;  	return result;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF;  	return result;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF;  	return result;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF;  	return result;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,GetHash,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	var result = ((long)(hash [3] & 0xFF) << 24) | ((long)(hash [2] & 0xFF) << 16) | ((long)(hash [1] & 0xFF) << 8) | (uint)hash [0] & 0xFF;  	return result;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: foreach (var server in _servers.Values.Where (x => x.IsDataNode)) {  	const int weight = 1;  	//may change this later  	var factor = Math.Floor (40 * _servers.Count () * weight / (double)_totalWeight);  	for (long n = 0; n < factor; n++) {  		var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  		using (var md5 = MD5.Create ()) {  			var hash = md5.ComputeHash (bytes);  			for (var j = 0; j < 4; j++) {  				var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  				Hashes [key] = server;  			}  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (long n = 0; n < factor; n++) {  	var bytes = Encoding.UTF8.GetBytes (server.EndPoint + "-" + n);  	using (var md5 = MD5.Create ()) {  		var hash = md5.ComputeHash (bytes);  		for (var j = 0; j < 4; j++) {  			var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  			Hashes [key] = server;  		}  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var hash = md5.ComputeHash (bytes);  	for (var j = 0; j < 4; j++) {  		var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  		Hashes [key] = server;  	}  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core.Buckets,KetamaKeyMapper,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Buckets\KetamaKeyMapper.cs,Initialize,The following statement contains a magic number: for (var j = 0; j < 4; j++) {  	var key = ((long)(hash [3 + j * 4] & 0xFF) << 24) | ((long)(hash [2 + j * 4] & 0xFF) << 16) | ((long)(hash [1 + j * 4] & 0xFF) << 8) | (uint)(hash [0 + j * 4] & 0xFF);  	Hashes [key] = server;  }  
Magic Number,Couchbase.Core,NodeAdapter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\NodeAdapter.cs,NodeAdapter,The following statement contains a magic number: if (nodeExt == null) {  	MgmtApiSsl = node.Ports.HttpsMgmt;  	Moxi = node.Ports.Proxy;  	KeyValue = node.Ports.Direct;  	KeyValueSsl = node.Ports.SslDirect;  	ViewsSsl = node.Ports.HttpsCapi;  	Views = new Uri (CouchbaseApiBase).Port;  } else {  	MgmtApi = _nodeExt.Services.Mgmt;  	MgmtApiSsl = _nodeExt.Services.MgmtSSL;  	Views = _nodeExt.Services.Capi;  	ViewsSsl = _nodeExt.Services.CapiSSL;  	Moxi = _nodeExt.Services.Moxi;  	KeyValue = _nodeExt.Services.KV;  	KeyValueSsl = _nodeExt.Services.KvSSL;  	Projector = _nodeExt.Services.Projector;  	IndexAdmin = _nodeExt.Services.IndexAdmin;  	IndexScan = _nodeExt.Services.IndexScan;  	IndexHttp = _nodeExt.Services.IndexHttp;  	IndexStreamInit = _nodeExt.Services.IndexStreamInit;  	IndexStreamCatchup = _nodeExt.Services.IndexStreamCatchup;  	IndexStreamMaint = _nodeExt.Services.IndexStreamMaint;  	N1QL = _nodeExt.Services.N1QL;  	N1QLSsl = _nodeExt.Services.N1QLSsl;  	Fts = _nodeExt.Services.Fts;  	// Hardcoded for now' may be retrieved from server in future  	Analytics = 8095;  	AnalyticsSsl = 18095;  }  
Magic Number,Couchbase.Core,NodeAdapter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\NodeAdapter.cs,NodeAdapter,The following statement contains a magic number: if (nodeExt == null) {  	MgmtApiSsl = node.Ports.HttpsMgmt;  	Moxi = node.Ports.Proxy;  	KeyValue = node.Ports.Direct;  	KeyValueSsl = node.Ports.SslDirect;  	ViewsSsl = node.Ports.HttpsCapi;  	Views = new Uri (CouchbaseApiBase).Port;  } else {  	MgmtApi = _nodeExt.Services.Mgmt;  	MgmtApiSsl = _nodeExt.Services.MgmtSSL;  	Views = _nodeExt.Services.Capi;  	ViewsSsl = _nodeExt.Services.CapiSSL;  	Moxi = _nodeExt.Services.Moxi;  	KeyValue = _nodeExt.Services.KV;  	KeyValueSsl = _nodeExt.Services.KvSSL;  	Projector = _nodeExt.Services.Projector;  	IndexAdmin = _nodeExt.Services.IndexAdmin;  	IndexScan = _nodeExt.Services.IndexScan;  	IndexHttp = _nodeExt.Services.IndexHttp;  	IndexStreamInit = _nodeExt.Services.IndexStreamInit;  	IndexStreamCatchup = _nodeExt.Services.IndexStreamCatchup;  	IndexStreamMaint = _nodeExt.Services.IndexStreamMaint;  	N1QL = _nodeExt.Services.N1QL;  	N1QLSsl = _nodeExt.Services.N1QLSsl;  	Fts = _nodeExt.Services.Fts;  	// Hardcoded for now' may be retrieved from server in future  	Analytics = 8095;  	AnalyticsSsl = 18095;  }  
Magic Number,Couchbase.Core,NodeAdapter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\NodeAdapter.cs,NodeAdapter,The following statement contains a magic number: Analytics = 8095;  
Magic Number,Couchbase.Core,NodeAdapter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\NodeAdapter.cs,NodeAdapter,The following statement contains a magic number: AnalyticsSsl = 18095;  
Magic Number,Couchbase.Core,Server,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Server.cs,CheckDataNode,The following statement contains a magic number: try {  	//if we have a sasl mechanism' we just try a noop  	connection = _ioService.ConnectionPool.Acquire ();  	var noop = new Noop (new DefaultTranscoder ()' 1000);  	var result = _ioService.Execute (noop);  	if (result.Success) {  		Log.Info ("Successfully connected and marking data node {0} as up."' EndPoint);  		_isDown = false;  	} else {  		Log.Info ("The data node {0} is still down: {1}"' EndPoint' result.Status);  	}  } // ReSharper disable once CatchAllClause  catch (Exception e) {  	// ReSharper disable once HeapView.ObjectAllocation  	Log.Info ("The data node {0} is still down: {1}"' EndPoint' e.Message);  	//the node is down or unreachable  	_isDown = true;  	Log.Debug (e);  } finally {  	//will be null if the node is dead  	if (connection != null) {  		if (_isDown) {  			if (connection.Socket.Connected) {  				connection.IsDead = false;  			}  			StartHeartbeatTimer ();  		}  		_ioService.ConnectionPool.Release (connection);  	} else {  		StartHeartbeatTimer ();  	}  }  
Magic Number,Couchbase.Core.ExpressionVisitors,LambdaSimplifyingExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\LambdaSimplifyingExpressionVisitor.cs,VisitConditional,The following statement contains a magic number: return node.Update (children [0]' children [1]' children [2]);  
Magic Number,Couchbase.Core.ExpressionVisitors,SubDocumentPathExpressionVisitor,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\ExpressionVisitors\SubDocumentPathExpressionVisitor.cs,WriteEscapedString,The following statement contains a magic number: _path.EnsureCapacity (_path.Length + str.Length + 3);  
Magic Number,Couchbase.Core.IO.SubDocument,OperationSpec,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IO\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (spec.Path == null ? 0 : spec.Path.GetHashCode ());  
Magic Number,Couchbase.Core.IO.SubDocument,OperationSpec,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IO\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + spec.OpCode.GetHashCode ();  
Magic Number,Couchbase.Core.IO.SubDocument,OperationSpec,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\IO\SubDocument\OperationSpec.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Flags.GetHashCode ();  
Magic Number,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,GetDeserializationSettings,The following statement contains a magic number: if (baseSettings.ReferenceResolver != null)  #pragma   {  	// Backwards compatibility issue in Newtonsoft.Json 7.0.1 causes setting a null reference resolver to error instead of using default  	#pragma  	settings.ReferenceResolver = baseSettings.ReferenceResolver;  	#pragma  }  
Magic Number,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,GetDeserializationSettings,The following statement contains a magic number: if (baseSettings.ReferenceResolver != null)  #pragma   {  	// Backwards compatibility issue in Newtonsoft.Json 7.0.1 causes setting a null reference resolver to error instead of using default  	#pragma  	settings.ReferenceResolver = baseSettings.ReferenceResolver;  	#pragma  }  
Magic Number,Couchbase.Core.Serialization,DefaultSerializer,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Core\Serialization\DefaultSerializer.cs,GetDeserializationSettings,The following statement contains a magic number: if (baseSettings.ReferenceResolver != null)  #pragma   {  	// Backwards compatibility issue in Newtonsoft.Json 7.0.1 causes setting a null reference resolver to error instead of using default  	#pragma  	settings.ReferenceResolver = baseSettings.ReferenceResolver;  	#pragma  }  
Magic Number,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,RegisterObserver,The following statement contains a magic number: RegisterEvent.WaitOne (10000);  
Magic Number,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,RegisterObserver,The following statement contains a magic number: try {  	var bucketConfig = _serverConfig.Buckets.Find (x => x.Name == observer.Name);  	if (bucketConfig == null) {  		throw new BucketNotFoundException (observer.Name);  	}  	var cancellationTokenSource = new CancellationTokenSource ();  	_cancellationTokens [observer.Name] = cancellationTokenSource;  	var configThreadState = new ConfigThreadState (bucketConfig' ConfigChangedHandler' ErrorOccurredHandler' cancellationTokenSource.Token);  	var thread = new Thread (configThreadState.ListenForConfigChanges) {  		IsBackground = true'  		Name = "stmconfig"  	};  	if (_threads.TryAdd (observer.Name' thread) && ConfigObservers.TryAdd (observer.Name' observer)) {  		_threads [observer.Name].Start ();  		if (CountdownEvent.CurrentCount == 0) {  			CountdownEvent.Reset (1);  		}  		//TODO add timeout?  		CountdownEvent.Wait (10000' cancellationTokenSource.Token);  		//TODO make configurable  		hasRegistered = true;  	}  } finally {  	RegisterEvent.Set ();  }  
Magic Number,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,RegisterObserver,The following statement contains a magic number: if (_threads.TryAdd (observer.Name' thread) && ConfigObservers.TryAdd (observer.Name' observer)) {  	_threads [observer.Name].Start ();  	if (CountdownEvent.CurrentCount == 0) {  		CountdownEvent.Reset (1);  	}  	//TODO add timeout?  	CountdownEvent.Wait (10000' cancellationTokenSource.Token);  	//TODO make configurable  	hasRegistered = true;  }  
Magic Number,Couchbase.Configuration.Server.Providers.Streaming,HttpStreamingProvider,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Server\Providers\Streaming\HttpStreamingProvider.cs,RegisterObserver,The following statement contains a magic number: CountdownEvent.Wait (10000' cancellationTokenSource.Token);  
Magic Number,Couchbase.IO,AsyncState,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\AsyncState.cs,Complete,The following statement contains a magic number: if (response == null) {  	response = new byte[24];  	Converter.FromUInt32 (Id' response' HeaderIndexFor.Opaque);  	e = new SendTimeoutExpiredException ();  	status = ResponseStatus.TransportFailure;  }  
Magic Number,Couchbase.IO,AsyncState,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\AsyncState.cs,Complete,The following statement contains a magic number: response = new byte[24];  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: while (true) {  	var state = (SocketAsyncState)e.UserToken;  	Log.Debug ("Receive {0} bytes for opaque{1} with {2} on server {3} offset{4}"' e.BytesTransferred' state.Opaque' Identity' EndPoint' state.SendOffset);  	if (e.SocketError == SocketError.Success) {  		//socket was closed on recieving side  		if (e.BytesTransferred == 0) {  			Log.Debug ("Connection {0} has failed in receive with {1} bytes."' Identity' e.BytesTransferred);  			IsDead = true;  			if (state.Completed == null) {  				if (!Disposed) {  					_requestCompleted.Set ();  				}  			} else {  				ConnectionPool.Release (this);  				state.Exception = new SocketException (10054);  				state.Completed (state);  			}  			break;  		}  		state.BytesReceived += e.BytesTransferred;  		state.Data.Write (e.Buffer' state.SendOffset' e.BytesTransferred);  		//if first loop get the length of the body from the header  		if (state.BodyLength == 0) {  			state.BodyLength = Converter.ToInt32 (state.Data.ToArray ()' HeaderIndexFor.Body);  		}  		if (state.BytesReceived < state.BodyLength + 24) {  			var bufferSize = state.BodyLength < Configuration.BufferSize ? state.BodyLength : Configuration.BufferSize;  			e.SetBuffer (state.SendOffset' bufferSize);  			var willRaiseCompletedEvent = socket.ReceiveAsync (e);  			if (!willRaiseCompletedEvent) {  				continue;  			}  		} else {  			//if the callback is null we are in blocking mode  			if (state.Completed == null) {  				Log.Debug ("Complete with set {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  				_requestCompleted.Set ();  			} else {  				Log.Debug ("Complete {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  				ConnectionPool.Release (this);  				state.Completed (state);  			}  		}  	} else {  		IsDead = true;  		state.Exception = new SocketException ((int)e.SocketError);  		Log.Debug ("Error: {0} - {1}"' Identity' state.Exception);  		//if the callback is null we are in blocking mode  		if (state.Completed == null) {  			if (!Disposed) {  				_requestCompleted.Set ();  			}  		} else {  			ConnectionPool.Release (this);  			state.Completed (state);  		}  	}  	break;  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: while (true) {  	var state = (SocketAsyncState)e.UserToken;  	Log.Debug ("Receive {0} bytes for opaque{1} with {2} on server {3} offset{4}"' e.BytesTransferred' state.Opaque' Identity' EndPoint' state.SendOffset);  	if (e.SocketError == SocketError.Success) {  		//socket was closed on recieving side  		if (e.BytesTransferred == 0) {  			Log.Debug ("Connection {0} has failed in receive with {1} bytes."' Identity' e.BytesTransferred);  			IsDead = true;  			if (state.Completed == null) {  				if (!Disposed) {  					_requestCompleted.Set ();  				}  			} else {  				ConnectionPool.Release (this);  				state.Exception = new SocketException (10054);  				state.Completed (state);  			}  			break;  		}  		state.BytesReceived += e.BytesTransferred;  		state.Data.Write (e.Buffer' state.SendOffset' e.BytesTransferred);  		//if first loop get the length of the body from the header  		if (state.BodyLength == 0) {  			state.BodyLength = Converter.ToInt32 (state.Data.ToArray ()' HeaderIndexFor.Body);  		}  		if (state.BytesReceived < state.BodyLength + 24) {  			var bufferSize = state.BodyLength < Configuration.BufferSize ? state.BodyLength : Configuration.BufferSize;  			e.SetBuffer (state.SendOffset' bufferSize);  			var willRaiseCompletedEvent = socket.ReceiveAsync (e);  			if (!willRaiseCompletedEvent) {  				continue;  			}  		} else {  			//if the callback is null we are in blocking mode  			if (state.Completed == null) {  				Log.Debug ("Complete with set {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  				_requestCompleted.Set ();  			} else {  				Log.Debug ("Complete {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  				ConnectionPool.Release (this);  				state.Completed (state);  			}  		}  	} else {  		IsDead = true;  		state.Exception = new SocketException ((int)e.SocketError);  		Log.Debug ("Error: {0} - {1}"' Identity' state.Exception);  		//if the callback is null we are in blocking mode  		if (state.Completed == null) {  			if (!Disposed) {  				_requestCompleted.Set ();  			}  		} else {  			ConnectionPool.Release (this);  			state.Completed (state);  		}  	}  	break;  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: if (e.SocketError == SocketError.Success) {  	//socket was closed on recieving side  	if (e.BytesTransferred == 0) {  		Log.Debug ("Connection {0} has failed in receive with {1} bytes."' Identity' e.BytesTransferred);  		IsDead = true;  		if (state.Completed == null) {  			if (!Disposed) {  				_requestCompleted.Set ();  			}  		} else {  			ConnectionPool.Release (this);  			state.Exception = new SocketException (10054);  			state.Completed (state);  		}  		break;  	}  	state.BytesReceived += e.BytesTransferred;  	state.Data.Write (e.Buffer' state.SendOffset' e.BytesTransferred);  	//if first loop get the length of the body from the header  	if (state.BodyLength == 0) {  		state.BodyLength = Converter.ToInt32 (state.Data.ToArray ()' HeaderIndexFor.Body);  	}  	if (state.BytesReceived < state.BodyLength + 24) {  		var bufferSize = state.BodyLength < Configuration.BufferSize ? state.BodyLength : Configuration.BufferSize;  		e.SetBuffer (state.SendOffset' bufferSize);  		var willRaiseCompletedEvent = socket.ReceiveAsync (e);  		if (!willRaiseCompletedEvent) {  			continue;  		}  	} else {  		//if the callback is null we are in blocking mode  		if (state.Completed == null) {  			Log.Debug ("Complete with set {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  			_requestCompleted.Set ();  		} else {  			Log.Debug ("Complete {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  			ConnectionPool.Release (this);  			state.Completed (state);  		}  	}  } else {  	IsDead = true;  	state.Exception = new SocketException ((int)e.SocketError);  	Log.Debug ("Error: {0} - {1}"' Identity' state.Exception);  	//if the callback is null we are in blocking mode  	if (state.Completed == null) {  		if (!Disposed) {  			_requestCompleted.Set ();  		}  	} else {  		ConnectionPool.Release (this);  		state.Completed (state);  	}  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: if (e.SocketError == SocketError.Success) {  	//socket was closed on recieving side  	if (e.BytesTransferred == 0) {  		Log.Debug ("Connection {0} has failed in receive with {1} bytes."' Identity' e.BytesTransferred);  		IsDead = true;  		if (state.Completed == null) {  			if (!Disposed) {  				_requestCompleted.Set ();  			}  		} else {  			ConnectionPool.Release (this);  			state.Exception = new SocketException (10054);  			state.Completed (state);  		}  		break;  	}  	state.BytesReceived += e.BytesTransferred;  	state.Data.Write (e.Buffer' state.SendOffset' e.BytesTransferred);  	//if first loop get the length of the body from the header  	if (state.BodyLength == 0) {  		state.BodyLength = Converter.ToInt32 (state.Data.ToArray ()' HeaderIndexFor.Body);  	}  	if (state.BytesReceived < state.BodyLength + 24) {  		var bufferSize = state.BodyLength < Configuration.BufferSize ? state.BodyLength : Configuration.BufferSize;  		e.SetBuffer (state.SendOffset' bufferSize);  		var willRaiseCompletedEvent = socket.ReceiveAsync (e);  		if (!willRaiseCompletedEvent) {  			continue;  		}  	} else {  		//if the callback is null we are in blocking mode  		if (state.Completed == null) {  			Log.Debug ("Complete with set {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  			_requestCompleted.Set ();  		} else {  			Log.Debug ("Complete {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  			ConnectionPool.Release (this);  			state.Completed (state);  		}  	}  } else {  	IsDead = true;  	state.Exception = new SocketException ((int)e.SocketError);  	Log.Debug ("Error: {0} - {1}"' Identity' state.Exception);  	//if the callback is null we are in blocking mode  	if (state.Completed == null) {  		if (!Disposed) {  			_requestCompleted.Set ();  		}  	} else {  		ConnectionPool.Release (this);  		state.Completed (state);  	}  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: if (e.BytesTransferred == 0) {  	Log.Debug ("Connection {0} has failed in receive with {1} bytes."' Identity' e.BytesTransferred);  	IsDead = true;  	if (state.Completed == null) {  		if (!Disposed) {  			_requestCompleted.Set ();  		}  	} else {  		ConnectionPool.Release (this);  		state.Exception = new SocketException (10054);  		state.Completed (state);  	}  	break;  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: if (state.Completed == null) {  	if (!Disposed) {  		_requestCompleted.Set ();  	}  } else {  	ConnectionPool.Release (this);  	state.Exception = new SocketException (10054);  	state.Completed (state);  }  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: state.Exception = new SocketException (10054);  
Magic Number,Couchbase.IO,Connection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Connection.cs,Receive,The following statement contains a magic number: if (state.BytesReceived < state.BodyLength + 24) {  	var bufferSize = state.BodyLength < Configuration.BufferSize ? state.BodyLength : Configuration.BufferSize;  	e.SetBuffer (state.SendOffset' bufferSize);  	var willRaiseCompletedEvent = socket.ReceiveAsync (e);  	if (!willRaiseCompletedEvent) {  		continue;  	}  } else {  	//if the callback is null we are in blocking mode  	if (state.Completed == null) {  		Log.Debug ("Complete with set {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  		_requestCompleted.Set ();  	} else {  		Log.Debug ("Complete {0} with {1} on server {2}"' state.Opaque' Identity' EndPoint);  		ConnectionPool.Release (this);  		state.Completed (state);  	}  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: try {  	while (Socket.Connected) {  		if (_receiveBuffer.Length < _receiveBufferLength * 2) {  			var buffer = new byte[_receiveBuffer.Length * 2];  			Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  			_receiveBuffer = buffer;  		}  		var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None);  		if (receivedByteCount == 0)  			break;  		_receiveBufferLength += receivedByteCount;  		ParseReceivedData ();  	}  	HandleDisconnect (new RemoteHostClosedException (ExceptionUtil.GetMessage (ExceptionUtil.RemoteHostClosedMsg' EndPoint)));  }   #if NET45  catch (ThreadAbortException) {  }   #endif  catch (ObjectDisposedException) {  } catch (SocketException e) {  	//Dispose has already been thrown by another thread  	if ((int)e.SocketErrorCode != 10004) {  		HandleDisconnect (e);  	}  } catch (Exception e) {  	HandleDisconnect (e);  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: try {  	while (Socket.Connected) {  		if (_receiveBuffer.Length < _receiveBufferLength * 2) {  			var buffer = new byte[_receiveBuffer.Length * 2];  			Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  			_receiveBuffer = buffer;  		}  		var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None);  		if (receivedByteCount == 0)  			break;  		_receiveBufferLength += receivedByteCount;  		ParseReceivedData ();  	}  	HandleDisconnect (new RemoteHostClosedException (ExceptionUtil.GetMessage (ExceptionUtil.RemoteHostClosedMsg' EndPoint)));  }   #if NET45  catch (ThreadAbortException) {  }   #endif  catch (ObjectDisposedException) {  } catch (SocketException e) {  	//Dispose has already been thrown by another thread  	if ((int)e.SocketErrorCode != 10004) {  		HandleDisconnect (e);  	}  } catch (Exception e) {  	HandleDisconnect (e);  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: try {  	while (Socket.Connected) {  		if (_receiveBuffer.Length < _receiveBufferLength * 2) {  			var buffer = new byte[_receiveBuffer.Length * 2];  			Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  			_receiveBuffer = buffer;  		}  		var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None);  		if (receivedByteCount == 0)  			break;  		_receiveBufferLength += receivedByteCount;  		ParseReceivedData ();  	}  	HandleDisconnect (new RemoteHostClosedException (ExceptionUtil.GetMessage (ExceptionUtil.RemoteHostClosedMsg' EndPoint)));  }   #if NET45  catch (ThreadAbortException) {  }   #endif  catch (ObjectDisposedException) {  } catch (SocketException e) {  	//Dispose has already been thrown by another thread  	if ((int)e.SocketErrorCode != 10004) {  		HandleDisconnect (e);  	}  } catch (Exception e) {  	HandleDisconnect (e);  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: while (Socket.Connected) {  	if (_receiveBuffer.Length < _receiveBufferLength * 2) {  		var buffer = new byte[_receiveBuffer.Length * 2];  		Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  		_receiveBuffer = buffer;  	}  	var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None);  	if (receivedByteCount == 0)  		break;  	_receiveBufferLength += receivedByteCount;  	ParseReceivedData ();  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: while (Socket.Connected) {  	if (_receiveBuffer.Length < _receiveBufferLength * 2) {  		var buffer = new byte[_receiveBuffer.Length * 2];  		Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  		_receiveBuffer = buffer;  	}  	var receivedByteCount = Socket.Receive (_receiveBuffer' _receiveBufferLength' _receiveBuffer.Length - _receiveBufferLength' SocketFlags.None);  	if (receivedByteCount == 0)  		break;  	_receiveBufferLength += receivedByteCount;  	ParseReceivedData ();  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: if (_receiveBuffer.Length < _receiveBufferLength * 2) {  	var buffer = new byte[_receiveBuffer.Length * 2];  	Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  	_receiveBuffer = buffer;  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: if (_receiveBuffer.Length < _receiveBufferLength * 2) {  	var buffer = new byte[_receiveBuffer.Length * 2];  	Buffer.BlockCopy (_receiveBuffer' 0' buffer' 0' _receiveBufferLength);  	_receiveBuffer = buffer;  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ReceiveThreadBody,The following statement contains a magic number: if ((int)e.SocketErrorCode != 10004) {  	HandleDisconnect (e);  }  
Magic Number,Couchbase.IO,MultiplexingConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\MultiplexingConnection.cs,ParseReceivedData,The following statement contains a magic number: while (parsedOffset + HeaderIndexFor.BodyLength < _receiveBufferLength) {  	var responseSize = Converter.ToInt32 (_receiveBuffer' parsedOffset + HeaderIndexFor.BodyLength) + 24;  	if (parsedOffset + responseSize > _receiveBufferLength)  		break;  	var opaque = Converter.ToUInt32 (_receiveBuffer' parsedOffset + HeaderIndexFor.Opaque);  	var response = new byte[responseSize];  	Buffer.BlockCopy (_receiveBuffer' parsedOffset' response' 0' responseSize);  	parsedOffset += responseSize;  	IState state;  	lock (_statesInFlight) {  		_statesInFlight.TryRemove (opaque' out state);  	}  	if (state != null) {  		Task.Run (() => state.Complete (response));  	}  }  
Magic Number,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The following statement contains a magic number: try {  	state = new SocketAsyncState {  		Data = new MemoryStream ()'  		Opaque = Converter.ToUInt32 (request' HeaderIndexFor.Opaque)'  		Buffer = request'  		Completed = callback  	};  	await _sslStream.WriteAsync (request' 0' request.Length).ContinueOnAnyContext ();  	state.SetIOBuffer (BufferAllocator.GetBuffer ());  	state.BytesReceived = await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' state.BufferLength).ContinueOnAnyContext ();  	//write the received buffer to the state obj  	await state.Data.WriteAsync (state.Buffer' state.BufferOffset' state.BytesReceived).ContinueOnAnyContext ();  	state.BodyLength = Converter.ToInt32 (state.Buffer' state.BufferOffset + HeaderIndexFor.BodyLength);  	while (state.BytesReceived < state.BodyLength + 24) {  		var bufferLength = state.BufferLength - state.BytesSent < state.BufferLength ? state.BufferLength - state.BytesSent : state.BufferLength;  		state.BytesReceived += await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' bufferLength).ContinueOnAnyContext ();  		await state.Data.WriteAsync (state.Buffer' state.BufferOffset' state.BytesReceived - (int)state.Data.Length).ContinueOnAnyContext ();  	}  	await callback (state).ContinueOnAnyContext ();  } catch (Exception e) {  	IsDead = true;  	capturedException = ExceptionDispatchInfo.Capture (e);  } finally {  	ConnectionPool.Release (this);  	if (state.IOBuffer != null) {  		BufferAllocator.ReleaseBuffer (state.IOBuffer);  	}  }  
Magic Number,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The following statement contains a magic number: while (state.BytesReceived < state.BodyLength + 24) {  	var bufferLength = state.BufferLength - state.BytesSent < state.BufferLength ? state.BufferLength - state.BytesSent : state.BufferLength;  	state.BytesReceived += await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' bufferLength).ContinueOnAnyContext ();  	await state.Data.WriteAsync (state.Buffer' state.BufferOffset' state.BytesReceived - (int)state.Data.Length).ContinueOnAnyContext ();  }  
Magic Number,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The following statement contains a magic number: try {  	state.SetIOBuffer (BufferAllocator.GetBuffer ());  	while (state.BytesReceived < state.BodyLength + 24) {  		cancellationToken.ThrowIfCancellationRequested ();  		var bytesReceived = await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' state.BufferLength' cancellationToken).ContinueOnAnyContext ();  		state.BytesReceived += bytesReceived;  		if (state.BytesReceived == 0) {  			// No more bytes were received' go ahead and exit the loop  			break;  		}  		if (state.BodyLength == 0) {  			// Reading header' so get the BodyLength  			state.BodyLength = Converter.ToInt32 (state.Buffer' state.BufferOffset + HeaderIndexFor.Body);  		}  		state.Data.Write (state.Buffer' state.BufferOffset' bytesReceived);  	}  } finally {  	if (state.IOBuffer != null) {  		BufferAllocator.ReleaseBuffer (state.IOBuffer);  	}  }  
Magic Number,Couchbase.IO,SslConnection,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\SslConnection.cs,SendAsync,The following statement contains a magic number: while (state.BytesReceived < state.BodyLength + 24) {  	cancellationToken.ThrowIfCancellationRequested ();  	var bytesReceived = await _sslStream.ReadAsync (state.Buffer' state.BufferOffset' state.BufferLength' cancellationToken).ContinueOnAnyContext ();  	state.BytesReceived += bytesReceived;  	if (state.BytesReceived == 0) {  		// No more bytes were received' go ahead and exit the loop  		break;  	}  	if (state.BodyLength == 0) {  		// Reading header' so get the BodyLength  		state.BodyLength = Converter.ToInt32 (state.Buffer' state.BufferOffset + HeaderIndexFor.Body);  	}  	state.Data.Write (state.Buffer' state.BufferOffset' bytesReceived);  }  
Magic Number,Couchbase.IO,DefaultConnectionFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\DefaultConnectionFactory.cs,GetGeneric,The following statement contains a magic number: if (socket.ConnectAsync (asyncEventArgs)) {  	// True means the connect command is running asynchronously' so we need to wait for completion  	if (!waitHandle.WaitOne (p.Configuration.ConnectTimeout)) {  		socket.Dispose ();  		const int connectionTimedOut = 10060;  		throw new SocketException (connectionTimedOut);  	}  }  
Magic Number,Couchbase.IO,DefaultConnectionFactory,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\DefaultConnectionFactory.cs,GetGeneric,The following statement contains a magic number: if (!waitHandle.WaitOne (p.Configuration.ConnectTimeout)) {  	socket.Dispose ();  	const int connectionTimedOut = 10060;  	throw new SocketException (connectionTimedOut);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,CreateBody,The following statement contains a magic number: for (var i = 0; i < _value.Length; i++) {  	var offset = i * 2;  	Converter.FromInt16 (_value [i]' body' offset);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var offset = 24 + Header.KeyLength;  		result = new short[Header.BodyLength / 2];  		for (int i = 0; i < result.Length; i++) {  			result [i] = Converter.ToInt16 (buffer' offset + i * 2);  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var offset = 24 + Header.KeyLength;  		result = new short[Header.BodyLength / 2];  		for (int i = 0; i < result.Length; i++) {  			result [i] = Converter.ToInt16 (buffer' offset + i * 2);  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var offset = 24 + Header.KeyLength;  		result = new short[Header.BodyLength / 2];  		for (int i = 0; i < result.Length; i++) {  			result [i] = Converter.ToInt16 (buffer' offset + i * 2);  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var offset = 24 + Header.KeyLength;  	result = new short[Header.BodyLength / 2];  	for (int i = 0; i < result.Length; i++) {  		result [i] = Converter.ToInt16 (buffer' offset + i * 2);  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var offset = 24 + Header.KeyLength;  	result = new short[Header.BodyLength / 2];  	for (int i = 0; i < result.Length; i++) {  		result [i] = Converter.ToInt16 (buffer' offset + i * 2);  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var offset = 24 + Header.KeyLength;  	result = new short[Header.BodyLength / 2];  	for (int i = 0; i < result.Length; i++) {  		result [i] = Converter.ToInt16 (buffer' offset + i * 2);  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: result = new short[Header.BodyLength / 2];  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: for (int i = 0; i < result.Length; i++) {  	result [i] = Converter.ToInt16 (buffer' offset + i * 2);  }  
Magic Number,Couchbase.IO.Operations,Hello,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Hello.cs,GetValue,The following statement contains a magic number: result [i] = Converter.ToInt16 (buffer' offset + i * 2);  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,MutationOperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\MutationOperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  	Expires = Converter.ToUInt32 (buffer' 25);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,ReadExtras,The following statement contains a magic number: Expires = Converter.ToUInt32 (buffer' 25);  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status == ResponseStatus.VBucketBelongsToAnotherServer) {  	message = ResponseStatus.VBucketBelongsToAnotherServer.ToString ();  } else {  	if (ErrorCode != null) {  		message = ErrorCode.ToString ();  	} else if (Exception == null) {  		try {  			if (Header.Status != ResponseStatus.Success) {  				if (Data == null || Data.Length == 0) {  					message = string.Empty;  				} else {  					var buffer = Data.ToArray ();  					if (buffer.Length > 0 && TotalLength == 24) {  						message = Converter.ToString (buffer' 0' buffer.Length);  					} else {  						message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  					}  				}  			}  		} catch (Exception e) {  			message = e.Message;  		}  	} else {  		message = Exception.Message;  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status == ResponseStatus.VBucketBelongsToAnotherServer) {  	message = ResponseStatus.VBucketBelongsToAnotherServer.ToString ();  } else {  	if (ErrorCode != null) {  		message = ErrorCode.ToString ();  	} else if (Exception == null) {  		try {  			if (Header.Status != ResponseStatus.Success) {  				if (Data == null || Data.Length == 0) {  					message = string.Empty;  				} else {  					var buffer = Data.ToArray ();  					if (buffer.Length > 0 && TotalLength == 24) {  						message = Converter.ToString (buffer' 0' buffer.Length);  					} else {  						message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  					}  				}  			}  		} catch (Exception e) {  			message = e.Message;  		}  	} else {  		message = Exception.Message;  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status == ResponseStatus.VBucketBelongsToAnotherServer) {  	message = ResponseStatus.VBucketBelongsToAnotherServer.ToString ();  } else {  	if (ErrorCode != null) {  		message = ErrorCode.ToString ();  	} else if (Exception == null) {  		try {  			if (Header.Status != ResponseStatus.Success) {  				if (Data == null || Data.Length == 0) {  					message = string.Empty;  				} else {  					var buffer = Data.ToArray ();  					if (buffer.Length > 0 && TotalLength == 24) {  						message = Converter.ToString (buffer' 0' buffer.Length);  					} else {  						message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  					}  				}  			}  		} catch (Exception e) {  			message = e.Message;  		}  	} else {  		message = Exception.Message;  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status == ResponseStatus.VBucketBelongsToAnotherServer) {  	message = ResponseStatus.VBucketBelongsToAnotherServer.ToString ();  } else {  	if (ErrorCode != null) {  		message = ErrorCode.ToString ();  	} else if (Exception == null) {  		try {  			if (Header.Status != ResponseStatus.Success) {  				if (Data == null || Data.Length == 0) {  					message = string.Empty;  				} else {  					var buffer = Data.ToArray ();  					if (buffer.Length > 0 && TotalLength == 24) {  						message = Converter.ToString (buffer' 0' buffer.Length);  					} else {  						message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  					}  				}  			}  		} catch (Exception e) {  			message = e.Message;  		}  	} else {  		message = Exception.Message;  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (ErrorCode != null) {  	message = ErrorCode.ToString ();  } else if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (ErrorCode != null) {  	message = ErrorCode.ToString ();  } else if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (ErrorCode != null) {  	message = ErrorCode.ToString ();  } else if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (ErrorCode != null) {  	message = ErrorCode.ToString ();  } else if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Exception == null) {  	try {  		if (Header.Status != ResponseStatus.Success) {  			if (Data == null || Data.Length == 0) {  				message = string.Empty;  			} else {  				var buffer = Data.ToArray ();  				if (buffer.Length > 0 && TotalLength == 24) {  					message = Converter.ToString (buffer' 0' buffer.Length);  				} else {  					message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  				}  			}  		}  	} catch (Exception e) {  		message = e.Message;  	}  } else {  	message = Exception.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: try {  	if (Header.Status != ResponseStatus.Success) {  		if (Data == null || Data.Length == 0) {  			message = string.Empty;  		} else {  			var buffer = Data.ToArray ();  			if (buffer.Length > 0 && TotalLength == 24) {  				message = Converter.ToString (buffer' 0' buffer.Length);  			} else {  				message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  			}  		}  	}  } catch (Exception e) {  	message = e.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: try {  	if (Header.Status != ResponseStatus.Success) {  		if (Data == null || Data.Length == 0) {  			message = string.Empty;  		} else {  			var buffer = Data.ToArray ();  			if (buffer.Length > 0 && TotalLength == 24) {  				message = Converter.ToString (buffer' 0' buffer.Length);  			} else {  				message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  			}  		}  	}  } catch (Exception e) {  	message = e.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: try {  	if (Header.Status != ResponseStatus.Success) {  		if (Data == null || Data.Length == 0) {  			message = string.Empty;  		} else {  			var buffer = Data.ToArray ();  			if (buffer.Length > 0 && TotalLength == 24) {  				message = Converter.ToString (buffer' 0' buffer.Length);  			} else {  				message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  			}  		}  	}  } catch (Exception e) {  	message = e.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: try {  	if (Header.Status != ResponseStatus.Success) {  		if (Data == null || Data.Length == 0) {  			message = string.Empty;  		} else {  			var buffer = Data.ToArray ();  			if (buffer.Length > 0 && TotalLength == 24) {  				message = Converter.ToString (buffer' 0' buffer.Length);  			} else {  				message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  			}  		}  	}  } catch (Exception e) {  	message = e.Message;  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status != ResponseStatus.Success) {  	if (Data == null || Data.Length == 0) {  		message = string.Empty;  	} else {  		var buffer = Data.ToArray ();  		if (buffer.Length > 0 && TotalLength == 24) {  			message = Converter.ToString (buffer' 0' buffer.Length);  		} else {  			message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  		}  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status != ResponseStatus.Success) {  	if (Data == null || Data.Length == 0) {  		message = string.Empty;  	} else {  		var buffer = Data.ToArray ();  		if (buffer.Length > 0 && TotalLength == 24) {  			message = Converter.ToString (buffer' 0' buffer.Length);  		} else {  			message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  		}  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status != ResponseStatus.Success) {  	if (Data == null || Data.Length == 0) {  		message = string.Empty;  	} else {  		var buffer = Data.ToArray ();  		if (buffer.Length > 0 && TotalLength == 24) {  			message = Converter.ToString (buffer' 0' buffer.Length);  		} else {  			message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  		}  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Header.Status != ResponseStatus.Success) {  	if (Data == null || Data.Length == 0) {  		message = string.Empty;  	} else {  		var buffer = Data.ToArray ();  		if (buffer.Length > 0 && TotalLength == 24) {  			message = Converter.ToString (buffer' 0' buffer.Length);  		} else {  			message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  		}  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Data == null || Data.Length == 0) {  	message = string.Empty;  } else {  	var buffer = Data.ToArray ();  	if (buffer.Length > 0 && TotalLength == 24) {  		message = Converter.ToString (buffer' 0' buffer.Length);  	} else {  		message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Data == null || Data.Length == 0) {  	message = string.Empty;  } else {  	var buffer = Data.ToArray ();  	if (buffer.Length > 0 && TotalLength == 24) {  		message = Converter.ToString (buffer' 0' buffer.Length);  	} else {  		message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Data == null || Data.Length == 0) {  	message = string.Empty;  } else {  	var buffer = Data.ToArray ();  	if (buffer.Length > 0 && TotalLength == 24) {  		message = Converter.ToString (buffer' 0' buffer.Length);  	} else {  		message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (Data == null || Data.Length == 0) {  	message = string.Empty;  } else {  	var buffer = Data.ToArray ();  	if (buffer.Length > 0 && TotalLength == 24) {  		message = Converter.ToString (buffer' 0' buffer.Length);  	} else {  		message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (buffer.Length > 0 && TotalLength == 24) {  	message = Converter.ToString (buffer' 0' buffer.Length);  } else {  	message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (buffer.Length > 0 && TotalLength == 24) {  	message = Converter.ToString (buffer' 0' buffer.Length);  } else {  	message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (buffer.Length > 0 && TotalLength == 24) {  	message = Converter.ToString (buffer' 0' buffer.Length);  } else {  	message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: if (buffer.Length > 0 && TotalLength == 24) {  	message = Converter.ToString (buffer' 0' buffer.Length);  } else {  	message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetMessage,The following statement contains a magic number: message = Converter.ToString (buffer' 24' Math.Min (buffer.Length - 24' TotalLength - 24));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		ReadExtras (buffer);  		var offset = 24 + Header.KeyLength + Header.ExtrasLength;  		result = Transcoder.Decode<T> (buffer' offset' TotalLength - offset' Flags' OperationCode);  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	ReadExtras (buffer);  	var offset = 24 + Header.KeyLength + Header.ExtrasLength;  	result = Transcoder.Decode<T> (buffer' offset' TotalLength - offset' Flags' OperationCode);  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 2' Converter.GetBit (format' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 2' Converter.GetBit (format' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 3' Converter.GetBit (format' 3));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 3' Converter.GetBit (format' 3));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 4' false);  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 5' Converter.GetBit (compression' 0));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 6' Converter.GetBit (compression' 1));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 7' Converter.GetBit (compression' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.SetBit (ref extras [0]' 7' Converter.GetBit (compression' 2));  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt16 (typeCode' extras' 2);  
Magic Number,Couchbase.IO.Operations,OperationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\OperationBase.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt32 (Expires' extras' 4);  
Magic Number,Couchbase.IO.Operations,Decrement,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Decrement.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt64 (_initial' extras' 8);  
Magic Number,Couchbase.IO.Operations,Decrement,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Decrement.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt32 (_expiration' extras' 16);  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length > 24) {  	var format = new byte ();  	var flags = Converter.ToByte (buffer' 24);  	Converter.SetBit (ref format' 0' Converter.GetBit (flags' 0));  	Converter.SetBit (ref format' 1' Converter.GetBit (flags' 1));  	Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  	Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  	var compression = new byte ();  	Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  	Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  	Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  	var typeCode = (TypeCode)(Converter.ToUInt16 (buffer' 26) & 0xff);  	Format = (DataFormat)format;  	Compression = (Compression)compression;  	Flags.DataFormat = Format;  	Flags.Compression = Compression;  	Flags.TypeCode = typeCode;  }  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 2' Converter.GetBit (flags' 2));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref format' 3' Converter.GetBit (flags' 3));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 4' Converter.GetBit (flags' 4));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 5' Converter.GetBit (flags' 5));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  
Magic Number,Couchbase.IO.Operations,Get,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Get.cs,ReadExtras,The following statement contains a magic number: Converter.SetBit (ref compression' 6' Converter.GetBit (flags' 6));  
Magic Number,Couchbase.IO.Operations,Increment,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Increment.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt64 (_initial' extras' 8);  
Magic Number,Couchbase.IO.Operations,Increment,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Increment.cs,CreateExtras,The following statement contains a magic number: Converter.FromUInt32 (_expiration' extras' 16);  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,Write,The following statement contains a magic number: Converter.FromInt16 ((short)key.Length' body' 2);  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,Write,The following statement contains a magic number: Converter.FromString (Key' body' 4);  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		var keylength = Converter.ToInt16 (buffer' 26);  		return new ObserveState {  			PersistStat = Converter.ToUInt32 (buffer' 16)'  			ReplState = Converter.ToUInt32 (buffer' 20)'  			VBucket = Converter.ToInt16 (buffer' 24)'  			KeyLength = keylength'  			Key = Converter.ToString (buffer' 28' keylength)'  			KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  			Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  		};  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	var keylength = Converter.ToInt16 (buffer' 26);  	return new ObserveState {  		PersistStat = Converter.ToUInt32 (buffer' 16)'  		ReplState = Converter.ToUInt32 (buffer' 20)'  		VBucket = Converter.ToInt16 (buffer' 24)'  		KeyLength = keylength'  		Key = Converter.ToString (buffer' 28' keylength)'  		KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  		Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  	};  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations,Observe,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\Observe.cs,GetValue,The following statement contains a magic number: return new ObserveState {  	PersistStat = Converter.ToUInt32 (buffer' 16)'  	ReplState = Converter.ToUInt32 (buffer' 20)'  	VBucket = Converter.ToInt16 (buffer' 24)'  	KeyLength = keylength'  	Key = Converter.ToString (buffer' 28' keylength)'  	KeyState = (KeyState)Converter.ToByte (buffer' 28 + keylength)'  	Cas = Converter.ToUInt64 (buffer' 28 + keylength + 1)  };  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,CreateBody,The following statement contains a magic number: foreach (var lookup in _builder) {  	var opcode = (byte)lookup.OpCode;  	var flags = lookup.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (lookup.Path);  	var spec = new byte[pathLength + 4];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromString (lookup.Path' spec' 4);  	buffer.AddRange (spec);  	_lookupCommands.Add (lookup);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,CreateBody,The following statement contains a magic number: foreach (var lookup in _builder) {  	var opcode = (byte)lookup.OpCode;  	var flags = lookup.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (lookup.Path);  	var spec = new byte[pathLength + 4];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromString (lookup.Path' spec' 4);  	buffer.AddRange (spec);  	_lookupCommands.Add (lookup);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,CreateBody,The following statement contains a magic number: foreach (var lookup in _builder) {  	var opcode = (byte)lookup.OpCode;  	var flags = lookup.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (lookup.Path);  	var spec = new byte[pathLength + 4];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromString (lookup.Path' spec' 4);  	buffer.AddRange (spec);  	_lookupCommands.Add (lookup);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,CreateBody,The following statement contains a magic number: Converter.FromUInt16 ((ushort)pathLength' spec' 2);  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,CreateBody,The following statement contains a magic number: Converter.FromString (lookup.Path' spec' 4);  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: for (; ;) {  	var bodyLength = Converter.ToInt32 (response' valueLengthOffset);  	var payLoad = new byte[bodyLength];  	System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' bodyLength);  	var command = _lookupCommands [commandIndex++];  	command.Status = (ResponseStatus)Converter.ToUInt16 (response' statusOffset);  	command.ValueIsJson = payLoad.IsJson (0' bodyLength - 1);  	command.Bytes = payLoad;  	statusOffset = valueOffset + bodyLength;  	valueLengthOffset = statusOffset + 2;  	valueOffset = statusOffset + 6;  	if (valueOffset >= response.Length)  		break;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: for (; ;) {  	var bodyLength = Converter.ToInt32 (response' valueLengthOffset);  	var payLoad = new byte[bodyLength];  	System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' bodyLength);  	var command = _lookupCommands [commandIndex++];  	command.Status = (ResponseStatus)Converter.ToUInt16 (response' statusOffset);  	command.ValueIsJson = payLoad.IsJson (0' bodyLength - 1);  	command.Bytes = payLoad;  	statusOffset = valueOffset + bodyLength;  	valueLengthOffset = statusOffset + 2;  	valueOffset = statusOffset + 6;  	if (valueOffset >= response.Length)  		break;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: valueLengthOffset = statusOffset + 2;  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiLookup,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiLookup.cs,GetValue,The following statement contains a magic number: valueOffset = statusOffset + 6;  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: foreach (var mutate in _builder) {  	var opcode = (byte)mutate.OpCode;  	var flags = mutate.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (mutate.Path);  	var fragment = mutate.Value == null ? new byte[0] : GetBytes (mutate);  	var spec = new byte[pathLength + 8];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromUInt32 ((uint)fragment.Length' spec' 4);  	Converter.FromString (mutate.Path' spec' 8);  	buffer.AddRange (spec);  	buffer.AddRange (fragment);  	_lookupCommands.Add (mutate);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: foreach (var mutate in _builder) {  	var opcode = (byte)mutate.OpCode;  	var flags = mutate.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (mutate.Path);  	var fragment = mutate.Value == null ? new byte[0] : GetBytes (mutate);  	var spec = new byte[pathLength + 8];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromUInt32 ((uint)fragment.Length' spec' 4);  	Converter.FromString (mutate.Path' spec' 8);  	buffer.AddRange (spec);  	buffer.AddRange (fragment);  	_lookupCommands.Add (mutate);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: foreach (var mutate in _builder) {  	var opcode = (byte)mutate.OpCode;  	var flags = mutate.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (mutate.Path);  	var fragment = mutate.Value == null ? new byte[0] : GetBytes (mutate);  	var spec = new byte[pathLength + 8];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromUInt32 ((uint)fragment.Length' spec' 4);  	Converter.FromString (mutate.Path' spec' 8);  	buffer.AddRange (spec);  	buffer.AddRange (fragment);  	_lookupCommands.Add (mutate);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: foreach (var mutate in _builder) {  	var opcode = (byte)mutate.OpCode;  	var flags = mutate.Flags;  	var pathLength = Encoding.UTF8.GetByteCount (mutate.Path);  	var fragment = mutate.Value == null ? new byte[0] : GetBytes (mutate);  	var spec = new byte[pathLength + 8];  	Converter.FromByte (opcode' spec' 0);  	Converter.FromByte (flags' spec' 1);  	Converter.FromUInt16 ((ushort)pathLength' spec' 2);  	Converter.FromUInt32 ((uint)fragment.Length' spec' 4);  	Converter.FromString (mutate.Path' spec' 8);  	buffer.AddRange (spec);  	buffer.AddRange (fragment);  	_lookupCommands.Add (mutate);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: Converter.FromUInt16 ((ushort)pathLength' spec' 2);  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: Converter.FromUInt32 ((uint)fragment.Length' spec' 4);  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,CreateBody,The following statement contains a magic number: Converter.FromString (mutate.Path' spec' 8);  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: for (; ;) {  	var index = Converter.ToByte (response' indexOffset);  	var command = _lookupCommands [index];  	command.Status = (ResponseStatus)Converter.ToUInt16 (response' statusOffset);  	//if succcess read value and loop to next result - otherwise terminate loop here  	if (command.Status == ResponseStatus.Success) {  		var valueLength = Converter.ToInt32 (response' valueLengthOffset);  		if (valueLength > 0) {  			var payLoad = new byte[valueLength];  			System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' valueLength);  			command.Bytes = payLoad;  		}  		indexOffset = valueOffset + valueLength;  		statusOffset = indexOffset + 1;  		valueLengthOffset = indexOffset + 3;  		valueOffset = indexOffset + 7;  	}  	if (valueOffset + Header.ExtrasLength > response.Length)  		break;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: for (; ;) {  	var index = Converter.ToByte (response' indexOffset);  	var command = _lookupCommands [index];  	command.Status = (ResponseStatus)Converter.ToUInt16 (response' statusOffset);  	//if succcess read value and loop to next result - otherwise terminate loop here  	if (command.Status == ResponseStatus.Success) {  		var valueLength = Converter.ToInt32 (response' valueLengthOffset);  		if (valueLength > 0) {  			var payLoad = new byte[valueLength];  			System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' valueLength);  			command.Bytes = payLoad;  		}  		indexOffset = valueOffset + valueLength;  		statusOffset = indexOffset + 1;  		valueLengthOffset = indexOffset + 3;  		valueOffset = indexOffset + 7;  	}  	if (valueOffset + Header.ExtrasLength > response.Length)  		break;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: if (command.Status == ResponseStatus.Success) {  	var valueLength = Converter.ToInt32 (response' valueLengthOffset);  	if (valueLength > 0) {  		var payLoad = new byte[valueLength];  		System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' valueLength);  		command.Bytes = payLoad;  	}  	indexOffset = valueOffset + valueLength;  	statusOffset = indexOffset + 1;  	valueLengthOffset = indexOffset + 3;  	valueOffset = indexOffset + 7;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: if (command.Status == ResponseStatus.Success) {  	var valueLength = Converter.ToInt32 (response' valueLengthOffset);  	if (valueLength > 0) {  		var payLoad = new byte[valueLength];  		System.Buffer.BlockCopy (response' valueOffset' payLoad' 0' valueLength);  		command.Bytes = payLoad;  	}  	indexOffset = valueOffset + valueLength;  	statusOffset = indexOffset + 1;  	valueLengthOffset = indexOffset + 3;  	valueOffset = indexOffset + 7;  }  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: valueLengthOffset = indexOffset + 3;  
Magic Number,Couchbase.IO.Operations.SubDocument,MultiMutation,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\MultiMutation.cs,GetCommandValues,The following statement contains a magic number: valueOffset = indexOffset + 7;  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularBase.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		ReadExtras (buffer);  		var offset = 24 + Header.KeyLength + Header.ExtrasLength;  		CurrentSpec.ValueIsJson = buffer.IsJson (offset' TotalLength - 1);  		CurrentSpec.Bytes = new byte[TotalLength - offset];  		System.Buffer.BlockCopy (buffer' offset' CurrentSpec.Bytes' 0' TotalLength - offset);  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularBase.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	ReadExtras (buffer);  	var offset = 24 + Header.KeyLength + Header.ExtrasLength;  	CurrentSpec.ValueIsJson = buffer.IsJson (offset' TotalLength - 1);  	CurrentSpec.Bytes = new byte[TotalLength - offset];  	System.Buffer.BlockCopy (buffer' offset' CurrentSpec.Bytes' 0' TotalLength - offset);  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularLookupBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularLookupBase.cs,WriteExtras,The following statement contains a magic number: Converter.FromByte (CurrentSpec.Flags' buffer' offset + 2);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WriteExtras (buffer' 24);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WriteKey (buffer' Expires == 0 ? 27 : 31);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WriteKey (buffer' Expires == 0 ? 27 : 31);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WritePath (buffer' (Expires == 0 ? 27 : 31) + KeyLength);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WritePath (buffer' (Expires == 0 ? 27 : 31) + KeyLength);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WriteBody (buffer' (Expires == 0 ? 27 : 31) + KeyLength + PathLength);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,Write,The following statement contains a magic number: WriteBody (buffer' (Expires == 0 ? 27 : 31) + KeyLength + PathLength);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: Converter.FromByte (CurrentSpec.Flags' buffer' offset + 2);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: if (Expires > 0) {  	Converter.FromUInt32 (Expires' buffer' offset + 3);  	//4@27 Expiration time (if present' extras is 7)  }  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,WriteExtras,The following statement contains a magic number: Converter.FromUInt32 (Expires' buffer' offset + 3);  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Operations.SubDocument,SubDocSingularMutationBase,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\SubDocument\SubDocSingularMutationBase.cs,ReadExtras,The following statement contains a magic number: if (buffer.Length >= 40 && VBucket != null) {  	var uuid = Converter.ToInt64 (buffer' 24);  	var seqno = Converter.ToInt64 (buffer' 32);  	MutationToken = new MutationToken (VBucket.BucketName' (short)VBucket.Index' uuid' seqno);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToSingle,The following statement contains a magic number: if (useNbo) {  	const int length = 4;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToSingle (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToDateTime,The following statement contains a magic number: if (useNbo) {  	const int length = 8;  	var array = CopyAndReverse (buffer' offset' length);  	return DateTime.FromBinary (BitConverter.ToInt64 (array' 0));  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToDouble,The following statement contains a magic number: if (useNbo) {  	const int length = 8;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToDouble (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToInt16,The following statement contains a magic number: if (useNbo) {  	const int length = 2;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToInt16 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToUInt16,The following statement contains a magic number: if (useNbo) {  	const int length = 2;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToUInt16 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToInt32,The following statement contains a magic number: if (useNbo) {  	const int length = 4;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToInt32 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToUInt32,The following statement contains a magic number: if (useNbo) {  	const int length = 4;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToUInt32 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToInt64,The following statement contains a magic number: if (useNbo) {  	const int length = 8;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToInt64 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,DefaultConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\DefaultConverter.cs,ToUInt64,The following statement contains a magic number: if (useNbo) {  	const int length = 8;  	var array = CopyAndReverse (buffer' offset' length);  	return BitConverter.ToUInt64 (array' 0);  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt16,The following statement contains a magic number: return (short)((buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt16,The following statement contains a magic number: return (ushort)((buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt32,The following statement contains a magic number: return (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt32,The following statement contains a magic number: return (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt32,The following statement contains a magic number: return (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)((buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)((buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)((buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToInt64,The following statement contains a magic number: return (buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,ToUInt64,The following statement contains a magic number: return (ulong)((buffer [offset++] << 56) | (buffer [offset++] << 48) | (buffer [offset++] << 40) | (buffer [offset++] << 32) | (buffer [offset++] << 24) | (buffer [offset++] << 16) | (buffer [offset++] << 8) | buffer [offset++]);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt16,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[2];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt16,The following statement contains a magic number: buffer = new byte[2];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt16,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[2];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt16,The following statement contains a magic number: buffer = new byte[2];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt16,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt16,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt16,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt16,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[4];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: buffer = new byte[4];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[4];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: buffer = new byte[4];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 24);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 16);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 24);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 16);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt32,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[8];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer = new byte[8];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: if (buffer == null || buffer.Length == 0) {  	buffer = new byte[8];  }  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer = new byte[8];  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 56);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 48);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 40);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 32);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 24);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 16);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 56);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 48);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 40);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 32);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 24);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 16);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value >> 8);  
Magic Number,Couchbase.IO.Converters,ManualByteConverter,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Converters\ManualByteConverter.cs,FromUInt64,The following statement contains a magic number: buffer [offset++] = (byte)(value & 255);  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (Success && Data != null && Data.Length > 0) {  	try {  		var buffer = Data.ToArray ();  		const int offset = HeaderLength;  		var isHardFailover = Converter.ToByte (buffer' offset) == 1;  		if (isHardFailover) {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  				OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  				LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  			};  		} else {  			result = new ObserveSeqnoResponse {  				IsHardFailover = isHardFailover'  				VBucketId = Converter.ToInt16 (buffer' offset + 1)'  				VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  				LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  				CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			};  		}  	} catch (Exception e) {  		Exception = e;  		HandleClientError (e.Message' ResponseStatus.ClientFailure);  	}  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: try {  	var buffer = Data.ToArray ();  	const int offset = HeaderLength;  	var isHardFailover = Converter.ToByte (buffer' offset) == 1;  	if (isHardFailover) {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  			OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  			LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  		};  	} else {  		result = new ObserveSeqnoResponse {  			IsHardFailover = isHardFailover'  			VBucketId = Converter.ToInt16 (buffer' offset + 1)'  			VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  			LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  			CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		};  	}  } catch (Exception e) {  	Exception = e;  	HandleClientError (e.Message' ResponseStatus.ClientFailure);  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: if (isHardFailover) {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  		OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  		LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  	};  } else {  	result = new ObserveSeqnoResponse {  		IsHardFailover = isHardFailover'  		VBucketId = Converter.ToInt16 (buffer' offset + 1)'  		VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  		LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  		CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	};  }  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  	LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  	LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  	LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  	LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  	OldVBucketUUID = Converter.ToInt64 (buffer' offset + 27)'  	LastSeqnoReceived = Converter.ToInt64 (buffer' offset + 35)  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  };  
Magic Number,Couchbase.IO.Operations.EnhancedDurability,ObserveSeqno,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Operations\EnhancedDurability\ObserveSeqno.cs,GetValue,The following statement contains a magic number: result = new ObserveSeqnoResponse {  	IsHardFailover = isHardFailover'  	VBucketId = Converter.ToInt16 (buffer' offset + 1)'  	VBucketUUID = Converter.ToInt64 (buffer' offset + 3)'  	LastPersistedSeqno = Converter.ToInt64 (buffer' offset + 11)'  	CurrentSeqno = Converter.ToInt64 (buffer' offset + 19)'  };  
Magic Number,Couchbase.Management,BucketSettings,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\BucketSettings.cs,BucketSettings,The following statement contains a magic number: RamQuota = 100;  
Magic Number,Couchbase.Management,ClusterProvisioner,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Management\ClusterProvisioner.cs,ProvisionNodesAsync,The following statement contains a magic number: if (nodes.Count < 2) {  	var ioe = new InvalidOperationException ("Not enough nodes defined in ClientConfiguration.Servers to provision the cluster");  	compositeResult.Add (new DefaultResult (false' ioe.Message' ioe));  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ShouldRetry,The following statement contains a magic number: switch (Status) {  case QueryStatus.Success:  case QueryStatus.Errors:  case QueryStatus.Running:  case QueryStatus.Completed:  case QueryStatus.Stopped:  	break;  case QueryStatus.Timeout:  case QueryStatus.Fatal:  	var status = (int)HttpStatusCode;  	if (status > 399) {  		break;  	}  	retry = true;  	break;  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ShouldRetry,The following statement contains a magic number: if (status > 399) {  	break;  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,GetEnumerator,The following statement contains a magic number: if (!_hasFinishedReading) {  	// Read isn't complete' so the stream is currently waiting to deserialize the results  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			yield return ReadObject<T> (_reader);  		}  		if (_reader.Path == "results" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  	// Read any remaining attributes after the results  	ReadResponseAttributes ();  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,GetEnumerator,The following statement contains a magic number: while (_reader.Read ()) {  	if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  		yield return ReadObject<T> (_reader);  	}  	if (_reader.Path == "results" && _reader.TokenType == JsonToken.EndArray) {  		break;  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,GetEnumerator,The following statement contains a magic number: if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  	yield return ReadObject<T> (_reader);  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: while (_reader.Read ()) {  	if (_reader.Path == "requestID" && _reader.TokenType == JsonToken.String) {  		RequestId = Guid.Parse (_reader.Value.ToString ());  	} else if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  		QueryStatus status;  		if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  			Status = status;  			Success = status == QueryStatus.Success;  		}  	} else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  		ClientContextId = _reader.Value.ToString ();  	} else if (_reader.Path == "signature") {  		Signature = JToken.ReadFrom (_reader);  	} else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  		_metrics.ElaspedTime = _reader.Value.ToString ();  	} else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  		_metrics.ExecutionTime = _reader.Value.ToString ();  	} else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  		var resultCount = 0u;  		if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  			_metrics.ResultCount = resultCount;  		}  	} else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  		var resultSize = 0u;  		if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  			_metrics.ResultSize = resultSize;  		}  	} else if (_reader.Path == "results") {  		// We've reached the result rows' return now  		return;  	} else if (_reader.Path == "warnings") {  		while (_reader.Read ()) {  			if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  				Warnings.Add (ReadObject<Warning> (_reader));  			}  			if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  				break;  			}  		}  	} else if (_reader.Path == "errors") {  		while (_reader.Read ()) {  			if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  				Errors.Add (ReadObject<Error> (_reader));  			}  			if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  				break;  			}  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: while (_reader.Read ()) {  	if (_reader.Path == "requestID" && _reader.TokenType == JsonToken.String) {  		RequestId = Guid.Parse (_reader.Value.ToString ());  	} else if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  		QueryStatus status;  		if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  			Status = status;  			Success = status == QueryStatus.Success;  		}  	} else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  		ClientContextId = _reader.Value.ToString ();  	} else if (_reader.Path == "signature") {  		Signature = JToken.ReadFrom (_reader);  	} else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  		_metrics.ElaspedTime = _reader.Value.ToString ();  	} else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  		_metrics.ExecutionTime = _reader.Value.ToString ();  	} else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  		var resultCount = 0u;  		if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  			_metrics.ResultCount = resultCount;  		}  	} else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  		var resultSize = 0u;  		if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  			_metrics.ResultSize = resultSize;  		}  	} else if (_reader.Path == "results") {  		// We've reached the result rows' return now  		return;  	} else if (_reader.Path == "warnings") {  		while (_reader.Read ()) {  			if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  				Warnings.Add (ReadObject<Warning> (_reader));  			}  			if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  				break;  			}  		}  	} else if (_reader.Path == "errors") {  		while (_reader.Read ()) {  			if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  				Errors.Add (ReadObject<Error> (_reader));  			}  			if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  				break;  			}  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "requestID" && _reader.TokenType == JsonToken.String) {  	RequestId = Guid.Parse (_reader.Value.ToString ());  } else if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  	QueryStatus status;  	if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  		Status = status;  		Success = status == QueryStatus.Success;  	}  } else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "requestID" && _reader.TokenType == JsonToken.String) {  	RequestId = Guid.Parse (_reader.Value.ToString ());  } else if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  	QueryStatus status;  	if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  		Status = status;  		Success = status == QueryStatus.Success;  	}  } else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  	QueryStatus status;  	if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  		Status = status;  		Success = status == QueryStatus.Success;  	}  } else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "status" && _reader.TokenType == JsonToken.String) {  	QueryStatus status;  	if (Enum.TryParse (_reader.Value.ToString ()' true' out status)) {  		Status = status;  		Success = status == QueryStatus.Success;  	}  } else if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "clientContextID" && _reader.TokenType == JsonToken.String) {  	ClientContextId = _reader.Value.ToString ();  } else if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "signature") {  	Signature = JToken.ReadFrom (_reader);  } else if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.elapsedTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ElaspedTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.executionTime" && _reader.TokenType == JsonToken.String) {  	_metrics.ExecutionTime = _reader.Value.ToString ();  } else if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.resultCount" && _reader.TokenType == JsonToken.Integer) {  	var resultCount = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultCount)) {  		_metrics.ResultCount = resultCount;  	}  } else if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "metrics.resultSize" && _reader.TokenType == JsonToken.Integer) {  	var resultSize = 0u;  	if (uint.TryParse (_reader.Value.ToString ()' out resultSize)) {  		_metrics.ResultSize = resultSize;  	}  } else if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "results") {  	// We've reached the result rows' return now  	return;  } else if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "warnings") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Warnings.Add (ReadObject<Warning> (_reader));  		}  		if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  } else if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: while (_reader.Read ()) {  	if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  		Warnings.Add (ReadObject<Warning> (_reader));  	}  	if (_reader.Path == "warnings" && _reader.TokenType == JsonToken.EndArray) {  		break;  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  	Warnings.Add (ReadObject<Warning> (_reader));  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Path == "errors") {  	while (_reader.Read ()) {  		if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  			Errors.Add (ReadObject<Error> (_reader));  		}  		if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  			break;  		}  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: while (_reader.Read ()) {  	if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  		Errors.Add (ReadObject<Error> (_reader));  	}  	if (_reader.Path == "errors" && _reader.TokenType == JsonToken.EndArray) {  		break;  	}  }  
Magic Number,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ReadResponseAttributes,The following statement contains a magic number: if (_reader.Depth == 2 && _reader.TokenType == JsonToken.StartObject) {  	Errors.Add (ReadObject<Error> (_reader));  }  
Magic Number,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,ScanConsistency,The following statement contains a magic number: if (scanConsistency == N1QL.ScanConsistency.StatementPlus)  #pragma   {  	throw new NotSupportedException ("AtPlus and StatementPlus are not currently supported by CouchbaseServer.");  }  
Magic Number,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,GetFormValues,The following statement contains a magic number: if (_scanVectors != null) {  	#pragma  	if (_scanConsistency != N1QL.ScanConsistency.AtPlus)  	#pragma  	 {  		throw new ArgumentException ("Only ScanConsistency.AtPlus is supported for this query request.");  	}  	formValues.Add (QueryParameters.ScanVectors' _scanVectors);  }  
Magic Number,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,GetFormValues,The following statement contains a magic number: if (_scanVectors != null) {  	#pragma  	if (_scanConsistency != N1QL.ScanConsistency.AtPlus)  	#pragma  	 {  		throw new ArgumentException ("Only ScanConsistency.AtPlus is supported for this query request.");  	}  	formValues.Add (QueryParameters.ScanVectors' _scanVectors);  }  
Magic Number,Couchbase.N1QL,QueryRequest,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryRequest.cs,GetFormValues,The following statement contains a magic number: if (_scanConsistency != N1QL.ScanConsistency.AtPlus)  #pragma   {  	throw new ArgumentException ("Only ScanConsistency.AtPlus is supported for this query request.");  }  
Magic Number,Couchbase.N1QL,QueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryResult.cs,ShouldRetry,The following statement contains a magic number: switch (Status) {  case QueryStatus.Success:  case QueryStatus.Errors:  case QueryStatus.Running:  case QueryStatus.Completed:  case QueryStatus.Stopped:  	break;  case QueryStatus.Timeout:  case QueryStatus.Fatal:  	var status = (int)HttpStatusCode;  	if (status > 399) {  		break;  	}  	retry = true;  	break;  }  
Magic Number,Couchbase.N1QL,QueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryResult.cs,ShouldRetry,The following statement contains a magic number: if (status > 399) {  	break;  }  
Magic Number,Couchbase.Search,SearchParams,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchParams.cs,ToJson,The following statement contains a magic number: if (_scanConsistency.HasValue) {  	var consistency = new JObject (new JProperty ("level"' ScanConsistencyNameResolver.Resolve (_scanConsistency.Value)));  	#pragma  	if (_scanConsistency == ScanConsistency.AtPlus)//needs resolution  	#pragma  	 {  		consistency.Add (new JProperty ("vectors"' new JObject ()));  		//does nothing ATM!  	}  	ctl.Add ("consistency"' consistency);  }  
Magic Number,Couchbase.Search,SearchParams,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchParams.cs,ToJson,The following statement contains a magic number: if (_scanConsistency.HasValue) {  	var consistency = new JObject (new JProperty ("level"' ScanConsistencyNameResolver.Resolve (_scanConsistency.Value)));  	#pragma  	if (_scanConsistency == ScanConsistency.AtPlus)//needs resolution  	#pragma  	 {  		consistency.Add (new JProperty ("vectors"' new JObject ()));  		//does nothing ATM!  	}  	ctl.Add ("consistency"' consistency);  }  
Magic Number,Couchbase.Search,SearchParams,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Search\SearchParams.cs,ToJson,The following statement contains a magic number: if (_scanConsistency == ScanConsistency.AtPlus)//needs resolution  #pragma   {  	consistency.Add (new JProperty ("vectors"' new JObject ()));  	//does nothing ATM!  }  
Magic Number,Couchbase.Utils,TimeSpanExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\TimeSpanExtensions.cs,ToTtl,The following statement contains a magic number: if (duration <= TimeSpan.FromDays (30)) {  	return (uint)duration.TotalSeconds;  } else {  	var dateExpiry = DateTime.UtcNow + duration;  	var unixTimeStamp = (uint)(dateExpiry.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	return unixTimeStamp;  }  
Magic Number,Couchbase.Utils,TimeSpanExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\TimeSpanExtensions.cs,ToTtl,The following statement contains a magic number: if (duration <= TimeSpan.FromDays (30)) {  	return (uint)duration.TotalSeconds;  } else {  	var dateExpiry = DateTime.UtcNow + duration;  	var unixTimeStamp = (uint)(dateExpiry.Subtract (new DateTime (1970' 1' 1))).TotalSeconds;  	return unixTimeStamp;  }  
Magic Number,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,GetCombinedHashcode,The following statement contains a magic number: unchecked {  	var hash = 0;  	var count = 0;  	foreach (var item in array) {  		if (item.GetType ().GetTypeInfo ().BaseType == typeof(Array)) {  			var jagged = (Array)item;  			foreach (var inner in jagged) {  				hash += inner.GetHashCode ();  				count++;  			}  		} else {  			hash += item.GetHashCode ();  			count++;  		}  	}  	return 31 * hash + count.GetHashCode ();  }  
Magic Number,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,GetCombinedHashcode,The following statement contains a magic number: return 31 * hash + count.GetHashCode ();  
Magic Number,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,StripBrackets,The following statement contains a magic number: if (theArray.Length > 1 && theArray [0] == 0x5b && theArray [theArray.Length - 1] == 0x5d) {  	var newArray = new byte[theArray.Length - 2];  	Buffer.BlockCopy (theArray' 1' newArray' 0' theArray.Length - 2);  	return newArray;  }  
Magic Number,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,StripBrackets,The following statement contains a magic number: if (theArray.Length > 1 && theArray [0] == 0x5b && theArray [theArray.Length - 1] == 0x5d) {  	var newArray = new byte[theArray.Length - 2];  	Buffer.BlockCopy (theArray' 1' newArray' 0' theArray.Length - 2);  	return newArray;  }  
Magic Number,Couchbase.Utils,ArrayExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Utils\ArrayExtensions.cs,StripBrackets,The following statement contains a magic number: Buffer.BlockCopy (theArray' 1' newArray' 0' theArray.Length - 2);  
Magic Number,Couchbase.IO.Utils,SocketExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Utils\SocketExtensions.cs,SetKeepAlives,The following statement contains a magic number: try {  	const uint temp = 0;  	var values = new byte[Marshal.SizeOf (temp) * 3];  	BitConverter.GetBytes ((uint)(on ? 1 : 0)).CopyTo (values' 0);  	BitConverter.GetBytes (time).CopyTo (values' Marshal.SizeOf (temp));  	BitConverter.GetBytes (interval).CopyTo (values' Marshal.SizeOf (temp) * 2);  	socket.IOControl (IOControlCode.KeepAliveValues' values' null);  } catch (PlatformNotSupportedException) {  	// Can't set on non-Windows platforms' ignore error  	Log.Debug ("Skipping Socket.IOControl for keep alives' not supported on this platform");  }  
Magic Number,Couchbase.IO.Utils,SocketExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Utils\SocketExtensions.cs,SetKeepAlives,The following statement contains a magic number: try {  	const uint temp = 0;  	var values = new byte[Marshal.SizeOf (temp) * 3];  	BitConverter.GetBytes ((uint)(on ? 1 : 0)).CopyTo (values' 0);  	BitConverter.GetBytes (time).CopyTo (values' Marshal.SizeOf (temp));  	BitConverter.GetBytes (interval).CopyTo (values' Marshal.SizeOf (temp) * 2);  	socket.IOControl (IOControlCode.KeepAliveValues' values' null);  } catch (PlatformNotSupportedException) {  	// Can't set on non-Windows platforms' ignore error  	Log.Debug ("Skipping Socket.IOControl for keep alives' not supported on this platform");  }  
Magic Number,Couchbase.IO.Utils,SocketExtensions,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\IO\Utils\SocketExtensions.cs,SetKeepAlives,The following statement contains a magic number: BitConverter.GetBytes (interval).CopyTo (values' Marshal.SizeOf (temp) * 2);  
Magic Number,Couchbase.Cryptography,Crc32,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Cryptography\Crc32.cs,HashCore,The following statement contains a magic number: for (var i = ibStart; i < cbSize - ibStart; i++) {  	_hash = (_hash >> 8) ^ Table [array [i] ^ _hash & 0xff];  }  
Magic Number,Couchbase.Cryptography,Crc32,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Cryptography\Crc32.cs,HashCore,The following statement contains a magic number: _hash = (_hash >> 8) ^ Table [array [i] ^ _hash & 0xff];  
Magic Number,Couchbase.Cryptography,Crc32,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Cryptography\Crc32.cs,HashFinal,The following statement contains a magic number: _hash = ((~_hash) >> 16) & 0x7fff;  
Missing Default,Couchbase.Configuration.Client,ClientConfiguration,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Configuration\Client\ClientConfiguration.cs,SetAuthenticator,The following switch statement is missing a default case: switch (authenticator.AuthenticatorType) {  case AuthenticatorType.Classic:  	var classicAuthenticator = (ClassicAuthenticator)authenticator;  	if (string.IsNullOrWhiteSpace (classicAuthenticator.ClusterUsername)) {  		classicAuthenticator.ClusterUsername = username;  	}  	break;  case AuthenticatorType.Password:  	var passwordAuthenticator = (PasswordAuthenticator)authenticator;  	if (string.IsNullOrWhiteSpace (passwordAuthenticator.Username)) {  		passwordAuthenticator.Username = username;  	}  	break;  }  
Missing Default,Couchbase.N1QL,StreamingQueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\StreamingQueryResult.cs,ShouldRetry,The following switch statement is missing a default case: switch (Status) {  case QueryStatus.Success:  case QueryStatus.Errors:  case QueryStatus.Running:  case QueryStatus.Completed:  case QueryStatus.Stopped:  	break;  case QueryStatus.Timeout:  case QueryStatus.Fatal:  	var status = (int)HttpStatusCode;  	if (status > 399) {  		break;  	}  	retry = true;  	break;  }  
Missing Default,Couchbase.N1QL,QueryResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\N1QL\QueryResult.cs,ShouldRetry,The following switch statement is missing a default case: switch (Status) {  case QueryStatus.Success:  case QueryStatus.Errors:  case QueryStatus.Running:  case QueryStatus.Completed:  case QueryStatus.Stopped:  	break;  case QueryStatus.Timeout:  case QueryStatus.Fatal:  	var status = (int)HttpStatusCode;  	if (status > 399) {  		break;  	}  	retry = true;  	break;  }  
Missing Default,Couchbase.Views,ViewResult,F:\newReposMay17\couchbase_couchbase-net-client\Src\Couchbase\Views\ViewResult'.cs,CannotRetry,The following switch statement is missing a default case: switch (StatusCode) {  case HttpStatusCode.OK:  	break;  //300's  case HttpStatusCode.MultipleChoices:  case HttpStatusCode.MovedPermanently:  case HttpStatusCode.Found:  case HttpStatusCode.SeeOther:  case HttpStatusCode.NotModified:  case HttpStatusCode.TemporaryRedirect:  	cannotRetry = false;  	break;  //400's  case HttpStatusCode.NotFound:  	cannotRetry = Check404ForRetry ();  	break;  case HttpStatusCode.RequestTimeout:  case HttpStatusCode.Conflict:  case HttpStatusCode.PreconditionFailed:  case HttpStatusCode.RequestedRangeNotSatisfiable:  case HttpStatusCode.ExpectationFailed:  	cannotRetry = false;  	break;  //500's  case HttpStatusCode.InternalServerError:  	cannotRetry = Check500ForRetry ();  	break;  case HttpStatusCode.NotImplemented:  case HttpStatusCode.BadGateway:  case HttpStatusCode.ServiceUnavailable:  case HttpStatusCode.GatewayTimeout:  	cannotRetry = false;  	break;  }  
