Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Couchbase.UnitTests.Core.Logging,InMemoryLogger,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Logging\LogManagerTests.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Statement,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The length of the statement  "                new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 1' 0' 8091' DnsString.Parse("node1.somewhere.com."))' " is 156.
Long Statement,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The length of the statement  "                new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 0' 0' 8091' DnsString.Parse("node2.somewhere.com.")) " is 155.
Long Statement,Couchbase.UnitTests,MemcachedBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\MemcachedBucketTests.cs,Indexer_Throws_NotSupportedException_When_Name_Is_Not_Default,The length of the statement  "            await Assert.ThrowsAsync<NotSupportedException>(async () => { await bucket["xxxxx"].ConfigureAwait(false); }).ConfigureAwait(false); " is 132.
Long Statement,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Hydrate_Poco_In_PascalCase_Whatever_The_Case_In_Json,The length of the statement  "            byte[] jsonData = Encoding.UTF8.GetBytes("{ \"SomeProperty\": \"SOME\"' \"someIntProperty\": 12345' \"haspAscalCASE\": true }"); " is 128.
Long Statement,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Convert_To_CamelCase_Json_With_Default_Serialization_Settings,The length of the statement  "            var expectedJsonBytes = Encoding.UTF8.GetBytes("{\"someProperty\":\"SOME\"'\"someIntProperty\":12345'\"hasPascalCase\":true}"); " is 127.
Long Statement,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Convert_To_PascalCase_Json_With_Altered_Serialization_Settings,The length of the statement  "            var expectedJsonBytes = Encoding.UTF8.GetBytes("{\"SomeProperty\":\"SOME\"'\"SomeIntProperty\":12345'\"HasPascalCase\":true}"); " is 127.
Long Statement,Couchbase.UnitTests.Core.Logging,LogManagerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Logging\LogManagerTests.cs,Test_LogLevel_Debug,The length of the statement  "            Assert.Contains("Something happened."' loggerProvider.Logs["Couchbase.UnitTests.Core.Logging.LogManagerTests.Poco"][0]); " is 120.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new Get<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 122.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new Set<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 122.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new ReplicaRead<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 130.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new GetL<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 123.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new GetL<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 123.
Long Statement,Couchbase.UnitTests.Core.Retry,RetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new MultiLookup<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new NotMyVBucketException()}; " is 130.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new Set<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 122.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new Append<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 125.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new Prepend<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 126.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new MultiMutation<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 132.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new GetT<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 123.
Long Statement,Couchbase.UnitTests.Core.Retry,NotRetryTestData,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,GetEnumerator,The length of the statement  "                yield return new object[] {new GetL<dynamic> {RetryStrategy = new BestEffortRetryStrategy()}' new SocketClosedException()}; " is 123.
Long Statement,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_1_LocatePrimary_Returns_Random_Server,The length of the statement  "            var vbucket = new VBucket(new List<IPEndPoint>{}' 100' -1' new short[] { 0 }' 0' new VBucketServerMap{ ServerList = new []{ "127.0.0.1:10210" }}' "default"); " is 157.
Long Statement,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_Postive_LocatePrimary_Returns_It,The length of the statement  "                100' -1' new short[] { 0 }' 0' new VBucketServerMap { ServerList = new[] { "127.0.0.1:10210"' "127.0.0.2:10210" } }' "default"); " is 128.
Long Statement,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Hits_WhenSuccess_ReturnsValidData,The length of the statement  "               Assert.Equal("1.5 miles of the old Plymouth-Tavistock Great Western line' restored by local enthusiasts. Runs a number of old steam engines and other stock' which take visitors up this historic stretch of railway into Plym Woods."' first.Fields.First().Value); " is 260.
Long Statement,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_NumericRangeFacet,The length of the statement  "            var expected = "\"myNumericFacet\":{\"field\":\"fieldName\"'\"size\":2'\"numeric_ranges\":[{\"name\":\"range1\"'\"min\":0.1'\"max\":3.0}'{\"name\":\"range2\"'\"min\":3.1}]}"; " is 174.
Long Statement,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The length of the statement  "                new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)}); " is 124.
Long Statement,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_JsonStringIsValid,The length of the statement  "            //var expected = "{\"ctl\":{\"timeout\":10000'\"consistency\":{\"level\":\"at_plus\"'\"vectors\":{\"customerIndex\":{\"0\":123'\"1/a0b1c2\":234}}}}'\"query\":{\"query\":\"alice smith\"'\"boost\": 1}'\"size\": 10'\"from\":20'\"highlight\":{\"style\": null'\"fields\":null}'\"fields\":[\"*\"]'\"facets\":null'\"explain\":true}"; " is 326.
Long Statement,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_JsonStringIsValid,The length of the statement  "            var expected = "{\"ctl\":{\"timeout\":10000'\"consistency\":{\"level\":\"at_plus\"'\"vectors\":{}}}'\"size\":10'\"from\":20'\"explain\":true}"; " is 143.
Long Statement,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,When_BaseUri_Returns_BucketName_And_UUID_Bucket_Property_IsIgnored,The length of the statement  "            const string expected = "http://192.168.56.102:8092/beer-sample%2B179b38da638e51deee5bcf5be82d2093/_design/beer/_view/brewery_beers"; " is 133.
Long Statement,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,Test_Build_Basic_Query_Using_From_Limit_10_And_Start_and_EndKeys_With_Encode_False,The length of the statement  "            var expected = new Uri("http://127.0.0.1:8092/beer-sample/_design/beer/_view/brewery_beers?endkey=[\"aass_brewery\"]&limit=10&startkey=[\"21st_amendment_brewery_cafe\"]"); " is 171.
Long Statement,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,Test_Build_Basic_Query_Using_From_Limit_10_And_Start_and_EndKeys_2,The length of the statement  "            var expected = new Uri("http://127.0.0.1:8092/default/_design/test/_view/test_view?stale=update_after&endkey=\"doc3\"&limit=10&startkey=\"doc2\""); " is 147.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The length of the statement  "                {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 129.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The length of the statement  "                {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions()))  {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 130.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The length of the statement  "                {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 129.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The length of the statement  "                {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 129.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The length of the statement  "                {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 129.
Long Statement,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The length of the statement  "                {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}' " is 129.
Empty Catch Block,Couchbase.UnitTests.Core.IO.Errors,ErrorMapTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Errors\ErrorMapTests.cs,When_Status_Indicates_Failure_ErrorCode_Is_Populated,The method has an empty catch block.
Magic Number,Couchbase.UnitTests,ClusterOptionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\ClusterOptionsTests.cs,Test_ConfigPollInterval_Default_Is_2_5Seconds,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(2.5)' options.ConfigPollInterval);
Magic Number,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The following statement contains a magic number: var records = new List<SrvRecord>              {                  new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 1' 0' 8091' DnsString.Parse("node1.somewhere.com."))'                  new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 0' 0' 8091' DnsString.Parse("node2.somewhere.com."))              };
Magic Number,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The following statement contains a magic number: var records = new List<SrvRecord>              {                  new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 1' 0' 8091' DnsString.Parse("node1.somewhere.com."))'                  new SrvRecord(new ResourceRecordInfo("cb.somewhere.com"' ResourceRecordType.SRV' QueryClass.IN' 0' 0)' 0' 0' 8091' DnsString.Parse("node2.somewhere.com."))              };
Magic Number,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The following statement contains a magic number: Assert.Contains(result' uri => uri.Scheme == "couchbase" && uri.Host == "node1.somewhere.com" && uri.Port == 8091);
Magic Number,Couchbase.UnitTests,DnsClientResolverTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\DnsClientResolverTests.cs,QueryReturnsUrisForSrvEntries,The following statement contains a magic number: Assert.Contains(result' uri => uri.Scheme == "couchbase" && uri.Host == "node2.somewhere.com" && uri.Port == 8091);
Magic Number,Couchbase.UnitTests,MemcachedBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\MemcachedBucketTests.cs,Indexer_Succeeds_When_Name_Is_Default,The following statement contains a magic number: mockClusterNode.Setup(x => x.EndPoint).Returns(localhost.GetIpEndPoint(8091' false));
Magic Number,Couchbase.UnitTests,MemcachedBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\MemcachedBucketTests.cs,ScopeAsync_Succeeds_When_Name_Is_Default,The following statement contains a magic number: mockClusterNode.Setup(x => x.EndPoint).Returns(localhost.GetIpEndPoint(8091' false));
Magic Number,Couchbase.UnitTests,MemcachedBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\MemcachedBucketTests.cs,ScopeAsync_Throws_NotSupportedException_When_Name_Is_Not_Default,The following statement contains a magic number: mockClusterNode.Setup(x => x.EndPoint).Returns(localhost.GetIpEndPoint(8091' false));
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Publish_GreaterRevisionExcepted,The following statement contains a magic number: var config2 = new BucketConfig              {                  Name = "default"'                  Rev = 3              };
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Context_ConfigChanged,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Publish_LesserRevisionIgnored,The following statement contains a magic number: var config1 = new BucketConfig              {                  Name = "default"'                  Rev = 5              };
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Publish_LesserRevisionIgnored,The following statement contains a magic number: var config2 = new BucketConfig              {                  Name = "default"'                  Rev = 3              };
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Publish_EqualRevisionIgnored,The following statement contains a magic number: var config1 = new BucketConfig              {                  Name = "default"'                  Rev = 3              };
Magic Number,Couchbase.UnitTests.Core.Configuration,ConfigHandlerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\ConfigContextTests.cs,Publish_EqualRevisionIgnored,The following statement contains a magic number: var config2 = new BucketConfig              {                  Name = "default"'                  Rev = 3              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,IsAnalyticsNode_Is_True_When_Port_Is_Provided,The following statement contains a magic number: var nodeExt = new NodesExt              {                  Hostname = "localhost"'                  Services = {Cbas = 8095}              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,IsAnalyticsNode_Is_True_When_Port_Is_Provided,The following statement contains a magic number: Assert.Equal(8095' adapater.Analytics);
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,IsAnalyticsNodeSsl_Is_True_When_Port_Is_Provided,The following statement contains a magic number: var nodeExt = new NodesExt              {                  Hostname = "localhost"'                  Services = {CbasSsl = 18095}              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,IsAnalyticsNodeSsl_Is_True_When_Port_Is_Provided,The following statement contains a magic number: Assert.Equal(18095' adapater.AnalyticsSsl);
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_Node_is_null_Kv_service_should_be_disabled,The following statement contains a magic number: var nodeExt = new NodesExt              {                  Hostname = hostname'                  Services = new Couchbase.Core.Configuration.Server.Services                  {                      Kv = 11210 // nodeEXt has KV port' but node is null                  }              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var defaultServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 1'                  CbasSsl = 2'                  Capi = 3'                  CapiSsl = 4'                  Fts = 5'                  FtsSsl = 6'                  Kv = 1'                  KvSsl = 2'                  N1Ql = 9'                  N1QlSsl = 10              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.Configuration.Server,NodeAdapterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Configuration\Server\NodeAdapterTests.cs,When_NodeExt_Has_Alternate_Network_With_Ports_Configured_Use_External_Ports,The following statement contains a magic number: var externalServices = new Couchbase.Core.Configuration.Server.Services              {                  Cbas = 10'                  CbasSsl = 20'                  Capi = 30'                  CapiSsl = 40'                  Fts = 50'                  FtsSsl = 60'                  Kv = 10'                  KvSsl = 20'                  N1Ql = 90'                  N1QlSsl = 100              };
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromString,The following statement contains a magic number: var buffer = new byte[32];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromInt16,The following statement contains a magic number: var actual = new byte[8];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromInt16_NoNboSpecified,The following statement contains a magic number: var actual = new byte[8];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromUInt16,The following statement contains a magic number: var actual = new byte[8];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromUInt16_NoNboSpecified,The following statement contains a magic number: var actual = new byte[8];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromInt32,The following statement contains a magic number: var actual = new byte[11];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromInt32_NoNboSpecified,The following statement contains a magic number: var actual = new byte[11];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromUInt32,The following statement contains a magic number: var actual = new byte[11];
Magic Number,Couchbase.UnitTests.Core.IO.Converters,DefaultConverterTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Converters\DefaultConverterTests.cs,Test_FromUInt32_NoNboSpecified,The following statement contains a magic number: var actual = new byte[11];
Magic Number,Couchbase.UnitTests.Core.IO.Errors,ErrorMapTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Errors\ErrorMapTests.cs,When_Status_Indicates_Failure_ErrorCode_Is_Populated,The following statement contains a magic number: await node.ExecuteOp(insert' CancellationToken.None' TimeSpan.FromMinutes(5));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_Int16,The following statement contains a magic number: Int16 data = 5;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_UInt16,The following statement contains a magic number: UInt16 data = 5;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_Int32,The following statement contains a magic number: Int32 data = 9;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_UInt32,The following statement contains a magic number: UInt32 data = 9;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_Int64,The following statement contains a magic number: Int64 data = 9;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Serialize_UInt64,The following statement contains a magic number: UInt64 data = 9;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Deserialize_Int,The following statement contains a magic number: var five = 5;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Test_Json_Deserialize_Int,The following statement contains a magic number: int value = 42;
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Hydrate_Poco_In_PascalCase_Whatever_The_Case_In_Json,The following statement contains a magic number: Assert.Equal(12345' hydrated.SomeIntProperty);
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Convert_To_CamelCase_Json_With_Default_Serialization_Settings,The following statement contains a magic number: var data = new Pascal              {                  SomeProperty = "SOME"'                  SomeIntProperty = 12345'                  HasPascalCase = true              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,Should_Convert_To_PascalCase_Json_With_Altered_Serialization_Settings,The following statement contains a magic number: var data = new Pascal              {                  SomeProperty = "SOME"'                  SomeIntProperty = 12345'                  HasPascalCase = true              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var legacyByteArray = new byte[]              {                  129' 0' 0' 0' 4' 0' 0' 0' 0' 0' 0' 8' 0'                  0' 0' 5' 19' 185' 8' 248' 3' 104' 208' 188' 0'                  0' 250' 82' 116' 101' 115' 116              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var temp = legacyByteArray[24];
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(temp' 2));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref format' 2' BitUtils.GetBit(temp' 2));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(temp' 3));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref format' 3' BitUtils.GetBit(temp' 3));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(temp' 4));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 4' BitUtils.GetBit(temp' 4));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(temp' 5));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 5' BitUtils.GetBit(temp' 5));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(temp' 6));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: BitUtils.SetBit(ref compression' 6' BitUtils.GetBit(temp' 6));
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var flags = new Flags              {                  DataFormat = (DataFormat)format'                  Compression = (Compression)compression'                  TypeCode = (TypeCode)(converter.ToUInt16(legacyByteArray.AsSpan(26)) & 0xff)'              };
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var result = transcoder.Decode<byte[]>(legacyByteArray.AsMemory(28' 4)' flags' OpCode.Get);
Magic Number,Couchbase.UnitTests.Core.IO.Transcoders,DefaultTranscoderTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\IO\Transcoders\DefaultTranscoderTests.cs,When_ByteArray_Is_Stored_With_Legacy_Flags_It_Is_Decoded_As_A_ByteArray,The following statement contains a magic number: var result = transcoder.Decode<byte[]>(legacyByteArray.AsMemory(28' 4)' flags' OpCode.Get);
Magic Number,Couchbase.UnitTests.Core.Logging,LogManagerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Logging\LogManagerTests.cs,Test_LogLevel_Debug,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var testData = new Dictionary<uint' int>              {                  {0' 1}'                  {1' 3}'                  {2' 7}'                  {3' 15}'                  {4' 31}'                  {5' 63}'                  {6' 127}'                  {7' 255}'                  {8' 500}'                  {9' 500}              };
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var backoff = ExponentialBackoff.Create(100' 1' 500);
Magic Number,Couchbase.UnitTests.Core.Retry,ExponentialBackoffTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\ExponentialBackoffTests.cs,Test_Calculate,The following statement contains a magic number: var backoff = ExponentialBackoff.Create(100' 1' 500);
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,AssertRetryAsync,The following statement contains a magic number: var tokenSource = new CancellationTokenSource(TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,AssertRetryAsync,The following statement contains a magic number: await RetryOrchestrator.RetryAsync(bucketMock.Object' op' tokenSource.Token'                      TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,Operation_Succeeds_Without_Retry,The following statement contains a magic number: var tokenSource = new CancellationTokenSource(TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,Operation_Succeeds_Without_Retry,The following statement contains a magic number: await RetryOrchestrator.RetryAsync(bucketMock.Object' op' tokenSource.Token'                  TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,AssertDoesNotRetryAsync,The following statement contains a magic number: var tokenSource = new CancellationTokenSource(TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Retry,RetryOrchestratorTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Retry\RetryOrchestratorTests.cs,AssertDoesNotRetryAsync,The following statement contains a magic number: await bucketMock.Object.RetryAsync(op' tokenSource.Token' TimeSpan.FromMilliseconds(2500));
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketKeyMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketKeyMapperTests.cs,Test_That_Key_XXXXX_Maps_To_VBucket_389,The following statement contains a magic number: const int actual = 389;
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_BucketConfig_Has_Replicas_VBucketKeyMapper_Replica_Count_Is_Equal,The following statement contains a magic number: const int expected = 3;
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_OOR_LocatePrimary_Returns_Random_Server,The following statement contains a magic number: var vbucket =                  new VBucket(new List<IPEndPoint>                  {                      IpEndPointExtensions.GetEndPoint("127.0.0.1:10210")'                      IpEndPointExtensions.GetEndPoint("127.0.0.2:10210")                  }'                  100' -1' new short[] {2}' 0' new VBucketServerMap {ServerList = new []{"127.0.0.1:10210"}}' "default");
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_OOR_LocatePrimary_Returns_Random_Server,The following statement contains a magic number: var vbucket =                  new VBucket(new List<IPEndPoint>                  {                      IpEndPointExtensions.GetEndPoint("127.0.0.1:10210")'                      IpEndPointExtensions.GetEndPoint("127.0.0.2:10210")                  }'                  100' -1' new short[] {2}' 0' new VBucketServerMap {ServerList = new []{"127.0.0.1:10210"}}' "default");
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_1_LocatePrimary_Returns_Random_Server,The following statement contains a magic number: var vbucket = new VBucket(new List<IPEndPoint>{}' 100' -1' new short[] { 0 }' 0' new VBucketServerMap{ ServerList = new []{ "127.0.0.1:10210" }}' "default");
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_Negative_LocatePrimary_Returns_Random_Server,The following statement contains a magic number: var vbucket =                  new VBucket(new List<IPEndPoint>                  {                      IpEndPointExtensions.GetEndPoint("127.0.0.1:10210")'                      IpEndPointExtensions.GetEndPoint("127.0.0.2:10210")                  }'                  100' -1' new short[] { -1 }' 0'  new VBucketServerMap{ ServerList = new[] { "127.0.0.1:10210" }}' "default");
Magic Number,Couchbase.UnitTests.Core.Sharding,VBucketTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Sharding\VBucketTests.cs,When_Replica_Index_Postive_LocatePrimary_Returns_It,The following statement contains a magic number: var vbucket =                  new VBucket(new List<IPEndPoint>                  {                      IpEndPointExtensions.GetEndPoint("127.0.0.1:10210")'                      IpEndPointExtensions.GetEndPoint("127.0.0.2:10210")                  }'                  100' -1' new short[] { 0 }' 0' new VBucketServerMap { ServerList = new[] { "127.0.0.1:10210"' "127.0.0.2:10210" } }' "default");
Magic Number,Couchbase.UnitTests.Core.Utils,Leb128Tests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Utils\Leb128Tests.cs,Test_Write,The following statement contains a magic number: var bytes = new byte[5];
Magic Number,Couchbase.UnitTests.Core.Utils,Leb128Tests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Utils\Leb128Tests.cs,Parse,The following statement contains a magic number: var cid = Convert.ToUInt32(value' 16);
Magic Number,Couchbase.UnitTests.Core.Utils,Leb128Tests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Core\Utils\Leb128Tests.cs,Parse,The following statement contains a magic number: Assert.Equal(cid <= 1000' lessThan);
Magic Number,Couchbase.UnitTests.Management,SearchClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Management\SearchClientTests.cs,SearchQueriesUseCorrectPath,The following statement contains a magic number: mockClusterNode.Setup(x => x.EndPoint).Returns(new IPEndPoint(IPAddress.Any' 8091));
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,Client_sets_AnalyticsPriority_Header,The following statement contains a magic number: context.AddNode(new ClusterNode(context)              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,Client_sets_AnalyticsPriority_Header,The following statement contains a magic number: context.AddNode(new ClusterNode(context)              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,Query_Sets_LastActivity,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))                  {                      AnalyticsUri = new Uri("http://localhost:8094/query")'                      EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                      NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,Query_Sets_LastActivity,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))                  {                      AnalyticsUri = new Uri("http://localhost:8094/query")'                      EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                      NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,QueryAsync_Sets_LastActivity,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,QueryAsync_Sets_LastActivity,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,When_deferred_is_true_query_result_is_DeferredAnalyticsResult,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsClientTests.cs,When_deferred_is_true_query_result_is_DeferredAnalyticsResult,The following statement contains a magic number: context.AddNode(new ClusterNode(new ClusterContext(null' new ClusterOptions()))              {                  AnalyticsUri = new Uri("http://localhost:8094/query")'                  EndPoint = new IPEndPoint(IPAddress.Loopback' 8091)'                  NodesAdapter = new NodeAdapter { Analytics = 8094 }              });
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Request_auto_generates_context_and_request_Ids,The following statement contains a magic number: Assert.Equal(2' parts.Length);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_set_client_context_id,The following statement contains a magic number: Assert.Equal(2' parts.Length);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Default_timeout_is_75_seconds,The following statement contains a magic number: request.ConfigureLifespan(75);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_set_timeout,The following statement contains a magic number: request.Timeout(TimeSpan.FromSeconds(15));
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_set_timeout,The following statement contains a magic number: request.ConfigureLifespan(75);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_named_parameter,The following statement contains a magic number: request.AddNamedParameter("my_int"' 10);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_named_parameter,The following statement contains a magic number: Assert.Equal(10' formValues["my_int"]);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_named_parameter,The following statement contains a magic number: Assert.Equal(10' json.my_int.Value);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_positional_parameter,The following statement contains a magic number: request.AddPositionalParameter(10);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_positional_parameter,The following statement contains a magic number: Assert.Equal(10' args[1]);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_positional_parameter,The following statement contains a magic number: Assert.Equal(true' args[2]);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_positional_parameter,The following statement contains a magic number: Assert.Equal(10' json.args[1].Value);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_add_positional_parameter,The following statement contains a magic number: Assert.Equal(true' json.args[2].Value);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_set_priority,The following statement contains a magic number: request.Priority(5);
Magic Number,Couchbase.UnitTests.Services.Analytics,AnalyticsRequestTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Analytics\AnalyticsRequestTests.cs,Can_set_priority,The following statement contains a magic number: Assert.Equal(5' request.PriorityValue);
Magic Number,Couchbase.UnitTests.Services.Query,QueryClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Query\QueryClientTests.cs,Test,The following statement contains a magic number: var clusterNode = new ClusterNode(context)                  {                      EndPoint = new Uri("http://localhost:8091").GetIpEndPoint(8091' false)'                      NodesAdapter = new NodeAdapter(new Node {Hostname = "127.0.0.1"}'                          new NodesExt {Hostname = "127.0.0.1"' Services = new Couchbase.Core.Configuration.Server.Services                          {                              N1Ql = 8093                          }}' new BucketConfig())                  };
Magic Number,Couchbase.UnitTests.Services.Query,QueryClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Query\QueryClientTests.cs,Test,The following statement contains a magic number: var clusterNode = new ClusterNode(context)                  {                      EndPoint = new Uri("http://localhost:8091").GetIpEndPoint(8091' false)'                      NodesAdapter = new NodeAdapter(new Node {Hostname = "127.0.0.1"}'                          new NodesExt {Hostname = "127.0.0.1"' Services = new Couchbase.Core.Configuration.Server.Services                          {                              N1Ql = 8093                          }}' new BucketConfig())                  };
Magic Number,Couchbase.UnitTests.Services.Search,BooleanQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\BooleanQueryTests.cs,Boost_ReturnsBooleanQuery,The following statement contains a magic number: var query = new BooleanQuery().Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,BooleanQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\BooleanQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,BooleanQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\BooleanQueryTests.cs,Can_add_should_query_with_boost,The following statement contains a magic number: new BooleanQuery()                  .Should(new MatchQuery("term1").Field("field1").Boost(2.0));
Magic Number,Couchbase.UnitTests.Services.Search,BooleanQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\BooleanQueryTests.cs,Can_add_must_query_with_boost,The following statement contains a magic number: new BooleanQuery()                  .Must(new MatchQuery("term1").Field("field1").Boost(2.0));
Magic Number,Couchbase.UnitTests.Services.Search,BooleanQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\BooleanQueryTests.cs,Can_add_mustnot_query_with_boost,The following statement contains a magic number: new BooleanQuery()                  .MustNot(new MatchQuery("term1").Field("field1").Boost(2.0));
Magic Number,Couchbase.UnitTests.Services.Search,ConjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\ConjunctionQueryTests.cs,Boost_ReturnsConjunctionQuery,The following statement contains a magic number: var query = new ConjunctionQuery().Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,ConjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\ConjunctionQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,ConjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\ConjunctionQueryTests.cs,Can_create_conjunction_that_includes_query_with_boost,The following statement contains a magic number: new ConjunctionQuery(                  new MatchQuery("term1").Field("field1").Boost(2.0)              );
Magic Number,Couchbase.UnitTests.Services.Search,ConjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\ConjunctionQueryTests.cs,Can_add_query_with_boost,The following statement contains a magic number: new ConjunctionQuery()                  .And(new MatchQuery("term1").Field("field1").Boost(2.0));
Magic Number,Couchbase.UnitTests.Services.Search,DateRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DateRangeQueryTests.cs,Boost_ReturnsDateRangeQuery,The following statement contains a magic number: var query = new DateRangeQuery().Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,DateRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DateRangeQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,DisjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DisjunctionQueryTests.cs,Boost_ReturnsDisjunctionQuery,The following statement contains a magic number: var query = new DisjunctionQuery().Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,DisjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DisjunctionQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,DisjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DisjunctionQueryTests.cs,Can_create_disjunction_that_includes_query_with_boost,The following statement contains a magic number: new DisjunctionQuery(                  new MatchQuery("term1").Field("field1").Boost(2.0)              );
Magic Number,Couchbase.UnitTests.Services.Search,DisjunctionQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\DisjunctionQueryTests.cs,Can_add_query_with_boost,The following statement contains a magic number: new DisjunctionQuery()                  .Or(new MatchQuery("term1").Field("field1").Boost(2.0));
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4)                  .Field("bar");
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4)                  .Field("bar");
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4)                  .Field("bar");
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] {1.0' 2.0}'                  bottom_right = new[] {3.0' 4.0}'                  field = "bar"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] {1.0' 2.0}'                  bottom_right = new[] {3.0' 4.0}'                  field = "bar"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] {1.0' 2.0}'                  bottom_right = new[] {3.0' 4.0}'                  field = "bar"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new GeoBoundingBoxQuery()                  .TopLeft(1' 2)                  .BottomRight(3' 4);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] { 1.0' 2.0 }'                  bottom_right = new[] { 3.0' 4.0 }              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] { 1.0' 2.0 }'                  bottom_right = new[] { 3.0' 4.0 }              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  top_left = new[] { 1.0' 2.0 }'                  bottom_right = new[] { 3.0' 4.0 }              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Throws_InvalidOperationException_When_Required_Properties_Are_Missing,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => new GeoBoundingBoxQuery().TopLeft(1' 2).Export());
Magic Number,Couchbase.UnitTests.Services.Search,GeoBoundingBoxQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoBoundingBoxQueryTests.cs,Throws_InvalidOperationException_When_Required_Properties_Are_Missing,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => new GeoBoundingBoxQuery().BottomRight(1' 2).Export());
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new GeoDistanceQuery()                  .Longitude(1.5)                  .Latitude(2.0)                  .Distance("10mi")                  .Field("bar");
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new GeoDistanceQuery()                  .Longitude(1.5)                  .Latitude(2.0)                  .Distance("10mi")                  .Field("bar");
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  location = new [] { 1.5' 2.0}'                  distance = "10mi"'                  field = "bar"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  location = new [] { 1.5' 2.0}'                  distance = "10mi"'                  field = "bar"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new GeoDistanceQuery()                  .Longitude(1.5)                  .Latitude(2.0)                  .Distance("10mi");
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new GeoDistanceQuery()                  .Longitude(1.5)                  .Latitude(2.0)                  .Distance("10mi");
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  location = new [] { 1.5' 2.0 }'                  distance = "10mi"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  location = new [] { 1.5' 2.0 }'                  distance = "10mi"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Outputs_Valid_Json,The following statement contains a magic number: var sort = new GeoDistanceSearchSort(0.1' -0.2' "foo"' "mi"' true);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Outputs_Valid_Json,The following statement contains a magic number: var sort = new GeoDistanceSearchSort(0.1' -0.2' "foo"' "mi"' true);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Outputs_Valid_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  by = "geo_distance"'                  desc = true'                  location = new [] { 0.1' -0.2}'                  field = "foo"'                  unit = "mi"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Outputs_Valid_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  by = "geo_distance"'                  desc = true'                  location = new [] { 0.1' -0.2}'                  field = "foo"'                  unit = "mi"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Omits_Unit_If_Null_Or_Empty,The following statement contains a magic number: var sort = new GeoDistanceSearchSort(0.1' -0.2' "foo"' unit' true);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Omits_Unit_If_Null_Or_Empty,The following statement contains a magic number: var sort = new GeoDistanceSearchSort(0.1' -0.2' "foo"' unit' true);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Omits_Unit_If_Null_Or_Empty,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  by = "geo_distance"'                  desc = true'                  location = new[] { 0.1' -0.2 }'                  field = "foo"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,GeoDistanceSearchSortTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\GeoDistanceSearchSortTests.cs,Omits_Unit_If_Null_Or_Empty,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  by = "geo_distance"'                  desc = true'                  location = new[] { 0.1' -0.2 }'                  field = "foo"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,MatchPhraseQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchPhraseQueryTests.cs,Boost_ReturnsMatchPhraseQuery,The following statement contains a magic number: var query = new MatchPhraseQuery("phrase").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,MatchPhraseQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchPhraseQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Boost_ReturnsPrefixQuery,The following statement contains a magic number: var query = new MatchQuery("somematchquery").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new MatchQuery("somematchquery")                  .Field("field")                  .PrefixLength(5)                  .Fuzziness(10)                  .Analyzer("analyzer");
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new MatchQuery("somematchquery")                  .Field("field")                  .PrefixLength(5)                  .Fuzziness(10)                  .Analyzer("analyzer");
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  match = "somematchquery"'                  prefix_length = 5'                  fuzziness = 10'                  field = "field"'                  analyzer = "analyzer"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,MatchQueryQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\MatchQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  match = "somematchquery"'                  prefix_length = 5'                  fuzziness = 10'                  field = "field"'                  analyzer = "analyzer"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Boost_Returns_NumericRangeQuery,The following statement contains a magic number: var query = new NumericRangeQuery().Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Export_Returns_Valud_Json,The following statement contains a magic number: var query = new NumericRangeQuery()                  .Min(1)                  .Max(10)                  .Field("field");
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Export_Returns_Valud_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  min = 1.0'                  inclusive_min = true'                  max = 10.0'                  inclusive_max = false'                  field = "field"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new NumericRangeQuery()                  .Min(1)                  .Max(10);
Magic Number,Couchbase.UnitTests.Services.Search,NumericRangeQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\NumericRangeQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  min = 1.0'                  inclusive_min = true'                  max = 10.0'                  inclusive_max = false              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,PrefixQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\PrefixQueryTests.cs,Boost_ReturnsPrefixQuery,The following statement contains a magic number: var query = new PrefixQuery("prefix").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,PrefixQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\PrefixQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,QueryStringQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\QueryStringQueryTests.cs,Boost_ReturnsStringQuery,The following statement contains a magic number: var query = new QueryStringQuery("description:water and some other stuff").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,QueryStringQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\QueryStringQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,RegexpQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\RegexpQueryTests.cs,Boost_ReturnsRegexQuery,The following statement contains a magic number: var query = new RegexpQuery("*").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,RegexpQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\RegexpQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Success_Is_False_When_Errors_Returned,The following statement contains a magic number: Assert.Equal(6' result.MetaData.ErrorCount);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Count_WhenSuccess_Returns32,The following statement contains a magic number: Assert.Equal(32' result.MetaData.SuccessCount);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,MaxScore_WhenSuccess_ReturnsDouble,The following statement contains a magic number: Assert.Equal(0.907210290772297' result.MetaData.MaxScore);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Took_WhenSuccess_Returns123165714,The following statement contains a magic number: Assert.Equal(new TimeSpan(123165714)' result.MetaData.TimeTook);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,TotalHits_WhenSuccess_Returns116,The following statement contains a magic number: Assert.Equal(116' result.MetaData.TotalHits);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,HitsCount_WhenSuccess_ReturnsPageSize,The following statement contains a magic number: Assert.Equal(10' result.Hits.Count);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Hits_WhenSuccess_ReturnsValidData,The following statement contains a magic number: Assert.Equal(0.907210290772297' first.Score);
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,FtsDataMapperTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchDataMapperTests.cs,Facets_Are_Populated_When_Result_Contains_Facets,The following statement contains a magic number: var expectedFacets = JsonConvert.SerializeObject(new              {                  category = new TermFacetResult                  {                      Name = "category"'                      Field = "term_field"'                      Total = 100'                      Missing = 65'                      Other = 35'                      Terms = new[]                      {                          new Term {Name = "term1"' Count = 10}                      }                  }'                  strength = new NumericRangeFacetResult                  {                      Name = "strength"'                      Field = "numeric_field"'                      Total = 13'                      Missing = 11'                      Other = 2'                      NumericRanges = new[]                      {                          new NumericRange {Name = "numeric1"' Min = 0.1f' Max = 0.2f' Count = 50}                      }                  }'                  updateRange = new DateRangeFacetResult                  {                      Name = "updateRange"'                      Field = "daterange_field"'                      Total = 65'                      Missing = 43'                      Other = 22'                      DateRanges = new[]                      {                          new DateRange                          {                              Name = "daterange1"'                              Start = new DateTime(2017' 1' 1)'                              End = new DateTime(2017' 1' 2)'                              Count = 54                          }                      }                  }              }' new JsonSerializerSettings              {                  ContractResolver = new CamelCasePropertyNamesContractResolver()              });
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_TermFacet,The following statement contains a magic number: var term = new TermFacet              {                  Field = "fieldName"'                  Name = "myTermFacet"'                  Size = 3              };
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_NumericRangeFacet,The following statement contains a magic number: var term = new NumericRangeFacet              {                  Field = "fieldName"'                  Name = "myNumericFacet"'                  Size = 2'              }.AddRanges(                  new Range<float>{ Name = "range1"' Start = 0.1F' End = 3.0F }'                  new Range<float> {Name = "range2"' Start = 3.1F});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_NumericRangeFacet,The following statement contains a magic number: var term = new NumericRangeFacet              {                  Field = "fieldName"'                  Name = "myNumericFacet"'                  Size = 2'              }.AddRanges(                  new Range<float>{ Name = "range1"' Start = 0.1F' End = 3.0F }'                  new Range<float> {Name = "range2"' Start = 3.1F});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_NumericRangeFacet,The following statement contains a magic number: var term = new NumericRangeFacet              {                  Field = "fieldName"'                  Name = "myNumericFacet"'                  Size = 2'              }.AddRanges(                  new Range<float>{ Name = "range1"' Start = 0.1F' End = 3.0F }'                  new Range<float> {Name = "range2"' Start = 3.1F});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_NumericRangeFacet,The following statement contains a magic number: var term = new NumericRangeFacet              {                  Field = "fieldName"'                  Name = "myNumericFacet"'                  Size = 2'              }.AddRanges(                  new Range<float>{ Name = "range1"' Start = 0.1F' End = 3.0F }'                  new Range<float> {Name = "range2"' Start = 3.1F});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchFacetTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchFacetTests.cs,ToString_DateRangeFacet,The following statement contains a magic number: var term = new DateRangeFacet              {                  Field = "fieldName"'                  Name = "myDateFacet"'                  Size = 2'              }.AddRanges(                  new Range<DateTime> {Name = "old"' End = new DateTime(2016' 01' 01)}'                  new Range<DateTime> {Name = "thisYear"' Start = new DateTime(2016' 01' 01' 0' 0' 1)}'                  new Range<DateTime> {Name = "theYear2011"' Start = new DateTime(2011' 01' 01)' End = new DateTime(2011' 12' 31' 23'59'59)});
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_JsonStringIsValid,The following statement contains a magic number: var searchParams = new SearchQuery().                  Skip(20).                  Limit(10).Explain(true).                  Timeout(TimeSpan.FromMilliseconds(10000)).  #pragma warning disable 618                  WithConsistency(ScanConsistency.AtPlus);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_JsonStringIsValid,The following statement contains a magic number: var searchParams = new SearchQuery().                  Skip(20).                  Limit(10).Explain(true).                  Timeout(TimeSpan.FromMilliseconds(10000)).  #pragma warning disable 618                  WithConsistency(ScanConsistency.AtPlus);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_JsonStringIsValid,The following statement contains a magic number: var searchParams = new SearchQuery().                  Skip(20).                  Limit(10).Explain(true).                  Timeout(TimeSpan.FromMilliseconds(10000)).  #pragma warning disable 618                  WithConsistency(ScanConsistency.AtPlus);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_WithFacets,The following statement contains a magic number: var searchParams = new SearchQuery().Facets(                  new TermFacet("termfacet"' "thefield"' 10)'                  new DateRangeFacet("daterangefacet"' "thefield"' 10).AddRange(DateTime.Now' DateTime.Now.AddDays(1))'                  new NumericRangeFacet("numericrangefacet"' "thefield"' 2).AddRange(2.2f' 3.5f));
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_WithFacets,The following statement contains a magic number: var searchParams = new SearchQuery().Facets(                  new TermFacet("termfacet"' "thefield"' 10)'                  new DateRangeFacet("daterangefacet"' "thefield"' 10).AddRange(DateTime.Now' DateTime.Now.AddDays(1))'                  new NumericRangeFacet("numericrangefacet"' "thefield"' 2).AddRange(2.2f' 3.5f));
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_WithFacets,The following statement contains a magic number: var searchParams = new SearchQuery().Facets(                  new TermFacet("termfacet"' "thefield"' 10)'                  new DateRangeFacet("daterangefacet"' "thefield"' 10).AddRange(DateTime.Now' DateTime.Now.AddDays(1))'                  new NumericRangeFacet("numericrangefacet"' "thefield"' 2).AddRange(2.2f' 3.5f));
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_WithFacets,The following statement contains a magic number: var searchParams = new SearchQuery().Facets(                  new TermFacet("termfacet"' "thefield"' 10)'                  new DateRangeFacet("daterangefacet"' "thefield"' 10).AddRange(DateTime.Now' DateTime.Now.AddDays(1))'                  new NumericRangeFacet("numericrangefacet"' "thefield"' 2).AddRange(2.2f' 3.5f));
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,ToJson_WithFacets,The following statement contains a magic number: var searchParams = new SearchQuery().Facets(                  new TermFacet("termfacet"' "thefield"' 10)'                  new DateRangeFacet("daterangefacet"' "thefield"' 10).AddRange(DateTime.Now' DateTime.Now.AddDays(1))'                  new NumericRangeFacet("numericrangefacet"' "thefield"' 2).AddRange(2.2f' 3.5f));
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,Test_HighLightStyle_Html_And_Fields_Returns_LowerCase,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  ctl = new                  {                      timeout = 75000                  }'                  highlight = new                  {                      style="html"'                      fields = new [] {"inn"}                  }'                  query=new {match="inn"' prefix_length=0' fuzziness=0}              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,Sort_Adds_FieldNames_To_Output_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  ctl = new                  {                      timeout = 75000                  }'                  sort = fields              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,Sort_SearchSort_To_Output_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  ctl = new                  {                      timeout = 75000                  }'                  sort = new[]                  {                      new                      {                          by = "id"                      }                  }              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,SearchParamsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchParamsTests.cs,Sort_JObject_To_Output_Json,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  ctl = new                  {                      timeout = 75000                  }'                  sort = new []                  {                      new                      {                          foo = "bar"                      }                  }              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,SearchQueryResultTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\SearchQueryResultTests.cs,Should_return_true_if_status_code_is_429,The following statement contains a magic number: var result = new SearchResult              {                  HttpStatusCode = (HttpStatusCode) 429              };
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Boost_ReturnsFuzzyQuery,The following statement contains a magic number: var query = new TermQuery("theterm").Boost(2.2);
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Boost_WhenBoostIsLessThanZero_ThrowsArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => query.Boost(-.1));
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var query = new TermQuery("theterm")                  .Field("field")                  .PrefixLength(5)                  .Fuzziness(1);
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Export_ReturnsValidJson,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  term = "theterm"'                  prefix_length = 5'                  fuzziness = 1'                  field = "field"              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var query = new TermQuery("theterm")                  .PrefixLength(5)                  .Fuzziness(1);
Magic Number,Couchbase.UnitTests.Services.Search,TermQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Search\TermQueryTests.cs,Export_Omits_Field_If_Not_Provided,The following statement contains a magic number: var expected = JsonConvert.SerializeObject(new              {                  term = "theterm"'                  prefix_length = 5'                  fuzziness = 1              }' Formatting.None);
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,ViewClient_Submits_ViewQuery_Using_Post,The following statement contains a magic number: var keys = Enumerable.Range(1' 10).Select(i => $"key-{i}").ToList();
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,Test_Count,The following statement contains a magic number: Assert.Equal(10' response.Rows.Count());
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,Test_Enumeration,The following statement contains a magic number: Assert.Equal(10' count);
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,Test_Repeat_Enumeration,The following statement contains a magic number: Assert.Equal(10' response.Rows.ToList().Count);
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,Test_Values,The following statement contains a magic number: Assert.Equal(10' response.Rows.Count());
Magic Number,Couchbase.UnitTests.Services.Views,ViewClientTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewClientTests.cs,Test_TotalRows,The following statement contains a magic number: Assert.Equal(7303u' response.MetaData.TotalRows);
Magic Number,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,Test_Build_Basic_Query_Using_From_Limit_10,The following statement contains a magic number: var query = new ViewQuery("default"' baseUri).                  From("cities"' "by_name").                  Limit(10);
Magic Number,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,Test_Build_Basic_Query_Using_From_Limit_10_And_Start_and_EndKeys_With_Encode_False,The following statement contains a magic number: var query = new ViewQuery("beer-sample"' baseUri).                  From("beer"' "brewery_beers").                  StartKey("[\"21st_amendment_brewery_cafe\"]"' false).                  EndKey("[\"aass_brewery\"]"' false).                  Limit(10);
Magic Number,Couchbase.UnitTests.Services.Views,ViewQueryTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Services\Views\ViewQueryTests.cs,Test_Build_Basic_Query_Using_From_Limit_10_And_Start_and_EndKeys_2,The following statement contains a magic number: var query = new ViewQuery("default"' baseUri).                  From("test"' "test_view").                  StartKey("doc2").                  EndKey("doc3").                  Stale(StaleState.UpdateAfter).                  Limit(10);
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions()))  {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions()))  {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions()))  {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ArrayExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ArrayExtensionTests.cs,GetRandom_Where_Clause_No_Matches,The following statement contains a magic number: var dict = new Dictionary<string' ClusterNode>              {                  {"127.0.0.1"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.2"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'                  {"127.0.0.3"' new ClusterNode(new ClusterContext(null' new ClusterOptions())) {NodesAdapter =  new NodeAdapter(){Views = 8092}}}'              };
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_hosts,The following statement contains a magic number: Assert.Equal(2' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_hosts,The following statement contains a magic number: Assert.Equal(3' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_hosts,The following statement contains a magic number: Assert.Equal("baz"' parsed.Hosts[2]);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_parameters,The following statement contains a magic number: Assert.Equal(2' parsed.Parameters.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_username,The following statement contains a magic number: Assert.Equal(2' parsed.Parameters.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_multiple_ipv6_without_port,The following statement contains a magic number: Assert.Equal(2' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_multiple_ipv6_without_port,The following statement contains a magic number: Assert.Equal(3' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_multiple_ipv6_without_port,The following statement contains a magic number: Assert.Equal("[::3/128]"' parsed.Hosts[2]);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_single_ipv6_with_port,The following statement contains a magic number: Assert.Equal(2' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_single_ipv6_with_port,The following statement contains a magic number: Assert.Equal(3' parsed.Hosts.Count);
Magic Number,Couchbase.UnitTests.Utils,ConnectionStringTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ConnectionStringTests.cs,Can_parse_single_ipv6_with_port,The following statement contains a magic number: Assert.Equal("[::1/128]:1"' parsed.Hosts[2]);
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Seek_SuccessiveCurrent_CorrectPosition,The following statement contains a magic number: stream.Seek(20' SeekOrigin.Current);
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Seek_SuccessiveCurrent_CorrectPosition,The following statement contains a magic number: stream.Seek(20' SeekOrigin.Current);
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Seek_SuccessiveCurrent_CorrectPosition,The following statement contains a magic number: stream.Seek(-5' SeekOrigin.Current);
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Seek_SuccessiveCurrent_CorrectPosition,The following statement contains a magic number: Assert.Equal(35' stream.Position);
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Read_ByteArray_ExpectedBytes,The following statement contains a magic number: var actual = new byte[8];
Magic Number,Couchbase.UnitTests.Utils,MemoryReaderStreamTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\MemoryReaderStreamTests.cs,Read_ByteArray_ExpectedBytes,The following statement contains a magic number: var readBytes = stream.Read(actual' 0' 8);
Magic Number,Couchbase.UnitTests.Utils,ResourceHelper,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\ResourceHelper.cs,ReadResourceAsStream,The following statement contains a magic number: var resourceName = Assembly.GetManifestResourceNames().FirstOrDefault(x =>              {                  //we need to compare the entire file name                  var split = x.Split('.');                  var fileName = split[split.Length - 2] + "." + split[split.Length - 1];                  return fileName.Equals(name);              });
Magic Number,Couchbase.UnitTests.Utils,SlicedMemoryOwnerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\SlicedMemoryOwnerTests.cs,ctor1_StartWithinRange_SliceStart,The following statement contains a magic number: var bytes = Enumerable.Range(0' 32).Select(p => (byte) p).ToArray();
Magic Number,Couchbase.UnitTests.Utils,SlicedMemoryOwnerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\SlicedMemoryOwnerTests.cs,ctor2_NegativeStart_ArgumentOutOfRangeException,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new SlicedMemoryOwner<byte>(memory' -1' 10));
Magic Number,Couchbase.UnitTests.Utils,SlicedMemoryOwnerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\SlicedMemoryOwnerTests.cs,ctor2_StartWithinRange_SliceStart,The following statement contains a magic number: var bytes = Enumerable.Range(0' 32).Select(p => (byte) p).ToArray();
Magic Number,Couchbase.UnitTests.Utils,SlicedMemoryOwnerTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\SlicedMemoryOwnerTests.cs,Dispose_DisposesInnerMemory,The following statement contains a magic number: var bytes = Enumerable.Range(0' 32).Select(p => (byte) p).ToArray();
Magic Number,Couchbase.UnitTests.Utils,UriExtensionsTests,D:\research\architectureSmells\repos\couchbase_couchbase-net-client\tests\Couchbase.UnitTests\Utils\UriExtensionTests.cs,GetIpAddress_DnsEntry_ReturnsIp,The following statement contains a magic number: Assert.Equal(new IPAddress(new byte[] {127' 0' 0' 1})' result);
