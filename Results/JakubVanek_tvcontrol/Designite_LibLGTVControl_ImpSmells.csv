Implementation smell,Namespace,Class,File,Method,Description
Long Method,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,PollEvents,The method has 148 lines of code.
Complex Method,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,addRet,Cyclomatic complexity of the method is 66
Complex Method,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,PollEvents,Cyclomatic complexity of the method is 74
Long Parameter List,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,PollEvents,The method has 20 parameters.
Empty Catch Block,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Send,The method has an empty catch block.
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,LGTVControl,The following statement contains a magic number: port = new SerialPort (device' 9600' Parity.None' 8' StopBits.One) {  	NewLine = "\r"'  	ReadTimeout = TIMEOUT'  	WriteTimeout = TIMEOUT  };  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,LGTVControl,The following statement contains a magic number: port = new SerialPort (device' 9600' Parity.None' 8' StopBits.One) {  	NewLine = "\r"'  	ReadTimeout = TIMEOUT'  	WriteTimeout = TIMEOUT  };  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Clear,The following statement contains a magic number: port.ReadTimeout = 20;  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Send,The following statement contains a magic number: lock (locker) {  	answer = "0";  	if (!this.Open)  		throw new ConnNotOpenException ("Connection not opened!!!");  	if (!requestAnswer) {  		try {  			Write (command' data);  			port.ReadTimeout = TIMEOUT / 4;  			bool success1 = ParseReturn (port.ReadTo ("x")' out answer);  			return success1;  		}  		catch (TimeoutException) {  		}  		catch (ArgumentOutOfRangeException) {  			answer = "0";  			return false;  		}  		finally {  			port.ReadTimeout = TIMEOUT;  		}  	}  	bool success = false;  	int remaining = 1;  	bool ok = false;  	while (!ok) {  		try {  			Write (command' data);  			success = ParseReturn (port.ReadTo ("x")' out answer);  			ok = true;  		}  		catch (TimeoutException) {  			if (remaining != 0) {  				#if DEBUG  				Console.Error.WriteLine ("warn: timeout reached' remaining {0}"' remaining);  				#endif  				remaining--;  				continue;  			}  			else {  				#if DEBUG  				Console.Error.WriteLine ("warn: timeout reached' no answer");  				#endif  				break;  			}  		}  		catch (ArgumentOutOfRangeException) {  			answer = "0";  			return false;  		}  	}  	return success;  }  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Send,The following statement contains a magic number: if (!requestAnswer) {  	try {  		Write (command' data);  		port.ReadTimeout = TIMEOUT / 4;  		bool success1 = ParseReturn (port.ReadTo ("x")' out answer);  		return success1;  	}  	catch (TimeoutException) {  	}  	catch (ArgumentOutOfRangeException) {  		answer = "0";  		return false;  	}  	finally {  		port.ReadTimeout = TIMEOUT;  	}  }  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Send,The following statement contains a magic number: try {  	Write (command' data);  	port.ReadTimeout = TIMEOUT / 4;  	bool success1 = ParseReturn (port.ReadTo ("x")' out answer);  	return success1;  }  catch (TimeoutException) {  }  catch (ArgumentOutOfRangeException) {  	answer = "0";  	return false;  }  finally {  	port.ReadTimeout = TIMEOUT;  }  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,Send,The following statement contains a magic number: port.ReadTimeout = TIMEOUT / 4;  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,ParseReturn,The following statement contains a magic number: answer = data.Substring (2' data.Length - 2);  
Magic Number,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,ParseReturn,The following statement contains a magic number: answer = data.Substring (2' data.Length - 2);  
Missing Default,LGTVControl,LGTVControl,C:\repos\JakubVanek_tvcontrol\LibTVControl\LGTVControl.cs,PollEvents,The following switch statement is missing a default case: switch (d) {  case Data.Power:  	UseIntFromString (retVal' delegate (int data) {  		if (PowerReturn != null)  			PowerReturn (data);  	});  	break;  case Data.AspectRatio:  	UseIntFromString (retVal' delegate (int data) {  		if (AspectRatioReturn != null)  			AspectRatioReturn (data);  	});  	break;  case Data.ScreenMute:  	UseIntFromString (retVal' delegate (int data) {  		if (ScreenMuteReturn != null)  			ScreenMuteReturn (data);  	});  	break;  case Data.VolumeMute:  	UseIntFromString (retVal' delegate (int data) {  		if (VolumeMuteReturn != null)  			VolumeMuteReturn (data);  	});  	break;  case Data.VolumeControl:  	UseIntFromString (retVal' delegate (int data) {  		if (VolumeControlReturn != null)  			VolumeControlReturn (data);  	});  	break;  case Data.Contrast:  	UseIntFromString (retVal' delegate (int data) {  		if (ContrastReturn != null)  			ContrastReturn (data);  	});  	break;  case Data.Brightness:  	UseIntFromString (retVal' delegate (int data) {  		if (BrightnessReturn != null)  			BrightnessReturn (data);  	});  	break;  case Data.Colour:  	UseIntFromString (retVal' delegate (int data) {  		if (ColourReturn != null)  			ColourReturn (data);  	});  	break;  case Data.Tint:  	UseIntFromString (retVal' delegate (int data) {  		if (TintReturn != null)  			TintReturn (data);  	});  	break;  case Data.Sharpness:  	UseIntFromString (retVal' delegate (int data) {  		if (SharpnessReturn != null)  			SharpnessReturn (data);  	});  	break;  case Data.OSD:  	UseIntFromString (retVal' delegate (int data) {  		if (OSDReturn != null)  			OSDReturn (data);  	});  	break;  case Data.RCLock:  	UseIntFromString (retVal' delegate (int data) {  		if (RCLockReturn != null)  			RCLockReturn (data);  	});  	break;  case Data.Treble:  	UseIntFromString (retVal' delegate (int data) {  		if (TrebleReturn != null)  			TrebleReturn (data);  	});  	break;  case Data.Bass:  	UseIntFromString (retVal' delegate (int data) {  		if (BassReturn != null)  			BassReturn (data);  	});  	break;  case Data.Balance:  	UseIntFromString (retVal' delegate (int data) {  		if (BalanceReturn != null)  			BalanceReturn (data);  	});  	break;  case Data.ColourTemperature:  	UseIntFromString (retVal' delegate (int data) {  		if (ColourTemperatureReturn != null)  			ColourTemperatureReturn (data);  	});  	break;  case Data.EnergySaving:  	UseIntFromString (retVal' delegate (int data) {  		if (EnergySavingReturn != null)  			EnergySavingReturn (data);  	});  	break;  case Data.Tune:  	if (TuneReturn != null) {  		String data;  		bool success = ParseReturn (retVal' out data);  		if (success) {  			var deformat = Tune.Deformat (data);  			TuneReturn (deformat.Item1' deformat.Item2);  		}  		else  			TuneReturn (-1' -1);  	}  	break;  case Data.ProgrammeAddSkip:  	UseIntFromString (retVal' delegate (int data) {  		if (prgASReturn != null)  			prgASReturn (data);  	});  	break;  case Data.BackLight:  	UseIntFromString (retVal' delegate (int data) {  		if (BackLightReturn != null)  			BackLightReturn (data);  	});  	break;  case Data.Input:  	UseIntFromString (retVal' delegate (int data) {  		if (InputReturn != null)  			InputReturn (data);  	});  	break;  case Data.String:  	if (StringReturn != null)  		StringReturn (retVal);  	break;  case Data.Hide:  	if (HiddenReturn != null)  		HiddenReturn (retVal);  	break;  }  
