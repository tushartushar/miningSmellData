Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Long Method,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Long Method,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The method has 122 lines of code.
Complex Method,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Long Parameter List,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeObject,The method has 5 parameters. Parameters: jsonSerializerStrategy' keys' values' builder' visited
Long Parameter List,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeObject,The method has 5 parameters. Parameters: jsonSerializerStrategy' keys' values' builder' visited
Long Parameter List,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeObject,The method has 5 parameters. Parameters: jsonSerializerStrategy' keys' values' builder' visited
Long Identifier,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,,The length of the parameter _handlingRecursiveErrorSending is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunErrorMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.Core\Messages\RaygunErrorMessage.cs,ToString,The length of the statement  "      // This exists because Reflection in Xamarin can't seem to obtain the Getter methods unless the getter is used somewhere in the code. " is 133.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunErrorMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.Core\Messages\RaygunErrorMessage.cs,ToString,The length of the statement  "      return string.Format("[RaygunErrorMessage: InnerError={0}' InnerErrors={1}' Data={2}' ClassName={3}' Message={4}' StackTrace={5}]"' InnerError' InnerErrors' Data' ClassName' Message' StackTrace); " is 195.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunErrorStackTraceLineMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\Messages\RaygunErrorStackTraceLineMessage.cs,ToString,The length of the statement  "      // This exists because Reflection in Xamarin can't seem to obtain the Getter methods unless the getter is used somewhere in the code. " is 133.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunErrorStackTraceLineMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\Messages\RaygunErrorStackTraceLineMessage.cs,ToString,The length of the statement  "      return string.Format("[RaygunErrorStackTraceLineMessage: LineNumber={0}' ClassName={1}' FileName={2}' MethodName={3}' Raw={4}]"' LineNumber' ClassName' FileName' MethodName' Raw); " is 179.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunIdentifierMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\Messages\RaygunIdentifierMessage.cs,ToString,The length of the statement  "      // This exists because Reflection in Xamarin can't seem to obtain the Getter methods unless the getter is used somewhere in the code. " is 133.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunIdentifierMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\Messages\RaygunIdentifierMessage.cs,ToString,The length of the statement  "      return string.Format("[RaygunIdentifierMessage: Identifier={0}' IsAnonymous={1}' Email={2}' FullName={3}' FirstName={4}' UUID={5}]"' Identifier' IsAnonymous' Email' FullName' FirstName' UUID); " is 192.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunMessage,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\Messages\RaygunMessage.cs,ToString,The length of the statement  "      // This exists because Reflection in Xamarin can't seem to obtain the Getter methods unless the getter is used somewhere in the code. " is 133.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunMessageDetails,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Messages\RaygunMessageDetails.cs,ToString,The length of the statement  "      // This exists because Reflection in Xamarin can't seem to obtain the Getter methods unless the getter is used somewhere in the code. " is 133.
Long Statement,Mindscape.Raygun4Net.Messages,RaygunMessageDetails,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Messages\RaygunMessageDetails.cs,ToString,The length of the statement  "      return string.Format("[RaygunMessageDetails: MachineName={0}' Version={1}' Error={2}' Environment={3}' Client={4}' Tags={5}' UserCustomData={6}' User={7}]"' MachineName' Version' Error' Environment' Client' Tags' UserCustomData' User); " is 235.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "                  if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "      if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The length of the statement  "        if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeValue,The length of the statement  "              success = SerializeObject(jsonSerializerStrategy' stringObjectDictionary.Keys' stringObjectDictionary.Values' builder' visited); " is 128.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "                  if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "      if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The length of the statement  "        if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeValue,The length of the statement  "              success = SerializeObject(jsonSerializerStrategy' stringObjectDictionary.Keys' stringObjectDictionary.Values' builder' visited); " is 128.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "      IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "          result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "        result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "        obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "              list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "      IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "          result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "        result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "        obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "              list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ToNullableType,The length of the statement  "        return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof (object))' instance).Compile(); " is 174.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ToNullableType,The length of the statement  "        return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof (object))' instance).Compile(); " is 174.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Mindscape.Raygun4Net,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SendStoredMessages,The length of the statement  "          var raygunFolder = await tempFolder.CreateFolderAsync("RaygunIO"' CreationCollisionOption.OpenIfExists).AsTask().ConfigureAwait(false); " is 135.
Long Statement,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SaveMessage,The length of the statement  "        var raygunFolder = await tempFolder.CreateFolderAsync("RaygunIO"' CreationCollisionOption.OpenIfExists).AsTask().ConfigureAwait(false); " is 135.
Long Statement,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,StripWrapperExceptions,The length of the statement  "      if (exception != null && _wrapperExceptions.Any(wrapperException => exception.GetType() == wrapperException && exception.InnerException != null)) " is 145.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The length of the statement  "                  if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "      if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseNumber,The length of the statement  "        success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The length of the statement  "        if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeValue,The length of the statement  "              success = SerializeObject(jsonSerializerStrategy' stringObjectDictionary.Keys' stringObjectDictionary.Values' builder' visited); " is 128.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "      IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "          result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SetterValueFactory,The length of the statement  "        result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "          if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "        obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "            else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The length of the statement  "              list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ToNullableType,The length of the statement  "        return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "          Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof (object))' instance).Compile(); " is 174.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "        Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Reflection,ReflectionUtils,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Mindscape.Raygun4Net,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Empty Catch Block,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SaveMessage,The method has an empty catch block.
Empty Catch Block,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SaveMessage,The method has an empty catch block.
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )        {          c = jsonString[i++];            if (c == '\\')          {            int remainingLength = jsonString.Length - i;            if (remainingLength >= 2)            {              char lookahead = jsonString[i];              if (lookahead == '\\')              {                sb.Append('\\');                ++i;              }              else if (lookahead == '"')              {                sb.Append("\"");                ++i;              }              else if (lookahead == 't')              {                sb.Append('\t');                ++i;              }              else if (lookahead == 'b')              {                sb.Append('\b');                ++i;              }              else if (lookahead == 'n')              {                sb.Append('\n');                ++i;              }              else if (lookahead == 'r')              {                sb.Append('\r');                ++i;              }            }          }          else          {            sb.Append(c);          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeString,The following statement contains a magic number: char[] hexSeqBuffer = new char[4];
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )        {          c = jsonString[i++];            if (c == '\\')          {            int remainingLength = jsonString.Length - i;            if (remainingLength >= 2)            {              char lookahead = jsonString[i];              if (lookahead == '\\')              {                sb.Append('\\');                ++i;              }              else if (lookahead == '"')              {                sb.Append("\"");                ++i;              }              else if (lookahead == 't')              {                sb.Append('\t');                ++i;              }              else if (lookahead == 'b')              {                sb.Append('\b');                ++i;              }              else if (lookahead == 'n')              {                sb.Append('\n');                ++i;              }              else if (lookahead == 'r')              {                sb.Append('\r');                ++i;              }            }          }          else          {            sb.Append(c);          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeString,The following statement contains a magic number: char[] hexSeqBuffer = new char[4];
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,Send,The following statement contains a magic number: SendOrSave(raygunMessage).Wait(3000);
Magic Number,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SendMessage,The following statement contains a magic number: try        {          await httpClient.SendRequestAsync(request' HttpCompletionOption.ResponseHeadersRead).AsTask().ConfigureAwait(false);        }        catch (Exception ex)        {          Debug.WriteLine("Error Logging Exception to Raygun.io " + ex.Message);          if (_saveOnFail)          {            SaveMessage(message).Wait(3000);          }        }
Magic Number,Mindscape.Raygun4Net,RaygunClient,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\RaygunClient.cs,SaveMessage,The following statement contains a magic number: try        {          var tempFolder = ApplicationData.Current.TemporaryFolder;            var raygunFolder = await tempFolder.CreateFolderAsync("RaygunIO"' CreationCollisionOption.OpenIfExists).AsTask().ConfigureAwait(false);                    int number = 1;          while (true)          {            bool exists;              try            {              await raygunFolder.GetFileAsync("RaygunErrorMessage" + number + ".txt").AsTask().ConfigureAwait(false);              exists = true;            }            catch (FileNotFoundException) {              exists = false;            }                        if (!exists)            {              string nextFileName = "RaygunErrorMessage" + (number + 1) + ".txt";                StorageFile nextFile = null;              try              {                nextFile = await raygunFolder.GetFileAsync(nextFileName).AsTask().ConfigureAwait(false);                  await nextFile.DeleteAsync().AsTask().ConfigureAwait(false);              }              catch (FileNotFoundException) { }                break;            }              number++;          }            if (number == 11)          {            try            {              StorageFile firstFile = await raygunFolder.GetFileAsync("RaygunErrorMessage1.txt").AsTask().ConfigureAwait(false);              await firstFile.DeleteAsync().AsTask().ConfigureAwait(false);            }            catch (FileNotFoundException) { }          }            var file = await raygunFolder.CreateFileAsync("RaygunErrorMessage" + number + ".txt").AsTask().ConfigureAwait(false);          await FileIO.WriteTextAsync(file' message).AsTask().ConfigureAwait(false);            Debug.WriteLine("Saved message: " + "RaygunIO\\RaygunErrorMessage" + number + ".txt");        }        catch (Exception ex)        {          Debug.WriteLine(string.Format("Error saving message to isolated storage {0}"' ex.Message));        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )        {          c = jsonString[i++];            if (c == '\\')          {            int remainingLength = jsonString.Length - i;            if (remainingLength >= 2)            {              char lookahead = jsonString[i];              if (lookahead == '\\')              {                sb.Append('\\');                ++i;              }              else if (lookahead == '"')              {                sb.Append("\"");                ++i;              }              else if (lookahead == 't')              {                sb.Append('\t');                ++i;              }              else if (lookahead == 'b')              {                sb.Append('\b');                ++i;              }              else if (lookahead == 'n')              {                sb.Append('\n');                ++i;              }              else if (lookahead == 'r')              {                sb.Append('\r');                ++i;              }            }          }          else          {            sb.Append(c);          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)        {          if (index == json.Length)            break;            c = json[index++];          if (c == '"')          {            complete = true;            break;          }          else if (c == '\\')          {            if (index == json.Length)              break;            c = json[index++];            if (c == '"')              s.Append('"');            else if (c == '\\')              s.Append('\\');            else if (c == '/')              s.Append('/');            else if (c == 'b')              s.Append('\b');            else if (c == 'f')              s.Append('\f');            else if (c == 'n')              s.Append('\n');            else if (c == 'r')              s.Append('\r');            else if (c == 't')              s.Append('\t');            else if (c == 'u')            {              int remainingLength = json.Length - index;              if (remainingLength >= 4)              {                // parse the 32 bit hex into an integer codepoint                uint codePoint;                if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                  return "";                  // convert the integer codepoint to a unicode char and add to string                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                {                  index += 4; // skip 4 chars                  remainingLength = json.Length - index;                  if (remainingLength >= 6)                  {                    uint lowCodePoint;                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                    {                      if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                      {                        s.Append((char)codePoint);                        s.Append((char)lowCodePoint);                        index += 6; // skip 6 chars                        continue;                      }                    }                  }                  success = false;    // invalid surrogate pair                  return "";                }                s.Append(ConvertFromUtf32((int)codePoint));                // skip 4 chars                index += 4;              }              else                break;            }          }          else            s.Append(c);        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)        {          if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')          {            index += 5;            return TOKEN_FALSE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')          {            index += 4;            return TOKEN_TRUE;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)        {          if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')          {            index += 4;            return TOKEN_NULL;          }        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,SerializeString,The following statement contains a magic number: char[] hexSeqBuffer = new char[4];
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++)        {          int num = intValue % 16;          if (num < 10)            hex[3 - i] = (char)('0' + num);          else            hex[3 - i] = (char)('A' + (num - 10));          intValue >>= 4;        }
Magic Number,Mindscape.Raygun4Net.Builders,RaygunEnvironmentMessageBuilder,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Builders\RaygunEnvironmentMessageBuilder.cs,GetOSVersion,The following statement contains a magic number: try          {              var analyticsInfoType = Type.GetType("Windows.System.Profile.AnalyticsInfo' Windows' ContentType=WindowsRuntime");              var versionInfoType = Type.GetType("Windows.System.Profile.AnalyticsVersionInfo' Windows' ContentType=WindowsRuntime");                if (analyticsInfoType == null || versionInfoType == null)              {                  return null;              }                var versionInfoProperty = analyticsInfoType.GetRuntimeProperty("VersionInfo");              var versionInfo = versionInfoProperty.GetValue(null);              var versionProperty = versionInfoType.GetRuntimeProperty("DeviceFamilyVersion");              var familyVersion = versionProperty.GetValue(versionInfo);                long versionBytes;              if (!long.TryParse(familyVersion.ToString()' out versionBytes))              {                  return null;              }                var uapVersion = new Version((ushort) (versionBytes >> 48)'                  (ushort) (versionBytes >> 32)'                  (ushort) (versionBytes >> 16)'                  (ushort) (versionBytes));                return uapVersion.ToString();          }          catch          {              return null;          }
Magic Number,Mindscape.Raygun4Net.Builders,RaygunEnvironmentMessageBuilder,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Builders\RaygunEnvironmentMessageBuilder.cs,GetOSVersion,The following statement contains a magic number: try          {              var analyticsInfoType = Type.GetType("Windows.System.Profile.AnalyticsInfo' Windows' ContentType=WindowsRuntime");              var versionInfoType = Type.GetType("Windows.System.Profile.AnalyticsVersionInfo' Windows' ContentType=WindowsRuntime");                if (analyticsInfoType == null || versionInfoType == null)              {                  return null;              }                var versionInfoProperty = analyticsInfoType.GetRuntimeProperty("VersionInfo");              var versionInfo = versionInfoProperty.GetValue(null);              var versionProperty = versionInfoType.GetRuntimeProperty("DeviceFamilyVersion");              var familyVersion = versionProperty.GetValue(versionInfo);                long versionBytes;              if (!long.TryParse(familyVersion.ToString()' out versionBytes))              {                  return null;              }                var uapVersion = new Version((ushort) (versionBytes >> 48)'                  (ushort) (versionBytes >> 32)'                  (ushort) (versionBytes >> 16)'                  (ushort) (versionBytes));                return uapVersion.ToString();          }          catch          {              return null;          }
Magic Number,Mindscape.Raygun4Net.Builders,RaygunEnvironmentMessageBuilder,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Builders\RaygunEnvironmentMessageBuilder.cs,GetOSVersion,The following statement contains a magic number: try          {              var analyticsInfoType = Type.GetType("Windows.System.Profile.AnalyticsInfo' Windows' ContentType=WindowsRuntime");              var versionInfoType = Type.GetType("Windows.System.Profile.AnalyticsVersionInfo' Windows' ContentType=WindowsRuntime");                if (analyticsInfoType == null || versionInfoType == null)              {                  return null;              }                var versionInfoProperty = analyticsInfoType.GetRuntimeProperty("VersionInfo");              var versionInfo = versionInfoProperty.GetValue(null);              var versionProperty = versionInfoType.GetRuntimeProperty("DeviceFamilyVersion");              var familyVersion = versionProperty.GetValue(versionInfo);                long versionBytes;              if (!long.TryParse(familyVersion.ToString()' out versionBytes))              {                  return null;              }                var uapVersion = new Version((ushort) (versionBytes >> 48)'                  (ushort) (versionBytes >> 32)'                  (ushort) (versionBytes >> 16)'                  (ushort) (versionBytes));                return uapVersion.ToString();          }          catch          {              return null;          }
Magic Number,Mindscape.Raygun4Net.Builders,RaygunErrorMessageBuilder,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net.WindowsStore\Builders\RaygunErrorMessageBuilder.cs,BuildStackTrace,The following statement contains a magic number: if (exception.StackTrace != null)        {          char[] delim = { '\r'' '\n' };          var frames = exception.StackTrace.Split(delim' StringSplitOptions.RemoveEmptyEntries);          foreach (string line in frames)          {            // Trim the stack trace line            string stackTraceLine = line.Trim();            if (stackTraceLine.StartsWith("at "))            {              stackTraceLine = stackTraceLine.Substring(3);            }              string className = stackTraceLine;            string methodName = null;              // Extract the method name and class name if possible:            int index = stackTraceLine.IndexOf("(");            if (index > 0)            {              index = stackTraceLine.LastIndexOf("."' index);              if (index > 0)              {                className = stackTraceLine.Substring(0' index);                methodName = stackTraceLine.Substring(index + 1);              }            }              RaygunErrorStackTraceLineMessage stackTraceLineMessage = new RaygunErrorStackTraceLineMessage();            stackTraceLineMessage.ClassName = className;            stackTraceLineMessage.MethodName = methodName;            lines.Add(stackTraceLineMessage);          }        }
Missing Default,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))        {          case TOKEN_STRING:            return ParseString(json' ref index' ref success);          case TOKEN_NUMBER:            return ParseNumber(json' ref index' ref success);          case TOKEN_CURLY_OPEN:            return ParseObject(json' ref index' ref success);          case TOKEN_SQUARED_OPEN:            return ParseArray(json' ref index' ref success);          case TOKEN_TRUE:            NextToken(json' ref index);            return true;          case TOKEN_FALSE:            NextToken(json' ref index);            return false;          case TOKEN_NULL:            NextToken(json' ref index);            return null;          case TOKEN_NONE:            break;        }
Missing Default,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)        {          case '{':            return TOKEN_CURLY_OPEN;          case '}':            return TOKEN_CURLY_CLOSE;          case '[':            return TOKEN_SQUARED_OPEN;          case ']':            return TOKEN_SQUARED_CLOSE;          case ''':            return TOKEN_COMMA;          case '"':            return TOKEN_STRING;          case '0':          case '1':          case '2':          case '3':          case '4':          case '5':          case '6':          case '7':          case '8':          case '9':          case '-':            return TOKEN_NUMBER;          case ':':            return TOKEN_COLON;        }
Missing Default,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))        {          case TOKEN_STRING:            return ParseString(json' ref index' ref success);          case TOKEN_NUMBER:            return ParseNumber(json' ref index' ref success);          case TOKEN_CURLY_OPEN:            return ParseObject(json' ref index' ref success);          case TOKEN_SQUARED_OPEN:            return ParseArray(json' ref index' ref success);          case TOKEN_TRUE:            NextToken(json' ref index);            return true;          case TOKEN_FALSE:            NextToken(json' ref index);            return false;          case TOKEN_NULL:            NextToken(json' ref index);            return null;          case TOKEN_NONE:            break;        }
Missing Default,Mindscape.Raygun4Net,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)        {          case '{':            return TOKEN_CURLY_OPEN;          case '}':            return TOKEN_CURLY_CLOSE;          case '[':            return TOKEN_SQUARED_OPEN;          case ']':            return TOKEN_SQUARED_CLOSE;          case ''':            return TOKEN_COMMA;          case '"':            return TOKEN_STRING;          case '0':          case '1':          case '2':          case '3':          case '4':          case '5':          case '6':          case '7':          case '8':          case '9':          case '-':            return TOKEN_NUMBER;          case ':':            return TOKEN_COLON;        }
Missing Default,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))        {          case TOKEN_STRING:            return ParseString(json' ref index' ref success);          case TOKEN_NUMBER:            return ParseNumber(json' ref index' ref success);          case TOKEN_CURLY_OPEN:            return ParseObject(json' ref index' ref success);          case TOKEN_SQUARED_OPEN:            return ParseArray(json' ref index' ref success);          case TOKEN_TRUE:            NextToken(json' ref index);            return true;          case TOKEN_FALSE:            NextToken(json' ref index);            return false;          case TOKEN_NULL:            NextToken(json' ref index);            return null;          case TOKEN_NONE:            break;        }
Missing Default,Reflection,SimpleJson,C:\repos\MindscapeHQ_raygun4net\Mindscape.Raygun4Net\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)        {          case '{':            return TOKEN_CURLY_OPEN;          case '}':            return TOKEN_CURLY_CLOSE;          case '[':            return TOKEN_SQUARED_OPEN;          case ']':            return TOKEN_SQUARED_CLOSE;          case ''':            return TOKEN_COMMA;          case '"':            return TOKEN_STRING;          case '0':          case '1':          case '2':          case '3':          case '4':          case '5':          case '6':          case '7':          case '8':          case '9':          case '-':            return TOKEN_NUMBER;          case ':':            return TOKEN_COLON;        }
