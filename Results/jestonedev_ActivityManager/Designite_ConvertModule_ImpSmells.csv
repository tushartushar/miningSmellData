Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertNameToCase,Cyclomatic complexity of the method is 11
Complex Method,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,Cyclomatic complexity of the method is 10
Complex Method,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,Cyclomatic complexity of the method is 13
Complex Method,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,Cyclomatic complexity of the method is 11
Complex Method,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,Cyclomatic complexity of the method is 16
Complex Method,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,Cyclomatic complexity of the method is 9
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntToString,The method has 6 parameters. Parameters: number' textCase' sex' firstCapital' isOrdinal' words
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntCellToString,The method has 7 parameters. Parameters: inRow' column' textCase' sex' firstCapital' isOrdinal' outRow
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntColToString,The method has 7 parameters. Parameters: inTable' column' textCase' sex' firstCapital' isOrdinal' outTable
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertDateTimeCellToString,The method has 5 parameters. Parameters: inRow' column' format' firstCapital' outRow
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertDateTimeColToString,The method has 5 parameters. Parameters: inTable' column' format' firstCapital' outTable
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyToString,The method has 7 parameters. Parameters: currency' currencyType' format' thousandSeparator' firstCapital' isOrdinal' words
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyCellToString,The method has 8 parameters. Parameters: inRow' column' currencyType' format' thousandSeparator' firstCapital' isOrdinal' outRow
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyColToString,The method has 8 parameters. Parameters: inTable' column' currencyType' format' thousandSeparator' firstCapital' isOrdinal' outTable
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertFloatCellToString,The method has 5 parameters. Parameters: inRow' column' textCase' firstCapital' outRow
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertFloatColToString,The method has 5 parameters. Parameters: inTable' column' textCase' firstCapital' outTable
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertNameCellToCase,The method has 5 parameters. Parameters: inRow' column' format' textCase' outRow
Long Parameter List,ConvertModule,IPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertNameColToCase,The method has 5 parameters. Parameters: inTable' column' format' textCase' outTable
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntToString,The method has 6 parameters. Parameters: number' textCase' sex' firstCapital' isOrdinal' words
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyToString,The method has 7 parameters. Parameters: currency' currencyType' format' thousandSeparator' firstCapital' isOrdinal' words
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntCellToString,The method has 7 parameters. Parameters: inRow' column' textCase' sex' firstCapital' isOrdinal' outRow
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertIntColToString,The method has 7 parameters. Parameters: inTable' column' textCase' sex' firstCapital' isOrdinal' outTable
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertDateTimeCellToString,The method has 5 parameters. Parameters: inRow' column' format' firstCapital' outRow
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertDateTimeColToString,The method has 5 parameters. Parameters: inTable' column' format' firstCapital' outTable
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyCellToString,The method has 8 parameters. Parameters: inRow' column' currencyType' format' thousandSeparator' firstCapital' isOrdinal' outRow
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyColToString,The method has 8 parameters. Parameters: inTable' column' currencyType' format' thousandSeparator' firstCapital' isOrdinal' outTable
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertFloatCellToString,The method has 5 parameters. Parameters: inRow' column' textCase' firstCapital' outRow
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertFloatColToString,The method has 5 parameters. Parameters: inTable' column' textCase' firstCapital' outTable
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertNameCellToCase,The method has 5 parameters. Parameters: inRow' column' format' textCase' outRow
Long Parameter List,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertNameColToCase,The method has 5 parameters. Parameters: inTable' column' format' textCase' outTable
Long Parameter List,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The method has 5 parameters. Parameters: remainder' textCase' inSex' lastPart' partNum
Long Parameter List,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The method has 5 parameters. Parameters: currency' currencyType' format' thousandSeparator' isOrdinal
Long Statement,ConvertModule,ConvertPlug,C:\repos\jestonedev_ActivityManager\ConvertModule\ConvertPlugin.cs,ConvertCurrencyColToString,The length of the statement  "                ConvertCurrencyCellToString(row' column' currencyType' format' thousandSeparator' firstCapital' isOrdinal' out tmp_row); " is 120.
Long Statement,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The length of the statement  "            string[] currency_parts = currency.ToString(CultureInfo.CurrentCulture).Split(new char[] { '.'' ''' }' 2' StringSplitOptions.RemoveEmptyEntries); " is 145.
Long Statement,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The length of the statement  "            string[] number_parts = number.ToString("0.0########"'CultureInfo.CurrentCulture).Split(new char[] { '.'' ''' }' 2' StringSplitOptions.RemoveEmptyEntries); " is 155.
Complex Conditional,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The conditional expression  "(integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14))"  is complex.
Complex Conditional,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The conditional expression  "(integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14))"  is complex.
Complex Conditional,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The conditional expression  "(fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14))"  is complex.
Complex Conditional,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The conditional expression  "(fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14))"  is complex.
Complex Conditional,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The conditional expression  "(fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14))"  is complex.
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: int x = (int)remainder % 100;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: int hundreds_count = (int)(remainder - x) / 100;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: if (tens_count >= 2)                  x = (int)remainder % 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalRemainderToText,The following statement contains a magic number: if (tens_count >= 2)                  x = (int)remainder % 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: int x = (int)remainder % 100;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: int hundreds_count = (int)(remainder - x) / 100;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: int tens_count = (int)(remainder - (remainder % 10) - hundreds_count * 100) / 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: if (tens_count >= 2)                  x = (int)remainder % 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalRemainderToText,The following statement contains a magic number: if (tens_count >= 2)                  x = (int)remainder % 10;
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10'15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10'15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10'15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10'15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CardinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = CardinalRemainderToText(remainder' sex_part);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && (remainder_str.Length > 0))                  {                      remainder_str += " ";                      if (prefix == 1)                          remainder_str += part1[i - 1];                      else                          if ((prefix >= 2) && (prefix <= 4))                              remainder_str += part2to4[i - 1];                          else                              remainder_str += part5to9[i - 1];                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: if ((number >= Math.Pow(10' 15) || (number <= (0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,OrdinalToText,The following statement contains a magic number: while (number != 0)              {                  long remainder = number % 1000;                  number = (number - remainder) / 1000;                  SexClass sex_part;                  if (i == 0)                      sex_part = this.sex;                  else                      if (i == 1)                          sex_part = new FemaleClass();                      else                          sex_part = new MaleClass();                  string remainder_str = OrdinalRemainderToText(remainder' textcase' sex_part' result.Length == 0' i);                  long prefix;                  if (remainder % 100 < 20)                      prefix = remainder % 100;                  else                      prefix = remainder % 10;                  if ((i > 0) && ((remainder_str.Length > 0) || (number == 0)))                  {                      if (result.Length == 0)                      {                          remainder_str += textcase.Translate(sex.Translate(ordinal_part[i - 1]));                      }                      else                      {                          remainder_str += " ";                          if (prefix == 1)                              remainder_str += part1[i - 1];                          else                              if ((prefix >= 2) && (prefix <= 4))                                  remainder_str += part2to4[i - 1];                              else                                  remainder_str += part5to9[i - 1];                      }                  }                  if ((result.Length > 0) && (remainder_str.Length > 0))                      result = " " + result;                  result = remainder_str + result;                  i++;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,DayToText,The following statement contains a magic number: while (match_day.Success)              {                  int day = dateTime.Day;                  this.textcase = LetterToTextCase(match_day.Value[2].ToString());                  this.sex = new NeuterClass();                  string day_str = NumberToText(day' true);                  format = Regex.Replace(format' match_day.Value' day_str);                  match_day = match_day.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MonthToText,The following statement contains a magic number: while (match_month.Success)              {                  int month = dateTime.Month;                  this.textcase = LetterToTextCase(match_month.Value[2].ToString());                  format = Regex.Replace(format' match_month.Value'                      this.textcase.Translate(this.monthes[month - 1]));                  match_month = match_month.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,YearToText,The following statement contains a magic number: while (match_year.Success)              {                  int year = dateTime.Year;                  this.sex = new MaleClass();                  this.textcase = LetterToTextCase(match_year.Value[4].ToString());                  format = Regex.Replace(format' match_year.Value' NumberToText(year' true) + " " +                      this.textcase.Translate("год"));                  match_year = match_year.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,YearToText,The following statement contains a magic number: while (match_year.Success)              {                  int year = dateTime.Year % 100;                  this.textcase = LetterToTextCase(match_year.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_year.Value' NumberToText(year' true) + " " +                      this.textcase.Translate("год"));                  match_year = match_year.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,YearToText,The following statement contains a magic number: while (match_year.Success)              {                  int year = dateTime.Year % 100;                  this.textcase = LetterToTextCase(match_year.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_year.Value' NumberToText(year' true) + " " +                      this.textcase.Translate("год"));                  match_year = match_year.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour % 12 == 0 ? 12 : dateTime.Hour % 12;                  string hour_postfix = "";                  if (hour == 1)                      hour_postfix = "час";                  else                      if (hour >= 5)                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour % 12 == 0 ? 12 : dateTime.Hour % 12;                  string hour_postfix = "";                  if (hour == 1)                      hour_postfix = "час";                  else                      if (hour >= 5)                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour % 12 == 0 ? 12 : dateTime.Hour % 12;                  string hour_postfix = "";                  if (hour == 1)                      hour_postfix = "час";                  else                      if (hour >= 5)                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour % 12 == 0 ? 12 : dateTime.Hour % 12;                  string hour_postfix = "";                  if (hour == 1)                      hour_postfix = "час";                  else                      if (hour >= 5)                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour % 12 == 0 ? 12 : dateTime.Hour % 12;                  string hour_postfix = "";                  if (hour == 1)                      hour_postfix = "час";                  else                      if (hour >= 5)                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  this.sex = new MaleClass();                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour;                  string hour_postfix = "";                  if ((hour == 1) || (hour == 21))                      hour_postfix = "час";                  else                      if (((hour >= 5) && (hour <= 20)) || (hour == 0))                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.sex = new MaleClass();                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour;                  string hour_postfix = "";                  if ((hour == 1) || (hour == 21))                      hour_postfix = "час";                  else                      if (((hour >= 5) && (hour <= 20)) || (hour == 0))                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.sex = new MaleClass();                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour;                  string hour_postfix = "";                  if ((hour == 1) || (hour == 21))                      hour_postfix = "час";                  else                      if (((hour >= 5) && (hour <= 20)) || (hour == 0))                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.sex = new MaleClass();                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,HoursToText,The following statement contains a magic number: while (match_hour.Success)              {                  int hour = dateTime.Hour;                  string hour_postfix = "";                  if ((hour == 1) || (hour == 21))                      hour_postfix = "час";                  else                      if (((hour >= 5) && (hour <= 20)) || (hour == 0))                          hour_postfix = "часов";                      else                          hour_postfix = "часа";                  this.sex = new MaleClass();                  this.textcase = LetterToTextCase(match_hour.Value[2].ToString());                  format = Regex.Replace(format' match_hour.Value' NumberToText(hour' false) + " " +                      this.textcase.Translate(hour_postfix));                  match_hour = match_hour.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,MinutesToText,The following statement contains a magic number: while (match_minute.Success)              {                  int minute = dateTime.Minute;                  string minute_postfix = "";                  if (minute % 10 == 1)                  {                      if (minute != 11)                          minute_postfix = "минута";                      else                          minute_postfix = "минут";                  }                  else                      if ((minute % 10 >= 5) || (minute % 10 == 0))                          minute_postfix = "минут";                      else                      {                          if ((minute >= 12) && (minute <= 14))                              minute_postfix = "минут";                          else                              minute_postfix = "минуты";                      }                  this.textcase = LetterToTextCase(match_minute.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_minute.Value' NumberToText(minute' false) + " " +                      this.textcase.Translate(minute_postfix));                  match_minute = match_minute.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,SecondsToText,The following statement contains a magic number: while (match_second.Success)              {                  int second = dateTime.Second;                  string second_postfix = "";                  if (second % 10 == 1)                  {                      if (second != 11)                          second_postfix = "секунда";                      else                          second_postfix = "секунд";                  }                  else                      if ((second % 10 >= 5) || (second % 10 == 0))                          second_postfix = "секунд";                      else                      {                          if ((second >= 12) && (second <= 14))                              second_postfix = "секунд";                          else                              second_postfix = "секунды";                      }                  this.textcase = LetterToTextCase(match_second.Value[2].ToString());                  this.sex = new FemaleClass();                  format = Regex.Replace(format' match_second.Value' NumberToText(second' false) + " " +                      this.textcase.Translate(second_postfix));                  match_second = match_second.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetIntegralPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "рубль";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral % 100 >= 11) && (integral % 100 <= 14)))                              return "рублей";                          else                              if (integral % 10 == 1)                                  return "рубль";                              else                                  return "рубля";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "доллар";                      else                          if ((integral % 10 == 0) || (integral % 10 >= 5) || ((integral >= 11) && (integral <= 14)))                              return "долларов";                          else                              if (integral % 10 == 1)                                  return "доллар";                              else                                  return "доллара";                  case CurrencyType.Euro:                      return "евро";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetFractionalPart,The following statement contains a magic number: switch (currencyType)              {                  case CurrencyType.Ruble:                      if (isOrdinal)                          return "копейка";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "копеек";                          else                              if (fractional % 10 == 1)                                  return "копейка";                              else                                  return "копейки";                  case CurrencyType.Dollar:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  case CurrencyType.Euro:                      if (isOrdinal)                          return "цент";                      else                          if ((fractional % 10 == 0) || (fractional % 10 >= 5) ||                              ((fractional >= 11) && (fractional <= 14)))                              return "центов";                          else                              if (fractional % 10 == 1)                                  return "цент";                              else                                  return "цента";                  default: throw new ConvertException("Неизвестный тип валюты");              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,GetCurrenctyPostfix,The following statement contains a magic number: if (currency_parts.Length > 1)              {                  if (currency_parts[1].Length == 1)                      fractional = long.Parse(currency_parts[1][0] + "0"' CultureInfo.CurrentCulture);                  else                      fractional = long.Parse(currency_parts[1].Substring(0' 2)' CultureInfo.CurrentCulture);              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: if ((currency >= (decimal)Math.Pow(10' 15) || (currency <= (decimal)(0 - Math.Pow(10' 15)))))                  return currency.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: if ((currency >= (decimal)Math.Pow(10' 15) || (currency <= (decimal)(0 - Math.Pow(10' 15)))))                  return currency.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: if ((currency >= (decimal)Math.Pow(10' 15) || (currency <= (decimal)(0 - Math.Pow(10' 15)))))                  return currency.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: if ((currency >= (decimal)Math.Pow(10' 15) || (currency <= (decimal)(0 - Math.Pow(10' 15)))))                  return currency.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: currency = Math.Round(currency' 2);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: string[] currency_parts = currency.ToString(CultureInfo.CurrentCulture).Split(new char[] { '.'' ''' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: while (match_integral.Success)              {                  this.textcase = LetterToTextCase(match_integral.Value[2].ToString());                  string integral_part = NumberToText(integral' isOrdinal);                  format = format.Replace(match_integral.Value' integral_part);                  match_integral = match_integral.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: if (currency_parts.Length > 1)              {                  if (currency_parts[1].Length == 1)                      fractional = long.Parse(currency_parts[1][0] + "0"' CultureInfo.CurrentCulture);                  else                      fractional = long.Parse(currency_parts[1].Substring(0' 2)' CultureInfo.CurrentCulture);              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: while (match_fractional.Success)              {                  this.textcase = LetterToTextCase(match_fractional.Value[2].ToString());                  string fractional_part = NumberToText(fractional' isOrdinal);                  format = format.Replace(match_fractional.Value' fractional_part);                  match_fractional = match_fractional.NextMatch();              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: while (integral > 0)              {                  long integral_part = integral % 1000;                  integral = (integral - integral_part) / 1000;                  string integral_part_str = integral_part.ToString(CultureInfo.CurrentCulture);                  if ((integral_part_str.Length == 1) && (integral > 0))                      integral_part_str = "00" + integral_part_str;                  else                      if ((integral_part_str.Length == 2) && (integral > 0))                          integral_part_str = "0" + integral_part_str;                  integral_num = integral_part_str + integral_num;                  if (integral > 0)                      integral_num = thousandSeparator + integral_num;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: while (integral > 0)              {                  long integral_part = integral % 1000;                  integral = (integral - integral_part) / 1000;                  string integral_part_str = integral_part.ToString(CultureInfo.CurrentCulture);                  if ((integral_part_str.Length == 1) && (integral > 0))                      integral_part_str = "00" + integral_part_str;                  else                      if ((integral_part_str.Length == 2) && (integral > 0))                          integral_part_str = "0" + integral_part_str;                  integral_num = integral_part_str + integral_num;                  if (integral > 0)                      integral_num = thousandSeparator + integral_num;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,CurrencyToString,The following statement contains a magic number: while (integral > 0)              {                  long integral_part = integral % 1000;                  integral = (integral - integral_part) / 1000;                  string integral_part_str = integral_part.ToString(CultureInfo.CurrentCulture);                  if ((integral_part_str.Length == 1) && (integral > 0))                      integral_part_str = "00" + integral_part_str;                  else                      if ((integral_part_str.Length == 2) && (integral > 0))                          integral_part_str = "0" + integral_part_str;                  integral_num = integral_part_str + integral_num;                  if (integral > 0)                      integral_num = thousandSeparator + integral_num;              }
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number >= (decimal)Math.Pow(10' 15) || (number <= (decimal)(0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number >= (decimal)Math.Pow(10' 15) || (number <= (decimal)(0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number >= (decimal)Math.Pow(10' 15) || (number <= (decimal)(0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number >= (decimal)Math.Pow(10' 15) || (number <= (decimal)(0 - Math.Pow(10' 15)))))                  return number.ToString(CultureInfo.CurrentCulture);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: string[] number_parts = number.ToString("0.0########"'CultureInfo.CurrentCulture).Split(new char[] { '.'' ''' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((integral % 10 == 1) && (integral != 11))                  integral_postfix = "целая";              else                  integral_postfix = "целых";
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((integral % 10 == 1) && (integral != 11))                  integral_postfix = "целая";              else                  integral_postfix = "целых";
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number_parts.Length > 1) && (fractional != 0))              {                  if ((fractional % 10 == 1) && (fractional != 11))                      fractional_postfix = fractional_postfixs[number_parts[1].Length - 1];                  else                      fractional_postfix = Regex.Replace(fractional_postfixs[number_parts[1].Length - 1]' @"(ая)$"' "ых");              }              else                  fractional_postfix = Regex.Replace(fractional_postfixs[0]' @"(ая)$"' "ых");
Magic Number,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,FloatToString,The following statement contains a magic number: if ((number_parts.Length > 1) && (fractional != 0))              {                  if ((fractional % 10 == 1) && (fractional != 11))                      fractional_postfix = fractional_postfixs[number_parts[1].Length - 1];                  else                      fractional_postfix = Regex.Replace(fractional_postfixs[number_parts[1].Length - 1]' @"(ая)$"' "ых");              }              else                  fractional_postfix = Regex.Replace(fractional_postfixs[0]' @"(ая)$"' "ых");
Missing Default,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,Converter,The following switch statement is missing a default case: switch (textCase)              {                  case TextCase.Nominative: this.textcase = new NominativeCaseClass();                      break;                  case TextCase.Genitive: this.textcase = new GenitiveCaseClass();                      break;                  case TextCase.Dative: this.textcase = new DativeCaseClass();                      break;                  case TextCase.Accusative: this.textcase = new AccusativeCaseClass();                      break;                  case TextCase.Instrumental: this.textcase = new InstrumentalCaseClass();                      break;                  case TextCase.Prepositional: this.textcase = new PrepositionalCaseClass();                      break;              }
Missing Default,ConvertModule,Converter,C:\repos\jestonedev_ActivityManager\ConvertModule\Converter.cs,Converter,The following switch statement is missing a default case: switch (sex)              {                  case Sex.Male: this.sex = new MaleClass();                      break;                  case Sex.Female: this.sex = new FemaleClass();                      break;                  case Sex.Neuter: this.sex = new NeuterClass();                      break;              }
