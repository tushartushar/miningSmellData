Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,ReportEditing,Cyclomatic complexity of the method is 8
Complex Method,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,WriteTable,Cyclomatic complexity of the method is 13
Complex Method,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,add_xelement_merge,Cyclomatic complexity of the method is 11
Complex Method,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateSheetsByElements,Cyclomatic complexity of the method is 21
Complex Method,ReportModule,MSEditor,C:\repos\jestonedev_ActivityManager\ReportModule\MSEditor.cs,prepair_element,Cyclomatic complexity of the method is 8
Complex Method,ReportModule,MSEditor,C:\repos\jestonedev_ActivityManager\ReportModule\MSEditor.cs,parse_style_tags,Cyclomatic complexity of the method is 18
Complex Method,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,parse_element_tag,Cyclomatic complexity of the method is 12
Complex Method,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,WriteTable,Cyclomatic complexity of the method is 16
Complex Method,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WritePatternText,Cyclomatic complexity of the method is 8
Complex Method,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WriteTable,Cyclomatic complexity of the method is 13
Complex Method,ReportModule,ReportHelper,C:\repos\jestonedev_ActivityManager\ReportModule\ReportHelper.cs,GetTextNodePatternPartInfo,Cyclomatic complexity of the method is 13
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,WriteTable,The length of the statement  "            List<XElement> xml_contractor_elements = ReportHelper.FindElementsByTag(document.Value.Root' reportValue.XmlContractor); " is 120.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateSheetsByElements,The length of the statement  "                foreach (XElement sheet in workbook.Root.Element(XName.Get("sheets"' xmlnsMain)).Elements(XName.Get("sheet"' xmlnsMain))) " is 121.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateSheetsByElements,The length of the statement  "                        foreach (XElement nsheet in workbook.Root.Element(XName.Get("sheets"' xmlnsMain)).Elements(XName.Get("sheet"' xmlnsMain))) " is 122.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateSheetsByElements,The length of the statement  "            foreach (XElement element in workbook.Root.Elements(XName.Get("sheets"' xmlnsMain)).Elements(XName.Get("sheet"' xmlnsMain))) " is 124.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateElementsByTemplate,The length of the statement  "                    Console.WriteLine(String.Format(CultureInfo.CurrentCulture' "Заполнено {0} из {1} строк"' count' reportValue.Table.Count)); " is 123.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateElementsByTemplate,The length of the statement  "                        "<v>" + ss_index("$" + reportValue.Table.Columns[i] + "$"' shared_strings).ToString(CultureInfo.CurrentCulture) + "</v>"' " is 121.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,ca_increment,The length of the statement  "            row_address = (Int32.Parse(row_address' CultureInfo.CurrentCulture) + y_increment).ToString(CultureInfo.CurrentCulture); " is 120.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,recalculate_merge_cells,The length of the statement  "                if (Int32.Parse(merge_start_row_address' CultureInfo.CurrentCulture) > Int32.Parse(row_address' CultureInfo.CurrentCulture)) " is 124.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,recalculate_merge_cells,The length of the statement  "                    merge_start_row_address = (Int32.Parse(merge_start_row_address' CultureInfo.CurrentCulture) + y_increment).ToString(CultureInfo.CurrentCulture); " is 144.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,recalculate_merge_cells,The length of the statement  "                if (Int32.Parse(merge_end_row_address' CultureInfo.CurrentCulture) > Int32.Parse(row_address' CultureInfo.CurrentCulture)) " is 122.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,recalculate_merge_cells,The length of the statement  "                    merge_end_row_address = (Int32.Parse(merge_end_row_address' CultureInfo.CurrentCulture) + y_increment).ToString(CultureInfo.CurrentCulture); " is 140.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,recalculate_merge_cells,The length of the statement  "                mergeCell.Attribute("ref").SetValue(merge_start_col_address + merge_start_row_address + ":" + merge_end_col_address + merge_end_row_address); " is 141.
Long Statement,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,parse_br_tags,The length of the statement  "                    textElement.Value = textElement.Value.Replace("$br$"' "\n\r").Replace("$BR$".ToUpper(CultureInfo.CurrentCulture)' "\n\r") " is 121.
Long Statement,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,WriteTable,The length of the statement  "                            Console.WriteLine(String.Format(CultureInfo.CurrentCulture' "Заполнено {0} из {1} строк"' count' reportValue.Table.Count)); " is 123.
Long Statement,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,ReportEditingContentFile,The length of the statement  "            Console.WriteLine(String.Format(CultureInfo.CurrentCulture'"Сохраняем файл {0} отчета во временную директорию"' reportContentFile)); " is 132.
Long Statement,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WriteTable,The length of the statement  "                            Console.WriteLine(String.Format(CultureInfo.CurrentCulture'"Заполнено {0} из {1} строк"' count' reportValue.Table.Count)); " is 122.
Long Statement,ReportModule,ReportHelper,C:\repos\jestonedev_ActivityManager\ReportModule\ReportHelper.cs,GetTextNodePatternPartInfo,The length of the statement  "            if (ListPNIC.Count == 0 || ListPNIC[ListPNIC.Count - 1].Items[ListPNIC[ListPNIC.Count - 1].Items.Count - 1].IsClosingPatternNode) " is 129.
Complex Conditional,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WritePatternText,The conditional expression  "ReportHelper.ParseToBool(_additionalOptions[ReportOption.TryConvertTypes]) ||                      _additionalOptions[ReportOption.TryConvertTypes].Split(''')                          .Select(r => r.Trim())                          .Contains(pattern) ||                      (_additionalOptions[ReportOption.TryConvertTypes]                          .Split(''').Select(r => r.Trim()).Any(r => r.StartsWith("!")) &&                       !_additionalOptions[ReportOption.TryConvertTypes].Split(''')                           .Select(r => r.Trim())                           .Contains("!" + pattern))"  is complex.
Complex Conditional,ReportModule,ReportPlug,C:\repos\jestonedev_ActivityManager\ReportModule\ReportPlugin.cs,ReportEditing,The conditional expression  "File.Exists(Path.Combine(report_unzip_path' @"word" + Path.DirectorySeparatorChar + "document.xml")) &&                      (extension == ".docx" || extension == ".docm" || extension == ".dotx" || extension == ".dotm")"  is complex.
Complex Conditional,ReportModule,ReportPlug,C:\repos\jestonedev_ActivityManager\ReportModule\ReportPlugin.cs,ReportEditing,The conditional expression  "Directory.Exists(Path.Combine(report_unzip_path' "xl")) &&                      (extension == ".xlsx" || extension == ".xlsm" || extension == ".xltx" || extension == ".xltm")"  is complex.
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,add_xelement_merge,The following statement contains a magic number: if (templateElement.Name.LocalName == "row")              {                  if (y_increment == 0) return;                  foreach (var cellElement in templateElement.Elements())                  {                      var address = cellElement.Attribute("r").Value;                       foreach (var mergeCell in mergeCells)                      {                          var mergeRef = mergeCell.Attribute("ref");                          if (mergeRef == null) continue;                          if (!Regex.IsMatch(mergeRef.Value' @"^" + address + ":")) continue;                          var mergeMatch = Regex.Match(mergeRef.Value' @"(\w+)([0-9]+):(\w+)([0-9]+)");                          if(mergeMatch.Groups.Count != 5) continue;                          var colStart = mergeMatch.Groups[1].Value;                          var rowStart = int.Parse(mergeMatch.Groups[2].Value) + y_increment;                          var colEnd = mergeMatch.Groups[3].Value;                          var rowEnd = int.Parse(mergeMatch.Groups[4].Value) + y_increment;                          mergeCellsElement.Add(                              XElement.Parse("<mergeCell xmlns=\""+xmlnsMain+"\" ref=\"" + colStart + rowStart + ":" + colEnd + rowEnd + "\"/>"));                          var mergeCellCount = int.Parse(mergeCellsElement.Attribute("count").Value);                          mergeCellsElement.Attribute("count").Value = (mergeCellCount + 1).ToString();                      }                  }              }              else              {                  // nothing              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,add_xelement_merge,The following statement contains a magic number: if (templateElement.Name.LocalName == "row")              {                  if (y_increment == 0) return;                  foreach (var cellElement in templateElement.Elements())                  {                      var address = cellElement.Attribute("r").Value;                       foreach (var mergeCell in mergeCells)                      {                          var mergeRef = mergeCell.Attribute("ref");                          if (mergeRef == null) continue;                          if (!Regex.IsMatch(mergeRef.Value' @"^" + address + ":")) continue;                          var mergeMatch = Regex.Match(mergeRef.Value' @"(\w+)([0-9]+):(\w+)([0-9]+)");                          if(mergeMatch.Groups.Count != 5) continue;                          var colStart = mergeMatch.Groups[1].Value;                          var rowStart = int.Parse(mergeMatch.Groups[2].Value) + y_increment;                          var colEnd = mergeMatch.Groups[3].Value;                          var rowEnd = int.Parse(mergeMatch.Groups[4].Value) + y_increment;                          mergeCellsElement.Add(                              XElement.Parse("<mergeCell xmlns=\""+xmlnsMain+"\" ref=\"" + colStart + rowStart + ":" + colEnd + rowEnd + "\"/>"));                          var mergeCellCount = int.Parse(mergeCellsElement.Attribute("count").Value);                          mergeCellsElement.Attribute("count").Value = (mergeCellCount + 1).ToString();                      }                  }              }              else              {                  // nothing              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,add_xelement_merge,The following statement contains a magic number: if (templateElement.Name.LocalName == "row")              {                  if (y_increment == 0) return;                  foreach (var cellElement in templateElement.Elements())                  {                      var address = cellElement.Attribute("r").Value;                       foreach (var mergeCell in mergeCells)                      {                          var mergeRef = mergeCell.Attribute("ref");                          if (mergeRef == null) continue;                          if (!Regex.IsMatch(mergeRef.Value' @"^" + address + ":")) continue;                          var mergeMatch = Regex.Match(mergeRef.Value' @"(\w+)([0-9]+):(\w+)([0-9]+)");                          if(mergeMatch.Groups.Count != 5) continue;                          var colStart = mergeMatch.Groups[1].Value;                          var rowStart = int.Parse(mergeMatch.Groups[2].Value) + y_increment;                          var colEnd = mergeMatch.Groups[3].Value;                          var rowEnd = int.Parse(mergeMatch.Groups[4].Value) + y_increment;                          mergeCellsElement.Add(                              XElement.Parse("<mergeCell xmlns=\""+xmlnsMain+"\" ref=\"" + colStart + rowStart + ":" + colEnd + rowEnd + "\"/>"));                          var mergeCellCount = int.Parse(mergeCellsElement.Attribute("count").Value);                          mergeCellsElement.Attribute("count").Value = (mergeCellCount + 1).ToString();                      }                  }              }              else              {                  // nothing              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,add_xelement_merge,The following statement contains a magic number: if (templateElement.Name.LocalName == "row")              {                  if (y_increment == 0) return;                  foreach (var cellElement in templateElement.Elements())                  {                      var address = cellElement.Attribute("r").Value;                       foreach (var mergeCell in mergeCells)                      {                          var mergeRef = mergeCell.Attribute("ref");                          if (mergeRef == null) continue;                          if (!Regex.IsMatch(mergeRef.Value' @"^" + address + ":")) continue;                          var mergeMatch = Regex.Match(mergeRef.Value' @"(\w+)([0-9]+):(\w+)([0-9]+)");                          if(mergeMatch.Groups.Count != 5) continue;                          var colStart = mergeMatch.Groups[1].Value;                          var rowStart = int.Parse(mergeMatch.Groups[2].Value) + y_increment;                          var colEnd = mergeMatch.Groups[3].Value;                          var rowEnd = int.Parse(mergeMatch.Groups[4].Value) + y_increment;                          mergeCellsElement.Add(                              XElement.Parse("<mergeCell xmlns=\""+xmlnsMain+"\" ref=\"" + colStart + rowStart + ":" + colEnd + rowEnd + "\"/>"));                          var mergeCellCount = int.Parse(mergeCellsElement.Attribute("count").Value);                          mergeCellsElement.Attribute("count").Value = (mergeCellCount + 1).ToString();                      }                  }              }              else              {                  // nothing              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,CreateElementsByTemplate,The following statement contains a magic number: foreach (ReportRow row in reportValue.Table)              {                  count++;                  if (count % 500 == 0)                      Console.WriteLine(String.Format(CultureInfo.CurrentCulture' "Заполнено {0} из {1} строк"' count' reportValue.Table.Count));                  string result_row = templateString;                  for (int i = 0; i < reportValue.Table.Columns.Count; i++)                  {                      result_row = result_row.Replace(                          "<v>" + ss_index("$" + reportValue.Table.Columns[i] + "$"' shared_strings).ToString(CultureInfo.CurrentCulture) + "</v>"'                          "<v>" + shared_strings.Add(                          ss_element("$" + reportValue.Table.Columns[i] + "$"' shared_strings).ToString(SaveOptions.DisableFormatting).                          Replace("$" + reportValue.Table.Columns[i] + "$"' row[i].Value).ToString()) + "</v>");                  }                  XElement new_element = XElement.Parse(result_row' LoadOptions.PreserveWhitespace);                  new_elements.Add(new_element);              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,ca_increment,The following statement contains a magic number: int base_index = 26;
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,ca_increment,The following statement contains a magic number: for (int i = col_address.Length - 1; i >= 0; i--)              {                  int curr_base_index = (int)Math.Pow(base_index' col_address.Length - 1 - i);                  value += (col_address[i] - 64) * curr_base_index;              }
Magic Number,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,ca_increment,The following statement contains a magic number: do              {                  var code = (value - 1)%base_index;                  var indexValue = (char)(code + 65);                  value = (value - 1 - code) / base_index;                  col_address = indexValue + col_address;              }              while (value > 0);
Magic Number,ReportModule,MSEditor,C:\repos\jestonedev_ActivityManager\ReportModule\MSEditor.cs,parse_style_tags,The following statement contains a magic number: foreach (var child_element in xelement.Elements())                  if (child_element.Name.LocalName == "r")                  {                      XElement textElement = child_element.Element(XName.Get("t"' xmlnsMain));                      if (textElement == null)                      {                          new_xelement.Add(child_element);                          continue;                      }                      string content = textElement.Value;                      SortedDictionary<int' TagInfo> style_tags = GetStyleTags(content);                      if (style_tags.Count > 0)                      {                          string[] spliters = new string[style_tags.Count * 2];                          int i = 0;                          foreach (var spec_tag in style_tags)                          {                              if (spec_tag.Value.tag_type == SpecTagType.OpenTag)                              {                                  spliters[i] = @"$" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                                  spliters[i + 1] = @"$" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                              }                              else                              {                                  spliters[i] = @"$/" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                                  spliters[i + 1] = @"$/" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                              }                              i = i + 2;                          }                          string[] values = content.Split(spliters' StringSplitOptions.None);                          i = 0;                          foreach (string value in values)                          {                              TagInfo spec_tag_info = null;                              int j = 1;                              foreach (var spec_tag in style_tags)                              {                                  if (i == j)                                  {                                      spec_tag_info = spec_tag.Value;                                      break;                                  }                                  j++;                              }                              if (spec_tag_info != null)                              {                                  if (spec_tag_info.tag_type == SpecTagType.OpenTag)                                      styles.Add(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                                  else                                      styles.Remove(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                              }                              i++;                              if (String.IsNullOrEmpty(value))                                  continue;                              XElement new_element = new XElement(child_element);                              textElement = new_element.Element(XName.Get("t"' xmlnsMain));                              textElement.Value = value;                              if (value != value.Trim() && textElement.Attribute(XNamespace.Xml + "space") == null)                                  textElement.Add(new XAttribute(XNamespace.Xml + "space"' "preserve"));                              foreach (Style style in styles)                                  foreach (var styleTag in styleTags[style])                                  {                                      XElement tag = new XElement(XName.Get(styleTag.Key' xmlnsMain));                                      XElement rPrElement = child_element.Element(XName.Get("rPr"' xmlnsMain));                                      foreach (var attribute in styleTag.Value)                                          tag.Add(new XAttribute(XName.Get(attribute.Key' xmlnsMain)' attribute.Value));                                      if (rPrElement == null)                                          new_element.Add(new XElement(XName.Get("rPr"' xmlnsMain)));                                      new_element.Element(XName.Get("rPr"' xmlnsMain)).Add(tag);                                  }                              new_xelement.Add(new_element);                          }                      }                      else                      {                          XElement new_element = new XElement(child_element);                          foreach (Style style in styles)                              foreach (var styleTag in styleTags[style])                              {                                  XElement tag = new XElement(XName.Get(styleTag.Key' xmlnsMain));                                  XElement rPrElement = child_element.Element(XName.Get("rPr"' xmlnsMain));                                  foreach (var attribute in styleTag.Value)                                      tag.Add(new XAttribute(XName.Get(attribute.Key' xmlnsMain)' attribute.Value));                                  if (rPrElement == null)                                      new_element.Add(new XElement(XName.Get("rPr"' xmlnsMain)));                                  new_element.Element(XName.Get("rPr"' xmlnsMain)).Add(tag);                              }                          new_xelement.Add(new_element);                      }                  }                  else                      new_xelement.Add(child_element);
Magic Number,ReportModule,MSEditor,C:\repos\jestonedev_ActivityManager\ReportModule\MSEditor.cs,parse_style_tags,The following statement contains a magic number: foreach (var child_element in xelement.Elements())                  if (child_element.Name.LocalName == "r")                  {                      XElement textElement = child_element.Element(XName.Get("t"' xmlnsMain));                      if (textElement == null)                      {                          new_xelement.Add(child_element);                          continue;                      }                      string content = textElement.Value;                      SortedDictionary<int' TagInfo> style_tags = GetStyleTags(content);                      if (style_tags.Count > 0)                      {                          string[] spliters = new string[style_tags.Count * 2];                          int i = 0;                          foreach (var spec_tag in style_tags)                          {                              if (spec_tag.Value.tag_type == SpecTagType.OpenTag)                              {                                  spliters[i] = @"$" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                                  spliters[i + 1] = @"$" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                              }                              else                              {                                  spliters[i] = @"$/" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                                  spliters[i + 1] = @"$/" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                              }                              i = i + 2;                          }                          string[] values = content.Split(spliters' StringSplitOptions.None);                          i = 0;                          foreach (string value in values)                          {                              TagInfo spec_tag_info = null;                              int j = 1;                              foreach (var spec_tag in style_tags)                              {                                  if (i == j)                                  {                                      spec_tag_info = spec_tag.Value;                                      break;                                  }                                  j++;                              }                              if (spec_tag_info != null)                              {                                  if (spec_tag_info.tag_type == SpecTagType.OpenTag)                                      styles.Add(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                                  else                                      styles.Remove(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                              }                              i++;                              if (String.IsNullOrEmpty(value))                                  continue;                              XElement new_element = new XElement(child_element);                              textElement = new_element.Element(XName.Get("t"' xmlnsMain));                              textElement.Value = value;                              if (value != value.Trim() && textElement.Attribute(XNamespace.Xml + "space") == null)                                  textElement.Add(new XAttribute(XNamespace.Xml + "space"' "preserve"));                              foreach (Style style in styles)                                  foreach (var styleTag in styleTags[style])                                  {                                      XElement tag = new XElement(XName.Get(styleTag.Key' xmlnsMain));                                      XElement rPrElement = child_element.Element(XName.Get("rPr"' xmlnsMain));                                      foreach (var attribute in styleTag.Value)                                          tag.Add(new XAttribute(XName.Get(attribute.Key' xmlnsMain)' attribute.Value));                                      if (rPrElement == null)                                          new_element.Add(new XElement(XName.Get("rPr"' xmlnsMain)));                                      new_element.Element(XName.Get("rPr"' xmlnsMain)).Add(tag);                                  }                              new_xelement.Add(new_element);                          }                      }                      else                      {                          XElement new_element = new XElement(child_element);                          foreach (Style style in styles)                              foreach (var styleTag in styleTags[style])                              {                                  XElement tag = new XElement(XName.Get(styleTag.Key' xmlnsMain));                                  XElement rPrElement = child_element.Element(XName.Get("rPr"' xmlnsMain));                                  foreach (var attribute in styleTag.Value)                                      tag.Add(new XAttribute(XName.Get(attribute.Key' xmlnsMain)' attribute.Value));                                  if (rPrElement == null)                                      new_element.Add(new XElement(XName.Get("rPr"' xmlnsMain)));                                  new_element.Element(XName.Get("rPr"' xmlnsMain)).Add(tag);                              }                          new_xelement.Add(new_element);                      }                  }                  else                      new_xelement.Add(child_element);
Magic Number,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,parse_element_tag,The following statement contains a magic number: if (style_tags.Count > 0)              {                  string content = xelement.Value;                  string[] spliters = new string[style_tags.Count * 2];                  int i = 0;                  foreach (var spec_tag in style_tags)                  {                      if (spec_tag.Value.tag_type == SpecTagType.OpenTag)                      {                          spliters[i] = @"$" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                          spliters[i + 1] = @"$" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                      }                      else                      {                          spliters[i] = @"$/" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                          spliters[i + 1] = @"$/" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                      }                      i = i + 2;                  }                  string[] values = content.Split(spliters' StringSplitOptions.None);                  i = 0;                  foreach (string value in values)                  {                      TagInfo spec_tag_info = null;                      int j = 1;                      foreach (var spec_tag in style_tags)                      {                          if (i == j)                          {                              spec_tag_info = spec_tag.Value;                              break;                          }                          j++;                      }                      if (spec_tag_info != null)                      {                          if (spec_tag_info.tag_type == SpecTagType.OpenTag)                              styles.Add(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                          else                              styles.Remove(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                      }                      i++;                      if (String.IsNullOrEmpty(value))                          continue;                      XElement new_element = new XElement(xelement);                      new_element.Value = value;                      string style_name = "";                      if (new_element.Attribute(                              XName.Get("style-name"' OOStyleSheet.XmlnsText)) != null)                      {                          style_name = style_sheet.CopyStyle(new_element.Attribute(                              XName.Get("style-name"' OOStyleSheet.XmlnsText)).Value' "text");                          new_element.Attribute(XName.Get("style-name"'                              OOStyleSheet.XmlnsText)).Value = style_name;                      }                      else                      {                          style_name = style_sheet.CreateStyle("text");                          new_element.Add(new XAttribute(XName.Get("style-name"'                              OOStyleSheet.XmlnsText)' style_name));                      }                      foreach (Style style in styles)                          style_sheet.ApplyStyle(style_name' style);                      xroot.Add(new_element);                  }              }              else              {                  XElement new_element = new XElement(xelement);                  string style_name = "";                  if (new_element.Attribute(                          XName.Get("style-name"' OOStyleSheet.XmlnsText)) != null)                  {                      style_name = style_sheet.CopyStyle(new_element.Attribute(                          XName.Get("style-name"' OOStyleSheet.XmlnsText)).Value' "text");                      new_element.Attribute(XName.Get("style-name"'                          OOStyleSheet.XmlnsText)).Value = style_name;                      foreach (Style style in styles)                          style_sheet.ApplyStyle(style_name' style);                  }                  xroot.Add(new_element);              }
Magic Number,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,parse_element_tag,The following statement contains a magic number: if (style_tags.Count > 0)              {                  string content = xelement.Value;                  string[] spliters = new string[style_tags.Count * 2];                  int i = 0;                  foreach (var spec_tag in style_tags)                  {                      if (spec_tag.Value.tag_type == SpecTagType.OpenTag)                      {                          spliters[i] = @"$" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                          spliters[i + 1] = @"$" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                      }                      else                      {                          spliters[i] = @"$/" + spec_tag.Value.tag.ToString().ToLower(CultureInfo.CurrentCulture) + @"$";                          spliters[i + 1] = @"$/" + spec_tag.Value.tag.ToString().ToUpper(CultureInfo.CurrentCulture) + @"$";                      }                      i = i + 2;                  }                  string[] values = content.Split(spliters' StringSplitOptions.None);                  i = 0;                  foreach (string value in values)                  {                      TagInfo spec_tag_info = null;                      int j = 1;                      foreach (var spec_tag in style_tags)                      {                          if (i == j)                          {                              spec_tag_info = spec_tag.Value;                              break;                          }                          j++;                      }                      if (spec_tag_info != null)                      {                          if (spec_tag_info.tag_type == SpecTagType.OpenTag)                              styles.Add(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                          else                              styles.Remove(ReportHelper.GetStyleBySpecTag(spec_tag_info.tag));                      }                      i++;                      if (String.IsNullOrEmpty(value))                          continue;                      XElement new_element = new XElement(xelement);                      new_element.Value = value;                      string style_name = "";                      if (new_element.Attribute(                              XName.Get("style-name"' OOStyleSheet.XmlnsText)) != null)                      {                          style_name = style_sheet.CopyStyle(new_element.Attribute(                              XName.Get("style-name"' OOStyleSheet.XmlnsText)).Value' "text");                          new_element.Attribute(XName.Get("style-name"'                              OOStyleSheet.XmlnsText)).Value = style_name;                      }                      else                      {                          style_name = style_sheet.CreateStyle("text");                          new_element.Add(new XAttribute(XName.Get("style-name"'                              OOStyleSheet.XmlnsText)' style_name));                      }                      foreach (Style style in styles)                          style_sheet.ApplyStyle(style_name' style);                      xroot.Add(new_element);                  }              }              else              {                  XElement new_element = new XElement(xelement);                  string style_name = "";                  if (new_element.Attribute(                          XName.Get("style-name"' OOStyleSheet.XmlnsText)) != null)                  {                      style_name = style_sheet.CopyStyle(new_element.Attribute(                          XName.Get("style-name"' OOStyleSheet.XmlnsText)).Value' "text");                      new_element.Attribute(XName.Get("style-name"'                          OOStyleSheet.XmlnsText)).Value = style_name;                      foreach (Style style in styles)                          style_sheet.ApplyStyle(style_name' style);                  }                  xroot.Add(new_element);              }
Magic Number,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,WriteTable,The following statement contains a magic number: foreach (XElement element in elements)              {                  string element_value = element.ToString(SaveOptions.DisableFormatting);                  int pattern_match_count = 0; //Число шаблонов' найденных в элементе                  foreach (string pattern in patterns)                      if (ReportHelper.MatchesPattern(element' pattern) > 0)                          pattern_match_count++;                  if (pattern_match_count > 0 && ((double)(patterns.Count) / 2) <= pattern_match_count)                  {                      List<XElement> new_elements = new List<XElement>();                      Console.WriteLine("Заполняем табличные данные отчета");                      int count = 0;                      foreach (ReportRow row in reportValue.Table)                      {                          if (row == null)                              throw new ReportException("В коллекции Table отсутствует ссылка на объект класса ReportRow");                          count++;                          if (count % 500 == 0)                              Console.WriteLine(String.Format(CultureInfo.CurrentCulture' "Заполнено {0} из {1} строк"' count' reportValue.Table.Count));                          XElement new_element = XElement.Parse(element_value' LoadOptions.PreserveWhitespace);                          //Заменить шаблоны для каждой колонки                          for (int i = 0; i < patterns.Count; i++)                          {                              WritePatternText(new_element' patterns[i]' row[i].Value);                              WritePatternAttributes(new_element' patterns[i]' row[i].Value);                          }                          new_elements.Add(new_element);                      }                      Console.WriteLine("Заполнение табличных данных отчета закончено");                      if (reportValue.XmlContractor == "table-cell")                      {                          XElement table = element.Parent.Parent;                          XElement columnDef = table.Element(XName.Get("table-column"' OOStyleSheet.XmlnsTable));                          if (columnDef == null)                              continue;                          XAttribute num_col_rep = columnDef.Attribute(XName.Get("number-columns-repeated"' OOStyleSheet.XmlnsTable));                          if (num_col_rep == null)                          {                              num_col_rep = new XAttribute(XName.Get("number-columns-repeated"' OOStyleSheet.XmlnsTable)' new_elements.Count);                              columnDef.Add(num_col_rep);                          }                          num_col_rep.Value = new_elements.Count.ToString(CultureInfo.CurrentCulture);                      }                      foreach (XElement new_element in new_elements)                          element.AddBeforeSelf(new_element);                      element.Remove();                  }              }
Magic Number,ReportModule,OOEditor,C:\repos\jestonedev_ActivityManager\ReportModule\OOEditor.cs,WriteTable,The following statement contains a magic number: foreach (XElement element in elements)              {                  string element_value = element.ToString(SaveOptions.DisableFormatting);                  int pattern_match_count = 0; //Число шаблонов' найденных в элементе                  foreach (string pattern in patterns)                      if (ReportHelper.MatchesPattern(element' pattern) > 0)                          pattern_match_count++;                  if (pattern_match_count > 0 && ((double)(patterns.Count) / 2) <= pattern_match_count)                  {                      List<XElement> new_elements = new List<XElement>();                      Console.WriteLine("Заполняем табличные данные отчета");                      int count = 0;                      foreach (ReportRow row in reportValue.Table)                      {                          if (row == null)                              throw new ReportException("В коллекции Table отсутствует ссылка на объект класса ReportRow");                          count++;                          if (count % 500 == 0)                              Console.WriteLine(String.Format(CultureInfo.CurrentCulture' "Заполнено {0} из {1} строк"' count' reportValue.Table.Count));                          XElement new_element = XElement.Parse(element_value' LoadOptions.PreserveWhitespace);                          //Заменить шаблоны для каждой колонки                          for (int i = 0; i < patterns.Count; i++)                          {                              WritePatternText(new_element' patterns[i]' row[i].Value);                              WritePatternAttributes(new_element' patterns[i]' row[i].Value);                          }                          new_elements.Add(new_element);                      }                      Console.WriteLine("Заполнение табличных данных отчета закончено");                      if (reportValue.XmlContractor == "table-cell")                      {                          XElement table = element.Parent.Parent;                          XElement columnDef = table.Element(XName.Get("table-column"' OOStyleSheet.XmlnsTable));                          if (columnDef == null)                              continue;                          XAttribute num_col_rep = columnDef.Attribute(XName.Get("number-columns-repeated"' OOStyleSheet.XmlnsTable));                          if (num_col_rep == null)                          {                              num_col_rep = new XAttribute(XName.Get("number-columns-repeated"' OOStyleSheet.XmlnsTable)' new_elements.Count);                              columnDef.Add(num_col_rep);                          }                          num_col_rep.Value = new_elements.Count.ToString(CultureInfo.CurrentCulture);                      }                      foreach (XElement new_element in new_elements)                          element.AddBeforeSelf(new_element);                      element.Remove();                  }              }
Magic Number,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WriteTable,The following statement contains a magic number: foreach (XElement element in elements)              {                  string element_value = element.ToString(SaveOptions.DisableFormatting);                  int pattern_match_count = 0; //Число шаблонов' найденных в элементе                  foreach (string pattern in patterns)                      if (ReportHelper.MatchesPattern(element' pattern) > 0)                          pattern_match_count++;                  if (pattern_match_count > 0 && ((double)(patterns.Count) / 2) <= pattern_match_count)                  {                      List<XElement> new_elements = new List<XElement>();                      Console.WriteLine("Заполняем табличные данные отчета");                      int count = 0;                      foreach (ReportRow row in reportValue.Table)                      {                          if (row == null)                              throw new ReportException("В коллекции Table отсутствует ссылка на объект класса ReportRow");                          count++;                          if (count % 500 == 0)                              Console.WriteLine(String.Format(CultureInfo.CurrentCulture'"Заполнено {0} из {1} строк"' count' reportValue.Table.Count));                          XElement new_element = XElement.Parse(element_value' LoadOptions.PreserveWhitespace);                          //Заменить шаблоны для каждой колонки                          for (int i = 0; i < patterns.Count; i++)                          {                              WritePatternText(new_element' patterns[i]' row[i].Value);                              WritePatternAttributes(new_element' patterns[i]' row[i].Value);                          }                          new_elements.Add(new_element);                      }                      Console.WriteLine("Заполнение табличных данных отчета закончено");                      foreach (XElement new_element in new_elements)                          element.AddBeforeSelf(new_element);                      element.Remove();                  }              }
Magic Number,ReportModule,ReportEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ReportEditor.cs,WriteTable,The following statement contains a magic number: foreach (XElement element in elements)              {                  string element_value = element.ToString(SaveOptions.DisableFormatting);                  int pattern_match_count = 0; //Число шаблонов' найденных в элементе                  foreach (string pattern in patterns)                      if (ReportHelper.MatchesPattern(element' pattern) > 0)                          pattern_match_count++;                  if (pattern_match_count > 0 && ((double)(patterns.Count) / 2) <= pattern_match_count)                  {                      List<XElement> new_elements = new List<XElement>();                      Console.WriteLine("Заполняем табличные данные отчета");                      int count = 0;                      foreach (ReportRow row in reportValue.Table)                      {                          if (row == null)                              throw new ReportException("В коллекции Table отсутствует ссылка на объект класса ReportRow");                          count++;                          if (count % 500 == 0)                              Console.WriteLine(String.Format(CultureInfo.CurrentCulture'"Заполнено {0} из {1} строк"' count' reportValue.Table.Count));                          XElement new_element = XElement.Parse(element_value' LoadOptions.PreserveWhitespace);                          //Заменить шаблоны для каждой колонки                          for (int i = 0; i < patterns.Count; i++)                          {                              WritePatternText(new_element' patterns[i]' row[i].Value);                              WritePatternAttributes(new_element' patterns[i]' row[i].Value);                          }                          new_elements.Add(new_element);                      }                      Console.WriteLine("Заполнение табличных данных отчета закончено");                      foreach (XElement new_element in new_elements)                          element.AddBeforeSelf(new_element);                      element.Remove();                  }              }
Magic Number,ReportModule,ReportPlug,C:\repos\jestonedev_ActivityManager\ReportModule\ReportPlugin.cs,ReportPlug,The following statement contains a magic number: foreach (string file in files)                  if (File.GetCreationTime(file).AddDays(7) < DateTime.Now)                      File.Delete(file);
Magic Number,ReportModule,ReportPlug,C:\repos\jestonedev_ActivityManager\ReportModule\ReportPlugin.cs,ReportPlug,The following statement contains a magic number: foreach (string directory in directories)                  if (Directory.GetCreationTime(directory).AddDays(7) < DateTime.Now)                      Directory.Delete(directory' true);
Missing Default,ReportModule,ExcelEditor,C:\repos\jestonedev_ActivityManager\ReportModule\ExcelEditor.cs,WriteTable,The following switch statement is missing a default case: switch (new_element.Name.LocalName)                              {                                  case "row":                                      address = new_element.Elements().First().Attribute("r").Value;                                      recalculate_merge_cells(document.Value' address' 1' x_increment);                                      break;                                  case "c":                                      address = new_element.Attribute("r").Value;                                      recalculate_merge_cells(document.Value' address' 0' x_increment);                                      break;                              }
