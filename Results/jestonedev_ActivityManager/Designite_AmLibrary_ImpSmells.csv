Implementation smell,Namespace,Class,File,Method,Description
Long Method,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,Execute,The method has 136 lines of code.
Complex Method,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,LoadConfigFile,Cyclomatic complexity of the method is 8
Complex Method,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckActivityVariablesValues,Cyclomatic complexity of the method is 8
Complex Method,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,Execute,Cyclomatic complexity of the method is 11
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckActivityVariablesValues,The length of the statement  "                    string.Format(CultureInfo.CurrentCulture' _("Не удалось найти действие {0} в плагине {1}")' step.ActionName' step.PlugName)); " is 125.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckActivityVariablesValues,The length of the statement  "                            string.Format(CultureInfo.CurrentCulture' _("Ошибка преобразования значения \"{0}\" параметра {1} к типу {2}' требуемому действием {3} плагина {4}")' " is 149.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckActivityVariablesValues,The length of the statement  "                        string.Format(CultureInfo.CurrentCulture' _("В действии {0} плагина {1} не существует переменной с именем {2}")' step.ActionName' step.PlugName' actionParameter.Name)); " is 168.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckAndPrepareActions,The length of the statement  "                                _("Неоднозначность определения заданного действия. Действие \"{0}\" определено в плагинах {1} и {2}. Необходимо явное указание плагина в файле конфигурации")' " is 158.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CheckAndPrepareActions,The length of the statement  "                    throw new AMException(String.Format(CultureInfo.CurrentCulture' _("Не удалось найти действие {0} ни в одном из плагинов")' " is 122.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,CurrentDomain_AssemblyResolve,The length of the statement  "            Environment.SetEnvironmentVariable("PATH"' Environment.GetEnvironmentVariable("PATH") + ";" + Path.Combine(Environment.CurrentDirectory' "plugins")); " is 149.
Long Statement,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,Execute,The length of the statement  "                                        //Элменты массива нумеруются с 0' но пользователь вводит их с 1. При этом по окончании цикла идет инкремент' который необходимо учитывать " is 137.
Magic Number,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,Execute,The following statement contains a magic number: for (var j = 0; j < _activitySteps.Count; j++)              {                  var step = _activitySteps[j];                  for (var rc = 0; rc < step.RepeatCount; rc++)                  {                      //Выполняем проверку соответствия значений параметров их типам                      CheckActivityVariablesValues(step);                      //Получаем список входных параметров                      var inputParameters = new object[step.InputParameters.Count];                      for (var i = 0; i < inputParameters.Length; i++)                      {                          object value = step.InputParameters[i].Value;                          var match = Regex.Match(value.ToString()' @"\[[\w]*\]");                          while (match.Success)                          {                              var param = match.Value;                              param = param.Trim('['' ']');                              if (_globalParameters.ContainsKey(param))                                  value = match.Value.Length != value.ToString().Length ?                                       value.ToString().Replace(match.Value' _globalParameters[param].ToString()) :                                       _globalParameters[param];                              match = match.NextMatch();                          }                          inputParameters[i] = value;                      }                      try                      {                          var msg = _debugger.RecieveMessage();                          if (msg.ContainsKey("command"))                          {                              switch (msg["command"])                              {                                  case "run":                                      _debugger = new AmMokeDebugger();                                      break;                                  case "stop":                                      return;                                  case "next":                                      break;                                  default:                                      throw new AMException("Неизвестная команда отладки");                              }                          }                            object[] outputParameters;                          PlugActionHelper.FindPlugAction(_plugins' step)                              .Execute(inputParameters' out outputParameters);                          for (var k = 0; k < outputParameters.Length; k++)                          {                              var paramName = !string.IsNullOrEmpty(_activitySteps[j].OutputParameters[k].Value.Trim()) ?                                  _activitySteps[j].OutputParameters[k].Value : _activitySteps[j].OutputParameters[k].Name;                              if (_globalParameters.ContainsKey(paramName))                                  _globalParameters[paramName] = outputParameters[k];                              else                                  _globalParameters.Add(paramName' outputParameters[k]);                          }                          if (j + 1 < _activitySteps.Count)                          {                              var parametersSerialized = JsonConvert.SerializeObject(                                  _globalParameters.Select(                                      v => new KeyValuePair<string' string>(v.Key'                                          v.Value == null ?                                          null : v.Value.ToString())));                              var message = new MessageForDebug                              {                                  {"step"' (j + 1).ToString()}'                                  {"parameters"' parametersSerialized}                              };                              _debugger.SendMessage(message);                          }                      }                      catch (ApplicationException e)                      {                          string message;                          if (e.InnerException != null)                          {                              if (e.InnerException.GetType().FullName == "IOModule.IfConditionException")                              {                                  if (e.InnerException.Data.Contains("step"))                                  {                                      int stepNum;                                      if (int.TryParse(e.InnerException.Data["step"].ToString().Trim()' out stepNum))                                      {                                          //Элменты массива нумеруются с 0' но пользователь вводит их с 1. При этом по окончании цикла идет инкремент' который необходимо учитывать                                          j = stepNum - 2;                                      }                                  }                                  else                                      if (e.InnerException.Data.Contains("label"))                                      {                                          var label = e.InnerException.Data["label"].ToString().Trim();                                          var stepNum = int.MaxValue;                                          for (var k = 0; k < _activitySteps.Count; k++)                                              if (_activitySteps[k].Label != null && _activitySteps[k].Label.Trim() == label)                                              {                                                  stepNum = k;                                                  break;                                              }                                          j = stepNum - 1;                                      }                                      else                                      {                                          j = int.MaxValue - 1;                                          break;                                      }                                  var parametersSerialized = JsonConvert.SerializeObject(                                  _globalParameters.Select(                                      v => new KeyValuePair<string' string>(v.Key'                                          v.Value == null ?                                          null : v.Value.ToString())));                                  _debugger.SendMessage(new MessageForDebug                                  {                                      {"step"' (j + 1).ToString()}'                                      {"parameters"' parametersSerialized}                                  });                                      continue;                              }                              message = _(e.InnerException.Message);                              foreach (string key in e.InnerException.Data.Keys)                                  message = message.Replace(key' e.InnerException.Data[key].ToString());                          }                          else                              message = e.Message;                          var exceptionMsg =                              string.Format(CultureInfo.CurrentCulture' _("[Шаг {0}]") + ": "' j+1) + message;                          _debugger.SendMessage(new MessageForDebug { { "exception"' exceptionMsg } });                          _debugger.RecieveMessage();                          if (_globalParameters.ContainsKey("--nodialog"))                              Console.WriteLine(exceptionMsg);                          else                              MessageBox.Show(exceptionMsg' "Ошибка"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          return;                      }                  }              }
Magic Number,AmLibrary,ActivityManager,C:\repos\jestonedev_ActivityManager\AmLibrary\ActivityManager.cs,Run,The following statement contains a magic number: ushort port = 8888;
