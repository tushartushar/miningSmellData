Implementation smell,Namespace,Class,File,Method,Description
Long Method,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,InscricaoEstadualDocument,The method has 113 lines of code.
Long Method,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The method has 128 lines of code.
Long Method,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The method has 135 lines of code.
Long Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,NextToken,The method has 185 lines of code.
Long Method,Publisoft.Core.PagSeguro.Parse,PaymentParse,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Parse\PaymentParse.cs,GetData,The method has 146 lines of code.
Complex Method,Publisoft.Core.Attribute.Schema,RequiredAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Schema\RequiredAttribute.cs,Validate,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,InscricaoEstadualDocument,Cyclomatic complexity of the method is 54
Complex Method,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,Cyclomatic complexity of the method is 57
Complex Method,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,Cyclomatic complexity of the method is 16
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 111
Complex Method,Publisoft.Core.PagSeguro.Parse,PaymentParse,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Parse\PaymentParse.cs,GetData,Cyclomatic complexity of the method is 43
Complex Method,Publisoft.Core.PagSeguro.Util,HttpUrlConnectionUtil,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Util\HttpUrlConnectionUtil.cs,CreatePagSeguroServiceException,Cyclomatic complexity of the method is 9
Complex Method,Publisoft.Core.PagSeguro.XmlParse,AddressSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\AddressSerializer.cs,Read,Cyclomatic complexity of the method is 22
Complex Method,Publisoft.Core.PagSeguro.XmlParse,ErrorSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\ErrorSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.PagSeguro.XmlParse,ErrorsSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\ErrorsSerializer.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Publisoft.Core.PagSeguro.XmlParse,ItemListSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\ItemListSerializer.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Publisoft.Core.PagSeguro.XmlParse,ItemSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\ItemSerializer.cs,Read,Cyclomatic complexity of the method is 18
Complex Method,Publisoft.Core.PagSeguro.XmlParse,PaymentMethodSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\PaymentMethodSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.PagSeguro.XmlParse,PaymentRequestResponseSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\PaymentRequestResponseSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.PagSeguro.XmlParse,PaymentSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\PaymentSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.PagSeguro.XmlParse,PhoneSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\PhoneSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Publisoft.Core.PagSeguro.XmlParse,SenderSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\SenderSerializer.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Publisoft.Core.PagSeguro.XmlParse,ShippingSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\ShippingSerializer.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Publisoft.Core.PagSeguro.XmlParse,TransactionSearchResultSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\TransactionSearchResultSerializer.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,Publisoft.Core.PagSeguro.XmlParse,TransactionSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\TransactionSerializer.cs,Read,Cyclomatic complexity of the method is 38
Complex Method,Publisoft.Core.PagSeguro.XmlParse,TransactionSummaryListSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\TransactionSummaryListSerializer.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Publisoft.Core.PagSeguro.XmlParse,TransactionSummarySerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\TransactionSummarySerializer.cs,Read,Cyclomatic complexity of the method is 30
Complex Method,Publisoft.Core.Reflection,EmbeddedAssembly,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Reflection\EmbeddedAssembly.cs,Load,Cyclomatic complexity of the method is 10
Long Parameter List,Publisoft.Core.Attribute.Business,UniquePerAgentAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerAgentAttribute.cs,Validate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Attribute.Business,UniquePerCompanyAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerCompanyAttribute.cs,Validate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Attribute.Business,UniquePerCompanyGroupAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerCompanyGroupAttribute.cs,Validate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Attribute.Business,UniquePerUserAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerUserAttribute.cs,Validate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindMethod,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindIndexer,The method has 5 parameters.
Long Parameter List,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindBestMethod,The method has 7 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Domain,Address,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\Address.cs,Address,The method has 8 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Domain,Item,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\Item.cs,Item,The method has 5 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Domain,Item,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\Item.cs,Item,The method has 5 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Domain,Item,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\Item.cs,Item,The method has 6 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Domain,Sender,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\Sender.cs,Sender,The method has 6 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByDate,The method has 5 parameters.
Long Parameter List,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDateCore,The method has 5 parameters.
Long Statement,Publisoft.Core.Attribute.Business,UniquePerAgentAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerAgentAttribute.cs,Validate,The length of the statement  "		var filterByMethod = typeof(IRepository<>).MakeGenericType (entity.GetType ()).GetMethods ().FirstOrDefault (x => x.Name == "FilterBy"); " is 136.
Long Statement,Publisoft.Core.Attribute.Business,UniquePerCompanyAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerCompanyAttribute.cs,Validate,The length of the statement  "		var filterByMethod = typeof(IRepository<>).MakeGenericType (entity.GetType ()).GetMethods ().FirstOrDefault (x => x.Name == "FilterBy"); " is 136.
Long Statement,Publisoft.Core.Attribute.Business,UniquePerCompanyGroupAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerCompanyGroupAttribute.cs,Validate,The length of the statement  "		var filterByMethod = typeof(IRepository<>).MakeGenericType (entity.GetType ()).GetMethods ().FirstOrDefault (x => x.Name == "FilterBy"); " is 136.
Long Statement,Publisoft.Core.Attribute.Business,UniquePerUserAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Business\UniquePerUserAttribute.cs,Validate,The length of the statement  "		var filterByMethod = typeof(IRepository<>).MakeGenericType (entity.GetType ()).GetMethods ().FirstOrDefault (x => x.Name == "FilterBy"); " is 136.
Long Statement,Publisoft.Core.Attribute.Document,InscricaoEstadualAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Document\InscricaoEstadualAttribute.cs,GetSiglaEstado,The length of the statement  "			result = GetSiglaEstado (value as BaseEntity' namePropertySiglaEstado.Substring (namePropertySiglaEstado.IndexOf (delimiter' StringComparison.Ordinal) + 1)); " is 157.
Long Statement,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The length of the statement  "		aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2; " is 125.
Long Statement,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The length of the statement  "		var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2); " is 137.
Long Statement,Publisoft.Core.Document,EmailDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\EmailDocument.cs,Validate,The length of the statement  "			isValid = Regex.IsMatch (item' @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" + @"(?(\[)(\[(\d{1'3}\.){3}\d{1'3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0'22}[a-z0-9]))$"' RegexOptions.IgnoreCase); " is 261.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAc,The length of the statement  "            Console.WriteLine("Inscrição Estadual AC {0}"' ValidarInscricaoEstadual("AC"' "01.000.941/001-24") ? "válido" : "inválido");" is 124.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAc,The length of the statement  "            Console.WriteLine("Inscrição Estadual AC {0}\n"' ValidarInscricaoEstadual("AC"' "01.011.544/001-94") ? "válido" : "inválido");" is 126.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAc,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAc,The length of the statement  "                        strDigito2 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The length of the statement  "                        strDigito1 = ((intResto == 10) ? "0" : Convert.ToString(intResto)).Substring((((intResto == 10) ? "0" : Convert.ToString(intResto)).Length - 1));" is 145.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAm,The length of the statement  "            Console.WriteLine("Inscrição Estadual AM {0}\n"' ValidarInscricaoEstadual("AM"' "04.210.308-8") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAm,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "             Console.WriteLine("Inscrição Estadual BA {0} (inscricao com 8 digitos)"' ValidarInscricaoEstadual("BA"' "123456-63") ? "válido" : "inválido");" is 142.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "            Console.WriteLine("Inscrição Estadual BA {0} (inscricao com 9 digitos)\n"' ValidarInscricaoEstadual("BA"' "1000003-06") ? "válido" : "inválido");" is 145.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                    if ((("0123458".IndexOf(strBase.Substring(0' 1)' 0' System.StringComparison.OrdinalIgnoreCase) + 1) > 0) && strBase.Length == 8)" is 128.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                        strDigito2 = ((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                            strDigito1 = ((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                    else if ((("679".IndexOf(strBase.Substring(0' 1)' 0' System.StringComparison.OrdinalIgnoreCase) + 1) > 0) && strBase.Length == 8)" is 129.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                        strDigito2 = ((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                            strDigito1 = ((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                    else if ((("0123458".IndexOf(strBase.Substring(1' 1)' 0' System.StringComparison.OrdinalIgnoreCase) + 1) > 0) && strBase.Length == 9)" is 133.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                        strDigito2 = ((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((10 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeBa,The length of the statement  "                            strDigito1 = ((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto == 0) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 157.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeDf,The length of the statement  "             Console.WriteLine("Inscrição Estadual DF {0}\n"' ValidarInscricaoEstadual("DF"' "07300001001-09") ? "válido" : "inválido");" is 123.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeDf,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeDf,The length of the statement  "                        strDigito2 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeEs,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeGo,The length of the statement  "             Console.WriteLine("Inscrição Estadual GO {0}\n"' ValidarInscricaoEstadual("GO"' "10.987.654-7") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeGo,The length of the statement  "                            strDigito1 = (((intNumero >= 10103105) && (intNumero <= 10119997)) ? "1" : "0").Substring(((((intNumero >= 10103105) && (intNumero <= 10119997)) ? "1" : "0").Length - 1));" is 171.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMa,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMg,The length of the statement  "             Console.WriteLine("Inscrição Estadual MG {0}\n"' ValidarInscricaoEstadual("MG"' "062.307.904/0081") ? "válido" : "inválido");" is 125.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMg,The length of the statement  "                        strDigito2 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMs,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMt,The length of the statement  "             Console.WriteLine("Inscrição Estadual MT {0}\n"' ValidarInscricaoEstadual("MT"' "0013000001-9") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeMt,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePa,The length of the statement  "             Console.WriteLine("Inscrição Estadual PA {0}\n"' ValidarInscricaoEstadual("PA"' "15-999999-5") ? "válido" : "inválido");" is 120.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePa,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePi,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePr,The length of the statement  "             Console.WriteLine("Inscrição Estadual PR {0}\n"' ValidarInscricaoEstadual("PR"' "123.45678-50") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePr,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIePr,The length of the statement  "                    strDigito2 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRj,The length of the statement  "            Console.WriteLine("Inscrição Estadual RJ {0}\n"' ValidarInscricaoEstadual("RJ"' "99.999.99-3") ? "válido" : "inválido");" is 120.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRj,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRn,The length of the statement  "             Console.WriteLine("Inscrição Estadual RN {0} (inscricao com 9 digitos)"' ValidarInscricaoEstadual("RN"' "20.040.040-1") ? "válido" : "inválido");" is 145.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRn,The length of the statement  "            Console.WriteLine("Inscrição Estadual RN {0} (inscricao com 10 digitos)\n"' ValidarInscricaoEstadual("RN"' "20.0.040.040-0") ? "válido" : "inválido");" is 150.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRn,The length of the statement  "                        strDigito1 = ((intResto > 9) ? "0" : Convert.ToString(intResto)).Substring((((intResto > 9) ? "0" : Convert.ToString(intResto)).Length - 1));" is 141.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRn,The length of the statement  "                        strDigito1 = ((intResto > 10) ? "0" : Convert.ToString(intResto)).Substring((((intResto > 10) ? "0" : Convert.ToString(intResto)).Length - 1));" is 143.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRo,The length of the statement  "             Console.WriteLine("Inscrição Estadual RO {0}\n"' ValidarInscricaoEstadual("RO"' "000.62521-3") ? "válido" : "inválido");" is 120.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeRs,The length of the statement  "             Console.WriteLine("Inscrição Estadual RS {0}\n"' ValidarInscricaoEstadual("RS"' "224/3658792") ? "válido" : "inválido");" is 120.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeSc,The length of the statement  "             Console.WriteLine("Inscrição Estadual SC {0}\n"' ValidarInscricaoEstadual("SC"' "251.040.852 ") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeSc,The length of the statement  "                    strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeSe,The length of the statement  "             Console.WriteLine("Inscrição Estadual SE {0}\n"' ValidarInscricaoEstadual("SE"' "27123456-3 ") ? "válido" : "inválido");" is 120.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeSp,The length of the statement  "             Console.WriteLine("Inscrição Estadual SP {0}"' ValidarInscricaoEstadual("SP"' "110.042.490.114") ? "válido" : "inválido");" is 122.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeSp,The length of the statement  "            Console.WriteLine("Inscrição Estadual SP {0}\n"' ValidarInscricaoEstadual("SP"' "P-01100424.3/002") ? "válido" : "inválido");" is 125.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeTo,The length of the statement  "             Console.WriteLine("Inscrição Estadual TO {0}\n"' ValidarInscricaoEstadual("TO"' "290102278-36") ? "válido" : "inválido");" is 121.
Long Statement,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeTo,The length of the statement  "                        strDigito1 = ((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Substring((((intResto < 2) ? "0" : Convert.ToString((11 - intResto))).Length - 1));" is 155.
Long Statement,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Validate,The length of the statement  "		var isValid = itemWithoutMask.Length == 7 && itemWithoutMask.Substring (0' 3).ToList ().All (char.IsLetter) && itemWithoutMask.Substring (3' itemWithoutMask.Length - 3).All (char.IsDigit); " is 188.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ClassFactory,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ClassFactory,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ClassFactory,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ClassFactory,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,Publisoft.Core.PagSeguro.Service,NotificationService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\NotificationService.cs,CheckTransaction,The length of the statement  "	PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "NotificationService.CheckTransaction(notificationCode={0}) - begin"' notificationCode)); " is 155.
Long Statement,Publisoft.Core.PagSeguro.Service,NotificationService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\NotificationService.cs,CheckTransaction,The length of the statement  "		using (var response = HttpUrlConnectionUtil.GetHttpGetConnection (BuildTransactionNotificationUrl (credentials' notificationCode))) { " is 133.
Long Statement,Publisoft.Core.PagSeguro.Service,NotificationService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\NotificationService.cs,CheckTransaction,The length of the statement  "				PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "NotificationService.CheckTransaction(notificationCode={0}) - end {1}"' notificationCode' transaction)); " is 170.
Long Statement,Publisoft.Core.PagSeguro.Service,NotificationService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\NotificationService.cs,CheckTransaction,The length of the statement  "		PagSeguroTrace.Error (String.Format (CultureInfo.InvariantCulture' "NotificationService.CheckTransaction(notificationCode={0}) - error {1}"' notificationCode' pse)); " is 165.
Long Statement,Publisoft.Core.PagSeguro.Service,NotificationService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\NotificationService.cs,BuildTransactionNotificationUrl,The length of the statement  "	transactionNotificationUrl.ReplaceValue ("{credential}"' new QueryStringBuilder ().EncodeCredentialsAsQueryString (credentials).ToString ()); " is 141.
Long Statement,Publisoft.Core.PagSeguro.Service,PaymentService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\PaymentService.cs,CreateCheckoutRequest,The length of the statement  "		using (var response = HttpUrlConnectionUtil.GetHttpPostConnection (PagSeguroConfiguration.PaymentUri.AbsoluteUri' BuildCheckoutUrl (credentials' payment))) { " is 157.
Long Statement,Publisoft.Core.PagSeguro.Service,PaymentService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\PaymentService.cs,CreateCheckoutRequest,The length of the statement  "					PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "PaymentService.Register({0}) - end {1}"' payment' paymentResponse.PaymentRedirectUri)); " is 154.
Long Statement,Publisoft.Core.PagSeguro.Service,PaymentService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\PaymentService.cs,CreateCheckoutRequest,The length of the statement  "			PagSeguroTrace.Error (String.Format (CultureInfo.InvariantCulture' "PaymentService.Register({0}) - error {1}"' payment' pse)); " is 126.
Long Statement,Publisoft.Core.PagSeguro.Service,PaymentService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\PaymentService.cs,CreateCheckoutRequest,The length of the statement  "		PagSeguroTrace.Error (String.Format (CultureInfo.InvariantCulture' "PaymentService.Register({0}) - error {1}"' payment' pse)); " is 126.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByCode,The length of the statement  "	PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByCode(transactionCode={0}) - begin"' transactionCode)); " is 154.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByCode,The length of the statement  "		using (var response = HttpUrlConnectionUtil.GetHttpGetConnection (BuildSearchUrlByCode (credentials' transactionCode))) { " is 121.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByCode,The length of the statement  "				PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByCode(transactionCode={0}) - end {1}"' transactionCode' transaction)); " is 169.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByCode,The length of the statement  "		PagSeguroTrace.Error (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByCode(transactionCode={0}) - error {1}"' transactionCode' pse)); " is 164.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByCode,The length of the statement  "	searchUrlByCode.ReplaceValue ("{credential}"' new QueryStringBuilder ().EncodeCredentialsAsQueryString (credentials).ToString ()); " is 130.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByDate,The length of the statement  "	var searchUrlByCode = new QueryStringBuilder ("{url}/?initialDate={initialDate}{finalDate}{page}{maxPageResults}{credential}"); " is 127.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByDate,The length of the statement  "	searchUrlByCode.ReplaceValue ("{finalDate}"' finalDate < DateTime.MaxValue ? "&" + FinalDateParameterName + "=" + PagSeguroUtil.FormatDateXml (finalDate) : ""); " is 160.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByDate,The length of the statement  "	searchUrlByCode.ReplaceValue ("{maxPageResults}"' resultsPerPage > 0 ? "&" + MaxPageResultsParameterName + "=" + resultsPerPage : ""); " is 134.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,BuildSearchUrlByDate,The length of the statement  "	searchUrlByCode.ReplaceValue ("{credential}"' credentials != null ? new QueryStringBuilder ().AppendToQuery ("&").EncodeCredentialsAsQueryString (credentials).ToString () : ""); " is 177.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDateCore,The length of the statement  "	PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByDate(initialDate={0}' finalDate={1}) - begin"' initialDate' finalDate)); " is 172.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDateCore,The length of the statement  "		using (var response = HttpUrlConnectionUtil.GetHttpGetConnection (BuildSearchUrlByDate (credentials' initialDate' finalDate' pageNumber' resultsPerPage))) { " is 156.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDateCore,The length of the statement  "				PagSeguroTrace.Info (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByDate(initialDate={0}' finalDate={1}) - end {2}"' initialDate' finalDate' result)); " is 182.
Long Statement,Publisoft.Core.PagSeguro.Service,TransactionSearchService,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Service\TransactionSearchService.cs,SearchByDateCore,The length of the statement  "		PagSeguroTrace.Error (String.Format (CultureInfo.InvariantCulture' "TransactionSearchService.SearchByDate(initialDate={0}' finalDate={1}) - error {2}"' initialDate' finalDate' pse)); " is 182.
Long Statement,Publisoft.Core.PagSeguro.Util,PagSeguroUtil,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Util\PagSeguroUtil.cs,TruncateValue,The length of the statement  "	return !string.IsNullOrEmpty (value) && value.Length > limit ? value.Substring (0' limit - endChars.Length) + endChars : value; " is 127.
Long Statement,Publisoft.Core.PagSeguro.XmlParse,PagSeguroConfigSerializer,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\XmlParse\PagSeguroConfigSerializer.cs,GetAccountCredentials,The length of the statement  "		throw new ArgumentException ("To use credentials from config.properties file you must " + "configure the properties credential email and credential token."); " is 157.
Complex Conditional,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Empty Catch Block,Publisoft.Core.Reflection,EmbeddedAssembly,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Reflection\EmbeddedAssembly.cs,Load,The method has an empty catch block.
Magic Number,Publisoft.Core.Document,CepDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CepDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length == 8;  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	const int n9 = 0;  	const int n10 = 0;  	const int n11 = 0;  	const int n12 = 1;  	var aux = n1 * 5 + n2 * 4 + n3 * 3 + n4 * 2 + n5 * 9 + n6 * 8 + n7 * 7 + n8 * 6 + n9 * 5 + n10 * 4 + n11 * 3 + n12 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' n11' n12' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 6 + n2 * 5 + n3 * 4 + n4 * 3 + n5 * 2 + n6 * 9 + n7 * 8 + n8 * 7 + n9 * 6 + n10 * 5 + n11 * 4 + n12 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Generate,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		6'  		5'  		4'  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 14) {  		var tempCnpj = itemWithoutMask.Substring (0' 12);  		var soma = 0;  		for (var i = 0; i < 12; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCnpj = tempCnpj + digito;  		soma = 0;  		for (var i = 0; i < 13; i++) {  			soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = (soma % 11);  		resto = resto < 2 ? 0 : 11 - resto;  		digito += resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 14) {  	var tempCnpj = itemWithoutMask.Substring (0' 12);  	var soma = 0;  	for (var i = 0; i < 12; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCnpj = tempCnpj + digito;  	soma = 0;  	for (var i = 0; i < 13; i++) {  		soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = (soma % 11);  	resto = resto < 2 ? 0 : 11 - resto;  	digito += resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: for (var i = 0; i < 12; i++) {  	soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: for (var i = 0; i < 13; i++) {  	soma += int.Parse (tempCnpj [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  }  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: resto = (soma % 11);  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CnpjDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CnpjDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Generate,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var multiplicador1 = new[] {  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var multiplicador2 = new[] {  		11'  		10'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	var itemWithoutMask = item.RemoveMask ();  	if (itemWithoutMask.Length == 11) {  		var tempCpf = itemWithoutMask.Substring (0' 9);  		var soma = 0;  		for (var i = 0; i < 9; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		var digito = resto.ToString (CultureInfo.InvariantCulture);  		tempCpf = tempCpf + digito;  		soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  		}  		resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		digito = digito + resto.ToString (CultureInfo.InvariantCulture);  		isValid = itemWithoutMask.EndsWith (digito);  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var tempCpf = itemWithoutMask.Substring (0' 9);  	var soma = 0;  	for (var i = 0; i < 9; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	var digito = resto.ToString (CultureInfo.InvariantCulture);  	tempCpf = tempCpf + digito;  	soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  	}  	resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	digito = digito + resto.ToString (CultureInfo.InvariantCulture);  	isValid = itemWithoutMask.EndsWith (digito);  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: for (var i = 0; i < 9; i++) {  	soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador1 [i];  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	soma += int.Parse (tempCpf [i].ToString (CultureInfo.InvariantCulture)) * multiplicador2 [i];  }  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: resto = soma % 11;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,CpfDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\CpfDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	string item;  	switch (random.Next (26)) {  	case 0: {  		item = GenerateIeAc ();  		break;  	}  	case 1: {  		item = GenerateIeAl ();  		break;  	}  	case 2: {  		item = GenerateIeAp ();  		break;  	}  	case 3: {  		item = GenerateIeAm ();  		break;  	}  	case 4: {  		item = GenerateIeBa ();  		break;  	}  	case 5: {  		item = GenerateIeCe ();  		break;  	}  	case 6: {  		item = GenerateIeDf ();  		break;  	}  	case 7: {  		item = GenerateIeEs ();  		break;  	}  	case 8: {  		item = GenerateIeGo ();  		break;  	}  	case 9: {  		item = GenerateIeMa ();  		break;  	}  	case 10: {  		item = GenerateIeMt ();  		break;  	}  	case 11: {  		item = GenerateIeMs ();  		break;  	}  	case 12: {  		item = GenerateIeMg ();  		break;  	}  	case 13: {  		item = GenerateIePa ();  		break;  	}  	case 14: {  		item = GenerateIePb ();  		break;  	}  	case 15: {  		item = GenerateIePr ();  		break;  	}  	case 16: {  		item = GenerateIePe ();  		break;  	}  	case 17: {  		item = GenerateIePi ();  		break;  	}  	case 18: {  		item = GenerateIeRj ();  		break;  	}  	case 19: {  		item = GenerateIeRn ();  		break;  	}  	case 20: {  		item = GenerateIeRs ();  		break;  	}  	case 21: {  		item = GenerateIeRo ();  		break;  	}  	case 22: {  		item = GenerateIeRr ();  		break;  	}  	case 23: {  		item = GenerateIeSc ();  		break;  	}  	case 24: {  		item = GenerateIeSp ();  		break;  	}  	case 25: {  		item = GenerateIeSe ();  		break;  	}  	case 26: {  		item = GenerateIeTo ();  		break;  	}  	default: {  		item = "ISENTO";  		break;  	}  	}  	message = item;  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,Generate,The following statement contains a magic number: switch (random.Next (26)) {  case 0: {  	item = GenerateIeAc ();  	break;  }  case 1: {  	item = GenerateIeAl ();  	break;  }  case 2: {  	item = GenerateIeAp ();  	break;  }  case 3: {  	item = GenerateIeAm ();  	break;  }  case 4: {  	item = GenerateIeBa ();  	break;  }  case 5: {  	item = GenerateIeCe ();  	break;  }  case 6: {  	item = GenerateIeDf ();  	break;  }  case 7: {  	item = GenerateIeEs ();  	break;  }  case 8: {  	item = GenerateIeGo ();  	break;  }  case 9: {  	item = GenerateIeMa ();  	break;  }  case 10: {  	item = GenerateIeMt ();  	break;  }  case 11: {  	item = GenerateIeMs ();  	break;  }  case 12: {  	item = GenerateIeMg ();  	break;  }  case 13: {  	item = GenerateIePa ();  	break;  }  case 14: {  	item = GenerateIePb ();  	break;  }  case 15: {  	item = GenerateIePr ();  	break;  }  case 16: {  	item = GenerateIePe ();  	break;  }  case 17: {  	item = GenerateIePi ();  	break;  }  case 18: {  	item = GenerateIeRj ();  	break;  }  case 19: {  	item = GenerateIeRn ();  	break;  }  case 20: {  	item = GenerateIeRs ();  	break;  }  case 21: {  	item = GenerateIeRo ();  	break;  }  case 22: {  	item = GenerateIeRr ();  	break;  }  case 23: {  	item = GenerateIeSc ();  	break;  }  case 24: {  	item = GenerateIeSp ();  	break;  }  case 25: {  	item = GenerateIeSe ();  	break;  }  case 26: {  	item = GenerateIeTo ();  	break;  }  default: {  	item = "ISENTO";  	break;  }  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var aux = n1 * 10 + n2 * 9 + n3 * 8 + n4 * 7 + n5 * 6 + n6 * 5 + n7 * 4 + n8 * 3 + n9 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  	aux = aux % 11;  	var nv2 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' nv1' nv2);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = n1 * 11 + n2 * 10 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + nv1 * 2;  
Magic Number,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,GenerateIeAl,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = random.Next (10);  	var n2 = random.Next (10);  	var n3 = random.Next (10);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var n8 = random.Next (10);  	var n9 = random.Next (10);  	var n10 = random.Next (10);  	var aux = n1 * 3 + n2 * 2 + n3 * 9 + n4 * 8 + n5 * 7 + n6 * 6 + n7 * 5 + n8 * 4 + n9 * 3 + n10 * 2;  	aux = aux % 11;  	var nv1 = aux < 2 ? 0 : 11 - aux;  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}"' n1' n2' n3' n4' n5' n6' n7' n8' n9' n10' nv1);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Generate,The following statement contains a magic number: aux = aux % 11;  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: try {  	var isValid = false;  	var itemWithoutMask = item.RemoveMask ();  	var multiplicador = new[] {  		3'  		2'  		9'  		8'  		7'  		6'  		5'  		4'  		3'  		2  	};  	if (itemWithoutMask.Length == 11) {  		var soma = 0;  		for (var i = 0; i < 10; i++) {  			soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  		}  		var resto = soma % 11;  		resto = resto < 2 ? 0 : 11 - resto;  		isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  	}  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: if (itemWithoutMask.Length == 11) {  	var soma = 0;  	for (var i = 0; i < 10; i++) {  		soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  	}  	var resto = soma % 11;  	resto = resto < 2 ? 0 : 11 - resto;  	isValid = itemWithoutMask.EndsWith (resto.ToString (CultureInfo.InvariantCulture));  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: for (var i = 0; i < 10; i++) {  	soma += int.Parse (itemWithoutMask [i].ToString (CultureInfo.InvariantCulture)) * multiplicador [i];  }  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,PisDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PisDocument.cs,Validate,The following statement contains a magic number: resto = resto < 2 ? 0 : 11 - resto;  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = (char)random.Next ('A'' 'Z' + 1);  	var n2 = (char)random.Next ('A'' 'Z' + 1);  	var n3 = (char)random.Next ('A'' 'Z' + 1);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}"' n1' n2' n3' n4' n5' n6' n7);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = (char)random.Next ('A'' 'Z' + 1);  	var n2 = (char)random.Next ('A'' 'Z' + 1);  	var n3 = (char)random.Next ('A'' 'Z' + 1);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}"' n1' n2' n3' n4' n5' n6' n7);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = (char)random.Next ('A'' 'Z' + 1);  	var n2 = (char)random.Next ('A'' 'Z' + 1);  	var n3 = (char)random.Next ('A'' 'Z' + 1);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}"' n1' n2' n3' n4' n5' n6' n7);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Generate,The following statement contains a magic number: try {  	var random = new Random ();  	var n1 = (char)random.Next ('A'' 'Z' + 1);  	var n2 = (char)random.Next ('A'' 'Z' + 1);  	var n3 = (char)random.Next ('A'' 'Z' + 1);  	var n4 = random.Next (10);  	var n5 = random.Next (10);  	var n6 = random.Next (10);  	var n7 = random.Next (10);  	var item = string.Format ("{0}{1}{2}{3}{4}{5}{6}"' n1' n2' n3' n4' n5' n6' n7);  	message = item.ApplyMask (Mask);  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length == 7 && itemWithoutMask.Substring (0' 3).ToList ().All (char.IsLetter) && itemWithoutMask.Substring (3' itemWithoutMask.Length - 3).All (char.IsDigit);  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length == 7 && itemWithoutMask.Substring (0' 3).ToList ().All (char.IsLetter) && itemWithoutMask.Substring (3' itemWithoutMask.Length - 3).All (char.IsDigit);  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length == 7 && itemWithoutMask.Substring (0' 3).ToList ().All (char.IsLetter) && itemWithoutMask.Substring (3' itemWithoutMask.Length - 3).All (char.IsDigit);  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,PlacaDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\PlacaDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length == 7 && itemWithoutMask.Substring (0' 3).ToList ().All (char.IsLetter) && itemWithoutMask.Substring (3' itemWithoutMask.Length - 3).All (char.IsDigit);  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: try {  	var isValid = Validate (item);  	if (isValid.Item1) {  		switch (item.Length) {  		case 8: {  			Mask = "####-####";  			break;  		}  		case 9: {  			Mask = "#####-####";  			break;  		}  		case 10: {  			Mask = "(##) ####-####";  			break;  		}  		case 11: {  			Mask = "(##) #####-####";  			break;  		}  		case 12: {  			Mask = "## - (##) ####-####";  			break;  		}  		case 13: {  			Mask = "## - (##) #####-####";  			break;  		}  		default: {  			Mask = "";  			break;  		}  		}  		var itemMaskared = item.ApplyMask (Mask);  		message = itemMaskared;  	}  	else {  		throw new Exception (isValid.Item2);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: if (isValid.Item1) {  	switch (item.Length) {  	case 8: {  		Mask = "####-####";  		break;  	}  	case 9: {  		Mask = "#####-####";  		break;  	}  	case 10: {  		Mask = "(##) ####-####";  		break;  	}  	case 11: {  		Mask = "(##) #####-####";  		break;  	}  	case 12: {  		Mask = "## - (##) ####-####";  		break;  	}  	case 13: {  		Mask = "## - (##) #####-####";  		break;  	}  	default: {  		Mask = "";  		break;  	}  	}  	var itemMaskared = item.ApplyMask (Mask);  	message = itemMaskared;  }  else {  	throw new Exception (isValid.Item2);  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,ApplyMask,The following statement contains a magic number: switch (item.Length) {  case 8: {  	Mask = "####-####";  	break;  }  case 9: {  	Mask = "#####-####";  	break;  }  case 10: {  	Mask = "(##) ####-####";  	break;  }  case 11: {  	Mask = "(##) #####-####";  	break;  }  case 12: {  	Mask = "## - (##) ####-####";  	break;  }  case 13: {  	Mask = "## - (##) #####-####";  	break;  }  default: {  	Mask = "";  	break;  }  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length >= 8 && itemWithoutMask.Length <= 13;  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Document,TelefoneDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\TelefoneDocument.cs,Validate,The following statement contains a magic number: try {  	var itemWithoutMask = item.RemoveMask ();  	var isValid = itemWithoutMask.Length >= 8 && itemWithoutMask.Length <= 13;  	if (!isValid) {  		throw new Exception (Message.InvalidDocument);  	}  }  catch (Exception e) {  	result = false;  	message = e.Message;  }  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Missing Default,Publisoft.Core.Attribute.Document,CpfCnpjAttribute,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Attribute\Document\CpfCnpjAttribute.cs,CpfCnpjAttribute,The following switch statement is missing a default case: switch (CpfCnpj) {  case CpfCnpjEnum.Cpf: {  	Document = new CpfDocument ();  	break;  }  case CpfCnpjEnum.Cnpj: {  	Document = new CnpjDocument ();  	break;  }  }  
Missing Default,Publisoft.Core.Document,InscricaoEstadualDocument,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Document\InscricaoEstadualDocument.cs,InscricaoEstadualDocument,The following switch statement is missing a default case: switch (SiglaEstado) {  case "AC": {  	Mask = "##.##.####-#";  	break;  }  case "AL": {  	Mask = "#########";  	break;  }  case "AM": {  	Mask = "##.###.###-#";  	break;  }  case "AP": {  	Mask = "#########";  	break;  }  case "BA": {  	Mask = "######-##";  	break;  }  case "CE": {  	Mask = "########-#";  	break;  }  case "DF": {  	Mask = "###.#####.###-##";  	break;  }  case "ES": {  	Mask = "#########";  	break;  }  case "GO": {  	Mask = "##.###.###-#";  	break;  }  case "MA": {  	Mask = "#########";  	break;  }  case "MT": {  	Mask = "##########-#";  	break;  }  case "MS": {  	Mask = "#########";  	break;  }  case "MG": {  	Mask = "###.###.###/####";  	break;  }  case "PA": {  	Mask = "##-######-#";  	break;  }  case "PB": {  	Mask = "##.###.###-#";  	break;  }  case "PE": {  	Mask = "##.#.###.#######-#";  	break;  }  case "PI": {  	Mask = "#########";  	break;  }  case "PR": {  	Mask = "###.#####-##";  	break;  }  case "RJ": {  	Mask = "##.###.##-#";  	break;  }  case "RN": {  	Mask = "##.###.###-#";  	break;  }  case "RO": {  	Mask = "#########";  	break;  }  case "RR": {  	Mask = "########-#";  	break;  }  case "RS": {  	Mask = "###/######-#";  	break;  }  case "SC": {  	Mask = "###.###.###";  	break;  }  case "SE": {  	Mask = "########-#";  	break;  }  case "SP": {  	Mask = "P-########.#/###";  	break;  }  case "TO": {  	Mask = "##.##.######-#";  	break;  }  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Publisoft.Core.Linq.DynamicQuery,ExpressionParser,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\Linq\DynamicQuery\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
Missing Default,Publisoft.Core.PagSeguro.Domain,MetaDataItem,C:\repos\Publisoft_Core\Publisoft\Publisoft.Core\PagSeguro\Domain\MetaDataItem.cs,NormalizeParameter,The following switch statement is missing a default case: switch (MetaDataItemKeys.GetItemDescriptionByKey (Key)) {  case "CPF do passageiro": {  	parameterValue = PagSeguroUtil.GetOnlyNumbers (parameterValue);  	break;  }  case "Tempo no jogo em dias": {  	parameterValue = PagSeguroUtil.GetOnlyNumbers (parameterValue);  	break;  }  case "Celular de recarga": {  	parameterValue = PagSeguroUtil.GetOnlyNumbers (parameterValue);  	break;  }  }  
