Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExpressionEval.DynamicMethodGenerator,ExpressionDelegateFactory,C:\repos\barometz_Sampler\ExpressionEval\ExpressionEval.DynamicMethodGenerator\ExpressionDelegateFactory.cs,CreateExpressionMethodState,Cyclomatic complexity of the method is 11
Long Statement,ExpressionEval.DynamicMethodGenerator,ExpressionDelegateFactory,C:\repos\barometz_Sampler\ExpressionEval\ExpressionEval.DynamicMethodGenerator\ExpressionDelegateFactory.cs,CreateExpressionDelegate,The length of the statement  "	IlTokenResolver tokenResolver = new IlTokenResolver (methodState.TokenOffset.Fields' methodState.TokenOffset.Methods' methodState.TokenOffset.Types' methodState.TokenOffset.LiteralStrings); " is 189.
Long Statement,ExpressionEval.DynamicMethodGenerator,ExpressionDelegateFactory,C:\repos\barometz_Sampler\ExpressionEval\ExpressionEval.DynamicMethodGenerator\ExpressionDelegateFactory.cs,CreateExpressionMethodState,The length of the statement  "	//compiler = (IExpressionCompiler)loAppDomain.CreateInstanceFromAndUnwrap("ExpressionEval.ExpressionCompiler.dll"' "ExpressionEval.ExpressionCompiler." + className); " is 165.
Missing Default,ExpressionEval.DynamicMethodGenerator,ExpressionDelegateFactory,C:\repos\barometz_Sampler\ExpressionEval\ExpressionEval.DynamicMethodGenerator\ExpressionDelegateFactory.cs,CreateExpressionMethodState,The following switch statement is missing a default case: switch (m_language) {  case ExpressionLanguage.CSharp:  	className = "CSharpExpressionCompiler";  	break;  case ExpressionLanguage.VisualBasic:  	className = "VisualBasicExpressionCompiler";  	break;  case ExpressionLanguage.JScript:  	className = "JScriptExpressionCompiler";  	break;  }  
