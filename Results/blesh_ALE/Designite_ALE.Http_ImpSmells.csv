Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ALE.Http,Static,C:\repos\blesh_ALE\ALE.Http\Static.cs,Directory,The length of the statement  "			var staticRoot = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' path.Replace("/"' "\\").TrimStart('\\'))); " is 128.
Magic Number,ALE.Http,Route,C:\repos\blesh_ALE\ALE.Http\Route.cs,CreatePathTester,The following statement contains a magic number: var pattern = PathParser.Replace(path' m => "(?<" + m.Groups[1].Value + @">.+)" + m.Groups[2].Value);
Magic Number,ALE.Http,Static,C:\repos\blesh_ALE\ALE.Http\Static.cs,Directory,The following statement contains a magic number: return (context' next) =>  					   {  						   var res = context.Response;  						   var req = context.Request;  						   var absPath = req.Url.AbsolutePath;  						   var unUrlified = Uri.UnescapeDataString(absPath.Replace("/"' "\\")).TrimStart('\\');  						   var filePath = Path.Combine(staticRoot' unUrlified);  						   var fullPath = Path.GetFullPath(filePath);  						   if (!fullPath.StartsWith(staticRoot))  						   {  							   throw new InvalidOperationException("File path disallowed.");  						   }  						   if (File.Exists(filePath))  						   {  							   FileSystem.File.ReadAllBytes(filePath' (ex' buffer) =>  															   {  																   if (ex != null)  																   {  																	   res.StatusCode = 500;  																	   res.StatusDescription = "Internal server error.";  																   } else  																   {  																	   res.StatusCode = 200;  																	   res.ContentType = GetMimeType(filePath);  																	   res.Write(buffer);  																   }  																   res.Send();  															   });  						   } else  						   {  							   next();  						   }  					   };
Magic Number,ALE.Http,Static,C:\repos\blesh_ALE\ALE.Http\Static.cs,Directory,The following statement contains a magic number: return (context' next) =>  					   {  						   var res = context.Response;  						   var req = context.Request;  						   var absPath = req.Url.AbsolutePath;  						   var unUrlified = Uri.UnescapeDataString(absPath.Replace("/"' "\\")).TrimStart('\\');  						   var filePath = Path.Combine(staticRoot' unUrlified);  						   var fullPath = Path.GetFullPath(filePath);  						   if (!fullPath.StartsWith(staticRoot))  						   {  							   throw new InvalidOperationException("File path disallowed.");  						   }  						   if (File.Exists(filePath))  						   {  							   FileSystem.File.ReadAllBytes(filePath' (ex' buffer) =>  															   {  																   if (ex != null)  																   {  																	   res.StatusCode = 500;  																	   res.StatusDescription = "Internal server error.";  																   } else  																   {  																	   res.StatusCode = 200;  																	   res.ContentType = GetMimeType(filePath);  																	   res.Write(buffer);  																   }  																   res.Send();  															   });  						   } else  						   {  							   next();  						   }  					   };
