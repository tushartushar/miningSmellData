Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The length of the parameter retryCountBeforeSendingToErrorQueue is 35.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenCreatingTopicWithServerSideEncryption,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenCreatingTopicWithServerSideEncryption.cs,Can_Create_Topic_With_Encryption,The length of the statement  "            await topic.CreateWithEncryptionAsync(new ServerSideEncryption { KmsMasterKeyId = JustSayingConstants.DefaultSnsAttributeEncryptionKeyId }); " is 140.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenCreatingTopicWithServerSideEncryption,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenCreatingTopicWithServerSideEncryption.cs,Can_Add_Encryption_To_Existing_Topic,The length of the statement  "            await topic.CreateWithEncryptionAsync(new ServerSideEncryption { KmsMasterKeyId = JustSayingConstants.DefaultSnsAttributeEncryptionKeyId }); " is 140.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenCreatingTopicWithServerSideEncryption,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenCreatingTopicWithServerSideEncryption.cs,Can_Update_Encryption_For_Existing_Topic,The length of the statement  "            await topic.CreateWithEncryptionAsync(new ServerSideEncryption { KmsMasterKeyId = JustSayingConstants.DefaultSnsAttributeEncryptionKeyId }); " is 140.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenRemovingSnsServerSideEncryption,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenRemovingSnsServerSideEncryption.cs,Can_Remove_Encryption,The length of the statement  "            await topic.CreateWithEncryptionAsync(new ServerSideEncryption { KmsMasterKeyId = JustSayingConstants.DefaultSnsAttributeEncryptionKeyId }); " is 140.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The length of the statement  "            OutputHelper.WriteLine($"{DateTime.Now} - Throughput {(float)count / timeToProcess.TotalMilliseconds * 1000} messages/second"); " is 127.
Long Statement,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingSnsServerSideEncryption,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingSnsServerSideEncryption.cs,Then_The_Message_Is_Published,The length of the statement  "                        .WithTopic<SimpleMessage>(topic => topic.WithWriteConfiguration(writeConfig => writeConfig.Encryption = new ServerSideEncryption { KmsMasterKeyId = masterSnsKeyId })))) " is 168.
Long Statement,JustSaying.IntegrationTests.Fluent.DependencyInjection.Microsoft,WhenRegisteringAHandlerViaContainerWithMissingRegistration,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\DependencyInjection\Microsoft\WhenRegisteringAHandlerViaContainerWithMissingRegistration.cs,Then_An_Exception_Is_Thrown,The length of the statement  "            exception.Message.ShouldBe("No handler for message type JustSaying.IntegrationTests.TestHandlers.OrderPlaced is registered."); " is 126.
Long Statement,JustSaying.IntegrationTests.Fluent.DependencyInjection.Microsoft,WhenRegisteringMultipleHandlersViaContainer,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\DependencyInjection\Microsoft\WhenRegisteringMultipleHandlersViaContainer.cs,Then_An_Exception_Is_Thrown,The length of the statement  "            exception.Message.ShouldBe("2 handlers for message type JustSaying.IntegrationTests.TestHandlers.OrderPlaced are registered. Only one handler is supported per message type."); " is 175.
Long Statement,JustSaying.IntegrationTests.Fluent.DependencyInjection.Microsoft,WhenUsingCustomHandlerResolver,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\DependencyInjection\Microsoft\WhenUsingCustomHandlerResolver.cs,Then_The_Handler_Is_Resolved_From_The_Custom_Resolver,The length of the statement  "                .ConfigureJustSaying((builder) => builder.Services((config) => config.WithHandlerResolver(new MyCustomHandlerResolver(future)))); " is 129.
Long Statement,JustSaying.IntegrationTests,MessagingBusBuilderTests,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\MessagingBusBuilderTests.cs,Can_Create_Messaging_Bus_Fluently_For_A_Queue,The length of the statement  "                        builder.Client((options) => options.WithBasicCredentials("accessKey"' "secretKey").WithServiceUri(TestEnvironment.SimulatorUrl)) " is 128.
Long Statement,JustSaying.IntegrationTests,MessagingBusBuilderTests,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\MessagingBusBuilderTests.cs,Can_Create_Messaging_Bus_Fluently_For_A_Topic,The length of the statement  "                        builder.Client((options) => options.WithBasicCredentials("accessKey"' "secretKey").WithServiceUri(TestEnvironment.SimulatorUrl)) " is 128.
Long Statement,JustSaying.IntegrationTests.Fluent.Publishing,WhenCreatingAMessagePublisher,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Publishing\WhenCreatingAMessagePublisher.cs,Then_The_Queues_Exist,The length of the statement  "            queues.QueueUrls.ShouldAllBe((url) => url.Contains(UniqueName' StringComparison.Ordinal)' "The queue URL is not for the expected queue."); " is 138.
Long Statement,JustSaying.IntegrationTests.Fluent.Publishing,WhenCreatingAMessagePublisher,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Publishing\WhenCreatingAMessagePublisher.cs,Then_The_Queues_Exist,The length of the statement  "            queues.QueueUrls.Count((url) => url.Contains("_error"' StringComparison.Ordinal)).ShouldBe(1' "The error queue was not created."); " is 130.
Long Statement,JustSaying.IntegrationTests.Fluent.Publishing,WhenTheErrorQueueDisabled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Publishing\WhenTheErrorQueueDisabled.cs,Then_The_Error_Queue_Does_Not_Exist,The length of the statement  "            queues.QueueUrls.ShouldAllBe((url) => url.Contains(UniqueName' StringComparison.Ordinal)' "The queue URL is not for the expected queue."); " is 138.
Long Statement,JustSaying.IntegrationTests.Fluent.Publishing,WhenTheErrorQueueDisabled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Publishing\WhenTheErrorQueueDisabled.cs,Then_The_Error_Queue_Does_Not_Exist,The length of the statement  "            queues.QueueUrls.ShouldAllBe((url) => !url.Contains("_error"' StringComparison.Ordinal)' "The queue URL appears to be for an error queue."); " is 140.
Long Statement,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The length of the statement  "                .ConfigureJustSaying((builder) => builder.Messaging((options) => options.WithPublishFailureBackoff(TimeSpan.FromMilliseconds(1)))) " is 130.
Long Statement,JustSaying.IntegrationTests.Fluent.Subscribing,WhenRegisteringLongNameMessageTypeTopicSubscriber,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenRegisteringLongNameMessageTypeTopicSubscriber.cs,Then_A_Queue_Is_Created,The length of the statement  "            var handler = CreateHandler<LongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongMessage>(completionSource); " is 305.
Long Statement,JustSaying.IntegrationTests.Fluent.Subscribing,WhenRegisteringLongNameMessageTypeTopicSubscriber,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenRegisteringLongNameMessageTypeTopicSubscriber.cs,Then_A_Queue_Is_Created,The length of the statement  "                .ConfigureJustSaying((builder) => builder.WithLoopbackTopic<LongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongMessage>(UniqueName)) " is 331.
Long Statement,JustSaying.IntegrationTests.Fluent.Subscribing,WhenRegisteringLongNameMessageTypeTopicSubscriber,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenRegisteringLongNameMessageTypeTopicSubscriber.cs,Then_A_Queue_Is_Created,The length of the statement  "                    await publisher.PublishAsync(new LongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLonggLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongMessage()' cancellationToken); " is 313.
Complex Conditional,JustSaying.IntegrationTests,NeedsTwoAwsAccountsFactAttribute,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\NeedsTwoAwsAccountsFactAttribute.cs,NeedsTwoAwsAccountsFactAttribute,The conditional expression  "string.IsNullOrEmpty(TestEnvironment.AccountId) ||                  string.IsNullOrEmpty(TestEnvironment.SecondaryAccountId) ||                  !TestEnvironment.HasCredentials ||                  !TestEnvironment.HasSecondaryCredentials"  is complex.
Magic Number,JustSaying.IntegrationTests.Fluent,ActionRunnerTest,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\ActionRunnerTest.cs,TestRunnerWillSucceedOnSuccessfulTask,The following statement contains a magic number: async Task SuccessTask(CancellationToken ctx) =>                  await Task.Delay(100' ctx);
Magic Number,JustSaying.IntegrationTests.Fluent,ActionRunnerTest,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\ActionRunnerTest.cs,TestRunnerWillThrowOnFailure,The following statement contains a magic number: await Task.Delay(100' ctx);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenANamedQueueIsCreated,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenANamedQueueIsCreated.cs,Then_The_Error_Queue_Is_Created,The following statement contains a magic number: await Patiently.AssertThatAsync(                  async () => await queue.ErrorQueue.ExistsAsync()'                  40.Seconds());
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenCreatingErrorQueue,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenCreatingErrorQueue.cs,Then_The_Message_Retention_Period_Is_Updated,The following statement contains a magic number: queueConfig.ErrorQueueRetentionPeriod = TimeSpan.FromSeconds(100);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenCreatingErrorQueue,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenCreatingErrorQueue.cs,Then_The_Message_Retention_Period_Is_Updated,The following statement contains a magic number: queue.MessageRetentionPeriod.ShouldBe(TimeSpan.FromSeconds(100));
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUpdatingDeliveryDelay,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUpdatingDeliveryDelay.cs,Can_Update_Delivery_Delay,The following statement contains a magic number: var oldDeliveryDelay = TimeSpan.FromMinutes(2);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUpdatingDeliveryDelay,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUpdatingDeliveryDelay.cs,Can_Update_Delivery_Delay,The following statement contains a magic number: var newDeliveryDelay = TimeSpan.FromMinutes(5);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUpdatingRedrivePolicy,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUpdatingRedrivePolicy.cs,Can_Update_Redrive_Policy,The following statement contains a magic number: int maximumReceives = 42;
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUpdatingRetentionPeriod,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUpdatingRetentionPeriod.cs,Can_Update_Retention_Period,The following statement contains a magic number: var oldRetentionPeriod = TimeSpan.FromSeconds(600);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUpdatingRetentionPeriod,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUpdatingRetentionPeriod.cs,Can_Update_Retention_Period,The following statement contains a magic number: var newRetentionPeriod = TimeSpan.FromSeconds(700);
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(2));
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The following statement contains a magic number: j < 10
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      var stopwatch = Stopwatch.StartNew();                      var delay = IsSimulator ? TimeSpan.FromMilliseconds(100) : TimeSpan.FromSeconds(5);                        listener.Start(cancellationToken);                        do                      {                          await Task.Delay(delay);                            OutputHelper.WriteLine($"{DateTime.Now} - Handled {count} messages. Waiting for completion.");                      }                      while (count < throttleMessageCount && !cancellationToken.IsCancellationRequested);                        stopwatch.Stop();                      timeToProcess = stopwatch.Elapsed;                  });
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      var stopwatch = Stopwatch.StartNew();                      var delay = IsSimulator ? TimeSpan.FromMilliseconds(100) : TimeSpan.FromSeconds(5);                        listener.Start(cancellationToken);                        do                      {                          await Task.Delay(delay);                            OutputHelper.WriteLine($"{DateTime.Now} - Handled {count} messages. Waiting for completion.");                      }                      while (count < throttleMessageCount && !cancellationToken.IsCancellationRequested);                        stopwatch.Stop();                      timeToProcess = stopwatch.Elapsed;                  });
Magic Number,JustSaying.IntegrationTests.Fluent.AwsTools,WhenUsingABasicThrottle,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\AwsTools\WhenUsingABasicThrottle.cs,Messages_Are_Throttled_But_Still_Delivered,The following statement contains a magic number: OutputHelper.WriteLine($"{DateTime.Now} - Throughput {(float)count / timeToProcess.TotalMilliseconds * 1000} messages/second");
Magic Number,JustSaying.IntegrationTests,MessagingBusBuilderTests,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\MessagingBusBuilderTests.cs,Can_Create_Messaging_Bus_Fluently_For_A_Queue,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(0.2)' source.Token);
Magic Number,JustSaying.IntegrationTests,MessagingBusBuilderTests,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\MessagingBusBuilderTests.cs,Can_Create_Messaging_Bus_Fluently_For_A_Topic,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(0.2)' source.Token);
Magic Number,JustSaying.IntegrationTests,MessagingBusBuilderTests,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\MessagingBusBuilderTests.cs,Can_Create_Messaging_Bus_With_Contributors,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(0.2)' source.Token);
Magic Number,JustSaying.IntegrationTests.Fluent.Publishing,WhenCreatingAMessagePublisher,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Publishing\WhenCreatingAMessagePublisher.cs,Then_The_Queues_Exist,The following statement contains a magic number: queues.QueueUrls.Count.ShouldBe(2' "An incorrect number of queues were created.");
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenHandlerIsDeclaredAsExactlyOnce,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenHandlerIsDeclaredAsExactlyOnce.cs,Then_The_Handler_Only_Receives_The_Message_Once,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' serviceProvider' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        var message = new SimpleMessage();                        // Act                      await publisher.PublishAsync(message' cancellationToken);                      await publisher.PublishAsync(message' cancellationToken);                      await Task.Delay(5.Seconds());                        // Assert                      handler.NumberOfTimesIHaveBeenCalledForMessage(message.UniqueKey()).ShouldBe(1);                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenHandlingMultipleTopics,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenHandlingMultipleTopics.cs,Sqs_Policy_Is_Applied_With_Wildcard,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' serviceProvider' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        var clientFactory = serviceProvider.GetRequiredService<MessagingBusBuilder>().BuildClientFactory();                      var loggerFactory = serviceProvider.GetRequiredService<ILoggerFactory>();                      var client = clientFactory.GetSqsClient(Region);                        var queue = new SqsQueueByName(Region' UniqueName' client' 0' loggerFactory);                        await Patiently.AssertThatAsync(() => queue.ExistsAsync()' 60.Seconds());                        dynamic policyJson = JObject.Parse(queue.Policy);                        policyJson.Statement.Count.ShouldBe(1' $"Expecting 1 statement in Sqs policy but found {policyJson.Statement.Count}.");                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,WhenReceivingIsThrottled,The following statement contains a magic number: int waitOthers = 100;
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,WhenReceivingIsThrottled,The following statement contains a magic number: i <= 100
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: var services = GivenJustSaying()                  .ConfigureJustSaying((builder) => builder.Client((client) => client.WithAnonymousCredentials()))                  .ConfigureJustSaying((builder) => builder.Messaging((options) => options.WithPublishFailureBackoff(TimeSpan.FromMilliseconds(1))))                  .ConfigureJustSaying((builder) => builder.Publications((options) => options.WithQueue<SimpleMessage>(UniqueName)))                  .ConfigureJustSaying(                      (builder) => builder.Subscriptions(                          (options) => options.ForQueue<SimpleMessage>(                              (queue) => queue.WithName(UniqueName).WithReadConfiguration(                                  (config) => config.WithMaximumMessagesInflight(25)))))                  .AddSingleton(_handler);
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: var baseSleep = TestEnvironment.IsSimulatorConfigured ? TimeSpan.FromMilliseconds(100) : TimeSpan.FromSeconds(2);
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: var baseSleep = TestEnvironment.IsSimulatorConfigured ? TimeSpan.FromMilliseconds(100) : TimeSpan.FromSeconds(2);
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        // Publish the message with a long running handler                      await publisher.PublishAsync(_messages[1]);                        // Give some time to AWS to schedule the first long running message                      await Task.Delay(baseSleep);                        // Publish the rest of the messages except the last one.                      for (int i = 2; i <= 98; i++)                      {                          await publisher.PublishAsync(_messages[i]);                      }                        // Publish the last message after a couple of seconds to guaranty it was scheduled after all the rest                      await Task.Delay(baseSleep);                      await publisher.PublishAsync(_messages[100]);                        // Wait for a reasonble time before asserting whether the last message has been scheduled.                      await Task.Delay(baseSleep * 50);                        Received.InOrder(() => _handler.Handle(Arg.Is<SimpleMessage>((p) => p.Id == _ids[100])));                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        // Publish the message with a long running handler                      await publisher.PublishAsync(_messages[1]);                        // Give some time to AWS to schedule the first long running message                      await Task.Delay(baseSleep);                        // Publish the rest of the messages except the last one.                      for (int i = 2; i <= 98; i++)                      {                          await publisher.PublishAsync(_messages[i]);                      }                        // Publish the last message after a couple of seconds to guaranty it was scheduled after all the rest                      await Task.Delay(baseSleep);                      await publisher.PublishAsync(_messages[100]);                        // Wait for a reasonble time before asserting whether the last message has been scheduled.                      await Task.Delay(baseSleep * 50);                        Received.InOrder(() => _handler.Handle(Arg.Is<SimpleMessage>((p) => p.Id == _ids[100])));                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        // Publish the message with a long running handler                      await publisher.PublishAsync(_messages[1]);                        // Give some time to AWS to schedule the first long running message                      await Task.Delay(baseSleep);                        // Publish the rest of the messages except the last one.                      for (int i = 2; i <= 98; i++)                      {                          await publisher.PublishAsync(_messages[i]);                      }                        // Publish the last message after a couple of seconds to guaranty it was scheduled after all the rest                      await Task.Delay(baseSleep);                      await publisher.PublishAsync(_messages[100]);                        // Wait for a reasonble time before asserting whether the last message has been scheduled.                      await Task.Delay(baseSleep * 50);                        Received.InOrder(() => _handler.Handle(Arg.Is<SimpleMessage>((p) => p.Id == _ids[100])));                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        // Publish the message with a long running handler                      await publisher.PublishAsync(_messages[1]);                        // Give some time to AWS to schedule the first long running message                      await Task.Delay(baseSleep);                        // Publish the rest of the messages except the last one.                      for (int i = 2; i <= 98; i++)                      {                          await publisher.PublishAsync(_messages[i]);                      }                        // Publish the last message after a couple of seconds to guaranty it was scheduled after all the rest                      await Task.Delay(baseSleep);                      await publisher.PublishAsync(_messages[100]);                        // Wait for a reasonble time before asserting whether the last message has been scheduled.                      await Task.Delay(baseSleep * 50);                        Received.InOrder(() => _handler.Handle(Arg.Is<SimpleMessage>((p) => p.Id == _ids[100])));                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenReceivingIsThrottled,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenReceivingIsThrottled.cs,Then_The_Messages_Are_Handled_With_Throttle,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        // Publish the message with a long running handler                      await publisher.PublishAsync(_messages[1]);                        // Give some time to AWS to schedule the first long running message                      await Task.Delay(baseSleep);                        // Publish the rest of the messages except the last one.                      for (int i = 2; i <= 98; i++)                      {                          await publisher.PublishAsync(_messages[i]);                      }                        // Publish the last message after a couple of seconds to guaranty it was scheduled after all the rest                      await Task.Delay(baseSleep);                      await publisher.PublishAsync(_messages[100]);                        // Wait for a reasonble time before asserting whether the last message has been scheduled.                      await Task.Delay(baseSleep * 50);                        Received.InOrder(() => _handler.Handle(Arg.Is<SimpleMessage>((p) => p.Id == _ids[100])));                  });
Magic Number,JustSaying.IntegrationTests.Fluent.Subscribing,WhenTwoDifferentHandlersHandleAnExactlyOnceMessage,D:\research\architectureSmells\repos\justeat_JustSaying\tests\JustSaying.IntegrationTests\Fluent\Subscribing\WhenTwoDifferentHandlersHandleAnExactlyOnceMessage.cs,Then_Both_Handlers_Receive_The_Message,The following statement contains a magic number: await WhenAsync(                  services'                  async (publisher' listener' serviceProvider' cancellationToken) =>                  {                      listener.Start(cancellationToken);                        var message = new SimpleMessage();                        // Act                      await publisher.PublishAsync(message' cancellationToken);                      await Task.Delay(5.Seconds());                        // Assert                      handler1.NumberOfTimesIHaveBeenCalledForMessage(message.UniqueKey()).ShouldBe(1);                      handler2.NumberOfTimesIHaveBeenCalledForMessage(message.UniqueKey()).ShouldBe(1);                  });
