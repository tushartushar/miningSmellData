Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSRichTextBoxSyntaxHighlighting,XMLViewer,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\XMLViewer\XMLViewer.cs,ProcessElement,The method has 105 lines of code.
Long Statement,Cinteros.Xrm.XmlEditorUtils,FindTextHandler,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\FindTextHandler.cs,FindTheText,The length of the statement  "                else if (MessageBox.Show("No more occurence of \"" + text + "\" was found.\nSearch from the beginning?"' "Find text"' MessageBoxButtons.OKCancel' MessageBoxIcon.Information) == DialogResult.OK) " is 193.
Long Statement,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The length of the statement  "            TextBox textBox = new TextBox() { Left = 50' Top = 45' Width = 400' Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right' Text = startvalue }; " is 156.
Magic Number,Cinteros.Xrm.XmlEditorUtils,ControlUtils,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\ControlUtils.cs,GetControlDefinition,The following statement contains a magic number: defaultvalue = tags.Length > 2 ? tags[2] : control is CheckBox ? "false" : "";
Magic Number,Cinteros.Xrm.XmlEditorUtils,ControlUtils,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\ControlUtils.cs,GetControlDefinition,The following statement contains a magic number: defaultvalue = tags.Length > 2 ? tags[2] : control is CheckBox ? "false" : "";
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: prompt.Width = 500;
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: prompt.Height = 150;
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Label textLabel = new Label() { Left = 50' Top = 20' Width = 300' Text = text };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Label textLabel = new Label() { Left = 50' Top = 20' Width = 300' Text = text };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Label textLabel = new Label() { Left = 50' Top = 20' Width = 300' Text = text };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: TextBox textBox = new TextBox() { Left = 50' Top = 45' Width = 400' Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right' Text = startvalue };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: TextBox textBox = new TextBox() { Left = 50' Top = 45' Width = 400' Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right' Text = startvalue };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: TextBox textBox = new TextBox() { Left = 50' Top = 45' Width = 400' Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right' Text = startvalue };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Button confirmation = new Button() { Text = "Ok"' Left = 350' Width = 100' Top = 80' DialogResult = DialogResult.OK };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Button confirmation = new Button() { Text = "Ok"' Left = 350' Width = 100' Top = 80' DialogResult = DialogResult.OK };
Magic Number,Cinteros.Xrm.XmlEditorUtils,Prompt,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\Prompt.cs,ShowDialog,The following statement contains a magic number: Button confirmation = new Button() { Text = "Ok"' Left = 350' Width = 100' Top = 80' DialogResult = DialogResult.OK };
Magic Number,CSRichTextBoxSyntaxHighlighting,XMLViewer,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\XMLViewer\XMLViewer.cs,ProcessElement,The following statement contains a magic number: string indent = new string(' '' 2 * level);
Magic Number,CSRichTextBoxSyntaxHighlighting,XMLViewer,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\XMLViewer\XMLViewer.cs,ProcessElement,The following statement contains a magic number: if (element.ChildNodes.Count > 0 && !(element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >\par  {{1}}  {0}\cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    // Construct the Rtf of child elements.                  foreach (XmlNode childElement in element.ChildNodes)                  {                      string childElementRtfContent =                          ProcessElement(childElement' level + 1);                      childElementsRtfContent.Append(childElementRtfContent);                  }              }                else if (element is XmlComment)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <!--  {{1}}  \cf{1} -->\par"'                      indent'                      XMLViewerSettings.TagID);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.CommentID'                      element.Value.Replace("\r\n"' "\n").Replace("\n"' "\\line "));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(((XmlText)element.ChildNodes[0]).Value.Trim()));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (!string.IsNullOrWhiteSpace(element.Value))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(element.Value.Trim()));              }                // This element only has attributes. {{0}} will be replaced with the attributes.              else              {                  elementRtfFormat =                      string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} />\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);              }
Magic Number,CSRichTextBoxSyntaxHighlighting,XMLViewer,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\XMLViewer\XMLViewer.cs,ProcessElement,The following statement contains a magic number: if (element.ChildNodes.Count > 0 && !(element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >\par  {{1}}  {0}\cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    // Construct the Rtf of child elements.                  foreach (XmlNode childElement in element.ChildNodes)                  {                      string childElementRtfContent =                          ProcessElement(childElement' level + 1);                      childElementsRtfContent.Append(childElementRtfContent);                  }              }                else if (element is XmlComment)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <!--  {{1}}  \cf{1} -->\par"'                      indent'                      XMLViewerSettings.TagID);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.CommentID'                      element.Value.Replace("\r\n"' "\n").Replace("\n"' "\\line "));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(((XmlText)element.ChildNodes[0]).Value.Trim()));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (!string.IsNullOrWhiteSpace(element.Value))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(element.Value.Trim()));              }                // This element only has attributes. {{0}} will be replaced with the attributes.              else              {                  elementRtfFormat =                      string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} />\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);              }
Magic Number,CSRichTextBoxSyntaxHighlighting,XMLViewer,C:\repos\cinteros_FetchXMLBuilder\XmlEditorUtils\XMLViewer\XMLViewer.cs,ProcessElement,The following statement contains a magic number: if (element.ChildNodes.Count > 0 && !(element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >\par  {{1}}  {0}\cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    // Construct the Rtf of child elements.                  foreach (XmlNode childElement in element.ChildNodes)                  {                      string childElementRtfContent =                          ProcessElement(childElement' level + 1);                      childElementsRtfContent.Append(childElementRtfContent);                  }              }                else if (element is XmlComment)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <!--  {{1}}  \cf{1} -->\par"'                      indent'                      XMLViewerSettings.TagID);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.CommentID'                      element.Value.Replace("\r\n"' "\n").Replace("\n"' "\\line "));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (element.ChildNodes.Count == 1 && element.ChildNodes[0] is XmlText)              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(((XmlText)element.ChildNodes[0]).Value.Trim()));              }                // If !string.IsNullOrWhiteSpace(element.Value)' then construct the Rtf               // of the value.              else if (!string.IsNullOrWhiteSpace(element.Value))              {                  elementRtfFormat = string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} >  {{1}}  \cf{1} </\cf{2} {3}\cf{1} >\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);                    childElementsRtfContent.AppendFormat(@"{0}\cf{1} {2}"'                      new string(' '' 2 * (0 /*level + 1*/))'                      XMLViewerSettings.ValueID'                      CharacterEncoder.Encode(element.Value.Trim()));              }                // This element only has attributes. {{0}} will be replaced with the attributes.              else              {                  elementRtfFormat =                      string.Format(@"  {0}\cf{1} <\cf{2} {3}{{0}}\cf{1} />\par"'                      indent'                      XMLViewerSettings.TagID'                      XMLViewerSettings.ElementID'                      element.Name);              }
