Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getReaderStatus,The method has 121 lines of code.
Long Method,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The method has 129 lines of code.
Long Method,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,setupReader,The method has 107 lines of code.
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,Cyclomatic complexity of the method is 24
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,Cyclomatic complexity of the method is 24
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,Cyclomatic complexity of the method is 24
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,Cyclomatic complexity of the method is 23
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getOperProfile,Cyclomatic complexity of the method is 15
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile,Cyclomatic complexity of the method is 9
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile_TxPowers,Cyclomatic complexity of the method is 10
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,Cyclomatic complexity of the method is 8
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,Cyclomatic complexity of the method is 11
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getReaderStatus,Cyclomatic complexity of the method is 13
Complex Method,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncWriteTags,Cyclomatic complexity of the method is 9
Complex Method,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,Cyclomatic complexity of the method is 38
Complex Method,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,setupReader,Cyclomatic complexity of the method is 12
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode={1}&session_id={2}"' httpUri.AbsoluteUri' mode' SessionId)); " is 128.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getEPC&session_id={1}"' httpUri.AbsoluteUri' SessionId)); " is 125.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setAccessMode,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&mode={3}"' httpUri.AbsoluteUri' cmd' SessionId' mode_str)); " is 123.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setReaderID,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&reader_id={3}&desc={4}"' httpUri.AbsoluteUri' cmd' SessionId' reader_id.id' reader_id.desc)); " is 157.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile,The length of the statement  "		sbReq.Append (String.Format ("&profile_id={0}&captureMode={1}&duplicateEliminationTime={2}"' profile.profile_id' profile.capture_mode' profile.window_time)); " is 157.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile,The length of the statement  "		sbReq.Append (String.Format ("&modulationProfile={0}&populationEst={1}&sessionNo={2}"' profile.modulation_profile' profile.population' profile.session_no)); " is 156.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile,The length of the statement  "		sbReq.Append (String.Format ("&transmitPower={0}&antennaPort={1}&enable={2}"' profile.transmit_power' antennaPort' enable)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile_TxPowers,The length of the statement  "		sbReq.Append (String.Format ("&profile_id={0}&captureMode={1}&duplicateEliminationTime={2}"' profile.profile_id' profile.capture_mode' profile.window_time)); " is 157.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile_TxPowers,The length of the statement  "		sbReq.Append (String.Format ("&modulationProfile={0}&populationEst={1}&sessionNo={2}"' profile.modulation_profile' profile.population' profile.session_no)); " is 156.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,setOperProfile_TxPowers,The length of the statement  "		sbReq.Append (String.Format ("&transmitPower1={0}&&transmitPower2={1}&transmitPower3={2}&transmitPower4={3}"' profile.ant1_power' profile.ant2_power' profile.ant3_power' profile.ant4_power)); " is 191.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listEvent,The length of the statement  "                        */info.log = (atts.GetNamedItem ("event_log").Value.Equals ("true"' StringComparison.OrdinalIgnoreCase)) ? true : false; " is 120.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,addEvent,The length of the statement  "		sbReq.Append (String.Format ("&event_id={0}&desc={1}&triggering_logic={2}&operProfile_id={3}"' info.id' info.desc' info.trigger' info.profile)); " is 144.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,addEvent,The length of the statement  "		sbReq.Append (String.Format ("&inventoryEnablingTrigger={0}&inventoryDisablingTrigger={1}"' info.enabling' info.disabling)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,modEvent,The length of the statement  "		sbReq.Append (String.Format ("&event_id={0}&desc={1}&triggering_logic={2}&operProfile_id={3}"' info.id' info.desc' info.trigger' info.profile)); " is 144.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,modEvent,The length of the statement  "		sbReq.Append (String.Format ("&inventoryEnablingTrigger={0}&inventoryDisablingTrigger={1}"' info.enabling' info.disabling)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,addUser,The length of the statement  "		sbReq.Append (String.Format ("&username={0}&password={1}&desc={2}&level={3}"' info.username' info.password' info.desc' info.level)); " is 132.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,forceLogout,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getReaderStatus,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,healtCheck,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword)); " is 130.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,startInventory,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&mode=pollingTrigger"' httpUri.AbsoluteUri' cmd' SessionId)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,purgeAllTags,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&mode=purgeAllTags"' httpUri.AbsoluteUri' cmd' SessionId)); " is 122.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,runIO_output8bit,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&logic={3:X2}"' httpUri.AbsoluteUri' cmd' SessionId' gpo)); " is 122.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,directIO_output8bits,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&logic={3:X2}"' httpUri.AbsoluteUri' cmd' SessionId' gpo)); " is 122.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncModifyAccessPassword,The length of the statement  "		sbReq.Append (String.Format ("&mode=syncModifyAccessPassword&password={0}&unlockPassword={1}&accessLock={2}"' wti.password' wti.unlockPassword' wti.accessLock)); " is 161.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncModifyAccessPassword,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncModifyKillPassword,The length of the statement  "		sbReq.Append (String.Format ("&mode=syncModifyKillPassword&killPassword={0}&unlockPassword={1}"' wti.killPassword' wti.unlockPassword)); " is 136.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncModifyKillPassword,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncKillTag,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,syncWriteTags,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,killTags,The length of the statement  "		sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}&mode=killTagFixedNumber"' httpUri.AbsoluteUri' cmd' SessionId)); " is 128.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,killTags,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,killTags,The length of the statement  "		sbReq.Append (String.Format ("&killFixedNo={0}&killPassword={1}&useActiveProfile={2}"' wti.killFixedNo' wti.killPassword' wti.useActiveProfile)); " is 145.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,killTags,The length of the statement  "			sbReq.Append (String.Format ("&antennaPort={0}modulationProfile={1}&mode={2}"' wti.antennas' wti.modulation_profile' wti.mode)); " is 128.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,killTags,The length of the statement  "			sbReq.Append (String.Format ("&transmitPower={0}&populationEst={1}&sessionNo={2}"' wti.transmit_power' wti.population' wti.session_no)); " is 136.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,writeTags,The length of the statement  "		sbReq.Append (String.Format ("&filterOp1={0}&filter1={1}&filterLogic={2}"' wti.filter_op_1' wti.filter1' wti.filter_logic)); " is 124.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,writeTags,The length of the statement  "			sbReq.Append (String.Format ("&antennaPort={0}modulationProfile={1}&mode={2}"' wti.antennas' wti.modulation_profile' wti.mode)); " is 128.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,writeTags,The length of the statement  "			sbReq.Append (String.Format ("&transmitPower={0}&populationEst={1}&sessionNo={2}"' wti.transmit_power' wti.population' wti.session_no)); " is 136.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,writeTags,The length of the statement  "		if (wti.mode.Equals ("writeAllBanksFilterManyHexBased") || wti.mode.Equals ("writeAllBanksFilterFixedNumberHexBased")) { " is 120.
Long Statement,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,writeTags,The length of the statement  "			sbReq.Append (String.Format ("&tag_model={0}&bank3_hex={1}&bank1_enable={2}&bank3_enable={3}"' wti.tag_model' wti.user_memory' wti.bank1_enable' wti.bank3_enable)); " is 164.
Long Statement,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,AcceptCallback,The length of the statement  "			saveToLogInfo (String.Format ("Connected from {0}:{1}. {2} active clients"' ip.Address.ToString ()' ip.Port.ToString ()' clientSockets.Count)); " is 143.
Long Statement,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The length of the statement  "		//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508 " is 150.
Long Statement,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The length of the statement  "		//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720 " is 152.
Long Statement,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The length of the statement  "	cbAntennaPortScheme.SelectedIndex = s.Text ("CS461/Reader/DuplicationElimination/AntennaPortScheme"' "false").Equals ("true") ? 1 : 0; " is 134.
Long Statement,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,cbAntennaPortScheme_SelectedIndexChanged,The length of the statement  "	s.Set ("CS461/Reader/DuplicationElimination/AntennaPortScheme"' cbAntennaPortScheme.SelectedIndex == 1 ? "true" : "false"); " is 123.
Empty Catch Block,CSL,CSL_Settings,C:\repos\riickky45_AControl\Access Control\CSL_Settings.cs,CSL_Settings,The method has an empty catch block.
Empty Catch Block,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,StartListening,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,Registro,C:\repos\riickky45_AControl\Access Control\Registro.cs,update_UserInfo,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,Registro,C:\repos\riickky45_AControl\Access Control\Registro.cs,update_UserInfo,The method has an empty catch block.
Empty Catch Block,CS461_Access_Control,Registro,C:\repos\riickky45_AControl\Access Control\Registro.cs,update_UserInfo,The method has an empty catch block.
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,CS461_HL_API,The following statement contains a magic number: TimeWindow = 30;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,CS461_HL_API,The following statement contains a magic number: http_timeout = 30000;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseErrorCode,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.StartsWith ("Error:"' StringComparison.OrdinalIgnoreCase)) {  		//error  		string msg = node.InnerXml.Substring (7);  		ErrorMsg = msg.Trim ();  		return true;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseErrorCode,The following statement contains a magic number: if (node.InnerXml.StartsWith ("Error:"' StringComparison.OrdinalIgnoreCase)) {  	//error  	string msg = node.InnerXml.Substring (7);  	ErrorMsg = msg.Trim ();  	return true;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseErrorCode,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseErrorCode,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseErrorCode,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode={1}&session_id={2}"' httpUri.AbsoluteUri' mode' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode={1}&session_id={2}"' httpUri.AbsoluteUri' mode' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode={1}&session_id={2}"' httpUri.AbsoluteUri' mode' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (node != null) {  	//<Error>  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  			ErrorMsg = att.InnerXml.Substring (6).Trim ();  		}  		else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (att.InnerXml' out ErrorCode);  		}  	}  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRaw,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getEPC&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getEPC&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getEPC&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (node != null) {  	//<Error>  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  			ErrorMsg = att.InnerXml.Substring (6).Trim ();  		}  		else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (att.InnerXml' out ErrorCode);  		}  	}  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawEPC,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  				if (node != null) {  					//<Ack>  					TAG tag;  					while (node != null) {  						tag = new TAG ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.Antenna = att.InnerXml;  							}  							else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml;  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								string s = att.InnerXml;  								if (s.Length > 1) {  									tag.Index = s.Substring (1);  									tag.session = s.Substring (0' 1);  								}  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								tag.RSSI = double.Parse (att.InnerXml);  							}  							else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.TagOrigId = att.InnerXml;  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  							else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.EventId = att.InnerXml;  							}  							else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  								tag.ServerIp = att.InnerXml;  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tag.ServerIp = httpUri.Host;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  			if (node != null) {  				//<Ack>  				TAG tag;  				while (node != null) {  					tag = new TAG ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.Antenna = att.InnerXml;  						}  						else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml;  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							string s = att.InnerXml;  							if (s.Length > 1) {  								tag.Index = s.Substring (1);  								tag.session = s.Substring (0' 1);  							}  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							tag.RSSI = double.Parse (att.InnerXml);  						}  						else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.TagOrigId = att.InnerXml;  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  						else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.EventId = att.InnerXml;  						}  						else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  							tag.ServerIp = att.InnerXml;  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tag.ServerIp = httpUri.Host;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  		if (node != null) {  			//<Ack>  			TAG tag;  			while (node != null) {  				tag = new TAG ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.Antenna = att.InnerXml;  					}  					else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml;  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						string s = att.InnerXml;  						if (s.Length > 1) {  							tag.Index = s.Substring (1);  							tag.session = s.Substring (0' 1);  						}  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						tag.RSSI = double.Parse (att.InnerXml);  					}  					else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.TagOrigId = att.InnerXml;  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  					else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.EventId = att.InnerXml;  					}  					else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  						tag.ServerIp = att.InnerXml;  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tag.ServerIp = httpUri.Host;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagEPC");  	if (node != null) {  		//<Ack>  		TAG tag;  		while (node != null) {  			tag = new TAG ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.Antenna = att.InnerXml;  				}  				else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml;  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					string s = att.InnerXml;  					if (s.Length > 1) {  						tag.Index = s.Substring (1);  						tag.session = s.Substring (0' 1);  					}  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					tag.RSSI = double.Parse (att.InnerXml);  				}  				else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.TagOrigId = att.InnerXml;  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  				else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.EventId = att.InnerXml;  				}  				else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  					tag.ServerIp = att.InnerXml;  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tag.ServerIp = httpUri.Host;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG tag;  	while (node != null) {  		tag = new TAG ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.Antenna = att.InnerXml;  			}  			else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml;  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				string s = att.InnerXml;  				if (s.Length > 1) {  					tag.Index = s.Substring (1);  					tag.session = s.Substring (0' 1);  				}  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				tag.RSSI = double.Parse (att.InnerXml);  			}  			else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.TagOrigId = att.InnerXml;  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  			else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.EventId = att.InnerXml;  			}  			else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  				tag.ServerIp = att.InnerXml;  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tag.ServerIp = httpUri.Host;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: while (node != null) {  	tag = new TAG ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.Antenna = att.InnerXml;  		}  		else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml;  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			string s = att.InnerXml;  			if (s.Length > 1) {  				tag.Index = s.Substring (1);  				tag.session = s.Substring (0' 1);  			}  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			tag.RSSI = double.Parse (att.InnerXml);  		}  		else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.TagOrigId = att.InnerXml;  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  		else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.EventId = att.InnerXml;  		}  		else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  			tag.ServerIp = att.InnerXml;  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tag.ServerIp = httpUri.Host;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.Antenna = att.InnerXml;  	}  	else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml;  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		string s = att.InnerXml;  		if (s.Length > 1) {  			tag.Index = s.Substring (1);  			tag.session = s.Substring (0' 1);  		}  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		tag.RSSI = double.Parse (att.InnerXml);  	}  	else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.TagOrigId = att.InnerXml;  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  	else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.EventId = att.InnerXml;  	}  	else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  		tag.ServerIp = att.InnerXml;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.Antenna = att.InnerXml;  }  else if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_name"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml;  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	string s = att.InnerXml;  	if (s.Length > 1) {  		tag.Index = s.Substring (1);  		tag.session = s.Substring (0' 1);  	}  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	tag.RSSI = double.Parse (att.InnerXml);  }  else if (att.Name.Equals ("tag_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.TagOrigId = att.InnerXml;  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  else if (att.Name.Equals ("event_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.EventId = att.InnerXml;  }  else if (att.Name.Equals ("reader_ip"' StringComparison.OrdinalIgnoreCase)) {  	tag.ServerIp = att.InnerXml;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (node != null) {  	//<Error>  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  			ErrorMsg = att.InnerXml.Substring (6).Trim ();  		}  		else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (att.InnerXml' out ErrorCode);  		}  	}  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCaptureTagsRawAllBanks,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  				if (node != null) {  					//<Ack>  					TAG_MULTI_BANKS tag;  					while (node != null) {  						tag = new TAG_MULTI_BANKS ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								tag.Index = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									double.TryParse (att.InnerXml' out d);  								}  							}  							else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  								tag.EPC = att.InnerXml.Trim ().Substring (8);  							}  							else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  								tag.TID = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  								tag.UserMemory = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  				if (node != null) {  					//<Ack>  					TAG_MULTI_BANKS tag;  					while (node != null) {  						tag = new TAG_MULTI_BANKS ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								tag.Index = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									double.TryParse (att.InnerXml' out d);  								}  							}  							else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  								tag.EPC = att.InnerXml.Trim ().Substring (8);  							}  							else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  								tag.TID = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  								tag.UserMemory = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  				if (node != null) {  					//<Ack>  					TAG_MULTI_BANKS tag;  					while (node != null) {  						tag = new TAG_MULTI_BANKS ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								tag.Index = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									double.TryParse (att.InnerXml' out d);  								}  							}  							else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  								tag.EPC = att.InnerXml.Trim ().Substring (8);  							}  							else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  								tag.TID = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  								tag.UserMemory = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command=getCaptureTagsRaw&mode=getAllBanks&session_id={1}"' httpUri.AbsoluteUri' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  				if (node != null) {  					//<Ack>  					TAG_MULTI_BANKS tag;  					while (node != null) {  						tag = new TAG_MULTI_BANKS ();  						foreach (XmlAttribute att in node.Attributes) {  							if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  								tag.CapturePointId = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									if (double.TryParse (att.InnerXml' out d)) {  										tag.Frequency = d * 0.05 + 860.0;  									}  								}  							}  							else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  								tag.Index = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  								if (att.InnerXml != null) {  									double d;  									double.TryParse (att.InnerXml' out d);  								}  							}  							else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  								tag.EPC = att.InnerXml.Trim ().Substring (8);  							}  							else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  								tag.TID = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  								tag.UserMemory = att.InnerXml.Trim ();  							}  							else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  								int.TryParse (att.InnerXml' out tag.Time);  							}  						}  						tag.ApiTimeStampUTC = DateTime.UtcNow;  						tags.Add (tag);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return tags;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  			if (node != null) {  				//<Ack>  				TAG_MULTI_BANKS tag;  				while (node != null) {  					tag = new TAG_MULTI_BANKS ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							tag.Index = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								double.TryParse (att.InnerXml' out d);  							}  						}  						else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  							tag.EPC = att.InnerXml.Trim ().Substring (8);  						}  						else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  							tag.TID = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  							tag.UserMemory = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  			if (node != null) {  				//<Ack>  				TAG_MULTI_BANKS tag;  				while (node != null) {  					tag = new TAG_MULTI_BANKS ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							tag.Index = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								double.TryParse (att.InnerXml' out d);  							}  						}  						else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  							tag.EPC = att.InnerXml.Trim ().Substring (8);  						}  						else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  							tag.TID = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  							tag.UserMemory = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  			if (node != null) {  				//<Ack>  				TAG_MULTI_BANKS tag;  				while (node != null) {  					tag = new TAG_MULTI_BANKS ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							tag.Index = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								double.TryParse (att.InnerXml' out d);  							}  						}  						else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  							tag.EPC = att.InnerXml.Trim ().Substring (8);  						}  						else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  							tag.TID = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  							tag.UserMemory = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  			if (node != null) {  				//<Ack>  				TAG_MULTI_BANKS tag;  				while (node != null) {  					tag = new TAG_MULTI_BANKS ();  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  							tag.CapturePointId = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								if (double.TryParse (att.InnerXml' out d)) {  									tag.Frequency = d * 0.05 + 860.0;  								}  							}  						}  						else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  							tag.Index = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  							if (att.InnerXml != null) {  								double d;  								double.TryParse (att.InnerXml' out d);  							}  						}  						else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  							tag.EPC = att.InnerXml.Trim ().Substring (8);  						}  						else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  							tag.TID = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  							tag.UserMemory = att.InnerXml.Trim ();  						}  						else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  							int.TryParse (att.InnerXml' out tag.Time);  						}  					}  					tag.ApiTimeStampUTC = DateTime.UtcNow;  					tags.Add (tag);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return tags;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  		if (node != null) {  			//<Ack>  			TAG_MULTI_BANKS tag;  			while (node != null) {  				tag = new TAG_MULTI_BANKS ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						tag.Index = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							double.TryParse (att.InnerXml' out d);  						}  					}  					else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  						tag.EPC = att.InnerXml.Trim ().Substring (8);  					}  					else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  						tag.TID = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  						tag.UserMemory = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  		if (node != null) {  			//<Ack>  			TAG_MULTI_BANKS tag;  			while (node != null) {  				tag = new TAG_MULTI_BANKS ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						tag.Index = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							double.TryParse (att.InnerXml' out d);  						}  					}  					else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  						tag.EPC = att.InnerXml.Trim ().Substring (8);  					}  					else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  						tag.TID = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  						tag.UserMemory = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  		if (node != null) {  			//<Ack>  			TAG_MULTI_BANKS tag;  			while (node != null) {  				tag = new TAG_MULTI_BANKS ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						tag.Index = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							double.TryParse (att.InnerXml' out d);  						}  					}  					else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  						tag.EPC = att.InnerXml.Trim ().Substring (8);  					}  					else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  						tag.TID = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  						tag.UserMemory = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  		if (node != null) {  			//<Ack>  			TAG_MULTI_BANKS tag;  			while (node != null) {  				tag = new TAG_MULTI_BANKS ();  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  						tag.CapturePointId = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							if (double.TryParse (att.InnerXml' out d)) {  								tag.Frequency = d * 0.05 + 860.0;  							}  						}  					}  					else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  						tag.Index = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  						if (att.InnerXml != null) {  							double d;  							double.TryParse (att.InnerXml' out d);  						}  					}  					else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  						tag.EPC = att.InnerXml.Trim ().Substring (8);  					}  					else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  						tag.TID = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  						tag.UserMemory = att.InnerXml.Trim ();  					}  					else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  						int.TryParse (att.InnerXml' out tag.Time);  					}  				}  				tag.ApiTimeStampUTC = DateTime.UtcNow;  				tags.Add (tag);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return tags;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  	if (node != null) {  		//<Ack>  		TAG_MULTI_BANKS tag;  		while (node != null) {  			tag = new TAG_MULTI_BANKS ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					tag.Index = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						double.TryParse (att.InnerXml' out d);  					}  				}  				else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  					tag.EPC = att.InnerXml.Trim ().Substring (8);  				}  				else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  					tag.TID = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  					tag.UserMemory = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  	if (node != null) {  		//<Ack>  		TAG_MULTI_BANKS tag;  		while (node != null) {  			tag = new TAG_MULTI_BANKS ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					tag.Index = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						double.TryParse (att.InnerXml' out d);  					}  				}  				else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  					tag.EPC = att.InnerXml.Trim ().Substring (8);  				}  				else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  					tag.TID = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  					tag.UserMemory = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  	if (node != null) {  		//<Ack>  		TAG_MULTI_BANKS tag;  		while (node != null) {  			tag = new TAG_MULTI_BANKS ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					tag.Index = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						double.TryParse (att.InnerXml' out d);  					}  				}  				else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  					tag.EPC = att.InnerXml.Trim ().Substring (8);  				}  				else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  					tag.TID = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  					tag.UserMemory = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node.InnerXml.Equals ("getcapturetagsraw"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/TagList/tagAllBanks");  	if (node != null) {  		//<Ack>  		TAG_MULTI_BANKS tag;  		while (node != null) {  			tag = new TAG_MULTI_BANKS ();  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  					tag.CapturePointId = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						if (double.TryParse (att.InnerXml' out d)) {  							tag.Frequency = d * 0.05 + 860.0;  						}  					}  				}  				else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  					tag.Index = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  					if (att.InnerXml != null) {  						double d;  						double.TryParse (att.InnerXml' out d);  					}  				}  				else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  					tag.EPC = att.InnerXml.Trim ().Substring (8);  				}  				else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  					tag.TID = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  					tag.UserMemory = att.InnerXml.Trim ();  				}  				else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  					int.TryParse (att.InnerXml' out tag.Time);  				}  			}  			tag.ApiTimeStampUTC = DateTime.UtcNow;  			tags.Add (tag);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return tags;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG_MULTI_BANKS tag;  	while (node != null) {  		tag = new TAG_MULTI_BANKS ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				tag.Index = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					double.TryParse (att.InnerXml' out d);  				}  			}  			else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  				tag.EPC = att.InnerXml.Trim ().Substring (8);  			}  			else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  				tag.TID = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  				tag.UserMemory = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG_MULTI_BANKS tag;  	while (node != null) {  		tag = new TAG_MULTI_BANKS ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				tag.Index = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					double.TryParse (att.InnerXml' out d);  				}  			}  			else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  				tag.EPC = att.InnerXml.Trim ().Substring (8);  			}  			else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  				tag.TID = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  				tag.UserMemory = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	//<Ack>  	TAG_MULTI_BANKS tag;  	while (node != null) {  		tag = new TAG_MULTI_BANKS ();  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  				tag.CapturePointId = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					if (double.TryParse (att.InnerXml' out d)) {  						tag.Frequency = d * 0.05 + 860.0;  					}  				}  			}  			else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  				tag.Index = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  				if (att.InnerXml != null) {  					double d;  					double.TryParse (att.InnerXml' out d);  				}  			}  			else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  				tag.EPC = att.InnerXml.Trim ().Substring (8);  			}  			else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  				tag.TID = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  				tag.UserMemory = att.InnerXml.Trim ();  			}  			else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  				int.TryParse (att.InnerXml' out tag.Time);  			}  		}  		tag.ApiTimeStampUTC = DateTime.UtcNow;  		tags.Add (tag);  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return tags;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: while (node != null) {  	tag = new TAG_MULTI_BANKS ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			tag.Index = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				double.TryParse (att.InnerXml' out d);  			}  		}  		else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  			tag.EPC = att.InnerXml.Trim ().Substring (8);  		}  		else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  			tag.TID = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  			tag.UserMemory = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: while (node != null) {  	tag = new TAG_MULTI_BANKS ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			tag.Index = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				double.TryParse (att.InnerXml' out d);  			}  		}  		else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  			tag.EPC = att.InnerXml.Trim ().Substring (8);  		}  		else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  			tag.TID = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  			tag.UserMemory = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: while (node != null) {  	tag = new TAG_MULTI_BANKS ();  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  			tag.CapturePointId = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				if (double.TryParse (att.InnerXml' out d)) {  					tag.Frequency = d * 0.05 + 860.0;  				}  			}  		}  		else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  			tag.Index = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  			if (att.InnerXml != null) {  				double d;  				double.TryParse (att.InnerXml' out d);  			}  		}  		else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  			tag.EPC = att.InnerXml.Trim ().Substring (8);  		}  		else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  			tag.TID = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  			tag.UserMemory = att.InnerXml.Trim ();  		}  		else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  			int.TryParse (att.InnerXml' out tag.Time);  		}  	}  	tag.ApiTimeStampUTC = DateTime.UtcNow;  	tags.Add (tag);  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		tag.Index = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			double.TryParse (att.InnerXml' out d);  		}  	}  	else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  		tag.EPC = att.InnerXml.Trim ().Substring (8);  	}  	else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  		tag.TID = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  		tag.UserMemory = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		tag.Index = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			double.TryParse (att.InnerXml' out d);  		}  	}  	else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  		tag.EPC = att.InnerXml.Trim ().Substring (8);  	}  	else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  		tag.TID = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  		tag.UserMemory = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  		tag.CapturePointId = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			if (double.TryParse (att.InnerXml' out d)) {  				tag.Frequency = d * 0.05 + 860.0;  			}  		}  	}  	else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  		tag.Index = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  		if (att.InnerXml != null) {  			double d;  			double.TryParse (att.InnerXml' out d);  		}  	}  	else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  		tag.EPC = att.InnerXml.Trim ().Substring (8);  	}  	else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  		tag.TID = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  		tag.UserMemory = att.InnerXml.Trim ();  	}  	else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  		int.TryParse (att.InnerXml' out tag.Time);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("capturepoint_id"' StringComparison.OrdinalIgnoreCase)) {  	tag.CapturePointId = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("freq"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		if (double.TryParse (att.InnerXml' out d)) {  			tag.Frequency = d * 0.05 + 860.0;  		}  	}  }  else if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.InnerXml != null) {  	double d;  	if (double.TryParse (att.InnerXml' out d)) {  		tag.Frequency = d * 0.05 + 860.0;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (double.TryParse (att.InnerXml' out d)) {  	tag.Frequency = d * 0.05 + 860.0;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: tag.Frequency = d * 0.05 + 860.0;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("index"' StringComparison.OrdinalIgnoreCase)) {  	tag.Index = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("rssi"' StringComparison.OrdinalIgnoreCase)) {  	if (att.InnerXml != null) {  		double d;  		double.TryParse (att.InnerXml' out d);  	}  }  else if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("bank1"' StringComparison.OrdinalIgnoreCase)) {  	tag.EPC = att.InnerXml.Trim ().Substring (8);  }  else if (att.Name.Equals ("bank2"' StringComparison.OrdinalIgnoreCase)) {  	tag.TID = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("bank3"' StringComparison.OrdinalIgnoreCase)) {  	tag.UserMemory = att.InnerXml.Trim ();  }  else if (att.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase)) {  	int.TryParse (att.InnerXml' out tag.Time);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: tag.EPC = att.InnerXml.Trim ().Substring (8);  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (node != null) {  	//<Error>  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  			ErrorMsg = att.InnerXml.Substring (6).Trim ();  		}  		else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (att.InnerXml' out ErrorCode);  		}  	}  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getTagDataAllBanks,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,sendHTTPRequest,The following statement contains a magic number: try {  	HttpWebRequest req = (HttpWebRequest)WebRequest.Create (request);  	req.Timeout = http_timeout;  	//30 seconds  	HttpWebResponse resp = (HttpWebResponse)req.GetResponse ();  	Stream respStream = resp.GetResponseStream ();  	StringBuilder sb = new StringBuilder ();  	byte[] buf = new byte[8192];  	string tempString = null;  	int count = 0;  	do {  		count = respStream.Read (buf' 0' buf.Length);  		if (count != 0) {  			// translate from bytes to ASCII text  			tempString = Encoding.ASCII.GetString (buf' 0' count);  			// continue building the string  			sb.Append (tempString);  		}  	}  	while (count > 0);  	// any more data to read?  	saveToLogVerbose (sb.ToString ());  	return sb.ToString ();  }  catch (WebException wEx) {  	ErrorCode = ERR_CODE_WEB_ERROR;  	ErrorMsg = wEx.Message;  	return null;  }  catch {  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = ERR_MSG_UNKNOWN_ERROR;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}"' httpUri.AbsoluteUri' cmd' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return name;  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (resp);  	if (isCSLResponse (ref doc' cmd) == false)  		return name;  	XmlNode node = doc.SelectSingleNode ("CSL/capturepoint");  	if (node != null) {  		while (node != null) {  			XmlAttributeCollection atts = node.Attributes;  			if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  				name [0] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  				name [1] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  				name [2] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  				name [3] = atts.GetNamedItem ("name").Value;  			}  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return name;  	}  	parseErrorCode (ref doc);  	return name;  }  catch {  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = ERR_MSG_UNKNOWN_ERROR;  	return name;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}"' httpUri.AbsoluteUri' cmd' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return name;  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (resp);  	if (isCSLResponse (ref doc' cmd) == false)  		return name;  	XmlNode node = doc.SelectSingleNode ("CSL/capturepoint");  	if (node != null) {  		while (node != null) {  			XmlAttributeCollection atts = node.Attributes;  			if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  				name [0] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  				name [1] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  				name [2] = atts.GetNamedItem ("name").Value;  			}  			else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  				name [3] = atts.GetNamedItem ("name").Value;  			}  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return name;  	}  	parseErrorCode (ref doc);  	return name;  }  catch {  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = ERR_MSG_UNKNOWN_ERROR;  	return name;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (node != null) {  	while (node != null) {  		XmlAttributeCollection atts = node.Attributes;  		if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  			name [0] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  			name [1] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  			name [2] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  			name [3] = atts.GetNamedItem ("name").Value;  		}  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return name;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (node != null) {  	while (node != null) {  		XmlAttributeCollection atts = node.Attributes;  		if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  			name [0] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  			name [1] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  			name [2] = atts.GetNamedItem ("name").Value;  		}  		else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  			name [3] = atts.GetNamedItem ("name").Value;  		}  		node = node.NextSibling;  	}  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return name;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: while (node != null) {  	XmlAttributeCollection atts = node.Attributes;  	if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  		name [0] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  		name [1] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  		name [2] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  		name [3] = atts.GetNamedItem ("name").Value;  	}  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: while (node != null) {  	XmlAttributeCollection atts = node.Attributes;  	if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  		name [0] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  		name [1] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  		name [2] = atts.GetNamedItem ("name").Value;  	}  	else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  		name [3] = atts.GetNamedItem ("name").Value;  	}  	node = node.NextSibling;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  	name [0] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  	name [1] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna1")) {  	name [0] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  	name [1] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  	name [1] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna2")) {  	name [1] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna3")) {  	name [2] = atts.GetNamedItem ("name").Value;  }  else if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: name [2] = atts.GetNamedItem ("name").Value;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: if (atts.GetNamedItem ("id").Value.Equals ("Antenna4")) {  	name [3] = atts.GetNamedItem ("name").Value;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,getCapturePointName,The following statement contains a magic number: name [3] = atts.GetNamedItem ("name").Value;  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&session_id={2}"' httpUri.AbsoluteUri' cmd' SessionId));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return null;  	XmlDataDocument doc = new XmlDataDocument ();  	doc.LoadXml (resp);  	XmlElement element = doc.DocumentElement;  	if (element.Name == "CSL") {  		XmlNode node = doc.SelectSingleNode ("CSL/Command");  		if (node != null) {  			if (node.InnerXml.Equals ("listUsers"' StringComparison.OrdinalIgnoreCase)) {  				node = doc.SelectSingleNode ("CSL/Account");  				if (node != null) {  					while (node != null) {  						USER_INFO info = new USER_INFO ();  						XmlAttributeCollection atts = node.Attributes;  						info.username = atts.GetNamedItem ("username").Value;  						//info.password = atts.GetNamedItem("password").Value;  						info.desc = atts.GetNamedItem ("desc").Value;  						info.level = int.Parse (atts.GetNamedItem ("level").Value);  						list.Add (info);  						node = node.NextSibling;  					}  					ErrorCode = ERR_CODE_NO_ERROR;  					ErrorMsg = "";  					return list;  				}  				node = doc.SelectSingleNode ("CSL/Error");  				if (node != null) {  					//<Error>  					foreach (XmlAttribute att in node.Attributes) {  						if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  							ErrorMsg = att.InnerXml.Substring (6).Trim ();  						}  						else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  							Int32.TryParse (att.InnerXml' out ErrorCode);  						}  					}  					return null;  				}  			}  		}  	}  }  catch (WebException wex) {  	ErrorMsg = wex.Message;  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: if (element.Name == "CSL") {  	XmlNode node = doc.SelectSingleNode ("CSL/Command");  	if (node != null) {  		if (node.InnerXml.Equals ("listUsers"' StringComparison.OrdinalIgnoreCase)) {  			node = doc.SelectSingleNode ("CSL/Account");  			if (node != null) {  				while (node != null) {  					USER_INFO info = new USER_INFO ();  					XmlAttributeCollection atts = node.Attributes;  					info.username = atts.GetNamedItem ("username").Value;  					//info.password = atts.GetNamedItem("password").Value;  					info.desc = atts.GetNamedItem ("desc").Value;  					info.level = int.Parse (atts.GetNamedItem ("level").Value);  					list.Add (info);  					node = node.NextSibling;  				}  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return list;  			}  			node = doc.SelectSingleNode ("CSL/Error");  			if (node != null) {  				//<Error>  				foreach (XmlAttribute att in node.Attributes) {  					if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  						ErrorMsg = att.InnerXml.Substring (6).Trim ();  					}  					else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  						Int32.TryParse (att.InnerXml' out ErrorCode);  					}  				}  				return null;  			}  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.Equals ("listUsers"' StringComparison.OrdinalIgnoreCase)) {  		node = doc.SelectSingleNode ("CSL/Account");  		if (node != null) {  			while (node != null) {  				USER_INFO info = new USER_INFO ();  				XmlAttributeCollection atts = node.Attributes;  				info.username = atts.GetNamedItem ("username").Value;  				//info.password = atts.GetNamedItem("password").Value;  				info.desc = atts.GetNamedItem ("desc").Value;  				info.level = int.Parse (atts.GetNamedItem ("level").Value);  				list.Add (info);  				node = node.NextSibling;  			}  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return list;  		}  		node = doc.SelectSingleNode ("CSL/Error");  		if (node != null) {  			//<Error>  			foreach (XmlAttribute att in node.Attributes) {  				if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  					ErrorMsg = att.InnerXml.Substring (6).Trim ();  				}  				else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  					Int32.TryParse (att.InnerXml' out ErrorCode);  				}  			}  			return null;  		}  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: if (node.InnerXml.Equals ("listUsers"' StringComparison.OrdinalIgnoreCase)) {  	node = doc.SelectSingleNode ("CSL/Account");  	if (node != null) {  		while (node != null) {  			USER_INFO info = new USER_INFO ();  			XmlAttributeCollection atts = node.Attributes;  			info.username = atts.GetNamedItem ("username").Value;  			//info.password = atts.GetNamedItem("password").Value;  			info.desc = atts.GetNamedItem ("desc").Value;  			info.level = int.Parse (atts.GetNamedItem ("level").Value);  			list.Add (info);  			node = node.NextSibling;  		}  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return list;  	}  	node = doc.SelectSingleNode ("CSL/Error");  	if (node != null) {  		//<Error>  		foreach (XmlAttribute att in node.Attributes) {  			if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  				ErrorMsg = att.InnerXml.Substring (6).Trim ();  			}  			else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  				Int32.TryParse (att.InnerXml' out ErrorCode);  			}  		}  		return null;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: if (node != null) {  	//<Error>  	foreach (XmlAttribute att in node.Attributes) {  		if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  			ErrorMsg = att.InnerXml.Substring (6).Trim ();  		}  		else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (att.InnerXml' out ErrorCode);  		}  	}  	return null;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: foreach (XmlAttribute att in node.Attributes) {  	if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  		ErrorMsg = att.InnerXml.Substring (6).Trim ();  	}  	else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (att.InnerXml' out ErrorCode);  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: if (att.Name.Equals ("msg"' StringComparison.OrdinalIgnoreCase)) {  	ErrorMsg = att.InnerXml.Substring (6).Trim ();  }  else if (att.Name.Equals ("code"' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (att.InnerXml' out ErrorCode);  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,listUsers,The following statement contains a magic number: ErrorMsg = att.InnerXml.Substring (6).Trim ();  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return false;  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (resp);  	if (isCSLResponse (ref doc' cmd) == false)  		return false;  	XmlNode node = doc.SelectSingleNode ("CSL/Ack");  	if (node != null) {  		if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  			//ok  			char[] separators = new char[] {  				' ''  				'='  			};  			string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  			if (str [2].Length == 8) {  				SessionId = str [2];  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return true;  			}  			ErrorCode = ERR_CODE_UNKNOWN_ERROR;  			ErrorMsg = "Invalid session id.";  			return false;  		}  	}  	parseErrorCode (ref doc);  	return false;  }  catch (WebException wex) {  	ErrorCode = ERR_CODE_WEB_ERROR;  	ErrorMsg = wex.Message;  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return false;  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (resp);  	if (isCSLResponse (ref doc' cmd) == false)  		return false;  	XmlNode node = doc.SelectSingleNode ("CSL/Ack");  	if (node != null) {  		if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  			//ok  			char[] separators = new char[] {  				' ''  				'='  			};  			string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  			if (str [2].Length == 8) {  				SessionId = str [2];  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return true;  			}  			ErrorCode = ERR_CODE_UNKNOWN_ERROR;  			ErrorMsg = "Invalid session id.";  			return false;  		}  	}  	parseErrorCode (ref doc);  	return false;  }  catch (WebException wex) {  	ErrorCode = ERR_CODE_WEB_ERROR;  	ErrorMsg = wex.Message;  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: try {  	StringBuilder sbReq = new StringBuilder ();  	sbReq.Append (String.Format ("{0}API?command={1}&username={2}&password={3}"' httpUri.AbsoluteUri' cmd' LoginName' LoginPassword));  	string resp = sendHTTPRequest (sbReq.ToString ());  	if (resp == null)  		return false;  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (resp);  	if (isCSLResponse (ref doc' cmd) == false)  		return false;  	XmlNode node = doc.SelectSingleNode ("CSL/Ack");  	if (node != null) {  		if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  			//ok  			char[] separators = new char[] {  				' ''  				'='  			};  			string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  			if (str [2].Length == 8) {  				SessionId = str [2];  				ErrorCode = ERR_CODE_NO_ERROR;  				ErrorMsg = "";  				return true;  			}  			ErrorCode = ERR_CODE_UNKNOWN_ERROR;  			ErrorMsg = "Invalid session id.";  			return false;  		}  	}  	parseErrorCode (ref doc);  	return false;  }  catch (WebException wex) {  	ErrorCode = ERR_CODE_WEB_ERROR;  	ErrorMsg = wex.Message;  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  		//ok  		char[] separators = new char[] {  			' ''  			'='  		};  		string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  		if (str [2].Length == 8) {  			SessionId = str [2];  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return true;  		}  		ErrorCode = ERR_CODE_UNKNOWN_ERROR;  		ErrorMsg = "Invalid session id.";  		return false;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  		//ok  		char[] separators = new char[] {  			' ''  			'='  		};  		string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  		if (str [2].Length == 8) {  			SessionId = str [2];  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return true;  		}  		ErrorCode = ERR_CODE_UNKNOWN_ERROR;  		ErrorMsg = "Invalid session id.";  		return false;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node != null) {  	if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  		//ok  		char[] separators = new char[] {  			' ''  			'='  		};  		string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  		if (str [2].Length == 8) {  			SessionId = str [2];  			ErrorCode = ERR_CODE_NO_ERROR;  			ErrorMsg = "";  			return true;  		}  		ErrorCode = ERR_CODE_UNKNOWN_ERROR;  		ErrorMsg = "Invalid session id.";  		return false;  	}  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  	//ok  	char[] separators = new char[] {  		' ''  		'='  	};  	string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  	if (str [2].Length == 8) {  		SessionId = str [2];  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return true;  	}  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = "Invalid session id.";  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  	//ok  	char[] separators = new char[] {  		' ''  		'='  	};  	string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  	if (str [2].Length == 8) {  		SessionId = str [2];  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return true;  	}  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = "Invalid session id.";  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (node.InnerXml.StartsWith ("OK:"' StringComparison.OrdinalIgnoreCase)) {  	//ok  	char[] separators = new char[] {  		' ''  		'='  	};  	string[] str = node.InnerXml.Split (separators' StringSplitOptions.RemoveEmptyEntries);  	if (str [2].Length == 8) {  		SessionId = str [2];  		ErrorCode = ERR_CODE_NO_ERROR;  		ErrorMsg = "";  		return true;  	}  	ErrorCode = ERR_CODE_UNKNOWN_ERROR;  	ErrorMsg = "Invalid session id.";  	return false;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (str [2].Length == 8) {  	SessionId = str [2];  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return true;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (str [2].Length == 8) {  	SessionId = str [2];  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return true;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: if (str [2].Length == 8) {  	SessionId = str [2];  	ErrorCode = ERR_CODE_NO_ERROR;  	ErrorMsg = "";  	return true;  }  
Magic Number,CSL,CS461_HL_API,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,login,The following statement contains a magic number: SessionId = str [2];  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,StartListening,The following statement contains a magic number: try {  	listener.Bind (new IPEndPoint (IPAddress.Any' port));  	listener.Listen (100);  	listenerSocket = listener;  	while (Listening == true) {  		// Set the event to nonsignaled state.  		allDone.Reset ();  		// Start an asynchronous socket to listen for connections.  		saveToLogInfo ("Wait for client...");  		listener.BeginAccept (new AsyncCallback (AcceptCallback)' listener);  		// Wait until a connection is made before continuing.  		allDone.WaitOne ();  	}  }  catch {  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,StartListening,The following statement contains a magic number: listener.Listen (100);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=evtNtf")) {  	//cmd=evtNtf&batchEnd=yes  	if (str.Contains ("batchEnd=yes")) {  		saveToLogVerbose ("BatchEnd Found");  		OnTagListEvent (new TagListEventArgs (state.list));  		state.list.Clear ();  		OnBatchEnd (new BatchEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=evtNtf&evt_id=TagfoundAction&msg=invenDisabled&trig=irNotfound&time=1175329956  	if (str.Contains ("msg=")) {  		INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  		string[] Invkeys = str.Split ('&');  		foreach (string s in Invkeys) {  			if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  				info.id = s.Substring (7);  			}  			else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  				info.msg = s.Substring (4);  			}  			else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  				info.trigger = s.Substring (5);  			}  			else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  				info.time = s.Substring (5);  			}  		}  		saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  		OnInventory (new InventoryEventArgs (info));  		return;  	}  	//cmd=evtNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=B1&tag_id=100000000000000000000004&rssi=-48&time=1173077508  	TAG intag = new TAG ();  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.EventId = s.Substring (7);  		}  		else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  			intag.ServerIp = s.Substring (7);  		}  		else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  			intag.Antenna = s.Substring (4);  		}  		else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.CapturePointId = s.Substring (6);  		}  		else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5) {  				intag.Index = s.Substring (5);  				intag.session = s.Substring (4' 1);  			}  		}  		else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  			intag.TagOrigId = s.Substring (7);  		}  		else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  			double.TryParse (s.Substring (5)' out intag.RSSI);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (5)' out intag.Time);  		}  		else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  			Int32.TryParse (s.Substring (4)' out intag.count);  		}  		else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank0 = s.Substring (6);  		}  		else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank2 = s.Substring (6);  		}  		else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  			intag.Bank3 = s.Substring (6);  		}  	}  	intag.ApiTimeStampUTC = DateTime.UtcNow;  	OnTagReceiveEvent (new TagReceiveEventArgs (intag));  	state.list.Add (intag);  }  else if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.Contains ("msg=")) {  	INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  	string[] Invkeys = str.Split ('&');  	foreach (string s in Invkeys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			info.id = s.Substring (7);  		}  		else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  			info.msg = s.Substring (4);  		}  		else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  			info.trigger = s.Substring (5);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			info.time = s.Substring (5);  		}  	}  	saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  	OnInventory (new InventoryEventArgs (info));  	return;  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.Contains ("msg=")) {  	INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  	string[] Invkeys = str.Split ('&');  	foreach (string s in Invkeys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			info.id = s.Substring (7);  		}  		else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  			info.msg = s.Substring (4);  		}  		else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  			info.trigger = s.Substring (5);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			info.time = s.Substring (5);  		}  	}  	saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  	OnInventory (new InventoryEventArgs (info));  	return;  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.Contains ("msg=")) {  	INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  	string[] Invkeys = str.Split ('&');  	foreach (string s in Invkeys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			info.id = s.Substring (7);  		}  		else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  			info.msg = s.Substring (4);  		}  		else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  			info.trigger = s.Substring (5);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			info.time = s.Substring (5);  		}  	}  	saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  	OnInventory (new InventoryEventArgs (info));  	return;  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.Contains ("msg=")) {  	INVENTORY_NTF_INFO info = new INVENTORY_NTF_INFO ();  	string[] Invkeys = str.Split ('&');  	foreach (string s in Invkeys) {  		if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  			info.id = s.Substring (7);  		}  		else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  			info.msg = s.Substring (4);  		}  		else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  			info.trigger = s.Substring (5);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			info.time = s.Substring (5);  		}  	}  	saveToLogVerbose (String.Format ("{0} {1} Found"' info.id' info.msg));  	OnInventory (new InventoryEventArgs (info));  	return;  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in Invkeys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		info.id = s.Substring (7);  	}  	else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  		info.msg = s.Substring (4);  	}  	else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  		info.trigger = s.Substring (5);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		info.time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in Invkeys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		info.id = s.Substring (7);  	}  	else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  		info.msg = s.Substring (4);  	}  	else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  		info.trigger = s.Substring (5);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		info.time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in Invkeys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		info.id = s.Substring (7);  	}  	else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  		info.msg = s.Substring (4);  	}  	else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  		info.trigger = s.Substring (5);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		info.time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in Invkeys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		info.id = s.Substring (7);  	}  	else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  		info.msg = s.Substring (4);  	}  	else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  		info.trigger = s.Substring (5);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		info.time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	info.id = s.Substring (7);  }  else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	info.id = s.Substring (7);  }  else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	info.id = s.Substring (7);  }  else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	info.id = s.Substring (7);  }  else if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: info.id = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("msg="' StringComparison.OrdinalIgnoreCase)) {  	info.msg = s.Substring (4);  }  else if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: info.msg = s.Substring (4);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("trig="' StringComparison.OrdinalIgnoreCase)) {  	info.trigger = s.Substring (5);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: info.trigger = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	info.time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: info.time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.EventId = s.Substring (7);  	}  	else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  		intag.ServerIp = s.Substring (7);  	}  	else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  		intag.Antenna = s.Substring (4);  	}  	else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.CapturePointId = s.Substring (6);  	}  	else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5) {  			intag.Index = s.Substring (5);  			intag.session = s.Substring (4' 1);  		}  	}  	else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  		intag.TagOrigId = s.Substring (7);  	}  	else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  		double.TryParse (s.Substring (5)' out intag.RSSI);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (5)' out intag.Time);  	}  	else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  		Int32.TryParse (s.Substring (4)' out intag.count);  	}  	else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank0 = s.Substring (6);  	}  	else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank2 = s.Substring (6);  	}  	else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  		intag.Bank3 = s.Substring (6);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("evt_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.EventId = s.Substring (7);  }  else if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.EventId = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("src_ip="' StringComparison.OrdinalIgnoreCase)) {  	intag.ServerIp = s.Substring (7);  }  else if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.ServerIp = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("ant="' StringComparison.OrdinalIgnoreCase)) {  	intag.Antenna = s.Substring (4);  }  else if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.Antenna = s.Substring (4);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cp_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.CapturePointId = s.Substring (6);  }  else if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.CapturePointId = s.Substring (6);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("idx="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5) {  		intag.Index = s.Substring (5);  		intag.session = s.Substring (4' 1);  	}  }  else if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5) {  	intag.Index = s.Substring (5);  	intag.session = s.Substring (4' 1);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5) {  	intag.Index = s.Substring (5);  	intag.session = s.Substring (4' 1);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5) {  	intag.Index = s.Substring (5);  	intag.session = s.Substring (4' 1);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.Index = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.session = s.Substring (4' 1);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("tag_id="' StringComparison.OrdinalIgnoreCase)) {  	intag.TagOrigId = s.Substring (7);  }  else if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.TagOrigId = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("rssi="' StringComparison.OrdinalIgnoreCase)) {  	double.TryParse (s.Substring (5)' out intag.RSSI);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: double.TryParse (s.Substring (5)' out intag.RSSI);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (5)' out intag.Time);  }  else if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: Int32.TryParse (s.Substring (5)' out intag.Time);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("cnt="' StringComparison.OrdinalIgnoreCase)) {  	Int32.TryParse (s.Substring (4)' out intag.count);  }  else if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: Int32.TryParse (s.Substring (4)' out intag.count);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank0="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank0 = s.Substring (6);  }  else if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.Bank0 = s.Substring (6);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank2="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank2 = s.Substring (6);  }  else if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.Bank2 = s.Substring (6);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("bank3="' StringComparison.OrdinalIgnoreCase)) {  	intag.Bank3 = s.Substring (6);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: intag.Bank3 = s.Substring (6);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=blog")) {  	//cmd=blogNtf&dataEnd=yes  	if (str.Contains ("dataEnd=yes")) {  		saveToLogVerbose ("DataEnd Found");  		OnDataEnd (new DataEndEventArgs (DateTime.Now.ToString ()));  		return;  	}  	//cmd=blogNtf&evt_id=DemoEvent&src_ip=192.168.25.249&ant=Antenna1&cp_id=Capture Point 1&idx=C31&tag_id=000000000000000000000006&rssi=-49&time=1173076720  }  else if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=errNtf")) {  	//cmd=errNtf&status=buffer overflow&time=1173076720  	string status = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 7)  				status = s.Substring (7);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	if (status.Equals ("buffer overflow"' StringComparison.OrdinalIgnoreCase)) {  		saveToLogVerbose ("BufferOverflow Found");  		OnBufferOverflowEvent (new BufferOverflowEventArgs (time));  		return;  	}  }  else if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 7)  			status = s.Substring (7);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 7)  			status = s.Substring (7);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 7)  			status = s.Substring (7);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 7)  			status = s.Substring (7);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 7)  		status = s.Substring (7);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 7)  		status = s.Substring (7);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 7)  		status = s.Substring (7);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("status="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 7)  		status = s.Substring (7);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 7)  	status = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 7)  	status = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: status = s.Substring (7);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5)  	time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5)  	time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (str.StartsWith ("cmd=antNtf")) {  	//cmd=antNtf&mismatch=1234&time=1173076720  	string port = null;  	string time = null;  	string[] keys = str.Split ('&');  	foreach (string s in keys) {  		if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 9)  				port = s.Substring (9);  		}  		else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  			if (s.Length > 5)  				time = s.Substring (5);  		}  	}  	saveToLogVerbose ("AntennaNtf Found");  	OnAntennaEvent (new AntennaEventArgs (port' time));  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 9)  			port = s.Substring (9);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 9)  			port = s.Substring (9);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 9)  			port = s.Substring (9);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: foreach (string s in keys) {  	if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 9)  			port = s.Substring (9);  	}  	else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  		if (s.Length > 5)  			time = s.Substring (5);  	}  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 9)  		port = s.Substring (9);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 9)  		port = s.Substring (9);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 9)  		port = s.Substring (9);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("mismatch="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 9)  		port = s.Substring (9);  }  else if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 9)  	port = s.Substring (9);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 9)  	port = s.Substring (9);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: port = s.Substring (9);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.StartsWith ("time="' StringComparison.OrdinalIgnoreCase)) {  	if (s.Length > 5)  		time = s.Substring (5);  }  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5)  	time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: if (s.Length > 5)  	time = s.Substring (5);  
Magic Number,CSL,TrustedServer,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,parseRecords,The following statement contains a magic number: time = s.Substring (5);  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,BCD_Inc,The following statement contains a magic number: for (i = 0; (i < 24) && inc; i++) {  	if (BCD [i] != 9) {  		BCD [i]++;  		inc = false;  	}  	else {  		BCD [i] = 0;  	}  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,BCD_Inc,The following statement contains a magic number: for (i = 0; (i < 24) && inc; i++) {  	if (BCD [i] != 9) {  		BCD [i]++;  		inc = false;  	}  	else {  		BCD [i] = 0;  	}  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,BCD_Inc,The following statement contains a magic number: if (BCD [i] != 9) {  	BCD [i]++;  	inc = false;  }  else {  	BCD [i] = 0;  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	BCD [i] = (byte)(l & 0x0f);  	l >>= 4;  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	BCD [i] = (byte)(l & 0x0f);  	l >>= 4;  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: l >>= 4;  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: for (; i < 24; i++) {  	BCD [i] = (byte)(u & 0x0f);  	u >>= 4;  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: for (; i < 24; i++) {  	BCD [i] = (byte)(u & 0x0f);  	u >>= 4;  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToByteArray,The following statement contains a magic number: u >>= 4;  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: upper = b [23];  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: for (i = 22; i > 15; i--) {  	upper <<= 4;  	upper += b [i];  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: for (i = 22; i > 15; i--) {  	upper <<= 4;  	upper += b [i];  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: for (i = 22; i > 15; i--) {  	upper <<= 4;  	upper += b [i];  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: i = 22
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: upper <<= 4;  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: for (; i >= 0; i--) {  	lower <<= 4;  	lower += b [i];  }  
Magic Number,CSL,EPC,C:\repos\riickky45_AControl\Access Control\CS461_HL_API.cs,ToHexString,The following statement contains a magic number: lower <<= 4;  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,frmAccessLog,The following statement contains a magic number: txtTitle.Text = info [2];  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,frmAccessLog,The following statement contains a magic number: txtCompany.Text = info [3];  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (filename);  	sr.ReadLine ();  	//bypass 1st line. It defines field name.  	while (sr.EndOfStream == false) {  		String str = sr.ReadLine ();  		string[] fields = str.Split (''');  		if (id.Equals (fields [0])) {  			DataRow row = dt.NewRow ();  			if (fields.Length > 1)  				row [0] = fields [1];  			if (fields.Length > 2)  				row [1] = fields [2];  			dt.Rows.Add (row);  		}  	}  	dgvTable.DataSource = dt;  	dgvTable.Columns [0].Width = 100;  	dgvTable.Columns [1].Width = 500;  }  catch {  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (filename);  	sr.ReadLine ();  	//bypass 1st line. It defines field name.  	while (sr.EndOfStream == false) {  		String str = sr.ReadLine ();  		string[] fields = str.Split (''');  		if (id.Equals (fields [0])) {  			DataRow row = dt.NewRow ();  			if (fields.Length > 1)  				row [0] = fields [1];  			if (fields.Length > 2)  				row [1] = fields [2];  			dt.Rows.Add (row);  		}  	}  	dgvTable.DataSource = dt;  	dgvTable.Columns [0].Width = 100;  	dgvTable.Columns [1].Width = 500;  }  catch {  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (filename);  	sr.ReadLine ();  	//bypass 1st line. It defines field name.  	while (sr.EndOfStream == false) {  		String str = sr.ReadLine ();  		string[] fields = str.Split (''');  		if (id.Equals (fields [0])) {  			DataRow row = dt.NewRow ();  			if (fields.Length > 1)  				row [0] = fields [1];  			if (fields.Length > 2)  				row [1] = fields [2];  			dt.Rows.Add (row);  		}  	}  	dgvTable.DataSource = dt;  	dgvTable.Columns [0].Width = 100;  	dgvTable.Columns [1].Width = 500;  }  catch {  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (filename);  	sr.ReadLine ();  	//bypass 1st line. It defines field name.  	while (sr.EndOfStream == false) {  		String str = sr.ReadLine ();  		string[] fields = str.Split (''');  		if (id.Equals (fields [0])) {  			DataRow row = dt.NewRow ();  			if (fields.Length > 1)  				row [0] = fields [1];  			if (fields.Length > 2)  				row [1] = fields [2];  			dt.Rows.Add (row);  		}  	}  	dgvTable.DataSource = dt;  	dgvTable.Columns [0].Width = 100;  	dgvTable.Columns [1].Width = 500;  }  catch {  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: while (sr.EndOfStream == false) {  	String str = sr.ReadLine ();  	string[] fields = str.Split (''');  	if (id.Equals (fields [0])) {  		DataRow row = dt.NewRow ();  		if (fields.Length > 1)  			row [0] = fields [1];  		if (fields.Length > 2)  			row [1] = fields [2];  		dt.Rows.Add (row);  	}  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: while (sr.EndOfStream == false) {  	String str = sr.ReadLine ();  	string[] fields = str.Split (''');  	if (id.Equals (fields [0])) {  		DataRow row = dt.NewRow ();  		if (fields.Length > 1)  			row [0] = fields [1];  		if (fields.Length > 2)  			row [1] = fields [2];  		dt.Rows.Add (row);  	}  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: if (id.Equals (fields [0])) {  	DataRow row = dt.NewRow ();  	if (fields.Length > 1)  		row [0] = fields [1];  	if (fields.Length > 2)  		row [1] = fields [2];  	dt.Rows.Add (row);  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: if (id.Equals (fields [0])) {  	DataRow row = dt.NewRow ();  	if (fields.Length > 1)  		row [0] = fields [1];  	if (fields.Length > 2)  		row [1] = fields [2];  	dt.Rows.Add (row);  }  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: if (fields.Length > 2)  	row [1] = fields [2];  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: if (fields.Length > 2)  	row [1] = fields [2];  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: row [1] = fields [2];  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: dgvTable.Columns [0].Width = 100;  
Magic Number,CS461_Access_Control,frmAccessLog,C:\repos\riickky45_AControl\Access Control\frmAccessLog.cs,buildTable,The following statement contains a magic number: dgvTable.Columns [1].Width = 500;  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (InvokeRequired) {  	update_UserInfo_Delegate task = new update_UserInfo_Delegate (update_UserInfo);  	BeginInvoke (task' new object[] {  		id  	});  }  else {  	lock (guiLock) {  		if (txtID.Text.Equals (id) == false) {  			reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  			string mediaFile = null;  			DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  			if (rows.Length > 0) {  				btnAccessLog.Enabled = true;  				string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				txtTime.Text = time;  				txtID.Text = rows [0].ItemArray [0].ToString ();  				txtName.Text = rows [0].ItemArray [1].ToString ();  				txtTitle.Text = rows [0].ItemArray [2].ToString ();  				txtCompany.Text = rows [0].ItemArray [3].ToString ();  				txtLocation.Text = rows [0].ItemArray [4].ToString ();  				mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  				try {  					picPhoto.ImageLocation = mediaFile;  					picPhoto.Load ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  				}  				mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  				try {  					player.SoundLocation = mediaFile;  					player.Load ();  					Application.DoEvents ();  					player.Play ();  					Application.DoEvents ();  				}  				catch {  					tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  				saveAccessTime (id' time' txtLocation.Text);  			}  			else {  				btnAccessLog.Enabled = false;  				txtID.Text = id;  				txtCompany.Text = "";  				txtName.Text = "";  				txtTitle.Text = "";  				txtLocation.Text = "";  				txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  				picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  				player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  				try {  					player.Play ();  					Application.DoEvents ();  				}  				catch {  				}  				tmrTimeout.Enabled = false;  				tmrTimeout.Enabled = true;  			}  		}  		else {  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: lock (guiLock) {  	if (txtID.Text.Equals (id) == false) {  		reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  		string mediaFile = null;  		DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  		if (rows.Length > 0) {  			btnAccessLog.Enabled = true;  			string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			txtTime.Text = time;  			txtID.Text = rows [0].ItemArray [0].ToString ();  			txtName.Text = rows [0].ItemArray [1].ToString ();  			txtTitle.Text = rows [0].ItemArray [2].ToString ();  			txtCompany.Text = rows [0].ItemArray [3].ToString ();  			txtLocation.Text = rows [0].ItemArray [4].ToString ();  			mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  			try {  				picPhoto.ImageLocation = mediaFile;  				picPhoto.Load ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  			}  			mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  			try {  				player.SoundLocation = mediaFile;  				player.Load ();  				Application.DoEvents ();  				player.Play ();  				Application.DoEvents ();  			}  			catch {  				tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  			saveAccessTime (id' time' txtLocation.Text);  		}  		else {  			btnAccessLog.Enabled = false;  			txtID.Text = id;  			txtCompany.Text = "";  			txtName.Text = "";  			txtTitle.Text = "";  			txtLocation.Text = "";  			txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  			picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  			player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  			try {  				player.Play ();  				Application.DoEvents ();  			}  			catch {  			}  			tmrTimeout.Enabled = false;  			tmrTimeout.Enabled = true;  		}  	}  	else {  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (txtID.Text.Equals (id) == false) {  	reader.saveToLogInfo (String.Format ("{0}' {1}"' txtID.Text' id));  	string mediaFile = null;  	DataRow[] rows = UserInfoTable.Select (String.Format ("ID = '{0}'"' id));  	if (rows.Length > 0) {  		btnAccessLog.Enabled = true;  		string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		txtTime.Text = time;  		txtID.Text = rows [0].ItemArray [0].ToString ();  		txtName.Text = rows [0].ItemArray [1].ToString ();  		txtTitle.Text = rows [0].ItemArray [2].ToString ();  		txtCompany.Text = rows [0].ItemArray [3].ToString ();  		txtLocation.Text = rows [0].ItemArray [4].ToString ();  		mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  		try {  			picPhoto.ImageLocation = mediaFile;  			picPhoto.Load ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  		}  		mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  		try {  			player.SoundLocation = mediaFile;  			player.Load ();  			Application.DoEvents ();  			player.Play ();  			Application.DoEvents ();  		}  		catch {  			tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  		saveAccessTime (id' time' txtLocation.Text);  	}  	else {  		btnAccessLog.Enabled = false;  		txtID.Text = id;  		txtCompany.Text = "";  		txtName.Text = "";  		txtTitle.Text = "";  		txtLocation.Text = "";  		txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  		picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  		player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  		try {  			player.Play ();  			Application.DoEvents ();  		}  		catch {  		}  		tmrTimeout.Enabled = false;  		tmrTimeout.Enabled = true;  	}  }  else {  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: if (rows.Length > 0) {  	btnAccessLog.Enabled = true;  	string time = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	txtTime.Text = time;  	txtID.Text = rows [0].ItemArray [0].ToString ();  	txtName.Text = rows [0].ItemArray [1].ToString ();  	txtTitle.Text = rows [0].ItemArray [2].ToString ();  	txtCompany.Text = rows [0].ItemArray [3].ToString ();  	txtLocation.Text = rows [0].ItemArray [4].ToString ();  	mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  	try {  		picPhoto.ImageLocation = mediaFile;  		picPhoto.Load ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  	}  	mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  	try {  		player.SoundLocation = mediaFile;  		player.Load ();  		Application.DoEvents ();  		player.Play ();  		Application.DoEvents ();  	}  	catch {  		tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  	saveAccessTime (id' time' txtLocation.Text);  }  else {  	btnAccessLog.Enabled = false;  	txtID.Text = id;  	txtCompany.Text = "";  	txtName.Text = "";  	txtTitle.Text = "";  	txtLocation.Text = "";  	txtTime.Text = String.Format ("{0} {1}"' DateTime.Now.ToShortDateString ()' DateTime.Now.ToShortTimeString ());  	picPhoto.ImageLocation = System.Environment.CurrentDirectory + "\\Photo\\noAccess.jpg";  	player.SoundLocation = System.Environment.CurrentDirectory + "\\Audio\\noAccess.wav";  	try {  		player.Play ();  		Application.DoEvents ();  	}  	catch {  	}  	tmrTimeout.Enabled = false;  	tmrTimeout.Enabled = true;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: txtTitle.Text = rows [0].ItemArray [2].ToString ();  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: txtCompany.Text = rows [0].ItemArray [3].ToString ();  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: txtLocation.Text = rows [0].ItemArray [4].ToString ();  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: mediaFile = System.Environment.CurrentDirectory + "\\Photo\\" + rows [0].ItemArray [5].ToString ();  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: try {  	picPhoto.ImageLocation = mediaFile;  	picPhoto.Load ();  }  catch {  	tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: tsslStatus.Text = String.Format ("Cannot load picture {0}"' rows [0].ItemArray [5].ToString ());  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: mediaFile = System.Environment.CurrentDirectory + "\\Audio\\" + rows [0].ItemArray [6].ToString ();  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: try {  	player.SoundLocation = mediaFile;  	player.Load ();  	Application.DoEvents ();  	player.Play ();  	Application.DoEvents ();  }  catch {  	tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,update_UserInfo,The following statement contains a magic number: tsslStatus.Text = String.Format ("Cannot play file {0}"' rows [0].ItemArray [6].ToString ());  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserSettings,The following statement contains a magic number: lock (this) {  	reader.login_name = settings.Text ("CS461/Reader/Login/Name"' "root");  	reader.login_password = settings.Text ("CS461/Reader/Login/Password"' "csl2006");  	reader.http_timeout = settings.Int16 ("CS461/SocketTimeout/Http"' 30000);  	reader.api_log_level = reader.LogLevel (settings.Text ("CS461/Application/LogLevel"' "Info"));  	reader.setURI (settings.Text ("CS461/Reader/URI"' "http://192.168.25.208/"));  	server.api_log_level = reader.LogLevel (settings.Text ("CS461/Application/LogLevel"' "Info"));  	try {  		server.tcp_port = int.Parse (settings.Text ("CS461/Application/ServerPort"' "9090"));  	}  	catch {  		server.tcp_port = 9090;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserSettings,The following statement contains a magic number: lock (this) {  	reader.login_name = settings.Text ("CS461/Reader/Login/Name"' "root");  	reader.login_password = settings.Text ("CS461/Reader/Login/Password"' "csl2006");  	reader.http_timeout = settings.Int16 ("CS461/SocketTimeout/Http"' 30000);  	reader.api_log_level = reader.LogLevel (settings.Text ("CS461/Application/LogLevel"' "Info"));  	reader.setURI (settings.Text ("CS461/Reader/URI"' "http://192.168.25.208/"));  	server.api_log_level = reader.LogLevel (settings.Text ("CS461/Application/LogLevel"' "Info"));  	try {  		server.tcp_port = int.Parse (settings.Text ("CS461/Application/ServerPort"' "9090"));  	}  	catch {  		server.tcp_port = 9090;  	}  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserSettings,The following statement contains a magic number: reader.http_timeout = settings.Int16 ("CS461/SocketTimeout/Http"' 30000);  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserSettings,The following statement contains a magic number: try {  	server.tcp_port = int.Parse (settings.Text ("CS461/Application/ServerPort"' "9090"));  }  catch {  	server.tcp_port = 9090;  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserSettings,The following statement contains a magic number: server.tcp_port = 9090;  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (System.Environment.CurrentDirectory + "\\db.csv");  	sr.ReadLine ();  	while (sr.EndOfStream == false) {  		line = sr.ReadLine ();  		fields = line.Split (''');  		object[] o = new object[7];  		for (int i = 0; i < 7; i++) {  			o [i] = fields [i].Trim ();  		}  		UserInfoTable.LoadDataRow (o' LoadOption.OverwriteChanges);  	}  }  catch {  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The following statement contains a magic number: try {  	StreamReader sr = new StreamReader (System.Environment.CurrentDirectory + "\\db.csv");  	sr.ReadLine ();  	while (sr.EndOfStream == false) {  		line = sr.ReadLine ();  		fields = line.Split (''');  		object[] o = new object[7];  		for (int i = 0; i < 7; i++) {  			o [i] = fields [i].Trim ();  		}  		UserInfoTable.LoadDataRow (o' LoadOption.OverwriteChanges);  	}  }  catch {  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The following statement contains a magic number: while (sr.EndOfStream == false) {  	line = sr.ReadLine ();  	fields = line.Split (''');  	object[] o = new object[7];  	for (int i = 0; i < 7; i++) {  		o [i] = fields [i].Trim ();  	}  	UserInfoTable.LoadDataRow (o' LoadOption.OverwriteChanges);  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The following statement contains a magic number: while (sr.EndOfStream == false) {  	line = sr.ReadLine ();  	fields = line.Split (''');  	object[] o = new object[7];  	for (int i = 0; i < 7; i++) {  		o [i] = fields [i].Trim ();  	}  	UserInfoTable.LoadDataRow (o' LoadOption.OverwriteChanges);  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,loadUserInfo,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	o [i] = fields [i].Trim ();  }  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,setupReader,The following statement contains a magic number: profile.population = settings.Int16 ("CS461/Reader/PopulationEstimation"' 10);  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,setupReader,The following statement contains a magic number: profile.window_time = settings.Int16 ("CS461/Reader/DuplicationElimination/Time"' 1000);  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,btnAccessLog_Click,The following statement contains a magic number: info [2] = txtTitle.Text;  
Magic Number,CS461_Access_Control,frmMain,C:\repos\riickky45_AControl\Access Control\frmForm1.cs,btnAccessLog_Click,The following statement contains a magic number: info [3] = txtCompany.Text;  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: for (double d = 15.00; d <= 30.00; d += 0.25) {  	cbAnt1Pwr.Items.Add (d.ToString ("N2"));  	cbAnt2Pwr.Items.Add (d.ToString ("N2"));  	cbAnt3Pwr.Items.Add (d.ToString ("N2"));  	cbAnt4Pwr.Items.Add (d.ToString ("N2"));  }  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: for (double d = 15.00; d <= 30.00; d += 0.25) {  	cbAnt1Pwr.Items.Add (d.ToString ("N2"));  	cbAnt2Pwr.Items.Add (d.ToString ("N2"));  	cbAnt3Pwr.Items.Add (d.ToString ("N2"));  	cbAnt4Pwr.Items.Add (d.ToString ("N2"));  }  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: for (double d = 15.00; d <= 30.00; d += 0.25) {  	cbAnt1Pwr.Items.Add (d.ToString ("N2"));  	cbAnt2Pwr.Items.Add (d.ToString ("N2"));  	cbAnt3Pwr.Items.Add (d.ToString ("N2"));  	cbAnt4Pwr.Items.Add (d.ToString ("N2"));  }  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: d += 0.25
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: for (int i = -70; i <= -30.00; i++) {  	cbAnt1RSSI.Items.Add (i.ToString ());  	cbAnt2RSSI.Items.Add (i.ToString ());  	cbAnt3RSSI.Items.Add (i.ToString ());  	cbAnt4RSSI.Items.Add (i.ToString ());  }  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings,The following statement contains a magic number: for (int i = -70; i <= -30.00; i++) {  	cbAnt1RSSI.Items.Add (i.ToString ());  	cbAnt2RSSI.Items.Add (i.ToString ());  	cbAnt3RSSI.Items.Add (i.ToString ());  	cbAnt4RSSI.Items.Add (i.ToString ());  }  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: numPopulation.Value = (decimal)s.Int16 ("CS461/Reader/PopulationEstimation"' 32);  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: numDuplicateElimination.Value = (decimal)s.Int16 ("CS461/Reader/DuplicationElimination/Time"' 1000);  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: numListeningPort.Value = (decimal)s.Int16 ("CS461/Application/ServerPort"' 9090);  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: numHttp.Value = (decimal)s.Int16 ("CS461/SocketTimeout/Http"' 30000);  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,frmSettings_Load,The following statement contains a magic number: numTcp.Value = (decimal)s.Int16 ("CS461/SocketTimeout/Tcp"' 30000);  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,defaultSettings,The following statement contains a magic number: numPopulation.Value = 32;  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,defaultSettings,The following statement contains a magic number: numDuplicateElimination.Value = 1000;  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,defaultSettings,The following statement contains a magic number: numListeningPort.Value = 9090;  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,defaultSettings,The following statement contains a magic number: numHttp.Value = 30000;  
Magic Number,CS461_Access_Control,frmSettings,C:\repos\riickky45_AControl\Access Control\frmSettings.cs,defaultSettings,The following statement contains a magic number: numTcp.Value = 30000;  
