Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Parameter List,Metrics.StupidBenchmarks,FixedTimeBenchmark,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\FixedTimeBenchmark.cs,Run,The method has 5 parameters. Parameters: create' action' maxThreads' seconds' decrement
Long Statement,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The length of the statement  "            Console.WriteLine("{0} | Duration {1} seconds  | Start Threads {2} | Step {3}"' target' targetOptions.Seconds' targetOptions.MaxThreads' targetOptions.Decrement); " is 162.
Magic Number,Metrics.StupidBenchmarks,FixedIterationsBenchmark,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\FixedIterationsBenchmark.cs,MeasureDuration,The following statement contains a magic number: threads.Add(new Thread(s =>                      {                          // warm - up                          for (int x = 0; x < 100; x++) { action(); }                            tcs.Task.Wait();                          for (long j = 0; j < iterations; j++)                          {                              action();                          }                      }));
Magic Number,Metrics.StupidBenchmarks,FixedTimeBenchmark,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\FixedTimeBenchmark.cs,MeasureCallsPerSecond,The following statement contains a magic number: threads.Add(new Thread(s =>                  {                      // warm - up                      for (int j = 0; j < 100; j++) { action(); }                        tcs.Task.Wait();                      long count = 0;                        var done = new CancellationTokenSource(duration);                        while (!done.IsCancellationRequested)                      {                          action();                          count++;                      }                      Interlocked.Add(ref total' count);                  }));
Magic Number,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following statement contains a magic number: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
Magic Number,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following statement contains a magic number: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
Magic Number,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following statement contains a magic number: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
Magic Number,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following statement contains a magic number: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
Magic Number,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following statement contains a magic number: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
Missing Default,Metrics.StupidBenchmarks,Program,D:\research\architectureSmells\repos\etishor_Metrics.NET\Samples\Metrics.StupidBenchmarks\Program.cs,Main,The following switch statement is missing a default case: switch (target)              {                  case "counter":                      Run(() => new CounterMetric()' c => c.Increment());                      break;                  case "meter":                      Run(() => new MeterMetric()' m => m.Mark());                      break;                  case "histogram":                      Run(() => new HistogramMetric()' h => h.Update(37));                      break;                  case "timer":                      Run(() => new TimerMetric(SamplingType.FavourRecent)' t => t.Record(10' TimeUnit.Milliseconds));                      break;                  case "ewma":                      Run(() => EWMA.OneMinuteEWMA()' m => m.Update(1));                      break;                  case "edr":                      Run(() => new ExponentiallyDecayingReservoir()' r => r.Update(100));                      break;                  case "uniform":                      Run(() => new UniformReservoir()' r => r.Update(100));                      break;                  case "sliding":                      Run(() => new SlidingWindowReservoir()' r => r.Update(100));                      break;              }
