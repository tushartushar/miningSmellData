Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Metrics.Json,JsonMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonMetricsContext.cs,ToJsonProperties,Cyclomatic complexity of the method is 11
Long Parameter List,Metrics,AdvancedMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Meter,The method has 5 parameters. Parameters: name' unit' builder' rateUnit' tags
Long Parameter List,Metrics,AdvancedMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics,AdvancedMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics,AdvancedMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics,ElasticSearchConfigExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchConfigExtensions.cs,WithElasticSearch,The method has 5 parameters. Parameters: reports' host' port' index' interval
Long Parameter List,Metrics,GraphiteExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteExtensions.cs,WithPickledGraphite,The method has 5 parameters. Parameters: reports' host' port' interval' batchSize
Long Parameter List,Metrics,InfluxdbConfigExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbConfigExtensions.cs,WithInfluxDb,The method has 7 parameters. Parameters: reports' host' port' user' pass' database' interval
Long Parameter List,Metrics,MetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsContext.cs,PerformanceCounter,The method has 6 parameters. Parameters: name' counterCategory' counterName' counterInstance' unit' tags
Long Parameter List,Metrics,MetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' samplingType' rateUnit' durationUnit' tags
Long Parameter List,Metrics,Metric,C:\repos\etishor_Metrics.NET\Src\Metrics\Metric.cs,PerformanceCounter,The method has 6 parameters. Parameters: name' counterCategory' counterName' counterInstance' unit' tags
Long Parameter List,Metrics,Metric,C:\repos\etishor_Metrics.NET\Src\Metrics\Metric.cs,Timer,The method has 6 parameters. Parameters: name' unit' samplingType' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,PerformanceCounter,The method has 6 parameters. Parameters: name' counterCategory' counterName' counterInstance' unit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Meter,The method has 5 parameters. Parameters: name' unit' builder' rateUnit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' samplingType' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' builder' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildPerformanceCounter,The method has 5 parameters. Parameters: name' unit' counterCategory' counterName' counterInstance
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' samplingType
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' histogram
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' reservoir
Long Parameter List,Metrics.Core,DefaultMetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsRegistry.cs,Meter,The method has 5 parameters. Parameters: name' builder' unit' rateUnit' tags
Long Parameter List,Metrics.Core,DefaultMetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsRegistry.cs,Timer,The method has 6 parameters. Parameters: name' builder' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,DefaultDataProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultDataProvider.cs,DefaultDataProvider,The method has 5 parameters. Parameters: context' timestampProvider' environment' registryDataProvider' childProviders
Long Parameter List,Metrics.Core,DefaultRegistryDataProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\DefaultRegistryDataProvider.cs,DefaultRegistryDataProvider,The method has 5 parameters. Parameters: gauges' counters' meters' histograms' timers
Long Parameter List,Metrics.Core,ReadOnlyMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\ReadOnlyMetricsContext.cs,PerformanceCounter,The method has 6 parameters. Parameters: name' counterCategory' counterName' counterInstance' unit' tags
Long Parameter List,Metrics.Core,ReadOnlyMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\ReadOnlyMetricsContext.cs,Timer,The method has 6 parameters. Parameters: name' unit' samplingType' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,MetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildPerformanceCounter,The method has 5 parameters. Parameters: name' unit' counterCategory' counterName' counterInstance
Long Parameter List,Metrics.Core,MetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' samplingType
Long Parameter List,Metrics.Core,MetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' histogram
Long Parameter List,Metrics.Core,MetricsBuilder,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters. Parameters: name' unit' rateUnit' durationUnit' reservoir
Long Parameter List,Metrics.Core,NullMetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\NullMetricsRegistry.cs,Meter,The method has 5 parameters. Parameters: name' builder' unit' rateUnit' tags
Long Parameter List,Metrics.Core,NullMetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\NullMetricsRegistry.cs,Timer,The method has 6 parameters. Parameters: name' builder' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Core,MetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsRegistry.cs,Meter,The method has 5 parameters. Parameters: name' builder' unit' rateUnit' tags
Long Parameter List,Metrics.Core,MetricsRegistry,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MetricsRegistry.cs,Timer,The method has 6 parameters. Parameters: name' builder' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,C:\repos\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,Pack,The method has 5 parameters. Parameters: type' name' unit' tags' properties
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,C:\repos\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,C:\repos\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Graphite,GraphiteReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.Graphite,GraphiteReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Influxdb,InfluxdbReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.Influxdb,InfluxdbReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.MetricData,HistogramValue,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\HistogramValue.cs,HistogramValue,The method has 16 parameters. Parameters: count' lastValue' lastUserValue' max' maxUserValue' mean' min' minUserValue' stdDev' median' percentile75' percentile95' percentile98' percentile99' percentile999' sampleSize
Long Parameter List,Metrics.MetricData,MeterValue,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValue,The method has 6 parameters. Parameters: count' meanRate' oneMinuteRate' fiveMinuteRate' fifteenMinuteRate' rateUnit
Long Parameter List,Metrics.MetricData,MeterValue,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValue,The method has 7 parameters. Parameters: count' meanRate' oneMinuteRate' fiveMinuteRate' fifteenMinuteRate' rateUnit' items
Long Parameter List,Metrics.MetricData,MeterValueSource,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValueSource,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.MetricData,TimerValueSource,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\TimerValue.cs,TimerValueSource,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.MetricData,MetricsData,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,MetricsData,The method has 9 parameters. Parameters: context' timestamp' environment' gauges' counters' meters' histograms' timers' childMetrics
Long Parameter List,Metrics.Reporters,CSVReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\CSVReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.Reporters,CSVReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\CSVReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Reporters,HumanReadableReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,ReportMeter,The method has 5 parameters. Parameters: name' value' unit' rateUnit' tags
Long Parameter List,Metrics.Reporters,HumanReadableReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,ReportTimer,The method has 6 parameters. Parameters: name' value' unit' rateUnit' durationUnit' tags
Long Parameter List,Metrics.Reporters,ScheduledReporter,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\ScheduledReporter.cs,ScheduledReporter,The method has 5 parameters. Parameters: report' metricsDataProvider' healthStatus' interval' scheduler
Long Parameter List,Metrics.Sampling,UniformSnapshot,C:\repos\etishor_Metrics.NET\Src\Metrics\Sampling\UniformSnapshot.cs,UniformSnapshot,The method has 5 parameters. Parameters: count' values' valuesAreSorted' minUserValue' maxUserValue
Long Parameter List,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The method has 8 parameters. Parameters: context' name' unit' category' counter' instance' derivate' tags
Long Parameter List,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The method has 8 parameters. Parameters: context' name' unit' category' counter' instance' derivate' tags
Long Parameter List,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The method has 5 parameters. Parameters: context' data' contentType' httpStatus' httpStatusDescription
Long Identifier,Metrics,PerformanceCountersConfigExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCountersConfigExtensions.cs,,The length of the parameter DefaultApplicationCountersContext is 33.
Long Statement,Metrics,GraphiteExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteExtensions.cs,WithGraphite,The length of the statement  "            throw new ArgumentException("Graphite uri scheme must be either net.tcp or net.udp or net.pickled (ex: net.udp://graphite.myhost.com:2003 )"' "graphiteUri"); " is 157.
Long Statement,Metrics,InfluxdbConfigExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbConfigExtensions.cs,WithInfluxDb,The length of the statement  "            return reports.WithInfluxDb(new Uri(string.Format(@"http://{0}:{1}/db/{2}/series?u={3}&p={4}&time_precision=s"' host' port' database' user' pass))' interval); " is 158.
Long Statement,Metrics,RemoteMetricsExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\RemoteMetrics\RemoteMetricsExtensions.cs,RegisterRemote,The length of the statement  "                throw new InvalidOperationException("You must set a JSON Deserializer by setting Metrics.Config.WithJsonDeserialzier()"); " is 121.
Long Statement,Metrics,RemoteMetricsExtensions,C:\repos\etishor_Metrics.NET\Src\Metrics\RemoteMetrics\RemoteMetricsExtensions.cs,RegisterRemote,The length of the statement  "            config.WithConfigExtension((ctx' hs) => ctx.Advanced.AttachContext(name' new RemoteMetricsContext(remoteUri' updateInterval' jsonDeserializer))); " is 145.
Long Statement,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The length of the statement  "                            log.WarnException("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries); " is 135.
Long Statement,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureHttpListener,The length of the statement  "                throw new InvalidOperationException("Invalid Metrics Configuration: Metrics.HttpListener.HttpUriPrefix muse be a valid HttpListener endpoint prefix"' x); " is 153.
Long Statement,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureCsvReports,The length of the statement  "                        log.Debug(() => string.Format("Metrics: Storing CSV reports in {0} every {1} seconds."' csvMetricsPath' csvMetricsInterval)); " is 125.
Long Statement,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureCsvReports,The length of the statement  "                throw new InvalidOperationException("Invalid Metrics Configuration: Metrics.CSV.Path muse be a valid path and Metrics.CSV.Interval.Seconds must be an integer > 0 "' x); " is 168.
Long Statement,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ReadGlobalyDisableMetricsSetting,The length of the statement  "                throw new InvalidOperationException("Invalid Metrics Configuration: Metrics.CompletelyDisableMetrics must be set to true or false"' x); " is 135.
Long Statement,Metrics,Metric,C:\repos\etishor_Metrics.NET\Src\Metrics\Metric.cs,GetGlobalContextName,The length of the statement  "                throw new InvalidOperationException("Invalid Metrics Configuration: Metrics.GlobalContextName must be non empty string"' x); " is 124.
Long Statement,Metrics.Logging,SerilogLogProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetForContextMethodCall,The length of the statement  "            MethodInfo method = logManagerType.GetMethodPortable("ForContext"' new[] { typeof(string)' typeof(object)' typeof(bool) }); " is 123.
Long Statement,Metrics.Logging.LogProviders,SerilogLogProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetForContextMethodCall,The length of the statement  "            MethodInfo method = logManagerType.GetMethodPortable("ForContext"' new[] { typeof(string)' typeof(object)' typeof(bool) }); " is 123.
Long Statement,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,PerformanceCounter,The length of the statement  "            this.Gauge(name' () => this.metricsBuilder.BuildPerformanceCounter(name' unit' counterCategory' counterName' counterInstance)' unit' tags); " is 139.
Long Statement,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "            return this.registry.Timer(name' () => this.metricsBuilder.BuildTimer(name' unit' rateUnit' durationUnit' samplingType)' unit' rateUnit' durationUnit' tags); " is 157.
Long Statement,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "            return this.Timer(name' unit' () => this.metricsBuilder.BuildTimer(name' unit' rateUnit' durationUnit' builder())' rateUnit' durationUnit' tags); " is 145.
Long Statement,Metrics.Core,BaseMetricsContext,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "            return this.Timer(name' unit' () => this.metricsBuilder.BuildTimer(name' unit' rateUnit' durationUnit' builder())' rateUnit' durationUnit' tags); " is 145.
Long Statement,Metrics.Core,TimerMetric,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\TimerMetric.cs,GetValue,The length of the statement  "            return new TimerValue(this.meter.GetValue(resetMetric)' this.histogram.GetValue(resetMetric)' this.counter.Value' TimeUnit.Nanoseconds); " is 136.
Long Statement,Metrics.Core,MeterWrapper,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\MeterMetric.cs,GetValue,The length of the statement  "                return new MeterValue(this.count.Value' this.GetMeanRate(elapsed)' this.OneMinuteRate' this.FiveMinuteRate' this.FifteenMinuteRate' TimeUnit.Seconds); " is 150.
Long Statement,Metrics.Graphite,PickleJar,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\PickleJar.cs,ReadPickles,The length of the statement  "            // https://github.com/dropwizard/metrics/blob/master/metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java#L300 " is 139.
Long Statement,Metrics.Json,JsonTimer,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToJsonProperties,The length of the statement  "            bool hasUserValues = histogram.LastUserValue != null || histogram.MinUserValue != null || histogram.MaxUserValue != null; " is 121.
Long Statement,Metrics.Json,JsonTimer,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToValueSource,The length of the statement  "            var rateValue = new MeterValue(this.Count' this.Rate.MeanRate' this.Rate.OneMinuteRate' this.Rate.FiveMinuteRate' this.Rate.FifteenMinuteRate' rateUnit); " is 153.
Long Statement,Metrics.Json,JsonTimer,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToValueSource,The length of the statement  "            return new TimerValueSource(this.Name' ConstantValue.Provider(timerValue)' this.Unit' rateUnit' durationUnit' this.Tags); " is 121.
Long Statement,Metrics.Json,JsonMeter,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonMeter.cs,ToValueSource,The length of the statement  "            var meterValue = new MeterValue(this.Count' this.MeanRate' this.OneMinuteRate' this.FiveMinuteRate' this.FifteenMinuteRate' rateUnit' items); " is 141.
Long Statement,Metrics.Json,JsonProperty,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonProperty.cs,AsJson,The length of the statement  "            return string.Format("{0}\"{1}\":{2}"' new string(' '' indent)' JsonValue.Escape(this.Name)' this.Value.AsJson(indented' indent + 2)); " is 134.
Long Statement,Metrics.Json,JsonBuilderV1,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonBuilderV1.cs,AddObject,The length of the statement  "            units.Add(new JsonProperty("Meters"' meters.Select(m => new JsonProperty(m.Name' string.Format("{0}/{1}"' m.Unit.Name' m.RateUnit.Unit()))))); " is 142.
Long Statement,Metrics.Json,JsonBuilderV1,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonBuilderV1.cs,AddObject,The length of the statement  "            var properties = timers.Select(t => new { Name = t.Name' Value = t.Value' RateUnit = t.RateUnit' DurationUnit = t.DurationUnit }) " is 129.
Long Statement,Metrics.MetricData,MetricsData,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "                .Select(t => new TimerValueSource(FormatName(prefix' t.Name)' t.ValueProvider' t.Unit' t.RateUnit' t.DurationUnit' t.Tags)) " is 123.
Long Statement,Metrics.MetricData,MetricsData,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "            return new MetricsData(this.Context' this.Timestamp' environment' gauges' counters' meters' histograms' timers' Enumerable.Empty<MetricsData>()); " is 145.
Long Statement,Metrics.Reporters,CSVAppender,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\CSVAppender.cs,GetValues,The length of the statement  "            return string.Join(this.delimiter' new[] { timestamp.ToString("u")' timestamp.Ticks.ToString("D") }.Concat(values.Select(v => v.FormattedValue))); " is 146.
Long Statement,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "            ReportSection("Counters"' data.Counters' c => ReportCounter(FormatMetricName(contextName' c)' c.Value' c.Unit' c.Tags)); " is 120.
Long Statement,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "            ReportSection("Meters"' data.Meters' m => ReportMeter(FormatMetricName(contextName' m)' m.Value' m.Unit' m.RateUnit' m.Tags)); " is 126.
Long Statement,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "            ReportSection("Histograms"' data.Histograms' h => ReportHistogram(FormatMetricName(contextName' h)' h.Value' h.Unit' h.Tags)); " is 126.
Long Statement,Metrics.Reporters,BaseReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "            ReportSection("Timers"' data.Timers' t => ReportTimer(FormatMetricName(contextName' t)' t.Value' t.Unit' t.RateUnit' t.DurationUnit' t.Tags)); " is 142.
Long Statement,Metrics.Sampling,SlidingWindowReservoir,C:\repos\etishor_Metrics.NET\Src\Metrics\Sampling\SlidingWindowReservoir.cs,GetSnapshot,The length of the statement  "            return new UniformSnapshot(this.count.Value' values.Select(v => v.Value)' valuesAreSorted: true' minUserValue: minValue' maxUserValue: maxValue); " is 145.
Long Statement,Metrics.Sampling,UniformReservoir,C:\repos\etishor_Metrics.NET\Src\Metrics\Sampling\UniformReservoir.cs,GetSnapshot,The length of the statement  "            return new UniformSnapshot(this.count.Value' values.Select(v => v.Value)' valuesAreSorted: true' minUserValue: minValue' maxUserValue: maxValue); " is 145.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Available Threads"' () => { int threads' ports; ThreadPool.GetAvailableThreads(out threads' out ports); return threads; }' Unit.Threads' tags: "threads"); " is 181.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Available Completion Ports"' () => { int threads' ports; ThreadPool.GetAvailableThreads(out threads' out ports); return ports; }' Unit.Custom("Ports")' tags: "threads"); " is 196.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Min Threads"' () => { int threads' ports; ThreadPool.GetMinThreads(out threads' out ports); return threads; }' Unit.Threads' tags: "threads"); " is 169.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Min Completion Ports"' () => { int threads' ports; ThreadPool.GetMinThreads(out threads' out ports); return ports; }' Unit.Custom("Ports")' tags: "threads"); " is 184.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Max Threads"' () => { int threads' ports; ThreadPool.GetMaxThreads(out threads' out ports); return threads; }' Unit.Threads' tags: "threads"); " is 169.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge("Thread Pool Max Completion Ports"' () => { int threads' ports; ThreadPool.GetMaxThreads(out threads' out ports); return ports; }' Unit.Custom("Ports")' tags: "threads"); " is 184.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "            context.Gauge(currentProcess.ProcessName + " Threads"' () => Process.GetCurrentProcess().Threads.Count' Unit.Threads' tags: "threads"); " is 135.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Free System Page Table Entries"' Unit.Custom("entries")' "Memory"' "Free System Page Table Entries"' tags: "memory"); " is 135.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 142.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 136.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Interrupts / sec"' Unit.Custom("interrupts/s")' "Processor"' "Interrupts/sec"' TotalInstance' tags: "cpu"); " is 125.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Logical Disk Avg. sec/Read"' Unit.Custom("ms")' "LogicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 149.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Logical Disk Avg. sec/Write"' Unit.Custom("ms")' "LogicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 151.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Logical Disk Transfers/sec"' Unit.Custom("Transfers")' "LogicalDisk"' "Disk Transfers/sec"' TotalInstance' tags: "disk"); " is 139.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Logical Disk Writes/sec"' Unit.Custom("kb/s")' "LogicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 144.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Logical Disk Reads/sec"' Unit.Custom("kb/s")' "LogicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 144.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Physical Disk Avg. sec/Read"' Unit.Custom("ms")' "PhysicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 151.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Physical Disk Avg. sec/Write"' Unit.Custom("ms")' "PhysicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 153.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Physical Disk Transfers/sec"' Unit.Custom("Transfers")' "PhysicalDisk"' "Disk Transfers/sec"' TotalInstance' tags: "disk"); " is 141.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Physical Disk Writes/sec"' Unit.Custom("kb/s")' "PhysicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 146.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "            context.Register("Physical Disk Reads/sec"' Unit.Custom("kb/s")' "PhysicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 146.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Process CPU Usage"' Unit.Percent' "Process"' "% Processor Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 148.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Process User Time"' Unit.Percent' "Process"' "% User Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 143.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Process Privileged Time"' Unit.Percent' "Process"' "% Privileged Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 155.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 136.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 131.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 131.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 126.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 126.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 126.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 140.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Allocated Bytes/second"' Unit.KiloBytes' Memory' "Allocated Bytes/sec"' app' v => v / 1024.0' tags: "memory"); " is 128.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Total Exceptions"' Unit.Custom("Exceptions")' Exceptions' "# of Exceps Thrown"' app' tags: "exceptions"); " is 123.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Exceptions Thrown / Sec"' Unit.Custom("Exceptions")' Exceptions' "# of Exceps Thrown / Sec"' app' tags: "exceptions"); " is 136.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Except Filters / Sec"' Unit.Custom("Filters")' Exceptions' "# of Filters / Sec"' app' tags: "exceptions"); " is 124.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Finallys / Sec"' Unit.Custom("Finallys")' Exceptions' "# of Finallys / Sec"' app' tags: "exceptions"); " is 120.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Throw to Catch Depth / Sec"' Unit.Custom("Stack Frames")' Exceptions' "Throw to Catch Depth / Sec"' app' tags: "exceptions"); " is 143.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Logical Threads"' Unit.Threads' LocksAndThreads' "# of current logical Threads"' app' tags: "threads"); " is 121.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Physical Threads"' Unit.Threads' LocksAndThreads' "# of current physical Threads"' app' tags: "threads"); " is 123.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Contention Rate / Sec"' Unit.Custom("Attempts")' LocksAndThreads' "Contention Rate / Sec"' app' tags: "threads"); " is 131.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("Total Contentions"' Unit.Custom("Attempts")' LocksAndThreads' "Total # of Contentions"' app' tags: "threads"); " is 128.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("IO Data Operations/sec"' Unit.Custom("IOPS")' "Process"' "IO Data Operations/sec"' app' tags: "disk"); " is 120.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "            context.Register("IO Other Operations/sec"' Unit.Custom("IOPS")' "Process"' "IO Other Operations/sec"' app' tags: "disk"); " is 122.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The length of the statement  "                   ". Make sure the user has access to the performance counters. The user needs to be either Admin or belong to Performance Monitor user group."; " is 142.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The length of the statement  "                   ". Make sure the user has access to the performance counters. The user needs to be either Admin or belong to Performance Monitor user group."; " is 142.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "            log.Debug(() => string.Format("Registering performance counter [{0}] in category [{1}] for instance [{2}]"' counter' category' instance ?? "none")); " is 148.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "                            context.Advanced.Gauge(name' () => new DerivedGauge(new PerformanceCounterGauge(category' counter' instance)' derivate)' unit' counterTags); " is 140.
Long Statement,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "            log.ErrorFormat("Performance counter does not exist [{0}] in category [{1}] for instance [{2}]"' counter' category' instance ?? "none"); " is 136.
Long Statement,Metrics.Visualization,FlotWebApp,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,ReadFromEmbededResource,The length of the statement  "            using (var stream = Assembly.GetAssembly(typeof(FlotWebApp)).GetManifestResourceStream("Metrics.Visualization.index.full.html.gz")) " is 131.
Long Statement,Metrics.Visualization,FlotWebApp,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFavIcon,The length of the statement  "            using (var stream = Assembly.GetAssembly(typeof(FlotWebApp)).GetManifestResourceStream("Metrics.Visualization.metrics_32.png")) " is 127.
Long Statement,Metrics.Visualization,FlotWebApp,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,GetAppStream,The length of the statement  "                return new GZipStream(Assembly.GetAssembly(typeof(FlotWebApp)).GetManifestResourceStream("Metrics.Visualization.index.full.html.gz")' CompressionMode.Decompress); " is 162.
Long Statement,Metrics.Visualization,FlotWebApp,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFlotAppAsync,The length of the statement  "                using (var stream = Assembly.GetAssembly(typeof(FlotWebApp)).GetManifestResourceStream("Metrics.Visualization.index.full.html.gz")) " is 131.
Long Statement,Metrics.Visualization,FlotWebApp,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFlotAppAsync,The length of the statement  "                using (var stream = Assembly.GetAssembly(typeof(FlotWebApp)).GetManifestResourceStream("Metrics.Visualization.index.full.html.gz")) " is 131.
Empty Catch Block,Metrics,MetricsErrorHandler,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsErrorHandler.cs,InternalHandle,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,PickleGraphiteSender,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\PickleGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,TcpGraphiteSender,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\TcpGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,UdpGraphiteSender,C:\repos\etishor_Metrics.NET\Src\Metrics\Graphite\UdpGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Utils,ActionScheduler,C:\repos\etishor_Metrics.NET\Src\Metrics\Utils\ActionScheduler.cs,RunScheduler,The method has an empty catch block.
Magic Number,Metrics,HealthCheckResult,C:\repos\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: var pad = new string(' '' indent * 2);
Magic Number,Metrics,HealthCheckResult,C:\repos\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: if (aggregate != null)              {                  builder.AppendFormat("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType().Name' exception.Message);                    foreach (var inner in aggregate.InnerExceptions)                  {                      builder.AppendLine(FormatStackTrace(inner' indent + 2));                  }              }              else              {                  builder.AppendFormat("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType().Name' exception.Message);                    if (exception.StackTrace != null)                  {                      var stackLines = exception.StackTrace.Split('\n')                          .Where(l => !string.IsNullOrWhiteSpace(l))                          .Select(l => string.Concat(pad' l.Trim()));                        builder.AppendLine(string.Join(Environment.NewLine' stackLines));                  }                  else                  {                      builder.AppendLine(string.Concat(pad' "[No Stacktrace]"));                  }                    if (exception.InnerException != null)                  {                      builder.AppendLine(FormatStackTrace(exception.InnerException' indent + 2));                  }              }
Magic Number,Metrics,HealthCheckResult,C:\repos\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: if (aggregate != null)              {                  builder.AppendFormat("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType().Name' exception.Message);                    foreach (var inner in aggregate.InnerExceptions)                  {                      builder.AppendLine(FormatStackTrace(inner' indent + 2));                  }              }              else              {                  builder.AppendFormat("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType().Name' exception.Message);                    if (exception.StackTrace != null)                  {                      var stackLines = exception.StackTrace.Split('\n')                          .Where(l => !string.IsNullOrWhiteSpace(l))                          .Select(l => string.Concat(pad' l.Trim()));                        builder.AppendLine(string.Join(Environment.NewLine' stackLines));                  }                  else                  {                      builder.AppendLine(string.Concat(pad' "[No Stacktrace]"));                  }                    if (exception.InnerException != null)                  {                      builder.AppendLine(FormatStackTrace(exception.InnerException' indent + 2));                  }              }
Magic Number,Metrics,MetricsConfig,C:\repos\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: if (!isDisabled)              {                  var retries = maxRetries;                    do                  {                      try                      {                          using (this.listener)                          {                          }                          this.listener = new MetricsHttpListener(httpUriPrefix' this.context.DataProvider' this.healthStatus);                          this.listener.Start();                          if (retries != maxRetries)                          {                              log.InfoFormat("HttpListener started successfully after {0} retries"' maxRetries - retries);                          }                          retries = 0;                      }                      catch (Exception x)                      {                          retries--;                          if (retries > 0)                          {                              log.WarnException("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries);                              Thread.Sleep(1000 * (maxRetries - retries));                          }                          else                          {                              MetricsErrorHandler.Handle(x'                                  string.Format("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries));                          }                        }                  } while (retries > 0);              }
Magic Number,Metrics.Logging,ColouredConsoleLogProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append(("[" + level.ToString().ToUpper() + "]").PadRight(8));
Magic Number,Metrics.Logging,LogMessageFormatter,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length - 2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return String.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,Metrics.Logging.LogProviders,ColouredConsoleLogProvider,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append(("[" + level.ToString().ToUpper() + "]").PadRight(8));
Magic Number,Metrics.Logging.LogProviders,LogMessageFormatter,C:\repos\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length - 2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return String.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,Metrics.Json,JsonProperty,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonProperty.cs,AsJson,The following statement contains a magic number: return string.Format("{0}\"{1}\":{2}"' new string(' '' indent)' JsonValue.Escape(this.Name)' this.Value.AsJson(indented' indent + 2));
Magic Number,Metrics.Json,JsonObject,C:\repos\etishor_Metrics.NET\Src\Metrics\Json\JsonObject.cs,AsJson,The following statement contains a magic number: var properties = this.Properties.Select(p => p.AsJson(indented' indent + 2));
Magic Number,Metrics.Reporters,HumanReadableReport,C:\repos\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,WriteValue,The following statement contains a magic number: if (label.Length + 2 + sign.Length < padding)              {                  pad = new string(' '' padding - label.Length - 1 - sign.Length);              }
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Logical Disk Avg. sec/Read"' Unit.Custom("ms")' "LogicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Logical Disk Avg. sec/Write"' Unit.Custom("ms")' "LogicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Logical Disk Writes/sec"' Unit.Custom("kb/s")' "LogicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Logical Disk Reads/sec"' Unit.Custom("kb/s")' "LogicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Physical Disk Avg. sec/Read"' Unit.Custom("ms")' "PhysicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Physical Disk Avg. sec/Write"' Unit.Custom("ms")' "PhysicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Physical Disk Writes/sec"' Unit.Custom("kb/s")' "PhysicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register("Physical Disk Reads/sec"' Unit.Custom("kb/s")' "PhysicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");
Magic Number,Metrics.PerfCounters,PerformanceCounters,C:\repos\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register("Allocated Bytes/second"' Unit.KiloBytes' Memory' "Allocated Bytes/sec"' app' v => v / 1024.0' tags: "memory");
Magic Number,Metrics.Utils,ThreadLocalRandom,C:\repos\etishor_Metrics.NET\Src\Metrics\Utils\ThreadLocalRandom.cs,NextLong,The following statement contains a magic number: return heavy << 32 | light;
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: while (!this.cts.IsCancellationRequested)              {                  try                  {                      var context = await this.httpListener.GetContextAsync();                      try                      {                          using (timer.NewContext())                          {                              await ProcessRequest(context).ConfigureAwait(false);                              context.Response.Close();                          }                      }                      catch (Exception ex)                      {                          errors.Mark();                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Internal Server Error";                          context.Response.Close();                          MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                      }                  }                  catch (ObjectDisposedException ex)                  {                      if ((ex.ObjectName == this.httpListener.GetType().FullName) && (this.httpListener.IsListening == false))                      {                          return; // listener is closed/disposed                      }                      MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                  }                  catch (Exception ex)                  {                      errors.Mark();                      HttpListenerException httpException = ex as HttpListenerException;                      if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted                      {                          MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                      }                  }              }
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: while (!this.cts.IsCancellationRequested)              {                  try                  {                      var context = await this.httpListener.GetContextAsync();                      try                      {                          using (timer.NewContext())                          {                              await ProcessRequest(context).ConfigureAwait(false);                              context.Response.Close();                          }                      }                      catch (Exception ex)                      {                          errors.Mark();                          context.Response.StatusCode = 500;                          context.Response.StatusDescription = "Internal Server Error";                          context.Response.Close();                          MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                      }                  }                  catch (ObjectDisposedException ex)                  {                      if ((ex.ObjectName == this.httpListener.GetType().FullName) && (this.httpListener.IsListening == false))                      {                          return; // listener is closed/disposed                      }                      MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                  }                  catch (Exception ex)                  {                      errors.Mark();                      HttpListenerException httpException = ex as HttpListenerException;                      if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted                      {                          MetricsErrorHandler.Handle(ex' "Error processing HTTP request");                      }                  }              }
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteHealthStatus,The following statement contains a magic number: var httpStatus = status.IsHealthy ? 200 : 500;
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteHealthStatus,The following statement contains a magic number: var httpStatus = status.IsHealthy ? 200 : 500;
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteNotFound,The following statement contains a magic number: return WriteString(context' NotFoundResponse' "text/plain"' 404' "NOT FOUND");
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteJsonMetricsV1,The following statement contains a magic number: jsonSize.Update(json.Length / 1024);
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteJsonMetricsV2,The following statement contains a magic number: jsonSize.Update(json.Length / 1024);
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: if (!acceptsGzip)              {                  using (var writer = new StreamWriter(context.Response.OutputStream' Encoding.UTF8' 4096' true))                  {                      await writer.WriteAsync(data).ConfigureAwait(false);                  }              }              else              {                  context.Response.AddHeader("Content-Encoding"' "gzip");                  using (GZipStream gzip = new GZipStream(context.Response.OutputStream' CompressionMode.Compress' true))                  using (var writer = new StreamWriter(gzip' Encoding.UTF8' 4096' true))                  {                      await writer.WriteAsync(data).ConfigureAwait(false);                  }              }
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: if (!acceptsGzip)              {                  using (var writer = new StreamWriter(context.Response.OutputStream' Encoding.UTF8' 4096' true))                  {                      await writer.WriteAsync(data).ConfigureAwait(false);                  }              }              else              {                  context.Response.AddHeader("Content-Encoding"' "gzip");                  using (GZipStream gzip = new GZipStream(context.Response.OutputStream' CompressionMode.Compress' true))                  using (var writer = new StreamWriter(gzip' Encoding.UTF8' 4096' true))                  {                      await writer.WriteAsync(data).ConfigureAwait(false);                  }              }
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteFavIcon,The following statement contains a magic number: context.Response.StatusCode = 200;
Magic Number,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteFlotApp,The following statement contains a magic number: context.Response.StatusCode = 200;
Missing Default,Metrics.Core,HistogramMetric,C:\repos\etishor_Metrics.NET\Src\Metrics\Core\HistogramMetric.cs,SamplingTypeToReservoir,The following switch statement is missing a default case: switch (samplingType)              {                  case SamplingType.FavourRecent: return new ExponentiallyDecayingReservoir();                  case SamplingType.LongTerm: return new UniformReservoir();                  case SamplingType.SlidingWindow: return new SlidingWindowReservoir();              }
Missing Default,Metrics.Visualization,MetricsHttpListener,C:\repos\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequest,The following switch statement is missing a default case: switch (urlPath)              {                  case "/":                      if (!context.Request.Url.ToString().EndsWith("/"))                      {                          context.Response.Redirect(context.Request.Url + "/");                          context.Response.Close();                          return Task.FromResult(0);                      }                      else                      {                          return WriteFlotApp(context);                      }                  case "/favicon.ico":                      return WriteFavIcon(context);                  case "/json":                      return WriteJsonMetrics(context' this.metricsDataProvider);                  case "/v1/json":                      return WriteJsonMetricsV1(context' this.metricsDataProvider);                  case "/v2/json":                      return WriteJsonMetricsV2(context' this.metricsDataProvider);                    case "/health":                      return WriteHealthStatus(context' this.healthStatus);                  case "/v1/health":                      return WriteHealthStatus(context' this.healthStatus);                    case "/text":                      return WriteTextMetrics(context' this.metricsDataProvider' this.healthStatus);                  case "/ping":                      return WritePong(context);              }
