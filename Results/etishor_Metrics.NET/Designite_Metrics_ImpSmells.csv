Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Metrics.Json,JsonMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonMetricsContext.cs,ToJsonProperties,Cyclomatic complexity of the method is 11
Complex Method,Metrics.Utils,TimeUnitExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\TimeUnitExtensions.cs,Unit,Cyclomatic complexity of the method is 9
Complex Method,Metrics.Utils,TimeUnitExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\TimeUnitExtensions.cs,FromUnit,Cyclomatic complexity of the method is 9
Complex Method,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequest,Cyclomatic complexity of the method is 12
Long Parameter List,Metrics,AdvancedMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Meter,The method has 5 parameters.
Long Parameter List,Metrics,AdvancedMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics,AdvancedMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics,AdvancedMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\AdvancedMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics,ElasticSearchConfigExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchConfigExtensions.cs,WithElasticSearch,The method has 5 parameters.
Long Parameter List,Metrics,GraphiteExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteExtensions.cs,WithPickledGraphite,The method has 5 parameters.
Long Parameter List,Metrics,InfluxdbConfigExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbConfigExtensions.cs,WithInfluxDb,The method has 7 parameters.
Long Parameter List,Metrics,MetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsContext.cs,PerformanceCounter,The method has 6 parameters.
Long Parameter List,Metrics,MetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics,Metric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Metric.cs,PerformanceCounter,The method has 6 parameters.
Long Parameter List,Metrics,Metric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Metric.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,PerformanceCounter,The method has 6 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Meter,The method has 5 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildPerformanceCounter,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsRegistry.cs,Meter,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultMetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultMetricsRegistry.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,DefaultDataProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultDataProvider.cs,DefaultDataProvider,The method has 5 parameters.
Long Parameter List,Metrics.Core,DefaultRegistryDataProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\DefaultRegistryDataProvider.cs,DefaultRegistryDataProvider,The method has 5 parameters.
Long Parameter List,Metrics.Core,ReadOnlyMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\ReadOnlyMetricsContext.cs,PerformanceCounter,The method has 6 parameters.
Long Parameter List,Metrics.Core,ReadOnlyMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\ReadOnlyMetricsContext.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,MetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildPerformanceCounter,The method has 5 parameters.
Long Parameter List,Metrics.Core,MetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,MetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,MetricsBuilder,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsBuilder.cs,BuildTimer,The method has 5 parameters.
Long Parameter List,Metrics.Core,NullMetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\NullMetricsRegistry.cs,Meter,The method has 5 parameters.
Long Parameter List,Metrics.Core,NullMetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\NullMetricsRegistry.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.Core,MetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsRegistry.cs,Meter,The method has 5 parameters.
Long Parameter List,Metrics.Core,MetricsRegistry,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\MetricsRegistry.cs,Timer,The method has 6 parameters.
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,Pack,The method has 5 parameters.
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.ElasticSearch,ElasticSearchReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\ElasticSearch\ElasticSearchReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.Graphite,GraphiteReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.Graphite,GraphiteReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.Influxdb,InfluxdbReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.Influxdb,InfluxdbReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.MetricData,HistogramValue,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\HistogramValue.cs,HistogramValue,The method has 16 parameters.
Long Parameter List,Metrics.MetricData,MeterValue,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValue,The method has 6 parameters.
Long Parameter List,Metrics.MetricData,MeterValue,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValue,The method has 7 parameters.
Long Parameter List,Metrics.MetricData,MeterValueSource,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,MeterValueSource,The method has 5 parameters.
Long Parameter List,Metrics.MetricData,TimerValueSource,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\TimerValue.cs,TimerValueSource,The method has 6 parameters.
Long Parameter List,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,MetricsData,The method has 9 parameters.
Long Parameter List,Metrics.Reporters,CSVReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\CSVReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.Reporters,CSVReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\CSVReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.Reporters,HumanReadableReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,ReportMeter,The method has 5 parameters.
Long Parameter List,Metrics.Reporters,HumanReadableReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,ReportTimer,The method has 6 parameters.
Long Parameter List,Metrics.Reporters,ScheduledReporter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\ScheduledReporter.cs,ScheduledReporter,The method has 5 parameters.
Long Parameter List,Metrics.Sampling,UniformSnapshot,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Sampling\UniformSnapshot.cs,UniformSnapshot,The method has 5 parameters.
Long Parameter List,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The method has 8 parameters.
Long Parameter List,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The method has 8 parameters.
Long Parameter List,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The method has 5 parameters.
Long Statement,Metrics,GraphiteExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\GraphiteExtensions.cs,WithGraphite,The length of the statement  "	throw new ArgumentException ("Graphite uri scheme must be either net.tcp or net.udp or net.pickled (ex: net.udp://graphite.myhost.com:2003 )"' "graphiteUri"); " is 158.
Long Statement,Metrics,InfluxdbConfigExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Influxdb\InfluxdbConfigExtensions.cs,WithInfluxDb,The length of the statement  "	return reports.WithInfluxDb (new Uri (string.Format (@"http://{0}:{1}/db/{2}/series?u={3}&p={4}&time_precision=s"' host' port' database' user' pass))' interval); " is 161.
Long Statement,Metrics,RemoteMetricsExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\RemoteMetrics\RemoteMetricsExtensions.cs,RegisterRemote,The length of the statement  "		throw new InvalidOperationException ("You must set a JSON Deserializer by setting Metrics.Config.WithJsonDeserialzier()"); " is 122.
Long Statement,Metrics,RemoteMetricsExtensions,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\RemoteMetrics\RemoteMetricsExtensions.cs,RegisterRemote,The length of the statement  "	config.WithConfigExtension ((ctx' hs) => ctx.Advanced.AttachContext (name' new RemoteMetricsContext (remoteUri' updateInterval' jsonDeserializer))); " is 148.
Long Statement,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The length of the statement  "			var stackLines = exception.StackTrace.Split ('\n').Where (l => !string.IsNullOrWhiteSpace (l)).Select (l => string.Concat (pad' l.Trim ())); " is 140.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The length of the statement  "					log.WarnException ("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries); " is 136.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The length of the statement  "					MetricsErrorHandler.Handle (x' string.Format ("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries)); " is 125.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureHttpListener,The length of the statement  "		throw new InvalidOperationException ("Invalid Metrics Configuration: Metrics.HttpListener.HttpUriPrefix muse be a valid HttpListener endpoint prefix"' x); " is 154.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureCsvReports,The length of the statement  "				log.Debug (() => string.Format ("Metrics: Storing CSV reports in {0} every {1} seconds."' csvMetricsPath' csvMetricsInterval)); " is 127.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ConfigureCsvReports,The length of the statement  "		throw new InvalidOperationException ("Invalid Metrics Configuration: Metrics.CSV.Path muse be a valid path and Metrics.CSV.Interval.Seconds must be an integer > 0 "' x); " is 169.
Long Statement,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,ReadGlobalyDisableMetricsSetting,The length of the statement  "		throw new InvalidOperationException ("Invalid Metrics Configuration: Metrics.CompletelyDisableMetrics must be set to true or false"' x); " is 136.
Long Statement,Metrics,Metric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Metric.cs,GetGlobalContextName,The length of the statement  "		var name = string.IsNullOrEmpty (configName) ? Process.GetCurrentProcess ().ProcessName.Replace ('.'' '_') : configName; " is 120.
Long Statement,Metrics,Metric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Metric.cs,GetGlobalContextName,The length of the statement  "		throw new InvalidOperationException ("Invalid Metrics Configuration: Metrics.GlobalContextName must be non empty string"' x); " is 125.
Long Statement,Metrics.Logging,LogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,ResolveLogProvider,The length of the statement  "		"Exception occured resolving a log provider. Logging for this assembly {0} is disabled. {1}"' typeof(LogProvider).GetAssemblyPortable ().FullName' ex); " is 151.
Long Statement,Metrics.Logging.LogProviders,NLogLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetOpenMdcMethod,The length of the statement  "	Action<string' string> set = Expression.Lambda<Action<string' string>> (setMethodCall' keyParam' valueParam).Compile (); " is 120.
Long Statement,Metrics.Logging.LogProviders,Log4NetLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetOpenMdcMethod,The length of the statement  "	Action<string' string> set = Expression.Lambda<Action<string' string>> (setMethodCall' keyParam' valueParam).Compile (); " is 120.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetWriteLogEntry,The length of the statement  "	MemberInitExpression memberInit = GetWriteLogExpression (messageParameter' Expression.Convert (severityParameter' TraceEventTypeType)' logNameParameter); " is 153.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetWriteLogEntry,The length of the statement  "	return Expression.Lambda<Action<string' string' int>> (writeLogEntryExpression' logNameParameter' messageParameter' severityParameter).Compile (); " is 146.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetShouldLogEntry,The length of the statement  "	MemberInitExpression memberInit = GetWriteLogExpression (Expression.Constant ("***dummy***")' Expression.Convert (severityParameter' TraceEventTypeType)' logNameParameter); " is 172.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetShouldLogEntry,The length of the statement  "	return Expression.Lambda<Func<string' int' bool>> (writeLogEntryExpression' logNameParameter' severityParameter).Compile (); " is 124.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetWriteLogExpression,The length of the statement  "		Expression.Bind (entryType.GetPropertyPortable ("TimeStamp")' Expression.Property (null' typeof(DateTime).GetPropertyPortable ("UtcNow")))' " is 139.
Long Statement,Metrics.Logging.LogProviders,EntLibLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetWriteLogExpression,The length of the statement  "		Expression.Bind (entryType.GetPropertyPortable ("Categories")' Expression.ListInit (Expression.New (typeof(List<string>))' typeof(List<string>).GetMethodPortable ("Add"' new[] { " is 177.
Long Statement,Metrics.Logging.LogProviders,SerilogLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetPushProperty,The length of the statement  "	MethodCallExpression pushPropertyMethodCall = Expression.Call (null' pushPropertyMethod' nameParam' valueParam' destructureObjectParam); " is 136.
Long Statement,Metrics.Logging.LogProviders,SerilogLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetPushProperty,The length of the statement  "	var pushProperty = Expression.Lambda<Func<string' object' bool' IDisposable>> (pushPropertyMethodCall' nameParam' valueParam' destructureObjectParam).Compile (); " is 161.
Long Statement,Metrics.Logging.LogProviders,SerilogLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,GetForContextMethodCall,The length of the statement  "	var func = Expression.Lambda<Func<string' object' bool' object>> (methodCall' propertyNameParam' valueParam' destructureObjectsParam).Compile (); " is 145.
Long Statement,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,PerformanceCounter,The length of the statement  "	this.Gauge (name' () => this.metricsBuilder.BuildPerformanceCounter (name' unit' counterCategory' counterName' counterInstance)' unit' tags); " is 141.
Long Statement,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "	return this.registry.Timer (name' () => this.metricsBuilder.BuildTimer (name' unit' rateUnit' durationUnit' samplingType)' unit' rateUnit' durationUnit' tags); " is 159.
Long Statement,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "	return this.Timer (name' unit' () => this.metricsBuilder.BuildTimer (name' unit' rateUnit' durationUnit' builder ())' rateUnit' durationUnit' tags); " is 148.
Long Statement,Metrics.Core,BaseMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\BaseMetricsContext.cs,Timer,The length of the statement  "	return this.Timer (name' unit' () => this.metricsBuilder.BuildTimer (name' unit' rateUnit' durationUnit' builder ())' rateUnit' durationUnit' tags); " is 148.
Long Statement,Metrics.Core,TimerMetric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\TimerMetric.cs,GetValue,The length of the statement  "	return new TimerValue (this.meter.GetValue (resetMetric)' this.histogram.GetValue (resetMetric)' this.counter.Value' TimeUnit.Nanoseconds); " is 139.
Long Statement,Metrics.Graphite,PickleJar,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\PickleJar.cs,ReadPickles,The length of the statement  "	// https://github.com/dropwizard/metrics/blob/master/metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java#L300 " is 139.
Long Statement,Metrics.Json,JsonMetricsContext,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonMetricsContext.cs,ToMetricsData,The length of the statement  "	return new MetricsData (this.Context' this.Timestamp' this.Environment.Select (e => new EnvironmentEntry (e.Key' e.Value))' this.Gauges.Select (g => g.ToValueSource ())' this.Counters.Select (c => c.ToValueSource ())' this.Meters.Select (m => m.ToValueSource ())' this.Histograms.Select (h => h.ToValueSource ())' this.Timers.Select (t => t.ToValueSource ())' this.ChildContexts.Select (c => c.ToMetricsData ())); " is 413.
Long Statement,Metrics.Json,JsonTimer,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToJsonProperties,The length of the statement  "	bool hasUserValues = histogram.LastUserValue != null || histogram.MinUserValue != null || histogram.MaxUserValue != null; " is 121.
Long Statement,Metrics.Json,JsonTimer,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToValueSource,The length of the statement  "	var rateValue = new MeterValue (this.Count' this.Rate.MeanRate' this.Rate.OneMinuteRate' this.Rate.FiveMinuteRate' this.Rate.FifteenMinuteRate' rateUnit); " is 154.
Long Statement,Metrics.Json,JsonTimer,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToValueSource,The length of the statement  "	var histogramValue = new HistogramValue (this.Count' this.Histogram.LastValue' this.Histogram.LastUserValue' this.Histogram.Max' this.Histogram.MaxUserValue' this.Histogram.Mean' this.Histogram.Min' this.Histogram.MinUserValue' this.Histogram.StdDev' this.Histogram.Median' this.Histogram.Percentile75' this.Histogram.Percentile95' this.Histogram.Percentile98' this.Histogram.Percentile99' this.Histogram.Percentile999' this.Histogram.SampleSize); " is 447.
Long Statement,Metrics.Json,JsonTimer,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonTimer.cs,ToValueSource,The length of the statement  "	return new TimerValueSource (this.Name' ConstantValue.Provider (timerValue)' this.Unit' rateUnit' durationUnit' this.Tags); " is 123.
Long Statement,Metrics.Json,JsonHistogram,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonHistogram.cs,ToValueSource,The length of the statement  "	var histogramValue = new HistogramValue (this.Count' this.LastValue' this.LastUserValue' this.Max' this.MaxUserValue' this.Mean' this.Min' this.MinUserValue' this.StdDev' this.Median' this.Percentile75' this.Percentile95' this.Percentile98' this.Percentile99' this.Percentile999' this.SampleSize); " is 297.
Long Statement,Metrics.Json,JsonMeter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonMeter.cs,ToValueSource,The length of the statement  "	var items = this.Items.Select (i => new MeterValue.SetItem (i.Item' i.Percent' new MeterValue (i.Count' i.MeanRate' i.OneMinuteRate' i.FiveMinuteRate' i.FifteenMinuteRate' rateUnit))).ToArray (); " is 195.
Long Statement,Metrics.Json,JsonMeter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonMeter.cs,ToValueSource,The length of the statement  "	var meterValue = new MeterValue (this.Count' this.MeanRate' this.OneMinuteRate' this.FiveMinuteRate' this.FifteenMinuteRate' rateUnit' items); " is 142.
Long Statement,Metrics.Json,JsonProperty,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonProperty.cs,AsJson,The length of the statement  "	return string.Format ("{0}\"{1}\":{2}"' new string (' '' indent)' JsonValue.Escape (this.Name)' this.Value.AsJson (indented' indent + 2)); " is 138.
Long Statement,Metrics.Json,JsonBuilderV1,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonBuilderV1.cs,BuildJson,The length of the statement  "	return new JsonBuilderV1 ().AddVersion (Version).AddTimestamp (Clock.Default).AddEnvironment ().AddObject (flatData.Gauges).AddObject (flatData.Counters).AddObject (flatData.Meters).AddObject (flatData.Histograms).AddObject (flatData.Timers).GetJson (indented); " is 261.
Long Statement,Metrics.Json,JsonBuilderV1,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonBuilderV1.cs,AddObject,The length of the statement  "	units.Add (new JsonProperty ("Meters"' meters.Select (m => new JsonProperty (m.Name' string.Format ("{0}/{1}"' m.Unit.Name' m.RateUnit.Unit ()))))); " is 148.
Long Statement,Metrics.MetricData,HistogramValue,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\HistogramValue.cs,Scale,The length of the statement  "	return new HistogramValue (this.Count' this.LastValue * factor' this.LastUserValue' this.Max * factor' this.MaxUserValue' this.Mean * factor' this.Min * factor' this.MinUserValue' this.StdDev * factor' this.Median * factor' this.Percentile75 * factor' this.Percentile95 * factor' this.Percentile98 * factor' this.Percentile99 * factor' this.Percentile999 * factor' this.SampleSize); " is 382.
Long Statement,Metrics.MetricData,MeterValue,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MeterValue.cs,Scale,The length of the statement  "	return new MeterValue (this.Count' this.MeanRate * factor' this.OneMinuteRate * factor' this.FiveMinuteRate * factor' this.FifteenMinuteRate * factor' unit' this.Items.Select (i => new SetItem (i.Item' i.Percent' i.Value.Scale (unit))).ToArray ()); " is 248.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,Filter,The length of the statement  "	return new MetricsData (this.Context' this.Timestamp' this.Environment' this.Gauges.Where (filter.IsMatch)' this.Counters.Where (filter.IsMatch)' this.Meters.Where (filter.IsMatch)' this.Histograms.Where (filter.IsMatch)' this.Timers.Where (filter.IsMatch)' this.ChildMetrics.Select (m => m.Filter (filter))); " is 309.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,Flatten,The length of the statement  "	return new MetricsData (this.Context' this.Timestamp' this.Environment.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Environment))' this.Gauges.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Gauges))' this.Counters.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Counters))' this.Meters.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Meters))' this.Histograms.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Histograms))' this.Timers.Union (this.ChildMetrics.SelectMany (m => m.Flatten ().Timers))' Enumerable.Empty<MetricsData> ()); " is 572.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var gauges = this.Gauges.Select (g => new GaugeValueSource (FormatName (prefix' g.Name)' g.ValueProvider' g.Unit' g.Tags)).Union (this.ChildMetrics.SelectMany (m => m.OldFormat (FormatPrefix (prefix' m.Context)).Gauges)); " is 221.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var counters = this.Counters.Select (c => new CounterValueSource (FormatName (prefix' c.Name)' c.ValueProvider' c.Unit' c.Tags)).Union (this.ChildMetrics.SelectMany (m => m.OldFormat (FormatPrefix (prefix' m.Context)).Counters)); " is 229.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var meters = this.Meters.Select (m => new MeterValueSource (FormatName (prefix' m.Name)' m.ValueProvider' m.Unit' m.RateUnit' m.Tags)).Union (this.ChildMetrics.SelectMany (m => m.OldFormat (FormatPrefix (prefix' m.Context)).Meters)); " is 233.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var histograms = this.Histograms.Select (h => new HistogramValueSource (FormatName (prefix' h.Name)' h.ValueProvider' h.Unit' h.Tags)).Union (this.ChildMetrics.SelectMany (m => m.OldFormat (FormatPrefix (prefix' m.Context)).Histograms)); " is 237.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var timers = this.Timers.Select (t => new TimerValueSource (FormatName (prefix' t.Name)' t.ValueProvider' t.Unit' t.RateUnit' t.DurationUnit' t.Tags)).Union (this.ChildMetrics.SelectMany (m => m.OldFormat (FormatPrefix (prefix' m.Context)).Timers)); " is 249.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	var environment = this.Environment.Select (e => new EnvironmentEntry (FormatName (prefix' e.Name)' e.Value)).Union (this.ChildMetrics.SelectMany (e => e.OldFormat (FormatPrefix (prefix' e.Context)).Environment)); " is 212.
Long Statement,Metrics.MetricData,MetricsData,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricData\MetricsData.cs,OldFormat,The length of the statement  "	return new MetricsData (this.Context' this.Timestamp' environment' gauges' counters' meters' histograms' timers' Enumerable.Empty<MetricsData> ()); " is 147.
Long Statement,Metrics.Reporters,CSVReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\CSVReport.cs,ReportTimer,The length of the statement  "	var values = MeterValues (value.Rate' unit' rateUnit).Concat (HistogramValues (value.Histogram' unit' durationUnit)).Concat (new[] { " is 132.
Long Statement,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "	ReportSection ("Counters"' data.Counters' c => ReportCounter (FormatMetricName (contextName' c)' c.Value' c.Unit' c.Tags)); " is 123.
Long Statement,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "	ReportSection ("Meters"' data.Meters' m => ReportMeter (FormatMetricName (contextName' m)' m.Value' m.Unit' m.RateUnit' m.Tags)); " is 129.
Long Statement,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "	ReportSection ("Histograms"' data.Histograms' h => ReportHistogram (FormatMetricName (contextName' h)' h.Value' h.Unit' h.Tags)); " is 129.
Long Statement,Metrics.Reporters,BaseReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\BaseReport.cs,ReportContext,The length of the statement  "	ReportSection ("Timers"' data.Timers' t => ReportTimer (FormatMetricName (contextName' t)' t.Value' t.Unit' t.RateUnit' t.DurationUnit' t.Tags)); " is 145.
Long Statement,Metrics.Sampling,SlidingWindowReservoir,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Sampling\SlidingWindowReservoir.cs,GetSnapshot,The length of the statement  "	return new UniformSnapshot (this.count.Value' values.Select (v => v.Value)' valuesAreSorted: true' minUserValue: minValue' maxUserValue: maxValue); " is 147.
Long Statement,Metrics.Sampling,UniformReservoir,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Sampling\UniformReservoir.cs,GetSnapshot,The length of the statement  "	return new UniformSnapshot (this.count.Value' values.Select (v => v.Value)' valuesAreSorted: true' minUserValue: minValue' maxUserValue: maxValue); " is 147.
Long Statement,Metrics.PerfCounters,ThreadPoolMetrics,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\ThreadPoolMetrics.cs,RegisterThreadPoolGauges,The length of the statement  "	context.Gauge (currentProcess.ProcessName + " Threads"' () => Process.GetCurrentProcess ().Threads.Count' Unit.Threads' tags: "threads"); " is 137.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Free System Page Table Entries"' Unit.Custom ("entries")' "Memory"' "Free System Page Table Entries"' tags: "memory"); " is 137.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 143.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 137.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Interrupts / sec"' Unit.Custom ("interrupts/s")' "Processor"' "Interrupts/sec"' TotalInstance' tags: "cpu"); " is 127.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("% Privileged Timer"' Unit.Custom ("%")' "Processor"' "% Privileged Time"' TotalInstance' tags: "cpu"); " is 121.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Logical Disk Avg. sec/Read"' Unit.Custom ("ms")' "LogicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 151.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Logical Disk Avg. sec/Write"' Unit.Custom ("ms")' "LogicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 153.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Logical Disk Transfers/sec"' Unit.Custom ("Transfers")' "LogicalDisk"' "Disk Transfers/sec"' TotalInstance' tags: "disk"); " is 141.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Logical Disk Writes/sec"' Unit.Custom ("kb/s")' "LogicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 146.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Logical Disk Reads/sec"' Unit.Custom ("kb/s")' "LogicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 146.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Physical Disk Avg. sec/Read"' Unit.Custom ("ms")' "PhysicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 153.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Physical Disk Avg. sec/Write"' Unit.Custom ("ms")' "PhysicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk"); " is 155.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Physical Disk Transfers/sec"' Unit.Custom ("Transfers")' "PhysicalDisk"' "Disk Transfers/sec"' TotalInstance' tags: "disk"); " is 143.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Physical Disk Writes/sec"' Unit.Custom ("kb/s")' "PhysicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 148.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The length of the statement  "	context.Register ("Physical Disk Reads/sec"' Unit.Custom ("kb/s")' "PhysicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk"); " is 148.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Process CPU Usage"' Unit.Percent' "Process"' "% Processor Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 149.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Process User Time"' Unit.Percent' "Process"' "% User Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 144.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Process Privileged Time"' Unit.Percent' "Process"' "% Privileged Time"' app' derivate: v => v / Environment.ProcessorCount' tags: "cpu"); " is 156.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 137.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory"); " is 132.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 132.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 127.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 127.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 127.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory"); " is 141.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Allocated Bytes/second"' Unit.KiloBytes' Memory' "Allocated Bytes/sec"' app' v => v / 1024.0' tags: "memory"); " is 129.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Total Exceptions"' Unit.Custom ("Exceptions")' Exceptions' "# of Exceps Thrown"' app' tags: "exceptions"); " is 125.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Exceptions Thrown / Sec"' Unit.Custom ("Exceptions")' Exceptions' "# of Exceps Thrown / Sec"' app' tags: "exceptions"); " is 138.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Except Filters / Sec"' Unit.Custom ("Filters")' Exceptions' "# of Filters / Sec"' app' tags: "exceptions"); " is 126.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Finallys / Sec"' Unit.Custom ("Finallys")' Exceptions' "# of Finallys / Sec"' app' tags: "exceptions"); " is 122.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Throw to Catch Depth / Sec"' Unit.Custom ("Stack Frames")' Exceptions' "Throw to Catch Depth / Sec"' app' tags: "exceptions"); " is 145.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Logical Threads"' Unit.Threads' LocksAndThreads' "# of current logical Threads"' app' tags: "threads"); " is 122.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Physical Threads"' Unit.Threads' LocksAndThreads' "# of current physical Threads"' app' tags: "threads"); " is 124.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Contention Rate / Sec"' Unit.Custom ("Attempts")' LocksAndThreads' "Contention Rate / Sec"' app' tags: "threads"); " is 133.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("Total Contentions"' Unit.Custom ("Attempts")' LocksAndThreads' "Total # of Contentions"' app' tags: "threads"); " is 130.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("IO Data Operations/sec"' Unit.Custom ("IOPS")' "Process"' "IO Data Operations/sec"' app' tags: "disk"); " is 122.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The length of the statement  "	context.Register ("IO Other Operations/sec"' Unit.Custom ("IOPS")' "Process"' "IO Other Operations/sec"' app' tags: "disk"); " is 124.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The length of the statement  "		var message = "Error reading performance counter data. The application is currently running as user " + GetIdentity () + ". Make sure the user has access to the performance counters. The user needs to be either Admin or belong to Performance Monitor user group."; " is 263.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,Register,The length of the statement  "		var message = "Error reading performance counter data. The application is currently running as user " + GetIdentity () + ". Make sure the user has access to the performance counters. The user needs to be either Admin or belong to Performance Monitor user group."; " is 263.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "	log.Debug (() => string.Format ("Registering performance counter [{0}] in category [{1}] for instance [{2}]"' counter' category' instance ?? "none")); " is 150.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "					context.Advanced.Gauge (name' () => new DerivedGauge (new PerformanceCounterGauge (category' counter' instance)' derivate)' unit' counterTags); " is 143.
Long Statement,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,WrappedRegister,The length of the statement  "	log.ErrorFormat ("Performance counter does not exist [{0}] in category [{1}] for instance [{2}]"' counter' category' instance ?? "none"); " is 137.
Long Statement,Metrics.Utils,AppEnvironment,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\AppEnvironment.cs,GetIpAddress,The length of the statement  "		var ipAddress = Dns.GetHostEntry (hostName).AddressList.FirstOrDefault (ip => ip.AddressFamily == AddressFamily.InterNetwork); " is 126.
Long Statement,Metrics.Utils,HostResolver,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\HostResolver.cs,Resolve,The length of the statement  "	var address = Dns.GetHostAddresses (host).Where (a => a.AddressFamily == AddressFamily.InterNetwork).OrderBy (a => Guid.NewGuid ()).FirstOrDefault (); " is 150.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,ReadFromEmbededResource,The length of the statement  "	using (var stream = Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.index.full.html.gz")) " is 133.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFavIcon,The length of the statement  "	using (var stream = Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.metrics_32.png")) { " is 131.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,GetAppStream,The length of the statement  "		return Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.index.full.html.gz"); " is 120.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,GetAppStream,The length of the statement  "		return new GZipStream (Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.index.full.html.gz")' CompressionMode.Decompress); " is 165.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFlotAppAsync,The length of the statement  "		using (var stream = Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.index.full.html.gz")) { " is 135.
Long Statement,Metrics.Visualization,FlotWebApp,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\FlotWebApp.cs,WriteFlotAppAsync,The length of the statement  "		using (var stream = Assembly.GetAssembly (typeof(FlotWebApp)).GetManifestResourceStream ("Metrics.Visualization.index.full.html.gz")) " is 133.
Empty Catch Block,Metrics,MetricsErrorHandler,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsErrorHandler.cs,InternalHandle,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,PickleGraphiteSender,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\PickleGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,TcpGraphiteSender,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\TcpGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Graphite,UdpGraphiteSender,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Graphite\UdpGraphiteSender.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Metrics.Utils,ActionScheduler,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\ActionScheduler.cs,RunScheduler,The method has an empty catch block.
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: if (aggregate != null) {  	builder.AppendFormat ("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType ().Name' exception.Message);  	foreach (var inner in aggregate.InnerExceptions) {  		builder.AppendLine (FormatStackTrace (inner' indent + 2));  	}  } else {  	builder.AppendFormat ("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType ().Name' exception.Message);  	if (exception.StackTrace != null) {  		var stackLines = exception.StackTrace.Split ('\n').Where (l => !string.IsNullOrWhiteSpace (l)).Select (l => string.Concat (pad' l.Trim ()));  		builder.AppendLine (string.Join (Environment.NewLine' stackLines));  	} else {  		builder.AppendLine (string.Concat (pad' "[No Stacktrace]"));  	}  	if (exception.InnerException != null) {  		builder.AppendLine (FormatStackTrace (exception.InnerException' indent + 2));  	}  }  
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: if (aggregate != null) {  	builder.AppendFormat ("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType ().Name' exception.Message);  	foreach (var inner in aggregate.InnerExceptions) {  		builder.AppendLine (FormatStackTrace (inner' indent + 2));  	}  } else {  	builder.AppendFormat ("{0}{1}: {2}" + Environment.NewLine' pad' exception.GetType ().Name' exception.Message);  	if (exception.StackTrace != null) {  		var stackLines = exception.StackTrace.Split ('\n').Where (l => !string.IsNullOrWhiteSpace (l)).Select (l => string.Concat (pad' l.Trim ()));  		builder.AppendLine (string.Join (Environment.NewLine' stackLines));  	} else {  		builder.AppendLine (string.Concat (pad' "[No Stacktrace]"));  	}  	if (exception.InnerException != null) {  		builder.AppendLine (FormatStackTrace (exception.InnerException' indent + 2));  	}  }  
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: foreach (var inner in aggregate.InnerExceptions) {  	builder.AppendLine (FormatStackTrace (inner' indent + 2));  }  
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: builder.AppendLine (FormatStackTrace (inner' indent + 2));  
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: if (exception.InnerException != null) {  	builder.AppendLine (FormatStackTrace (exception.InnerException' indent + 2));  }  
Magic Number,Metrics,HealthCheckResult,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\HealthCheckResult.cs,FormatStackTrace,The following statement contains a magic number: builder.AppendLine (FormatStackTrace (exception.InnerException' indent + 2));  
Magic Number,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: if (!isDisabled) {  	var retries = maxRetries;  	do {  		try {  			using (this.listener) {  			}  			this.listener = new MetricsHttpListener (httpUriPrefix' this.context.DataProvider' this.healthStatus);  			this.listener.Start ();  			if (retries != maxRetries) {  				log.InfoFormat ("HttpListener started successfully after {0} retries"' maxRetries - retries);  			}  			retries = 0;  		} catch (Exception x) {  			retries--;  			if (retries > 0) {  				log.WarnException ("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries);  				Thread.Sleep (1000 * (maxRetries - retries));  			} else {  				MetricsErrorHandler.Handle (x' string.Format ("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries));  			}  		}  	} while (retries > 0);  }  
Magic Number,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: do {  	try {  		using (this.listener) {  		}  		this.listener = new MetricsHttpListener (httpUriPrefix' this.context.DataProvider' this.healthStatus);  		this.listener.Start ();  		if (retries != maxRetries) {  			log.InfoFormat ("HttpListener started successfully after {0} retries"' maxRetries - retries);  		}  		retries = 0;  	} catch (Exception x) {  		retries--;  		if (retries > 0) {  			log.WarnException ("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries);  			Thread.Sleep (1000 * (maxRetries - retries));  		} else {  			MetricsErrorHandler.Handle (x' string.Format ("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries));  		}  	}  } while (retries > 0);  
Magic Number,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: try {  	using (this.listener) {  	}  	this.listener = new MetricsHttpListener (httpUriPrefix' this.context.DataProvider' this.healthStatus);  	this.listener.Start ();  	if (retries != maxRetries) {  		log.InfoFormat ("HttpListener started successfully after {0} retries"' maxRetries - retries);  	}  	retries = 0;  } catch (Exception x) {  	retries--;  	if (retries > 0) {  		log.WarnException ("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries);  		Thread.Sleep (1000 * (maxRetries - retries));  	} else {  		MetricsErrorHandler.Handle (x' string.Format ("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries));  	}  }  
Magic Number,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: if (retries > 0) {  	log.WarnException ("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times"' x' maxRetries - retries' retries);  	Thread.Sleep (1000 * (maxRetries - retries));  } else {  	MetricsErrorHandler.Handle (x' string.Format ("Unable to start HTTP Listener. Retried {0} times' giving up..."' maxRetries));  }  
Magic Number,Metrics,MetricsConfig,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\MetricsConfig.cs,WithHttpEndpoint,The following statement contains a magic number: Thread.Sleep (1000 * (maxRetries - retries));  
Magic Number,Metrics.Logging.LogProviders,ColouredConsoleLogProvider,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append (("[" + level.ToString ().ToUpper () + "]").PadRight (8));  
Magic Number,Metrics.Logging.LogProviders,LogMessageFormatter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () => {  	string targetMessage = messageBuilder ();  	int argumentIndex = 0;  	foreach (Match match in Pattern.Matches (targetMessage)) {  		int notUsed;  		if (!int.TryParse (match.Value.Substring (1' match.Value.Length - 2)' out notUsed)) {  			targetMessage = ReplaceFirst (targetMessage' match.Value' "{" + argumentIndex++ + "}");  		}  	}  	try {  		return String.Format (CultureInfo.InvariantCulture' targetMessage' formatParameters);  	} catch (FormatException ex) {  		throw new FormatException ("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);  	}  };  
Magic Number,Metrics.Logging.LogProviders,LogMessageFormatter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: foreach (Match match in Pattern.Matches (targetMessage)) {  	int notUsed;  	if (!int.TryParse (match.Value.Substring (1' match.Value.Length - 2)' out notUsed)) {  		targetMessage = ReplaceFirst (targetMessage' match.Value' "{" + argumentIndex++ + "}");  	}  }  
Magic Number,Metrics.Logging.LogProviders,LogMessageFormatter,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: if (!int.TryParse (match.Value.Substring (1' match.Value.Length - 2)' out notUsed)) {  	targetMessage = ReplaceFirst (targetMessage' match.Value' "{" + argumentIndex++ + "}");  }  
Magic Number,Metrics.Json,JsonProperty,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Json\JsonProperty.cs,AsJson,The following statement contains a magic number: return string.Format ("{0}\"{1}\":{2}"' new string (' '' indent)' JsonValue.Escape (this.Name)' this.Value.AsJson (indented' indent + 2));  
Magic Number,Metrics.Reporters,HumanReadableReport,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Reporters\HumanReadableReport.cs,WriteValue,The following statement contains a magic number: if (label.Length + 2 + sign.Length < padding) {  	pad = new string (' '' padding - label.Length - 1 - sign.Length);  }  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Pool Nonpaged MBytes"' Unit.MegaBytes' "Memory"' "Pool Nonpaged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Pool Paged MBytes"' Unit.MegaBytes' "Memory"' "Pool Paged Bytes"' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Logical Disk Avg. sec/Read"' Unit.Custom ("ms")' "LogicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Logical Disk Avg. sec/Write"' Unit.Custom ("ms")' "LogicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Logical Disk Writes/sec"' Unit.Custom ("kb/s")' "LogicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Logical Disk Reads/sec"' Unit.Custom ("kb/s")' "LogicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Physical Disk Avg. sec/Read"' Unit.Custom ("ms")' "PhysicalDisk"' "Avg. Disk sec/Read"' TotalInstance' v => v * 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Physical Disk Avg. sec/Write"' Unit.Custom ("ms")' "PhysicalDisk"' "Avg. Disk sec/Write"' TotalInstance' v => v * 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Physical Disk Writes/sec"' Unit.Custom ("kb/s")' "PhysicalDisk"' "Disk Reads/sec"' TotalInstance' f => f / 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterSystemCounters,The following statement contains a magic number: context.Register ("Physical Disk Reads/sec"' Unit.Custom ("kb/s")' "PhysicalDisk"' "Disk Writes/sec"' TotalInstance' f => f / 1024.0' tags: "disk");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Private MBytes"' Unit.MegaBytes' "Process"' "Private Bytes"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Working Set"' Unit.MegaBytes' "Process"' "Working Set"' app' derivate: v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Mb in all Heaps"' Unit.MegaBytes' Memory' "# Bytes in all Heaps"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 0 heap size"' Unit.MegaBytes' Memory' "Gen 0 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 1 heap size"' Unit.MegaBytes' Memory' "Gen 1 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Gen 2 heap size"' Unit.MegaBytes' Memory' "Gen 2 heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Large Object Heap size"' Unit.MegaBytes' Memory' "Large Object Heap size"' app' v => v / (1024 * 1024.0)' tags: "memory");  
Magic Number,Metrics.PerfCounters,PerformanceCounters,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\PerfCounters\PerformanceCounters.cs,RegisterAppCounters,The following statement contains a magic number: context.Register ("Allocated Bytes/second"' Unit.KiloBytes' Memory' "Allocated Bytes/sec"' app' v => v / 1024.0' tags: "memory");  
Magic Number,Metrics.Utils,ThreadLocalRandom,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Utils\ThreadLocalRandom.cs,NextLong,The following statement contains a magic number: return heavy << 32 | light;  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: while (!this.cts.IsCancellationRequested) {  	try {  		var context = await this.httpListener.GetContextAsync ();  		try {  			using (timer.NewContext ()) {  				await ProcessRequest (context).ConfigureAwait (false);  				context.Response.Close ();  			}  		} catch (Exception ex) {  			errors.Mark ();  			context.Response.StatusCode = 500;  			context.Response.StatusDescription = "Internal Server Error";  			context.Response.Close ();  			MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  		}  	} catch (ObjectDisposedException ex) {  		if ((ex.ObjectName == this.httpListener.GetType ().FullName) && (this.httpListener.IsListening == false)) {  			return;  			// listener is closed/disposed  		}  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	} catch (Exception ex) {  		errors.Mark ();  		HttpListenerException httpException = ex as HttpListenerException;  		if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted  		 {  			MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  		}  	}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: while (!this.cts.IsCancellationRequested) {  	try {  		var context = await this.httpListener.GetContextAsync ();  		try {  			using (timer.NewContext ()) {  				await ProcessRequest (context).ConfigureAwait (false);  				context.Response.Close ();  			}  		} catch (Exception ex) {  			errors.Mark ();  			context.Response.StatusCode = 500;  			context.Response.StatusDescription = "Internal Server Error";  			context.Response.Close ();  			MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  		}  	} catch (ObjectDisposedException ex) {  		if ((ex.ObjectName == this.httpListener.GetType ().FullName) && (this.httpListener.IsListening == false)) {  			return;  			// listener is closed/disposed  		}  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	} catch (Exception ex) {  		errors.Mark ();  		HttpListenerException httpException = ex as HttpListenerException;  		if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted  		 {  			MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  		}  	}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: try {  	var context = await this.httpListener.GetContextAsync ();  	try {  		using (timer.NewContext ()) {  			await ProcessRequest (context).ConfigureAwait (false);  			context.Response.Close ();  		}  	} catch (Exception ex) {  		errors.Mark ();  		context.Response.StatusCode = 500;  		context.Response.StatusDescription = "Internal Server Error";  		context.Response.Close ();  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	}  } catch (ObjectDisposedException ex) {  	if ((ex.ObjectName == this.httpListener.GetType ().FullName) && (this.httpListener.IsListening == false)) {  		return;  		// listener is closed/disposed  	}  	MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  } catch (Exception ex) {  	errors.Mark ();  	HttpListenerException httpException = ex as HttpListenerException;  	if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted  	 {  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: try {  	var context = await this.httpListener.GetContextAsync ();  	try {  		using (timer.NewContext ()) {  			await ProcessRequest (context).ConfigureAwait (false);  			context.Response.Close ();  		}  	} catch (Exception ex) {  		errors.Mark ();  		context.Response.StatusCode = 500;  		context.Response.StatusDescription = "Internal Server Error";  		context.Response.Close ();  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	}  } catch (ObjectDisposedException ex) {  	if ((ex.ObjectName == this.httpListener.GetType ().FullName) && (this.httpListener.IsListening == false)) {  		return;  		// listener is closed/disposed  	}  	MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  } catch (Exception ex) {  	errors.Mark ();  	HttpListenerException httpException = ex as HttpListenerException;  	if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted  	 {  		MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  	}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: try {  	using (timer.NewContext ()) {  		await ProcessRequest (context).ConfigureAwait (false);  		context.Response.Close ();  	}  } catch (Exception ex) {  	errors.Mark ();  	context.Response.StatusCode = 500;  	context.Response.StatusDescription = "Internal Server Error";  	context.Response.Close ();  	MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: context.Response.StatusCode = 500;  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequests,The following statement contains a magic number: if (httpException == null || httpException.ErrorCode != 995)// IO operation aborted   {  	MetricsErrorHandler.Handle (ex' "Error processing HTTP request");  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteNotFound,The following statement contains a magic number: return WriteString (context' NotFoundResponse' "text/plain"' 404' "NOT FOUND");  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteJsonMetricsV1,The following statement contains a magic number: jsonSize.Update (json.Length / 1024);  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteJsonMetricsV2,The following statement contains a magic number: jsonSize.Update (json.Length / 1024);  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: if (!acceptsGzip) {  	using (var writer = new StreamWriter (context.Response.OutputStream' Encoding.UTF8' 4096' true)) {  		await writer.WriteAsync (data).ConfigureAwait (false);  	}  } else {  	context.Response.AddHeader ("Content-Encoding"' "gzip");  	using (GZipStream gzip = new GZipStream (context.Response.OutputStream' CompressionMode.Compress' true))  		using (var writer = new StreamWriter (gzip' Encoding.UTF8' 4096' true)) {  			await writer.WriteAsync (data).ConfigureAwait (false);  		}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: if (!acceptsGzip) {  	using (var writer = new StreamWriter (context.Response.OutputStream' Encoding.UTF8' 4096' true)) {  		await writer.WriteAsync (data).ConfigureAwait (false);  	}  } else {  	context.Response.AddHeader ("Content-Encoding"' "gzip");  	using (GZipStream gzip = new GZipStream (context.Response.OutputStream' CompressionMode.Compress' true))  		using (var writer = new StreamWriter (gzip' Encoding.UTF8' 4096' true)) {  			await writer.WriteAsync (data).ConfigureAwait (false);  		}  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: using (var writer = new StreamWriter (context.Response.OutputStream' Encoding.UTF8' 4096' true)) {  	await writer.WriteAsync (data).ConfigureAwait (false);  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: using (GZipStream gzip = new GZipStream (context.Response.OutputStream' CompressionMode.Compress' true))  	using (var writer = new StreamWriter (gzip' Encoding.UTF8' 4096' true)) {  		await writer.WriteAsync (data).ConfigureAwait (false);  	}  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteString,The following statement contains a magic number: using (var writer = new StreamWriter (gzip' Encoding.UTF8' 4096' true)) {  	await writer.WriteAsync (data).ConfigureAwait (false);  }  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteFavIcon,The following statement contains a magic number: context.Response.StatusCode = 200;  
Magic Number,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,WriteFlotApp,The following statement contains a magic number: context.Response.StatusCode = 200;  
Missing Default,Metrics.Core,HistogramMetric,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Core\HistogramMetric.cs,SamplingTypeToReservoir,The following switch statement is missing a default case: switch (samplingType) {  case SamplingType.FavourRecent:  	return new ExponentiallyDecayingReservoir ();  case SamplingType.LongTerm:  	return new UniformReservoir ();  case SamplingType.SlidingWindow:  	return new SlidingWindowReservoir ();  }  
Missing Default,Metrics.Visualization,MetricsHttpListener,F:\newReposMay17\etishor_Metrics.NET\Src\Metrics\Visualization\MetricsHttpListener.cs,ProcessRequest,The following switch statement is missing a default case: switch (urlPath) {  case "/":  	if (!context.Request.Url.ToString ().EndsWith ("/")) {  		context.Response.Redirect (context.Request.Url + "/");  		context.Response.Close ();  		return Task.FromResult (0);  	} else {  		return WriteFlotApp (context);  	}  case "/favicon.ico":  	return WriteFavIcon (context);  case "/json":  	return WriteJsonMetrics (context' this.metricsDataProvider);  case "/v1/json":  	return WriteJsonMetricsV1 (context' this.metricsDataProvider);  case "/v2/json":  	return WriteJsonMetricsV2 (context' this.metricsDataProvider);  case "/health":  	return WriteHealthStatus (context' this.healthStatus);  case "/v1/health":  	return WriteHealthStatus (context' this.healthStatus);  case "/text":  	return WriteTextMetrics (context' this.metricsDataProvider' this.healthStatus);  case "/ping":  	return WritePong (context);  }  
