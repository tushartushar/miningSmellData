Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ToDoLib,TaskList,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\TaskList.cs,GetPreferredFileLineEndingFromFile,Cyclomatic complexity of the method is 8
Complex Method,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,Cyclomatic complexity of the method is 13
Long Parameter List,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The method has 6 parameters.
Long Statement,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,ToString,The length of the statement  "		str = string.Format ("{0}{1}{2} {3} {4}"' Completed ? "x " + CompletedDate + " " : ""' Priority == null ? "N/A" : Priority + " "' Body' string.Join (" "' Projects)' string.Join (" "' Contexts)); " is 194.
Magic Number,ToDoLib,Log,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Log.cs,Write,The following statement contains a magic number: using (var m = new Mutex (true' LogFile.Replace (Path.DirectorySeparatorChar' '_'))) {  	if (m.WaitOne (10000))  		File.AppendAllText (LogFile' msg' Encoding.UTF8);  	else  		throw new Exception ("Could not obtain lock on " + LogFile);  	m.ReleaseMutex ();  }  
Magic Number,ToDoLib,Log,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Log.cs,Write,The following statement contains a magic number: if (m.WaitOne (10000))  	File.AppendAllText (LogFile' msg' Encoding.UTF8);  else  	throw new Exception ("Could not obtain lock on " + LogFile);  
Magic Number,ToDoLib,TaskList,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\TaskList.cs,GetPreferredFileLineEndingFromFile,The following statement contains a magic number: try {  	using (StreamReader fileStream = new StreamReader (_filePath)) {  		char previousChar = '\0';  		// Read the first 4000 characters to try and find a newline  		for (int i = 0; i < 4000; i++) {  			int b = fileStream.Read ();  			if (b == -1)  				break;  			char currentChar = (char)b;  			if (currentChar == '\n') {  				return (previousChar == '\r') ? "\r\n" : "\n";  			}  			previousChar = currentChar;  		}  		// if no newline found' use the default newline character for the environment  		return Environment.NewLine;  	}  } catch (IOException ex) {  	var msg = "An error occurred while trying to read the task list file";  	Log.Error (msg' ex);  	throw new TaskException (msg' ex);  } catch (Exception ex) {  	Log.Error (ex.ToString ());  	throw;  }  
Magic Number,ToDoLib,TaskList,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\TaskList.cs,GetPreferredFileLineEndingFromFile,The following statement contains a magic number: using (StreamReader fileStream = new StreamReader (_filePath)) {  	char previousChar = '\0';  	// Read the first 4000 characters to try and find a newline  	for (int i = 0; i < 4000; i++) {  		int b = fileStream.Read ();  		if (b == -1)  			break;  		char currentChar = (char)b;  		if (currentChar == '\n') {  			return (previousChar == '\r') ? "\r\n" : "\n";  		}  		previousChar = currentChar;  	}  	// if no newline found' use the default newline character for the environment  	return Environment.NewLine;  }  
Magic Number,ToDoLib,TaskList,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\TaskList.cs,GetPreferredFileLineEndingFromFile,The following statement contains a magic number: for (int i = 0; i < 4000; i++) {  	int b = fileStream.Read ();  	if (b == -1)  		break;  	char currentChar = (char)b;  	if (currentChar == '\n') {  		return (previousChar == '\r') ? "\r\n" : "\n";  	}  	previousChar = currentChar;  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (!dueDateRelative.IsNullOrEmpty ()) {  	var isValid = false;  	var due = new DateTime ();  	dueDateRelative = dueDateRelative.ToLower ();  	if (dueDateRelative == "today") {  		due = DateTime.Now;  		isValid = true;  	} else if (dueDateRelative == "tomorrow") {  		due = DateTime.Now.AddDays (1);  		isValid = true;  	} else if (dueDateRelative == "monday" | dueDateRelative == "tuesday" | dueDateRelative == "wednesday" | dueDateRelative == "thursday" | dueDateRelative == "friday" | dueDateRelative == "saturday" | dueDateRelative == "sunday") {  		due = DateTime.Now;  		var count = 0;  		//if day of week' add days to today until weekday matches input  		//if today is the specified weekday' due date will be in one week  		do {  			count++;  			due = due.AddDays (1);  			isValid = string.Equals (due.ToString ("dddd"' new CultureInfo ("en-US"))' dueDateRelative' StringComparison.CurrentCultureIgnoreCase);  		} while (!isValid && (count < 7));  		// The count check is to prevent an endless loop in case of other culture.  	}  	if (isValid)  		raw = reg.Replace (raw' "due:" + due.ToString ("yyyy-MM-dd"));  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (dueDateRelative == "today") {  	due = DateTime.Now;  	isValid = true;  } else if (dueDateRelative == "tomorrow") {  	due = DateTime.Now.AddDays (1);  	isValid = true;  } else if (dueDateRelative == "monday" | dueDateRelative == "tuesday" | dueDateRelative == "wednesday" | dueDateRelative == "thursday" | dueDateRelative == "friday" | dueDateRelative == "saturday" | dueDateRelative == "sunday") {  	due = DateTime.Now;  	var count = 0;  	//if day of week' add days to today until weekday matches input  	//if today is the specified weekday' due date will be in one week  	do {  		count++;  		due = due.AddDays (1);  		isValid = string.Equals (due.ToString ("dddd"' new CultureInfo ("en-US"))' dueDateRelative' StringComparison.CurrentCultureIgnoreCase);  	} while (!isValid && (count < 7));  	// The count check is to prevent an endless loop in case of other culture.  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (dueDateRelative == "tomorrow") {  	due = DateTime.Now.AddDays (1);  	isValid = true;  } else if (dueDateRelative == "monday" | dueDateRelative == "tuesday" | dueDateRelative == "wednesday" | dueDateRelative == "thursday" | dueDateRelative == "friday" | dueDateRelative == "saturday" | dueDateRelative == "sunday") {  	due = DateTime.Now;  	var count = 0;  	//if day of week' add days to today until weekday matches input  	//if today is the specified weekday' due date will be in one week  	do {  		count++;  		due = due.AddDays (1);  		isValid = string.Equals (due.ToString ("dddd"' new CultureInfo ("en-US"))' dueDateRelative' StringComparison.CurrentCultureIgnoreCase);  	} while (!isValid && (count < 7));  	// The count check is to prevent an endless loop in case of other culture.  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (dueDateRelative == "monday" | dueDateRelative == "tuesday" | dueDateRelative == "wednesday" | dueDateRelative == "thursday" | dueDateRelative == "friday" | dueDateRelative == "saturday" | dueDateRelative == "sunday") {  	due = DateTime.Now;  	var count = 0;  	//if day of week' add days to today until weekday matches input  	//if today is the specified weekday' due date will be in one week  	do {  		count++;  		due = due.AddDays (1);  		isValid = string.Equals (due.ToString ("dddd"' new CultureInfo ("en-US"))' dueDateRelative' StringComparison.CurrentCultureIgnoreCase);  	} while (!isValid && (count < 7));  	// The count check is to prevent an endless loop in case of other culture.  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: do {  	count++;  	due = due.AddDays (1);  	isValid = string.Equals (due.ToString ("dddd"' new CultureInfo ("en-US"))' dueDateRelative' StringComparison.CurrentCultureIgnoreCase);  } while (!isValid && (count < 7));  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (string.IsNullOrEmpty (s)) {  	Completed = false;  	CompletedDate = "";  } else {  	Completed = true;  	if (s.Length > 1)  		CompletedDate = s.Substring (2);  }  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: if (s.Length > 1)  	CompletedDate = s.Substring (2);  
Magic Number,ToDoLib,Task,F:\newReposMay17\benrhughes_todotxt.net\ToDoLib\Task.cs,Task,The following statement contains a magic number: CompletedDate = s.Substring (2);  
