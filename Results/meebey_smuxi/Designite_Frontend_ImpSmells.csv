Implementation smell,Namespace,Class,File,Method,Description
Long Method,Smuxi.Frontend,EngineManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\EngineManager.cs,Connect,The method has 223 lines of code.
Complex Method,Smuxi.Frontend,ChatViewManagerBase,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\ChatViewManagerBase.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Smuxi.Frontend,EngineManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\EngineManager.cs,Connect,Cyclomatic complexity of the method is 20
Complex Method,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,CreateOpenSshProcessStartInfo,Cyclomatic complexity of the method is 8
Complex Method,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,DoExecute,Cyclomatic complexity of the method is 14
Complex Method,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,CommandBenchmarkMessageBuilder,Cyclomatic complexity of the method is 13
Long Parameter List,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,SshTunnelManager,The method has 15 parameters. Parameters: program' parameters' username' password' keyfile' hostname' port' forwardBindAddress' forwardBindPort' forwardHostName' forwardHostPort' backwardBindAddress' backwardBindPort' backwardHostName' backwardHostPort
Long Parameter List,Smuxi.Frontend,ChatViewSyncManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\ChatViewSyncManager.cs,OnChatAdded,The method has 6 parameters. Parameters: chatModel' chatId' chatType' chatPosition' protocolManager' protocolManagerType
Long Parameter List,Smuxi.Frontend,ChatViewAddedEventArgs,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\ChatViewSyncManager.cs,ChatViewAddedEventArgs,The method has 6 parameters. Parameters: chatModel' chatId' chatType' chatPosition' protocolManager' protocolManagerType
Long Parameter List,Smuxi.Frontend,NickCompleter,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\NickCompleter.cs,IsolateNickToComplete,The method has 5 parameters. Parameters: entryLine' cursorPosition' nickBeginning' appendSpace' leadingAt
Complex Conditional,Smuxi.Frontend,TabCycleNickCompleter,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\TabCycleNickCompleter.cs,Complete,The conditional expression  "PreviousNickIndex != -1 && currentChatView == PreviousChatView && cursorPosition == rematchCursorPosition                  && InitialMatch != null && (matchMe.Length == 0 || matchMe.StartsWith(InitialMatch))"  is complex.
Empty Catch Block,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,Connect,The method has an empty catch block.
Magic Number,Smuxi.Frontend,EngineManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\EngineManager.cs,Connect,The following statement contains a magic number: switch (channel) {                  case "TCP":                      // Make sure the channel is really using our random                      // remotingPort. Already registered channel will for sure                      // not to that and thus the back-connection fails!                      if (f_ChannelName != null) {                          IChannel oldChannel = ChannelServices.GetChannel(f_ChannelName);                          if (oldChannel != null) {  #if LOG4NET                              f_Logger.Debug("Connect(): found old remoting channel' unregistering...");  #endif                              ChannelServices.UnregisterChannel(oldChannel);                          }                      }                        // frontend -> engine                      BinaryClientFormatterSinkProvider cprovider =                          new BinaryClientFormatterSinkProvider();                        // engine -> frontend (back-connection)                      BinaryServerFormatterSinkProvider sprovider =                          new BinaryServerFormatterSinkProvider();                      // required for MS .NET 1.1                      sprovider.TypeFilterLevel = TypeFilterLevel.Full;                                            if (bindAddress != null) {                          props["machineName"] = bindAddress;                      }                      var tcpChannel = new TcpChannel(props' cprovider' sprovider);                      f_ChannelName = tcpChannel.ChannelName;                      ChannelServices.RegisterChannel(tcpChannel' false);                        // make sure the listen port of channel is ready before we                      // connect to the engine' as it will make a call back!                      while (true) {                          using (TcpClient tcpClient = new TcpClient()) {                              try {                                  tcpClient.Connect(hostname' port);  #if LOG4NET                                  f_Logger.Debug("Connect(): listen port of remoting channel is ready");  #endif                                  break;                              } catch (SocketException ex) {  #if LOG4NET                                  f_Logger.Debug("Connect(): listen port of remoting channel is not reading yet' retrying..."' ex);  #endif                              }                              System.Threading.Thread.Sleep(1000);                          }                      }                        connection_url = "tcp://"+hostname+":"+port+"/SessionManager";  #if LOG4NET                      f_Logger.Info("Connecting to: "+connection_url);  #endif                      sessm = (SessionManager)Activator.GetObject(typeof(SessionManager)'                          connection_url);                      break;  #if CHANNEL_TCPEX                  case "TcpEx":                      //props.Remove("port");                      //props["name"] = "tcpex";                      connection_url = "tcpex://"+hostname+":"+port+"/SessionManager";                       if (ChannelServices.GetChannel("ExtendedTcp") == null) {                          ChannelServices.RegisterChannel(new TcpExChannel(props' null' null));                      }      #if LOG4NET                      _Logger.Info("Connecting to: "+connection_url);      #endif                      sessm = (SessionManager)Activator.GetObject(typeof(SessionManager)'                          connection_url);                      break;  #endif  #if CHANNEL_BIRDIRTCP                  case "BirDirTcp":                      string ip = System.Net.Dns.Resolve(hostname).AddressList[0].ToString();                      connection_url = "birdirtcp://"+ip+":"+port+"/SessionManager";                       if (ChannelServices.GetChannel("birdirtcp") == null) {                          ChannelServices.RegisterChannel(new BidirTcpClientChannel());                      }      #if LOG4NET                      _Logger.Info("Connecting to: "+connection_url);      #endif                      sessm = (SessionManager)Activator.GetObject(typeof(SessionManager)'                          connection_url);                      break;  #endif                  case "HTTP":                      connection_url = "http://"+hostname+":"+port+"/SessionManager";                       if (ChannelServices.GetChannel("http") == null) {                          ChannelServices.RegisterChannel(new HttpChannel()' false);                      }  #if LOG4NET                      f_Logger.Info("Connecting to: "+connection_url);  #endif                      sessm = (SessionManager)Activator.GetObject(typeof(SessionManager)'                          connection_url);                      break;                  default:                      throw new ApplicationException(String.Format(                                      _("Unknown channel ({0}) - "+                                        "only the following channel types are supported:")'                                      channel) + " HTTP TCP");              }
Magic Number,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,Connect,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,GetOpenSshVersion,The following statement contains a magic number: minor = match.Groups[2].Value;
Magic Number,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,GetOpenSshVersion,The following statement contains a magic number: match.Groups.Count >= 3
Magic Number,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,GetOpenSshVersion,The following statement contains a magic number: micro = match.Groups[3].Value;
Magic Number,Smuxi.Frontend,SshTunnelManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\SshTunnelManager.cs,GetOpenSshVersion,The following statement contains a magic number: match.Groups.Count >= 4
Magic Number,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,CommandExec,The following statement contains a magic number: cmd.DataArray.Length < 2
Magic Number,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,CommandBenchmarkMessageBuilder,The following statement contains a magic number: var count = 1000;
Magic Number,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,AddMessageToFrontend,The following statement contains a magic number: EngineProtocolVersion != null && EngineProtocolVersion >= new Version(0' 10)
Magic Number,Smuxi.Frontend,ChatViewSyncManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\ChatViewSyncManager.cs,ChatViewSyncManager,The following statement contains a magic number: WorkerQueue = new ThreadPoolQueue() {                  MaxWorkers = 4              };
Missing Default,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,DoExecute,The following switch statement is missing a default case: switch (cmd.Command) {                      case "exec":                          CommandExec(cmd);                          handled = true;                          break;                      case "echo":                          CommandEcho(cmd);                          handled = true;                          break;                      case "benchmark_message_builder":                          CommandBenchmarkMessageBuilder(cmd);                          handled = true;                          break;                      case "exception":                          throw new Exception("You asked for it.");                  }
Missing Default,Smuxi.Frontend,CommandManager,D:\research\architectureSmells\repos\meebey_smuxi\src\Frontend\CommandManager.cs,CommandExec,The following switch statement is missing a default case: switch (parameters[0]) {                      case "-c":                          executeOutput = true;                          shift = true;                          break;                      case "-o":                          messageOutput = true;                          shift = true;                          break;                  }
