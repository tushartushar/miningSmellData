Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,Connect,The following statement contains a magic number: try {                  string url;                  if (server.Hostname.StartsWith("http://") ||                      server.Hostname.StartsWith("https://")) {                      url = server.Hostname;                  } else {                      if (server.UseEncryption && server.Port == 443) {                          url = String.Format("https://{0}"' server.Hostname);                      } else if (server.UseEncryption) {                          url = String.Format("https://{0}:{1}"'                                              server.Hostname' server.Port);                      } else if (!server.UseEncryption && server.Port == 80) {                          url = String.Format("http://{0}"' server.Hostname);                      } else {                          url = String.Format("http://{0}:{1}"'                                              server.Hostname' server.Port);                      }                  }                  // HACK: SignalR's ServerSentEventsTransport times out on Mono                  // for some reason and then fallbacks to LongPollingTransport                  // this takes 10 seconds though' so let's go LP directly                  Func<IClientTransport> transport = null;                  if (Type.GetType("Mono.Runtime") == null) {                      transport = () => new AutoTransport(new DefaultHttpClient());                  } else {                      transport = () => new LongPollingTransport();                  }                  var authProvider = new DefaultAuthenticationProvider(url);                  Client = new JabbRClient(url' authProvider' transport);                  Client.AutoReconnect = true;                  Client.MessageReceived += OnMessageReceived;                  Client.MeMessageReceived += OnMeMessageReceived;                  Client.UserLeft += OnUserLeft;                  Client.UserJoined += OnUserJoined;                  Client.JoinedRoom += OnJoinedRoom;                  Client.PrivateMessage += OnPrivateMessage;                    Me = CreatePerson(Username);                  Me.IdentityNameColored.ForegroundColor = new TextColor(0' 0' 255);                  Me.IdentityNameColored.BackgroundColor = TextColor.None;                  Me.IdentityNameColored.Bold = true;                    Connect();              } catch (Exception ex) {  #if LOG4NET                  Logger.Error(ex);  #endif                  var msg = CreateMessageBuilder().                      AppendEventPrefix().                      AppendErrorText(_("Connection failed! Reason: {0}")'                                      ex.Message).                      ToMessage();                  Session.AddMessageToChat(ProtocolChat' msg);              }
Magic Number,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,Connect,The following statement contains a magic number: try {                  string url;                  if (server.Hostname.StartsWith("http://") ||                      server.Hostname.StartsWith("https://")) {                      url = server.Hostname;                  } else {                      if (server.UseEncryption && server.Port == 443) {                          url = String.Format("https://{0}"' server.Hostname);                      } else if (server.UseEncryption) {                          url = String.Format("https://{0}:{1}"'                                              server.Hostname' server.Port);                      } else if (!server.UseEncryption && server.Port == 80) {                          url = String.Format("http://{0}"' server.Hostname);                      } else {                          url = String.Format("http://{0}:{1}"'                                              server.Hostname' server.Port);                      }                  }                  // HACK: SignalR's ServerSentEventsTransport times out on Mono                  // for some reason and then fallbacks to LongPollingTransport                  // this takes 10 seconds though' so let's go LP directly                  Func<IClientTransport> transport = null;                  if (Type.GetType("Mono.Runtime") == null) {                      transport = () => new AutoTransport(new DefaultHttpClient());                  } else {                      transport = () => new LongPollingTransport();                  }                  var authProvider = new DefaultAuthenticationProvider(url);                  Client = new JabbRClient(url' authProvider' transport);                  Client.AutoReconnect = true;                  Client.MessageReceived += OnMessageReceived;                  Client.MeMessageReceived += OnMeMessageReceived;                  Client.UserLeft += OnUserLeft;                  Client.UserJoined += OnUserJoined;                  Client.JoinedRoom += OnJoinedRoom;                  Client.PrivateMessage += OnPrivateMessage;                    Me = CreatePerson(Username);                  Me.IdentityNameColored.ForegroundColor = new TextColor(0' 0' 255);                  Me.IdentityNameColored.BackgroundColor = TextColor.None;                  Me.IdentityNameColored.Bold = true;                    Connect();              } catch (Exception ex) {  #if LOG4NET                  Logger.Error(ex);  #endif                  var msg = CreateMessageBuilder().                      AppendEventPrefix().                      AppendErrorText(_("Connection failed! Reason: {0}")'                                      ex.Message).                      ToMessage();                  Session.AddMessageToChat(ProtocolChat' msg);              }
Magic Number,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,Connect,The following statement contains a magic number: try {                  string url;                  if (server.Hostname.StartsWith("http://") ||                      server.Hostname.StartsWith("https://")) {                      url = server.Hostname;                  } else {                      if (server.UseEncryption && server.Port == 443) {                          url = String.Format("https://{0}"' server.Hostname);                      } else if (server.UseEncryption) {                          url = String.Format("https://{0}:{1}"'                                              server.Hostname' server.Port);                      } else if (!server.UseEncryption && server.Port == 80) {                          url = String.Format("http://{0}"' server.Hostname);                      } else {                          url = String.Format("http://{0}:{1}"'                                              server.Hostname' server.Port);                      }                  }                  // HACK: SignalR's ServerSentEventsTransport times out on Mono                  // for some reason and then fallbacks to LongPollingTransport                  // this takes 10 seconds though' so let's go LP directly                  Func<IClientTransport> transport = null;                  if (Type.GetType("Mono.Runtime") == null) {                      transport = () => new AutoTransport(new DefaultHttpClient());                  } else {                      transport = () => new LongPollingTransport();                  }                  var authProvider = new DefaultAuthenticationProvider(url);                  Client = new JabbRClient(url' authProvider' transport);                  Client.AutoReconnect = true;                  Client.MessageReceived += OnMessageReceived;                  Client.MeMessageReceived += OnMeMessageReceived;                  Client.UserLeft += OnUserLeft;                  Client.UserJoined += OnUserJoined;                  Client.JoinedRoom += OnJoinedRoom;                  Client.PrivateMessage += OnPrivateMessage;                    Me = CreatePerson(Username);                  Me.IdentityNameColored.ForegroundColor = new TextColor(0' 0' 255);                  Me.IdentityNameColored.BackgroundColor = TextColor.None;                  Me.IdentityNameColored.Bold = true;                    Connect();              } catch (Exception ex) {  #if LOG4NET                  Logger.Error(ex);  #endif                  var msg = CreateMessageBuilder().                      AppendEventPrefix().                      AppendErrorText(_("Connection failed! Reason: {0}")'                                      ex.Message).                      ToMessage();                  Session.AddMessageToChat(ProtocolChat' msg);              }
Missing Default,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,Command,The following switch statement is missing a default case: switch (cmd.Command) {                      case "help":                          CommandHelp(cmd);                          handled = true;                          break;                      case "j":                      case "join":                          CommandJoin(cmd);                          handled = true;                          break;                  }
Missing Default,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,CommandMessage,The following switch statement is missing a default case: switch (cmd.Chat.ChatType) {                      case ChatType.Group:                          Client.Send(cmd.Data' cmd.Chat.ID).Wait();                          break;                      case ChatType.Person:                          Client.SendPrivateMessage(cmd.Chat.ID' cmd.Data).Wait();                          break;                  }
Missing Default,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,OpenChat,The following switch statement is missing a default case: switch (chat.ChatType) {                  case ChatType.Person:                      var personChat = (PersonChatModel) GetChat(chat.ID' ChatType.Person);                      if (personChat != null) {                          return;                      }                      var person = CreatePerson(chat.ID);                      personChat = new PersonChatModel(person' chat.ID' chat.ID' this);                      personChat.InitMessageBuffer(MessageBufferPersistencyType.Volatile);                      Session.AddChat(personChat);                      Session.SyncChat(personChat);                      break;                  case ChatType.Group:                      Client.JoinRoom(chat.ID);                      break;              }
Missing Default,Smuxi.Engine,JabbrProtocolManager,C:\repos\meebey_smuxi\src\Engine-JabbR\JabbrProtocolManager.cs,CloseChat,The following switch statement is missing a default case: switch (chat.ChatType) {                  case ChatType.Person:                      Session.RemoveChat(chat);                      break;                  case ChatType.Group:                      Client.LeaveRoom(chat.ID);                      break;              }
