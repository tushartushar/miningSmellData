Implementation smell,Namespace,Class,File,Method,Description
Long Method,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConnect,The method has 105 lines of code.
Long Method,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The method has 141 lines of code.
Long Method,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The method has 419 lines of code.
Long Method,Smuxi.Engine,MessageBuilderSettings,C:\repos\meebey_smuxi\src\Engine\Config\MessageBuilderSettings.cs,InitBuiltinSmartLinks,The method has 272 lines of code.
Complex Method,Smuxi.Engine,Engine,C:\repos\meebey_smuxi\src\Engine\Engine.cs,Init,Cyclomatic complexity of the method is 12
Complex Method,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,LogMessage,Cyclomatic complexity of the method is 8
Complex Method,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,UpdateNewsFeed,Cyclomatic complexity of the method is 9
Complex Method,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,Compact,Cyclomatic complexity of the method is 9
Complex Method,Smuxi.Engine,GroupChatModel,C:\repos\meebey_smuxi\src\Engine\Chats\GroupChatModel.cs,PersonLookupAll,Cyclomatic complexity of the method is 10
Complex Method,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,Cyclomatic complexity of the method is 22
Complex Method,Smuxi.Engine,ServerListController,C:\repos\meebey_smuxi\src\Engine\Config\ServerListController.cs,AddServer,Cyclomatic complexity of the method is 9
Complex Method,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,CreateFormat,Cyclomatic complexity of the method is 8
Complex Method,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,Cyclomatic complexity of the method is 12
Complex Method,Smuxi.Engine,HookRunner,C:\repos\meebey_smuxi\src\Engine\Hooks\HookRunner.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Smuxi.Engine,HookRunner,C:\repos\meebey_smuxi\src\Engine\Hooks\HookRunner.cs,RunHook,Cyclomatic complexity of the method is 9
Long Parameter List,Smuxi.Engine,TextMessagePartModel,C:\repos\meebey_smuxi\src\Engine\Messages\TextMessagePartModel.cs,TextMessagePartModel,The method has 7 parameters. Parameters: fgColor' bgColor' underline' bold' italic' text' highlight
Long Parameter List,Smuxi.Engine,TextMessagePartModel,C:\repos\meebey_smuxi\src\Engine\Messages\TextMessagePartModel.cs,TextMessagePartModel,The method has 6 parameters. Parameters: fgColor' bgColor' underline' bold' italic' text
Long Parameter List,Smuxi.Engine,PersonModel,C:\repos\meebey_smuxi\src\Engine\Persons\PersonModel.cs,PersonModel,The method has 5 parameters. Parameters: id' displayName' networkID' networkProtocol' protocolManager
Long Identifier,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,ParsePatterns,The length of the parameter regexDelimiterForStartOfPatternValue is 36.
Long Identifier,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,ParsePatterns,The length of the parameter regexDelimiterForEndOfPatternValue is 34.
Virtual Method Call from Constructor,Smuxi.Engine,CommandModel,C:\repos\meebey_smuxi\src\Engine\CommandModel.cs,CommandModel,The constructor "CommandModel" calls a virtual method "SetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,TextColor,The constructor "TextColor" calls a virtual method "SetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,MessageModel,The constructor "MessageModel" calls a virtual method "GetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,MessageModel,The constructor "MessageModel" calls a virtual method "SetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,MessageModel,The constructor "MessageModel" calls a virtual method "SetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,MessagePartModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessagePartModel.cs,MessagePartModel,The constructor "MessagePartModel" calls a virtual method "SetObjectData".
Virtual Method Call from Constructor,Smuxi.Engine,ContactModel,C:\repos\meebey_smuxi\src\Engine\Persons\ContactModel.cs,ContactModel,The constructor "ContactModel" calls a virtual method "SetObjectData".
Empty Catch Block,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,_Parse,The method has an empty catch block.
Empty Catch Block,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,_Parse,The method has an empty catch block.
Empty Catch Block,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,FixDatabase,The method has an empty catch block.
Empty Catch Block,Smuxi.Engine,ProxySettings,C:\repos\meebey_smuxi\src\Engine\Config\ProxySettings.cs,ProxySettings,The method has an empty catch block.
Magic Number,Smuxi.Engine,Engine,C:\repos\meebey_smuxi\src\Engine\Engine.cs,Init,The following statement contains a magic number: if (String.IsNullOrEmpty(location) &&                  Environment.OSVersion.Platform == PlatformID.Unix) {                  // we are mkbundled                  var locationBuilder = new StringBuilder(8192);                  if (Mono.Unix.Native.Syscall.readlink("/proc/self/exe"' locationBuilder) >= 0) {                      location = Path.GetDirectoryName(locationBuilder.ToString());                  }              }
Magic Number,Smuxi.Engine,FrontendManager,C:\repos\meebey_smuxi\src\Engine\FrontendManager.cs,_OnConfigChanged,The following statement contains a magic number: if ((DateTime.UtcNow - LastConfigChange).TotalSeconds < 30) {                  return;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,Session,The following statement contains a magic number: NewsFeedUpdateInterval = TimeSpan.FromHours(12);
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,Session,The following statement contains a magic number: NewsFeedRetryInterval = TimeSpan.FromMinutes(5);
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  var network = cd.Parameter;                  var serverSettings = new ServerListController(UserConfig);                  server = serverSettings.GetServerByNetwork(network);                  if (server == null) {                      // HACK: simply assume the user meant irc if not specified                      // as Smuxi is still primarly an IRC client                      protocol = "irc";                      string cmd = String.Format("{0}connect irc {1}"'                                                 cd.CommandCharacter' cd.Parameter);                      cd = new CommandModel(fm' cd.Chat' cd.CommandCharacter' cmd);                  }              } else if (cd.DataArray.Length >= 3) {                  protocol = cd.DataArray[1];              } else {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  var network = cd.Parameter;                  var serverSettings = new ServerListController(UserConfig);                  server = serverSettings.GetServerByNetwork(network);                  if (server == null) {                      // HACK: simply assume the user meant irc if not specified                      // as Smuxi is still primarly an IRC client                      protocol = "irc";                      string cmd = String.Format("{0}connect irc {1}"'                                                 cd.CommandCharacter' cd.Parameter);                      cd = new CommandModel(fm' cd.Chat' cd.CommandCharacter' cmd);                  }              } else if (cd.DataArray.Length >= 3) {                  protocol = cd.DataArray[1];              } else {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandDisconnect,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string server = cd.DataArray[1];                  victim = GetProtocolManagerByHost(server);                  if (victim == null) {                      var builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendErrorText(                          _("Disconnect failed - could not find server: {0}")'                          server                      );                      AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else {                  victim = cd.Chat.ProtocolManager;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandConfig,The following statement contains a magic number: switch (action) {                  case "load":                      _Config.Load();                      builder.AppendText(_("Configuration reloaded"));                      break;                  case "save":                      _Config.Save();                      builder.AppendText(_("Configuration saved"));                      break;                  case "get":                  case "list":                      string key = null;                      if (action == "get" && cd.DataArray.Length >= 3) {                          key = cd.DataArray[2];                      }                      foreach (var entry in _UserConfig.OrderBy(kvp => kvp.Key)) {                          if (key != null &&                              entry.Key.IndexOf(key' StringComparison.InvariantCultureIgnoreCase) == -1) {                              continue;                          }                          builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText("{0} = {1}"' entry.Key' entry.Value);                          AddMessageToFrontend(cd' builder.ToMessage());                      }                      return;                  case "set":                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var setParam = String.Join(" "' cd.DataArray.Skip(2).ToArray());                      if (!setParam.Contains("=")) {                          builder.AppendErrorText(                              _("Invalid key/value format.")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var setKey = setParam.Split('=')[0].Trim();                      var setValue = String.Join(                          "="' setParam.Split('=').Skip(1).ToArray()                      ).Trim();                      object oldValue = _UserConfig[setKey];                      if (oldValue == null && setKey.StartsWith("MessagePatterns/")) {                          var id = setKey.Split('/')[1];                          var parsedId = Int32.Parse(id);                          var msgPatternSettings = new MessagePatternListController(_UserConfig);                          var pattern = msgPatternSettings.Get(parsedId);                          if (pattern == null) {                              // pattern does not exist' create it with default values                              pattern = new MessagePatternModel(parsedId);                              msgPatternSettings.Add(pattern' parsedId);                              oldValue = _UserConfig[setKey];                          }                      }                      if (oldValue == null) {                          builder.AppendErrorText(                              _("Invalid config key: '{0}'")'                              setKey                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                        try {                          object newValue = Convert.ChangeType(setValue' oldValue.GetType());                          _UserConfig[setKey] = newValue;                          builder.AppendText("{0} = {1}"' setKey' newValue.ToString());                          if (setKey.StartsWith("MessagePatterns/")) {                              MessageBuilderSettings.ApplyConfig(UserConfig);                          }                      } catch (InvalidCastException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      } catch (FormatException) {                          builder.AppendErrorText(                              _("Could not convert config value: '{0}' to type: {1}")'                              setValue'                              oldValue.GetType().Name                          );                      }                      break;                  case "remove": {                      if (cd.DataArray.Length < 3) {                          _NotEnoughParameters(cd);                          return;                      }                      var removeParam = cd.DataArray[2];                      if (!removeParam.StartsWith("MessagePatterns/")) {                          builder.AppendErrorText(                              _("Invalid config remove key: '{0}'. Valid remove " +                                "keys: MessagePatterns/{{ID}}.")'                              removeParam                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          return;                      }                      var id = removeParam.Split('/')[1];                      var parsedId = Int32.Parse(id);                      var patternController = new MessagePatternListController(_UserConfig);                      var pattern = patternController.Get(parsedId);                      if (pattern == null) {                          builder.AppendErrorText(                              _("Message pattern with ID: '{0}' does not exist.")'                              id                          );                      } else {                          patternController.Remove(parsedId);                          MessageBuilderSettings.ApplyConfig(UserConfig);                          builder.AppendText(                              _("Message pattern with ID: '{0}' removed.")'                              id                          );                      }                      break;                  }                  default:                      builder.AppendErrorText(                          _("Invalid parameter for config; use load' save' get or set.")                      );                      break;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,CommandNetwork,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  switch (cd.DataArray[1].ToLower()) {                      case "list":                          _CommandNetworkList(cd);                          break;                      case "switch":                          _CommandNetworkSwitch(cd);                          break;                      case "close":                          _CommandNetworkClose(cd);                          break;                      default:                          var builder = CreateMessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendText(                              _("Invalid parameter for network; use list' " +                                "switch' or close")                          );                          AddMessageToFrontend(cd' builder.ToMessage());                          break;                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkClose,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named protocol manager                  string network = cd.DataArray[2];                  pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network close failed - could not " +                                           "find network: {0}")' network);                      AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else if (cd.DataArray.Length >= 2) {                  // network manager of chat                  pm = cd.Chat.ProtocolManager;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkClose,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named protocol manager                  string network = cd.DataArray[2];                  pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network close failed - could not " +                                           "find network: {0}")' network);                      AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else if (cd.DataArray.Length >= 2) {                  // network manager of chat                  pm = cd.Chat.ProtocolManager;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkClose,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named protocol manager                  string network = cd.DataArray[2];                  pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network close failed - could not " +                                           "find network: {0}")' network);                      AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else if (cd.DataArray.Length >= 2) {                  // network manager of chat                  pm = cd.Chat.ProtocolManager;              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkSwitch,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named network manager                  string network = cd.DataArray[2];                  var pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network switch failed - could not " +                                           "find network: {0}")' network);                      fm.AddMessageToChat(cd.Chat' builder.ToMessage());                      return;                  }                  fm.CurrentProtocolManager = pm;                  fm.UpdateNetworkStatus();              } else if (cd.DataArray.Length >= 2) {                  // next network manager                  fm.NextProtocolManager();              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkSwitch,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named network manager                  string network = cd.DataArray[2];                  var pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network switch failed - could not " +                                           "find network: {0}")' network);                      fm.AddMessageToChat(cd.Chat' builder.ToMessage());                      return;                  }                  fm.CurrentProtocolManager = pm;                  fm.UpdateNetworkStatus();              } else if (cd.DataArray.Length >= 2) {                  // next network manager                  fm.NextProtocolManager();              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,_CommandNetworkSwitch,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // named network manager                  string network = cd.DataArray[2];                  var pm = GetProtocolManagerByNetwork(network);                  if (pm == null) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Network switch failed - could not " +                                           "find network: {0}")' network);                      fm.AddMessageToChat(cd.Chat' builder.ToMessage());                      return;                  }                  fm.CurrentProtocolManager = pm;                  fm.UpdateNetworkStatus();              } else if (cd.DataArray.Length >= 2) {                  // next network manager                  fm.NextProtocolManager();              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,InitSessionChat,The following statement contains a magic number: text.ForegroundColor = new TextColor(255' 0' 0);
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,TextColor,The following statement contains a magic number: f_Value = red << 16 | green << 8 | blue;
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,TextColor,The following statement contains a magic number: f_Value = red << 16 | green << 8 | blue;
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: if (hexCode.Length != 6) {                  throw new ArgumentException("Hexcode value must be exact 6 characters long (without prefix)."' "hexCode");              }
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: int red   = Int16.Parse(hexCode.Substring(0' 2)' NumberStyles.HexNumber);
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: int green = Int16.Parse(hexCode.Substring(2' 2)' NumberStyles.HexNumber);
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: int green = Int16.Parse(hexCode.Substring(2' 2)' NumberStyles.HexNumber);
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: int blue  = Int16.Parse(hexCode.Substring(4' 2)' NumberStyles.HexNumber);
Magic Number,Smuxi.Engine,TextColor,C:\repos\meebey_smuxi\src\Engine\TextColor.cs,Parse,The following statement contains a magic number: int blue  = Int16.Parse(hexCode.Substring(4' 2)' NumberStyles.HexNumber);
Magic Number,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(256);
Magic Number,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,Compact,The following statement contains a magic number: while (dontMoveNext || iter.MoveNext()) {                  dontMoveNext = false;                  var current = iter.Current;                  parts.Add(current);                    // we can only glue pure text (not URLs etc)                  if (current.GetType() != typeof(TextMessagePartModel)) {                      continue;                  }                    var currentText = (TextMessagePartModel) current;                  while (iter.MoveNext()) {                      var next = iter.Current;                      if (next.GetType() != typeof(TextMessagePartModel)) {                          parts.Add(next);                          break;                      }                        var nextText = (TextMessagePartModel) next;                      if (!currentText.AttributesEquals(nextText)) {                          // they aren't the same! no candidate for glueing :/                          // but maybe the next part is                          dontMoveNext = true;                          break;                      }                        // glue time!                      if (gluedText == null) {                          // this is the first element of the gluing                          gluedText = new StringBuilder(256);                          gluedText.Append(currentText.Text);                      }                      gluedText.Append(nextText.Text);                  }                    if (gluedText != null) {                      currentText.Text = gluedText.ToString();                      gluedText = null;                  }              }
Magic Number,Smuxi.Engine,MessageModel,C:\repos\meebey_smuxi\src\Engine\Messages\MessageModel.cs,GetNick,The following statement contains a magic number: if (match.Success && match.Groups.Count >= 2) {                  return match.Groups[1].Value;              }
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"Port"' 7689);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"BufferLines"' 500);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"EngineBufferLines"' 100);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"CommandHistorySize"' 30);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"MaxCapacity"' 200);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"MaxCapacity"' 50 * 1000);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix+"MaxCapacity"' 50 * 1000);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: Get(prefix + "Port"' 6667);
Magic Number,Smuxi.Engine,Config,C:\repos\meebey_smuxi\src\Engine\Config\Config.cs,Load,The following statement contains a magic number: LoadEntry(prefix+"Port"' 7689);
Magic Number,Smuxi.Engine,ContactModel,C:\repos\meebey_smuxi\src\Engine\Persons\ContactModel.cs,GetColoredIdentityName,The following statement contains a magic number: var upper24 = hash >> 8;
Magic Number,Smuxi.Engine,ContactModel,C:\repos\meebey_smuxi\src\Engine\Persons\ContactModel.cs,GetColoredIdentityName,The following statement contains a magic number: uint flippedHash = (hash >> 16) | (hash << 16);
Magic Number,Smuxi.Engine,ContactModel,C:\repos\meebey_smuxi\src\Engine\Persons\ContactModel.cs,GetColoredIdentityName,The following statement contains a magic number: uint flippedHash = (hash >> 16) | (hash << 16);
Magic Number,Smuxi.Engine,ContactModel,C:\repos\meebey_smuxi\src\Engine\Persons\ContactModel.cs,GetColoredIdentityName,The following statement contains a magic number: var flippedMergedHash = (flippedHash >> 8) ^ (flippedHash & 0xFFFFFFU);
Magic Number,Smuxi.Engine,FrontendConfig,C:\repos\meebey_smuxi\src\Engine\Config\FrontendConfig.cs,Load,The following statement contains a magic number: foreach (string engine in engines) {                  string eprefix = prefix+engine+"/";                   LoadEntry(eprefix+"Username"' String.Empty);                  LoadEntry(eprefix+"Password"' String.Empty);                  LoadEntry(eprefix+"Hostname"' String.Empty);                  LoadEntry(eprefix+"BindAddress"' null);                  LoadEntry(eprefix+"Port"' null);                  LoadEntry(eprefix+"Channel"' null);                  LoadEntry(eprefix+"Formatter"' null);                  LoadEntry(eprefix+"UseSshTunnel"' false);                  LoadEntry(eprefix+"SshProgram"' null);                  LoadEntry(eprefix+"SshParameters"' null);                  LoadEntry(eprefix+"SshHostname"' String.Empty);                  LoadEntry(eprefix+"SshPort"' 22);                  LoadEntry(eprefix+"SshUsername"' String.Empty);                  LoadEntry(eprefix+"SshPassword"' String.Empty);                  LoadEntry(eprefix+"SshKeyfile"' String.Empty);              }
Magic Number,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,CreateHeader,The following statement contains a magic number: var header = new List<TextMessagePartModel>(3);
Magic Number,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,AppendErrorText,The following statement contains a magic number: text.ForegroundColor = new TextColor(255' 0' 0);
Magic Number,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,CreateNick,The following statement contains a magic number: var senderMsg = new List<TextMessagePartModel>(3);
Magic Number,Smuxi.Engine,MessageBuilder,C:\repos\meebey_smuxi\src\Engine\Messages\MessageBuilder.cs,ContainsHighlight,The following statement contains a magic number: foreach (string highLightWord in Settings.HighlightWords) {                  if (String.IsNullOrEmpty(highLightWord)) {                      continue;                  }                    if (highLightWord.StartsWith("/") && highLightWord.EndsWith("/")) {                      // This is a regex' so just build a regex out of the string.                      regex = new Regex(                          highLightWord.Substring(1' highLightWord.Length - 2)'                          RegexOptions.IgnoreCase                      );                  } else {                      // Plain text - make a regex that matches the word as long as it's separated properly.                      string regex_string = String.Format(                          "(^|\\W){0}($|\\W)"'                          Regex.Escape(highLightWord)                      );                      regex = new Regex(regex_string' RegexOptions.IgnoreCase);                  }                    if (regex.Match(text).Success) {                      return true;                  }              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,TextColorTools,The following statement contains a magic number: f_BestContrastColors = new Dictionary<int' TextColor>(1024);
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,TextColorTools,The following statement contains a magic number: NearestColors = new Dictionary<object' Dictionary<TextColor' TextColor>>(16);
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: if (brDiff < 127) {                  // bright background                  modifier = -10;              } else {                  // dark background                  modifier = 10;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: if (brDiff < 127) {                  // bright background                  modifier = -10;              } else {                  // dark background                  modifier = 10;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: if (brDiff < 127) {                  // bright background                  modifier = -10;              } else {                  // dark background                  modifier = 10;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetBestTextColor,The following statement contains a magic number: while (true) {                  double difference = GetLuminanceDifference(bestColor' bgColor);                  double needed = ((int) neededContrast) / 10d;                  if (difference > needed) {                      break;                  }    #if LOG4NET && COLOR_DEBUG                  f_Logger.Debug("GetBestTextColor(): color has bad contrast: " +                                 bestColor + " difference: " + difference +                                 " needed: " + needed);  #endif                    // change the fg color                  int red   = bestColor.Red   + modifier;                  int green = bestColor.Green + modifier;                  int blue  = bestColor.Blue  + modifier;                    // cap to allowed values                  if (modifier > 0) {                      if (red > 255) {                          red = 255;                      }                      if (green > 255) {                          green = 255;                      }                      if (blue > 255) {                          blue = 255;                      }                  } else {                      if (red < 0) {                          red = 0;                      }                      if (green < 0) {                          green = 0;                      }                      if (blue < 0) {                          blue = 0;                      }                  }                    bestColor = new TextColor((byte) red' (byte) green' (byte) blue);                                    // in case we found no good color                  if (bestColor == TextColor.White ||                      bestColor == TextColor.Black) {                      break;                  }                  attempts++;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,ToHSL,The following statement contains a magic number: if (max == min) {                  S = 0d; // achromatic              } else {                  var diff = max - min;                  S = L > 0.5d ? diff / (2 - diff) : diff / range;                  if (max == R) {                      H = (G - B) / diff + (G < B ? 6d : 0d);                  } else if (max == G) {                      H = (B - R) / diff + 2;                  } else if (max == B) {                      H = (R - G) / diff + 4;                  }                  H /= 6;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,ToHSL,The following statement contains a magic number: if (max == min) {                  S = 0d; // achromatic              } else {                  var diff = max - min;                  S = L > 0.5d ? diff / (2 - diff) : diff / range;                  if (max == R) {                      H = (G - B) / diff + (G < B ? 6d : 0d);                  } else if (max == G) {                      H = (B - R) / diff + 2;                  } else if (max == B) {                      H = (R - G) / diff + 4;                  }                  H /= 6;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,ToHSL,The following statement contains a magic number: if (max == min) {                  S = 0d; // achromatic              } else {                  var diff = max - min;                  S = L > 0.5d ? diff / (2 - diff) : diff / range;                  if (max == R) {                      H = (G - B) / diff + (G < B ? 6d : 0d);                  } else if (max == G) {                      H = (B - R) / diff + 2;                  } else if (max == B) {                      H = (R - G) / diff + 4;                  }                  H /= 6;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,ToHSL,The following statement contains a magic number: if (max == min) {                  S = 0d; // achromatic              } else {                  var diff = max - min;                  S = L > 0.5d ? diff / (2 - diff) : diff / range;                  if (max == R) {                      H = (G - B) / diff + (G < B ? 6d : 0d);                  } else if (max == G) {                      H = (B - R) / diff + 2;                  } else if (max == B) {                      H = (R - G) / diff + 4;                  }                  H /= 6;              }
Magic Number,Smuxi.Engine,TextColorTools,C:\repos\meebey_smuxi\src\Engine\TextColorTools.cs,GetNearestColor,The following statement contains a magic number: if (NearestColors.TryGetValue(palette' out cache)) {                  if (cache.TryGetValue(color' out nearestColor)) {                      return nearestColor;                  }              } else {                  cache = new Dictionary<TextColor' TextColor>(1024);                  NearestColors.Add(palette' cache);              }
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,Add,The following statement contains a magic number: Database.Deactivate(dbMsg' 5);
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,ConfigureDatabase,The following statement contains a magic number: DatabaseConfiguration.Common.WeakReferenceCollectionInterval = 60 * 1000;
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,ConfigureDatabase,The following statement contains a magic number: DatabaseConfiguration.Common.WeakReferenceCollectionInterval = 60 * 1000;
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,GetMessage,The following statement contains a magic number: Database.Activate(dbMsg' 10);
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,GetMessage,The following statement contains a magic number: Database.Deactivate(dbMsg' 10);
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,FetchIndex,The following statement contains a magic number: Database.Activate(index' 10);
Magic Number,Smuxi.Engine,Db4oMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\Db4oMessageBuffer.cs,BuildIndex,The following statement contains a magic number: int purgeInterval = 1000;
Magic Number,Smuxi.Engine,EntrySettings,C:\repos\meebey_smuxi\src\Engine\Config\EntrySettings.cs,EntrySettings,The following statement contains a magic number: CommandHistorySize = 30;
Magic Number,Smuxi.Engine,TextColorPalettes,C:\repos\meebey_smuxi\src\Engine\TextColorPalettes.cs,TextColorPalettes,The following statement contains a magic number: LinuxConsole = new List<TextColor>(16);
Magic Number,Smuxi.Engine,TextColorPalettes,C:\repos\meebey_smuxi\src\Engine\TextColorPalettes.cs,TextColorPalettes,The following statement contains a magic number: Xterm = new List<TextColor>(256);
Magic Number,Smuxi.Engine,HookRunner,C:\repos\meebey_smuxi\src\Engine\Hooks\HookRunner.cs,RunHook,The following statement contains a magic number: if (Arguments != null && Arguments.Count > 0) {                  var args = new StringBuilder(256);                  foreach (var arg in Arguments) {                      // quote because of potential spaces and retarded Process API                      args.AppendFormat(@"""{0}"" "' arg);                  }                  // remove trailing space                  args.Length--;                  hookArgs = args.ToString();              }
Magic Number,Smuxi.Engine,MessageHookEnvironment,C:\repos\meebey_smuxi\src\Engine\Hooks\Environments\MessageHookEnvironment.cs,MessageHookEnvironment,The following statement contains a magic number: if (String.IsNullOrEmpty(nick)) {                  this["MSG"] = message;              } else {                  this["MSG"] = message.Substring(nick.Length + 3);              }
Magic Number,Smuxi.Engine,MessageBuilderSettings,C:\repos\meebey_smuxi\src\Engine\Config\MessageBuilderSettings.cs,MessageBuilderSettings,The following statement contains a magic number: var emojiRegexBuilder = new StringBuilder(32 * 1024);
Magic Number,Smuxi.Engine,MessageBuilderSettings,C:\repos\meebey_smuxi\src\Engine\Config\MessageBuilderSettings.cs,MessageBuilderSettings,The following statement contains a magic number: var emojiRegexBuilder = new StringBuilder(32 * 1024);
Magic Number,Smuxi.Engine,MessagePatternModel,C:\repos\meebey_smuxi\src\Engine\Config\MessagePatternModel.cs,Load,The following statement contains a magic number: if (messagePartPattern.StartsWith("/") && messagePartPattern.EndsWith("/i")) {                  var regexPattern = messagePartPattern.Substring(1' messagePartPattern.Length - 3);                  MessagePartPattern = new Regex(regexPattern' RegexOptions.IgnoreCase | RegexOptions.Compiled);              } else {                  MessagePartPattern = new Regex(messagePartPattern' RegexOptions.Compiled);              }
Magic Number,Smuxi.Engine,JsonMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\JsonMessageBuffer.cs,JsonMessageBuffer,The following statement contains a magic number: DefaultMaxChunkSize = 1000;
Magic Number,Smuxi.Engine,JsonMessageBuffer,C:\repos\meebey_smuxi\src\Engine\MessageBuffers\JsonMessageBuffer.cs,GetRange,The following statement contains a magic number: var chunkMessages = new List<MessageModel>(MaxChunkSize * 2);
Missing Default,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,LogMessage,The following switch statement is missing a default case: switch (msg.MessageType) {                      case MessageType.ChatStateComposing:                      case MessageType.ChatStatePaused:                      case MessageType.ChatStateReset:                          return;                  }
Missing Default,Smuxi.Engine,Session,C:\repos\meebey_smuxi\src\Engine\Session.cs,UpdateNewsFeed,The following switch statement is missing a default case: switch (ex.Status) {                      case WebExceptionStatus.ConnectFailure:                      case WebExceptionStatus.ConnectionClosed:                      case WebExceptionStatus.Timeout:                      case WebExceptionStatus.ReceiveFailure:                      case WebExceptionStatus.NameResolutionFailure:                      case WebExceptionStatus.ProxyNameResolutionFailure:  #if LOG4NET                          f_Logger.Warn(                              String.Format(                                  "UpdateNewsFeed(): Temporarily issue " +                                  "detected' retrying in {0} min..."'                                  NewsFeedRetryInterval.Minutes                              )'                              ex                          );  #endif                          NewsFeedTimer.Change(NewsFeedRetryInterval' NewsFeedUpdateInterval);                          break;                  }
Missing Default,Smuxi.Engine,ChatModel,C:\repos\meebey_smuxi\src\Engine\Chats\ChatModel.cs,InitMessageBuffer,The following switch statement is missing a default case: switch (persistency) {                  case MessageBufferPersistencyType.Volatile:                      MessageBuffer = new ListMessageBuffer();                      break;                  case Smuxi.Engine.MessageBufferPersistencyType.PersistentDb4o:                      try {                          var start = DateTime.UtcNow;                          MessageBuffer = new Db4oMessageBuffer(                              ProtocolManager.Session.Username'                              ProtocolManager.Protocol'                              ProtocolManager.NetworkID'                              ID                          );                          var stop = DateTime.UtcNow;  #if LOG4NET                          _Logger.DebugFormat(                              "InitMessageBuffer(): initializing " +                              "Db4oMessageBuffer({0}' {1}' {2}' {3}) " +                              "took: {4:0.00} ms"'                              ProtocolManager.Session.Username'                              ProtocolManager.Protocol'                              ProtocolManager.NetworkID'                              ID'                              (stop - start).TotalMilliseconds                          );  #endif                      } catch (Exception ex) {  #if LOG4NET                          _Logger.Error(                              "InitMessageBuffer(): Db4oMessageBuffer() threw " +                              "exception' falling back to memory backend!"' ex                          );  #endif                          MessageBuffer = new ListMessageBuffer();                            var builder = new MessageBuilder();                          builder.AppendEventPrefix();                          builder.AppendErrorText(                              _("Failed to open chat history for writing. " +                                "Your chat history will not be preserved. " +                                "Reason: {0}")'                              ex.Message                          );                          MessageBuffer.Add(builder.ToMessage());                      }                      break;                  case Smuxi.Engine.MessageBufferPersistencyType.Persistent:                  case Smuxi.Engine.MessageBufferPersistencyType.PersistentSqlite: {                      var start = DateTime.UtcNow;                      MessageBuffer = new SqliteMessageBuffer(                          ProtocolManager.Session.Username'                          ProtocolManager.Protocol'                          ProtocolManager.NetworkID'                          ID                      );                      var stop = DateTime.UtcNow;  #if LOG4NET                      _Logger.DebugFormat(                          "InitMessageBuffer(): initializing " +                          "SqliteMessageBuffer({0}' {1}' {2}' {3}) " +                          "took: {4:0.00} ms"'                          ProtocolManager.Session.Username'                          ProtocolManager.Protocol'                          ProtocolManager.NetworkID'                          ID'                          (stop - start).TotalMilliseconds                      );  #endif                  }                      break;              }
Missing Default,Smuxi.Engine,ServerModel,C:\repos\meebey_smuxi\src\Engine\Config\ServerModel.cs,ServerModel,The following switch statement is missing a default case: switch (e.Name) {                      case "_ServerID":                          ServerID = (string)e.Value;                          foundServerID = true;                          break;                      case "_Username":                          Username = (string) e.Value;                          break;                      case "_Nickname":                          Nickname = (string) e.Value;                          break;                      case "_Realname":                          Realname = (string) e.Value;                          break;                      // UseEncryption and ValidateServerCertificate were forgotten                      // when moving from autoserialization to manual serialization.                      // To prevent crashes when git users' updated engines receive a ServerModel                      // from an older git frontend' we manually check for the fields' existance                      case "<UseEncryption>k__BackingField":                          UseEncryption = (bool)e.Value;                          foundEncryption = true;                          break;                      case "<ValidateServerCertificate>k__BackingField":                          ValidateServerCertificate = (bool)e.Value;                          foundValidation = true;                          break;                      case "ClientCertificateFilename":                          ClientCertificateFilename = (string) e.Value;                          break;                  }
Missing Default,Smuxi.Engine,MessagePatternModel,C:\repos\meebey_smuxi\src\Engine\Config\MessagePatternModel.cs,Load,The following switch statement is missing a default case: switch (messagePartType.ToLower()) {                  case "url":                      MessagePartType = typeof(UrlMessagePartModel);                      break;                  case "image":                      MessagePartType = typeof(ImageMessagePartModel);                      break;              }
Missing Default,Smuxi.Engine.Dto,MessageDtoModelV1,C:\repos\meebey_smuxi\src\Engine\Messages\Dto\MessageDtoModelV1.cs,ToMessage,The following switch statement is missing a default case: switch (msgPart.Type) {                      case "Text":                          var textPart = new TextMessagePartModel() {                              ForegroundColor = msgPart.ForegroundColor'                              BackgroundColor = msgPart.BackgroundColor'                              Underline = msgPart.Underline'                              Bold = msgPart.Bold'                              Italic = msgPart.Italic'                              Text = msgPart.Text                          };                          part = textPart;                          break;                      case "URL":                          var urlPart = new UrlMessagePartModel() {                              Url = msgPart.Url'                              Text = msgPart.Text                          };                          part = urlPart;                          break;                      case "Image":                          var imagePart = new ImageMessagePartModel() {                              ImageFileName = msgPart.ImageFileName'                              AlternativeText = msgPart.AlternativeText                          };                          part = imagePart;                          break;                  }
