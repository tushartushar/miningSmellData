Implementation smell,Namespace,Class,File,Method,Description
Long Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,Command,The method has 277 lines of code.
Long Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The method has 180 lines of code.
Long Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,ApplyConfig,The method has 132 lines of code.
Long Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The method has 188 lines of code.
Long Method,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,AppendMessage,The method has 162 lines of code.
Complex Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,ApplyConfig,Cyclomatic complexity of the method is 14
Complex Method,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnQueryNotice,Cyclomatic complexity of the method is 11
Long Parameter List,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,IrcGroupPersonModel,The method has 6 parameters. Parameters: nickname' realname' ident' host' networkID' networkManager
Long Parameter List,Smuxi.Engine,IrcPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcPersonModel.cs,IrcPersonModel,The method has 6 parameters. Parameters: nickName' realName' ident' host' networkID' protocolManager
Long Statement,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The length of the statement  "                    // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server " is 143.
Long Statement,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The length of the statement  "                    // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server " is 140.
Long Statement,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The length of the statement  "                    // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server " is 151.
Long Statement,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,AppendMessage,The length of the statement  "                messageParts[i] = Regex.Replace(messageParts[i]' String.Format(pattern' @"\*")' (char)IrcControlCode.Bold      + "$1$2$1" + (char)IrcControlCode.Bold); " is 151.
Long Statement,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,AppendMessage,The length of the statement  "                messageParts[i] = Regex.Replace(messageParts[i]' String.Format(pattern'  "_")'  (char)IrcControlCode.Underline + "$1$2$1" + (char)IrcControlCode.Underline); " is 156.
Long Statement,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,AppendMessage,The length of the statement  "                messageParts[i] = Regex.Replace(messageParts[i]' String.Format(pattern'  "/")'  (char)IrcControlCode.Italic    + "$1$2$1" + (char)IrcControlCode.Italic); " is 153.
Complex Conditional,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnQueryNotice,The conditional expression  "targetChats.Count == 0 && e.Data.Nick != null &&                  String.Compare(e.Data.Nick' "NickServ"' true) != 0 &&                  String.Compare(e.Data.Nick' "ChanServ"' true) != 0"  is complex.
Empty Catch Block,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The method has an empty catch block.
Empty Catch Block,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnCtcpReply,The method has an empty catch block.
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (IsOwner) {                  status1 += 5;              } else if (IsChannelAdmin) {                  status1 += 4;              } else if (IsOp) {                  status1 += 3;              } else if (IsHalfop) {                  status1 += 2;              } else if (IsVoice) {                  status1 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (IsOwner) {                  status1 += 5;              } else if (IsChannelAdmin) {                  status1 += 4;              } else if (IsOp) {                  status1 += 3;              } else if (IsHalfop) {                  status1 += 2;              } else if (IsVoice) {                  status1 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (IsOwner) {                  status1 += 5;              } else if (IsChannelAdmin) {                  status1 += 4;              } else if (IsOp) {                  status1 += 3;              } else if (IsHalfop) {                  status1 += 2;              } else if (IsVoice) {                  status1 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (IsOwner) {                  status1 += 5;              } else if (IsChannelAdmin) {                  status1 += 4;              } else if (IsOp) {                  status1 += 3;              } else if (IsHalfop) {                  status1 += 2;              } else if (IsVoice) {                  status1 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (ircContact.IsOwner) {                  status2 += 5;              } else if (ircContact.IsChannelAdmin) {                  status2 += 4;              } else if (ircContact.IsOp) {                  status2 += 3;              } else if (ircContact.IsHalfop) {                  status2 += 2;              } else if (ircContact.IsVoice) {                  status2 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (ircContact.IsOwner) {                  status2 += 5;              } else if (ircContact.IsChannelAdmin) {                  status2 += 4;              } else if (ircContact.IsOp) {                  status2 += 3;              } else if (ircContact.IsHalfop) {                  status2 += 2;              } else if (ircContact.IsVoice) {                  status2 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (ircContact.IsOwner) {                  status2 += 5;              } else if (ircContact.IsChannelAdmin) {                  status2 += 4;              } else if (ircContact.IsOp) {                  status2 += 3;              } else if (ircContact.IsHalfop) {                  status2 += 2;              } else if (ircContact.IsVoice) {                  status2 += 1;              }
Magic Number,Smuxi.Engine,IrcGroupPersonModel,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcGroupPersonModel.cs,CompareTo,The following statement contains a magic number: if (ircContact.IsOwner) {                  status2 += 5;              } else if (ircContact.IsChannelAdmin) {                  status2 += 4;              } else if (ircContact.IsOp) {                  status2 += 3;              } else if (ircContact.IsHalfop) {                  status2 += 2;              } else if (ircContact.IsVoice) {                  status2 += 1;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,IrcProtocolManager,The following statement contains a magic number: NetworkChannelsMaxAge = TimeSpan.FromMinutes(5);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,IrcProtocolManager,The following statement contains a magic number: _IrcClient.AutoRetryDelay = 120;
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,IrcProtocolManager,The following statement contains a magic number: _IrcClient.SendDelay        = 250;
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,ToString,The following statement contains a magic number: if (IsConnected) {                  if (_IrcClient.IsAway) {                      result += " (" + _("away") + ")";                  }                  if (_IrcClient.Lag > TimeSpan.FromSeconds(5)) {                      result += String.Format(" ({0})"'                                      String.Format(                                          // TRANSLATOR: {0} is the amount of seconds                                          _("lag: {0} seconds")'                                          (int) _IrcClient.Lag.TotalSeconds                                      )                                );                  }              } else {                  result += " (" + _("not connected") + ")";              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandFallback,The following statement contains a magic number: if (cmd.DataArray.Length <= 3) {                  parameters = cmd.Parameter;              } else {                  parameters = String.Format("{0} :{1}"'                      cmd.DataArray[1]'                      String.Join(" "'                          cmd.DataArray' 2'                          cmd.DataArray.Length - 2));              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandFallback,The following statement contains a magic number: if (cmd.DataArray.Length <= 3) {                  parameters = cmd.Parameter;              } else {                  parameters = String.Format("{0} :{1}"'                      cmd.DataArray[1]'                      String.Join(" "'                          cmd.DataArray' 2'                          cmd.DataArray.Length - 2));              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandFallback,The following statement contains a magic number: if (cmd.DataArray.Length <= 3) {                  parameters = cmd.Parameter;              } else {                  parameters = String.Format("{0} :{1}"'                      cmd.DataArray[1]'                      String.Join(" "'                          cmd.DataArray' 2'                          cmd.DataArray.Length - 2));              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  server.Hostname = cd.DataArray[2];              } else {                  server.Hostname = "localhost";              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  server.Hostname = cd.DataArray[2];              } else {                  server.Hostname = "localhost";              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  var port = cd.DataArray[3];                  var ssl = port.StartsWith("+");                  if (ssl) {                      server.UseEncryption = true;                      port = port.Substring(1);                  }                  try {                      server.Port = Int32.Parse(port);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("Invalid port: {0}")'                                         cd.DataArray[3]);                      Session.AddMessageToFrontend(fm' Chat' builder.ToMessage());                      return;                  }              } else {                  server.Port = 6667;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  var port = cd.DataArray[3];                  var ssl = port.StartsWith("+");                  if (ssl) {                      server.UseEncryption = true;                      port = port.Substring(1);                  }                  try {                      server.Port = Int32.Parse(port);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("Invalid port: {0}")'                                         cd.DataArray[3]);                      Session.AddMessageToFrontend(fm' Chat' builder.ToMessage());                      return;                  }              } else {                  server.Port = 6667;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  var port = cd.DataArray[3];                  var ssl = port.StartsWith("+");                  if (ssl) {                      server.UseEncryption = true;                      port = port.Substring(1);                  }                  try {                      server.Port = Int32.Parse(port);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("Invalid port: {0}")'                                         cd.DataArray[3]);                      Session.AddMessageToFrontend(fm' Chat' builder.ToMessage());                      return;                  }              } else {                  server.Port = 6667;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  var port = cd.DataArray[3];                  var ssl = port.StartsWith("+");                  if (ssl) {                      server.UseEncryption = true;                      port = port.Substring(1);                  }                  try {                      server.Port = Int32.Parse(port);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("Invalid port: {0}")'                                         cd.DataArray[3]);                      Session.AddMessageToFrontend(fm' Chat' builder.ToMessage());                      return;                  }              } else {                  server.Port = 6667;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 5) {                  server.Password = cd.DataArray[4];              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 5) {                  server.Password = cd.DataArray[4];              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 6) {                  var nicks = new List<string>(1);                  nicks.Add(cd.DataArray[5]);                  server.Nicknames = nicks;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 6) {                  var nicks = new List<string>(1);                  nicks.Add(cd.DataArray[5]);                  server.Nicknames = nicks;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length < 2 || cd.DataArray[1].Length == 0) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length > 2) {                  keys = cd.DataArray[2].Split(''');              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length > 2) {                  keys = cd.DataArray[2].Split(''');              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: foreach (string channel in channels) {                  // HACK: copy channel from foreach() into our scope                  var chan = channel;                  var chanType = chan[0];                  if (!ChannelTypes.Contains(chanType.ToString())) {                      chan = "#" + chan;                  }                    string key = keys != null && keys.Length > i ? keys[i] : null;                  var chat = GetChat(chan' ChatType.Group);                  if (chat != null && chat.IsEnabled) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(                          _("Already joined to channel: {0}." +                            " Type /window {0} to switch to it.")'                          channel                      );                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      continue;                  }                    lock (_QueuedChannelJoinList) {                      _QueuedChannelJoinList.Add(channel);                  }                    _ChannelJoinQueue.Queue(delegate {                      try {                          int count = 0;                          string activeChans = null;                          lock (_ActiveChannelJoinList) {                              count = _ActiveChannelJoinList.Count;                              if (count > 0) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                          }                          if (count > 0) {                              string queuedChans;                              lock (_QueuedChannelJoinList) {                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(                                  _("Active joins: {0} - Queued joins: {1}")'                                  activeChans' queuedChans                              );                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());    #if LOG4NET                              _Logger.Debug("CommandJoin(): waiting to join: " + chan);  #endif                              _ActiveChannelJoinHandle.WaitOne();                                lock (_ActiveChannelJoinList) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              // TRANSLATORS: final message will look like this:                              // Joining: #chan1 - Remaining active joins: #chan2 / queued joins: #chan3                              string msg = String.Format(_("Joining: {0}")' chan);                              if (activeChans.Length > 0 || queuedChans.Length > 0) {                                  msg += String.Format(" - {0} "' _("Remaining"));                                                                }                              if (activeChans.Length > 0) {                                  msg += String.Format(                                      _("active joins: {0}")'                                      activeChans                                  );                              }                              if (queuedChans.Length > 0) {                                  if (activeChans.Length > 0) {                                      msg += " / ";                                  }                                  msg += String.Format(                                      _("queued joins: {0}")'                                      queuedChans                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix().AppendText(msg);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          } else {                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(_("Joining: {0}")' chan);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          }  #if LOG4NET                          _Logger.Debug("CommandJoin(): joining: " + chan);  #endif                          // we have a slot' show time!                          if (key == null) {                              _IrcClient.RfcJoin(chan);                          } else {                              _IrcClient.RfcJoin(chan' key);                              lock (ChannelKeys) {                                  ChannelKeys[chan] = key;                              }                          }                            // Some IRC networks are very kick happy and thus need                          // some artificial delay between JOINs.                          // We know our friendly networks though :)                          string network = _Network == null ? String.Empty : _Network.ToLower();                          switch (network) {                              case "efnet":                              case "freenode":                              case "gimpnet":                              case "ircnet":                              case "oftc":                                  // give the IRCd some time to actually sent us a JOIN                                  // confirmation' else we will just hammer all channels                                  // in a single row                                  _ActiveChannelJoinHandle.WaitOne(2 * 1000' false);                                  break;                              default:                                  // delay the queue for some extra seconds so new join                                  // attempts will not happen too early as some IRCds                                  // limit this and disconnect us if we are not brave                                  Thread.Sleep(2000);                                  break;                          }                      } catch (ThreadAbortException ex) {  #if LOG4NET                          _Logger.Warn("ThreadAbortException when trying to join channel: "                                        + chan' ex);  #endif                      } catch (Exception ex) {  #if LOG4NET                          _Logger.Error("Exception when trying to join channel: "                                        + chan' ex);  #endif                      }                  });                    i++;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: foreach (string channel in channels) {                  // HACK: copy channel from foreach() into our scope                  var chan = channel;                  var chanType = chan[0];                  if (!ChannelTypes.Contains(chanType.ToString())) {                      chan = "#" + chan;                  }                    string key = keys != null && keys.Length > i ? keys[i] : null;                  var chat = GetChat(chan' ChatType.Group);                  if (chat != null && chat.IsEnabled) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(                          _("Already joined to channel: {0}." +                            " Type /window {0} to switch to it.")'                          channel                      );                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      continue;                  }                    lock (_QueuedChannelJoinList) {                      _QueuedChannelJoinList.Add(channel);                  }                    _ChannelJoinQueue.Queue(delegate {                      try {                          int count = 0;                          string activeChans = null;                          lock (_ActiveChannelJoinList) {                              count = _ActiveChannelJoinList.Count;                              if (count > 0) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                          }                          if (count > 0) {                              string queuedChans;                              lock (_QueuedChannelJoinList) {                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(                                  _("Active joins: {0} - Queued joins: {1}")'                                  activeChans' queuedChans                              );                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());    #if LOG4NET                              _Logger.Debug("CommandJoin(): waiting to join: " + chan);  #endif                              _ActiveChannelJoinHandle.WaitOne();                                lock (_ActiveChannelJoinList) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              // TRANSLATORS: final message will look like this:                              // Joining: #chan1 - Remaining active joins: #chan2 / queued joins: #chan3                              string msg = String.Format(_("Joining: {0}")' chan);                              if (activeChans.Length > 0 || queuedChans.Length > 0) {                                  msg += String.Format(" - {0} "' _("Remaining"));                                                                }                              if (activeChans.Length > 0) {                                  msg += String.Format(                                      _("active joins: {0}")'                                      activeChans                                  );                              }                              if (queuedChans.Length > 0) {                                  if (activeChans.Length > 0) {                                      msg += " / ";                                  }                                  msg += String.Format(                                      _("queued joins: {0}")'                                      queuedChans                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix().AppendText(msg);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          } else {                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(_("Joining: {0}")' chan);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          }  #if LOG4NET                          _Logger.Debug("CommandJoin(): joining: " + chan);  #endif                          // we have a slot' show time!                          if (key == null) {                              _IrcClient.RfcJoin(chan);                          } else {                              _IrcClient.RfcJoin(chan' key);                              lock (ChannelKeys) {                                  ChannelKeys[chan] = key;                              }                          }                            // Some IRC networks are very kick happy and thus need                          // some artificial delay between JOINs.                          // We know our friendly networks though :)                          string network = _Network == null ? String.Empty : _Network.ToLower();                          switch (network) {                              case "efnet":                              case "freenode":                              case "gimpnet":                              case "ircnet":                              case "oftc":                                  // give the IRCd some time to actually sent us a JOIN                                  // confirmation' else we will just hammer all channels                                  // in a single row                                  _ActiveChannelJoinHandle.WaitOne(2 * 1000' false);                                  break;                              default:                                  // delay the queue for some extra seconds so new join                                  // attempts will not happen too early as some IRCds                                  // limit this and disconnect us if we are not brave                                  Thread.Sleep(2000);                                  break;                          }                      } catch (ThreadAbortException ex) {  #if LOG4NET                          _Logger.Warn("ThreadAbortException when trying to join channel: "                                        + chan' ex);  #endif                      } catch (Exception ex) {  #if LOG4NET                          _Logger.Error("Exception when trying to join channel: "                                        + chan' ex);  #endif                      }                  });                    i++;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandJoin,The following statement contains a magic number: foreach (string channel in channels) {                  // HACK: copy channel from foreach() into our scope                  var chan = channel;                  var chanType = chan[0];                  if (!ChannelTypes.Contains(chanType.ToString())) {                      chan = "#" + chan;                  }                    string key = keys != null && keys.Length > i ? keys[i] : null;                  var chat = GetChat(chan' ChatType.Group);                  if (chat != null && chat.IsEnabled) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(                          _("Already joined to channel: {0}." +                            " Type /window {0} to switch to it.")'                          channel                      );                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      continue;                  }                    lock (_QueuedChannelJoinList) {                      _QueuedChannelJoinList.Add(channel);                  }                    _ChannelJoinQueue.Queue(delegate {                      try {                          int count = 0;                          string activeChans = null;                          lock (_ActiveChannelJoinList) {                              count = _ActiveChannelJoinList.Count;                              if (count > 0) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                          }                          if (count > 0) {                              string queuedChans;                              lock (_QueuedChannelJoinList) {                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(                                  _("Active joins: {0} - Queued joins: {1}")'                                  activeChans' queuedChans                              );                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());    #if LOG4NET                              _Logger.Debug("CommandJoin(): waiting to join: " + chan);  #endif                              _ActiveChannelJoinHandle.WaitOne();                                lock (_ActiveChannelJoinList) {                                  activeChans = String.Join(                                      " "'  _ActiveChannelJoinList.ToArray()                                  );                              }                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                                  queuedChans = String.Join(                                      " "'  _QueuedChannelJoinList.ToArray()                                  );                              }                              // TRANSLATORS: final message will look like this:                              // Joining: #chan1 - Remaining active joins: #chan2 / queued joins: #chan3                              string msg = String.Format(_("Joining: {0}")' chan);                              if (activeChans.Length > 0 || queuedChans.Length > 0) {                                  msg += String.Format(" - {0} "' _("Remaining"));                                                                }                              if (activeChans.Length > 0) {                                  msg += String.Format(                                      _("active joins: {0}")'                                      activeChans                                  );                              }                              if (queuedChans.Length > 0) {                                  if (activeChans.Length > 0) {                                      msg += " / ";                                  }                                  msg += String.Format(                                      _("queued joins: {0}")'                                      queuedChans                                  );                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix().AppendText(msg);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          } else {                              lock (_QueuedChannelJoinList) {                                  _QueuedChannelJoinList.Remove(chan);                              }                              builder = CreateMessageBuilder();                              builder.AppendEventPrefix();                              builder.AppendText(_("Joining: {0}")' chan);                              Session.AddMessageToFrontend(cd.FrontendManager' Chat'                                                           builder.ToMessage());                          }  #if LOG4NET                          _Logger.Debug("CommandJoin(): joining: " + chan);  #endif                          // we have a slot' show time!                          if (key == null) {                              _IrcClient.RfcJoin(chan);                          } else {                              _IrcClient.RfcJoin(chan' key);                              lock (ChannelKeys) {                                  ChannelKeys[chan] = key;                              }                          }                            // Some IRC networks are very kick happy and thus need                          // some artificial delay between JOINs.                          // We know our friendly networks though :)                          string network = _Network == null ? String.Empty : _Network.ToLower();                          switch (network) {                              case "efnet":                              case "freenode":                              case "gimpnet":                              case "ircnet":                              case "oftc":                                  // give the IRCd some time to actually sent us a JOIN                                  // confirmation' else we will just hammer all channels                                  // in a single row                                  _ActiveChannelJoinHandle.WaitOne(2 * 1000' false);                                  break;                              default:                                  // delay the queue for some extra seconds so new join                                  // attempts will not happen too early as some IRCds                                  // limit this and disconnect us if we are not brave                                  Thread.Sleep(2000);                                  break;                          }                      } catch (ThreadAbortException ex) {  #if LOG4NET                          _Logger.Warn("ThreadAbortException when trying to join channel: "                                        + chan' ex);  #endif                      } catch (Exception ex) {  #if LOG4NET                          _Logger.Error("Exception when trying to join channel: "                                        + chan' ex);  #endif                      }                  });                    i++;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessage,The following statement contains a magic number: if ((cd.DataArray.Length >= 2) &&                  (cd.DataArray[1].Length >= 1)) {                  var chanType = cd.DataArray[1][0].ToString();                  if (ChannelTypes.Contains(chanType)) {                      // seems to be a channel                      CommandMessageChannel(cd);                  } else {                      // seems to be a nick                      CommandMessageNick(cd);                  }              } else {                  NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string nickname = cd.DataArray[1];                  chat = GetChat(nickname' ChatType.Person);                  if (chat == null) {                      var person = CreatePerson(nickname);                      chat = Session.CreatePersonChat(person' nickname'                                                      nickname' this);                      Session.AddChat(chat);                      if (Session.IsLocal) {                          Session.SyncChat(chat);                      } else {                          // HACK: lower probability of sync race condition swallowing                          // messages' see: https://www.smuxi.org/issues/show/634                          ThreadPool.QueueUserWorkItem(delegate {                              Thread.Sleep(1000);                              Session.SyncChat(chat);                          });                      }                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string nickname = cd.DataArray[1];                  chat = GetChat(nickname' ChatType.Person);                  if (chat == null) {                      var person = CreatePerson(nickname);                      chat = Session.CreatePersonChat(person' nickname'                                                      nickname' this);                      Session.AddChat(chat);                      if (Session.IsLocal) {                          Session.SyncChat(chat);                      } else {                          // HACK: lower probability of sync race condition swallowing                          // messages' see: https://www.smuxi.org/issues/show/634                          ThreadPool.QueueUserWorkItem(delegate {                              Thread.Sleep(1000);                              Session.SyncChat(chat);                          });                      }                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  // ignore empty messages                  if (message.TrimEnd(' ').Length > 0) {                      _Say(chat' message);                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  // ignore empty messages                  if (message.TrimEnd(' ').Length > 0) {                      _Say(chat' message);                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  // ignore empty messages                  if (message.TrimEnd(' ').Length > 0) {                      _Say(chat' message);                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageChannel,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  string channelname = cd.DataArray[1];                    ChatModel chat = GetChat(channelname' ChatType.Group);                  if (chat == null) {                      // server chat as fallback if we are not joined                      var builder = CreateMessageBuilder();                      builder.AppendText("<{0}:{1}> "' _IrcClient.Nickname'                                         channelname);                      builder.AppendMessage(message);                      Session.AddMessageToChat(Chat' builder.ToMessage()' true);                      _IrcClient.SendMessage(SendType.Message' channelname' message);                  } else {                       _Say(chat' message);                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageChannel,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  string channelname = cd.DataArray[1];                    ChatModel chat = GetChat(channelname' ChatType.Group);                  if (chat == null) {                      // server chat as fallback if we are not joined                      var builder = CreateMessageBuilder();                      builder.AppendText("<{0}:{1}> "' _IrcClient.Nickname'                                         channelname);                      builder.AppendMessage(message);                      Session.AddMessageToChat(Chat' builder.ToMessage()' true);                      _IrcClient.SendMessage(SendType.Message' channelname' message);                  } else {                       _Say(chat' message);                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageChannel,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  string channelname = cd.DataArray[1];                    ChatModel chat = GetChat(channelname' ChatType.Group);                  if (chat == null) {                      // server chat as fallback if we are not joined                      var builder = CreateMessageBuilder();                      builder.AppendText("<{0}:{1}> "' _IrcClient.Nickname'                                         channelname);                      builder.AppendMessage(message);                      Session.AddMessageToChat(Chat' builder.ToMessage()' true);                      _IrcClient.SendMessage(SendType.Message' channelname' message);                  } else {                       _Say(chat' message);                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageNick,The following statement contains a magic number: if (cmd.DataArray.Length < 3) {                  NotEnoughParameters(cmd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageNick,The following statement contains a magic number: string message = String.Join(" "' cmd.DataArray' 2'                                           cmd.DataArray.Length - 2);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMessageNick,The following statement contains a magic number: string message = String.Join(" "' cmd.DataArray' 2'                                           cmd.DataArray.Length - 2);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,SplitMessage,The following statement contains a magic number: do {                  var lineByteLength = GetProtocolMessageLength(command' target' message);                  if (lineByteLength <= 512) {                      if (line > 0) {                          // remove leading spaces as we are a new line                          messages.Add(message.TrimStart(new char[] {' '}));                      } else {                          messages.Add(message);                      }                      break;                  }                  line++;                    // UTF8 can have multi-byte chars' thus we need to remove char                  // by char and see when it fits into an IRC message                  var chunkBuilder = new StringBuilder(message);                  var chunkByteLength = lineByteLength;                  while (chunkByteLength > 512) {                      chunkBuilder.Length--;                      chunkByteLength = GetProtocolMessageLength(                          command' target' chunkBuilder.ToString()                      );                  }                  var chunk = chunkBuilder.ToString();                  string nextChar = message.Substring(chunk.Length' 1);                  if (nextChar != " ") {                      // we split in the middle of a word' split it better!                      int lastWordPos = chunk.LastIndexOf(" ");                      if (lastWordPos > 0) {                          // the chunk has to get smaller' else we run into an                          // endless loop                          chunk = chunk.Substring(0' lastWordPos);                      }                  }                  // remove leading spaces as we are a new line                  messages.Add(chunk.TrimStart(new char[] {' '}));                  message = message.Substring(chunk.Length);              } while (true);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,SplitMessage,The following statement contains a magic number: do {                  var lineByteLength = GetProtocolMessageLength(command' target' message);                  if (lineByteLength <= 512) {                      if (line > 0) {                          // remove leading spaces as we are a new line                          messages.Add(message.TrimStart(new char[] {' '}));                      } else {                          messages.Add(message);                      }                      break;                  }                  line++;                    // UTF8 can have multi-byte chars' thus we need to remove char                  // by char and see when it fits into an IRC message                  var chunkBuilder = new StringBuilder(message);                  var chunkByteLength = lineByteLength;                  while (chunkByteLength > 512) {                      chunkBuilder.Length--;                      chunkByteLength = GetProtocolMessageLength(                          command' target' chunkBuilder.ToString()                      );                  }                  var chunk = chunkBuilder.ToString();                  string nextChar = message.Substring(chunk.Length' 1);                  if (nextChar != " ") {                      // we split in the middle of a word' split it better!                      int lastWordPos = chunk.LastIndexOf(" ");                      if (lastWordPos > 0) {                          // the chunk has to get smaller' else we run into an                          // endless loop                          chunk = chunk.Substring(0' lastWordPos);                      }                  }                  // remove leading spaces as we are a new line                  messages.Add(chunk.TrimStart(new char[] {' '}));                  message = message.Substring(chunk.Length);              } while (true);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandAllMessage,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandAllNotice,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandAllMe,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandPart,The following statement contains a magic number: if ((cd.DataArray.Length >= 2) &&                  (cd.DataArray[1].Length >= 1)) {                  // have to guess here if we got a channel passed or not                  var chanType = cd.DataArray[1][0].ToString();                  if (ChannelTypes.Contains(chanType)) {                      // seems to be a channel                      string[] channels = cd.DataArray[1].Split(new char[] {'''});                      string message = null;                      if  (cd.DataArray.Length >= 3) {                          message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                      foreach (string channel in channels) {                          if (message != null) {                              _IrcClient.RfcPart(channel' message);                          } else {                              _IrcClient.RfcPart(channel);                          }                      }                  } else {                      // sems to be only a part message                      _IrcClient.RfcPart(chat.ID' cd.Parameter);                  }              } else {                  _IrcClient.RfcPart(chat.ID);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandPart,The following statement contains a magic number: if ((cd.DataArray.Length >= 2) &&                  (cd.DataArray[1].Length >= 1)) {                  // have to guess here if we got a channel passed or not                  var chanType = cd.DataArray[1][0].ToString();                  if (ChannelTypes.Contains(chanType)) {                      // seems to be a channel                      string[] channels = cd.DataArray[1].Split(new char[] {'''});                      string message = null;                      if  (cd.DataArray.Length >= 3) {                          message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                      foreach (string channel in channels) {                          if (message != null) {                              _IrcClient.RfcPart(channel' message);                          } else {                              _IrcClient.RfcPart(channel);                          }                      }                  } else {                      // sems to be only a part message                      _IrcClient.RfcPart(chat.ID' cd.Parameter);                  }              } else {                  _IrcClient.RfcPart(chat.ID);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandPart,The following statement contains a magic number: if ((cd.DataArray.Length >= 2) &&                  (cd.DataArray[1].Length >= 1)) {                  // have to guess here if we got a channel passed or not                  var chanType = cd.DataArray[1][0].ToString();                  if (ChannelTypes.Contains(chanType)) {                      // seems to be a channel                      string[] channels = cd.DataArray[1].Split(new char[] {'''});                      string message = null;                      if  (cd.DataArray.Length >= 3) {                          message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                      foreach (string channel in channels) {                          if (message != null) {                              _IrcClient.RfcPart(channel' message);                          } else {                              _IrcClient.RfcPart(channel);                          }                      }                  } else {                      // sems to be only a part message                      _IrcClient.RfcPart(chat.ID' cd.Parameter);                  }              } else {                  _IrcClient.RfcPart(chat.ID);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandPart,The following statement contains a magic number: if ((cd.DataArray.Length >= 2) &&                  (cd.DataArray[1].Length >= 1)) {                  // have to guess here if we got a channel passed or not                  var chanType = cd.DataArray[1][0].ToString();                  if (ChannelTypes.Contains(chanType)) {                      // seems to be a channel                      string[] channels = cd.DataArray[1].Split(new char[] {'''});                      string message = null;                      if  (cd.DataArray.Length >= 3) {                          message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                      foreach (string channel in channels) {                          if (message != null) {                              _IrcClient.RfcPart(channel' message);                          } else {                              _IrcClient.RfcPart(channel);                          }                      }                  } else {                      // sems to be only a part message                      _IrcClient.RfcPart(chat.ID' cd.Parameter);                  }              } else {                  _IrcClient.RfcPart(chat.ID);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandAway,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  SetPresenceStatus(PresenceStatus.Away' cd.Parameter);              } else {                  SetPresenceStatus(PresenceStatus.Online' null);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOper,The following statement contains a magic number: if (cd.DataArray.Length < 3) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOper,The following statement contains a magic number: _IrcClient.RfcOper(cd.DataArray[1]' cd.DataArray[2]);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandCtcp,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string destination = cd.DataArray[1];                  string command = cd.DataArray[2].ToUpper();                  string parameters = String.Empty;                  if (cd.DataArray.Length >= 4) {                      parameters = String.Join(" "' cd.DataArray' 3' cd.DataArray.Length-3);                  }                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' command'                                     parameters);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' command + " " + parameters);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandCtcp,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string destination = cd.DataArray[1];                  string command = cd.DataArray[2].ToUpper();                  string parameters = String.Empty;                  if (cd.DataArray.Length >= 4) {                      parameters = String.Join(" "' cd.DataArray' 3' cd.DataArray.Length-3);                  }                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' command'                                     parameters);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' command + " " + parameters);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandCtcp,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string destination = cd.DataArray[1];                  string command = cd.DataArray[2].ToUpper();                  string parameters = String.Empty;                  if (cd.DataArray.Length >= 4) {                      parameters = String.Join(" "' cd.DataArray' 3' cd.DataArray.Length-3);                  }                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' command'                                     parameters);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' command + " " + parameters);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandCtcp,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string destination = cd.DataArray[1];                  string command = cd.DataArray[2].ToUpper();                  string parameters = String.Empty;                  if (cd.DataArray.Length >= 4) {                      parameters = String.Join(" "' cd.DataArray' 3' cd.DataArray.Length-3);                  }                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' command'                                     parameters);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' command + " " + parameters);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandCtcp,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string destination = cd.DataArray[1];                  string command = cd.DataArray[2].ToUpper();                  string parameters = String.Empty;                  if (cd.DataArray.Length >= 4) {                      parameters = String.Join(" "' cd.DataArray' 3' cd.DataArray.Length-3);                  }                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' command'                                     parameters);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' command + " " + parameters);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandPing,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string destination = cd.DataArray[1];                  string timestamp = DateTime.Now.ToFileTime().ToString();                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1} {2}"' destination' "PING"'                                     timestamp);                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' "PING " + timestamp);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandTime,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string destination = cd.DataArray[1];                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1}"' destination' "TIME");                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' "TIME");              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandVersion,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string destination = cd.DataArray[1];                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1}"' destination' "VERSION");                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' "VERSION");              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandFinger,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string destination = cd.DataArray[1];                  var builder = CreateMessageBuilder();                  builder.AppendText("[ctcp({0})] {1}"' destination' "FINGER");                  Session.AddMessageToChat(Chat' builder.ToMessage());                  _IrcClient.SendMessage(SendType.CtcpRequest' destination' "FINGER");              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandWho,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandWhoIs,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  _IrcClient.RfcWhois(cd.Parameter);              } else {                  if (cd.Chat is PersonChatModel) {                      var pchat = (PersonChatModel) cd.Chat;                      _IrcClient.RfcWhois(pchat.Person.ID);                  } else {                      _NotEnoughParameters(cd);                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandWhoWas,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  _IrcClient.RfcWhowas(cd.DataArray[1]);              } else {                  if (cd.Chat is PersonChatModel) {                      var pchat = (PersonChatModel) cd.Chat;                      _IrcClient.RfcWhowas(pchat.Person.ID);                  } else {                      _NotEnoughParameters(cd);                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandTopic,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  _IrcClient.RfcTopic(channel' cd.Parameter);              } else {                  var groupChat = (GroupChatModel) Session.GetChat(                      channel' ChatType.Group' this                  );                  if (groupChat != null) {                      var topic = groupChat.Topic;                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      if (topic != null && !topic.IsEmpty) {                          builder.AppendFormat(_("Topic for {0}: {1}")' channel' topic);                      } else {                          builder.AppendText(_("No topic set for {0}")' channel);                      }                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOp,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Op(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Op(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOp,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Op(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Op(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Deop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Deop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Deop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Deop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandVoice,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Voice(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Voice(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandVoice,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Voice(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Voice(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDevoice,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Devoice(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Devoice(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDevoice,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Devoice(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Devoice(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOwner,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Owner(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Owner(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandOwner,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Owner(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Owner(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeowner,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Deowner(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Deowner(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeowner,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Deowner(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Deowner(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandChanAdmin,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.ChanAdmin(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.ChanAdmin(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandChanAdmin,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.ChanAdmin(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.ChanAdmin(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeChanAdmin,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.DeChanAdmin(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.DeChanAdmin(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDeChanAdmin,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.DeChanAdmin(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.DeChanAdmin(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandHalfop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Halfop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Halfop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandHalfop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Halfop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Halfop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDehalfop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Dehalfop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Dehalfop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandDehalfop,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Dehalfop(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Dehalfop(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandBan,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.Ban(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Ban(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetBanList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("ban")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No bans in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandBan,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.Ban(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Ban(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetBanList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("ban")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No bans in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnban,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Unban(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Unban(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnban,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.Unban(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.Unban(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandBanException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.BanException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.BanException(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetBanExceptionList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("ban exception")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No ban exceptions in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandBanException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.BanException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.BanException(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetBanExceptionList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("ban exception")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No ban exceptions in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnBanException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.UnBanException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.UnBanException(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnBanException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.UnBanException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.UnBanException(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandInviteException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.InviteException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.InviteException(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetInviteExceptionList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("invite exception")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No invite exceptions in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandInviteException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  // TODO: use a smart mask by default                  _IrcClient.InviteException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.InviteException(channel' candidates);              } else {                  IList<BanInfo> infos = _IrcClient.GetInviteExceptionList(channel);                  int i = 1;                  foreach (BanInfo info in infos) {                      string msg = String.Format(                          "{0} - {1}: {2} {3}"'                          i++'                          info.Channel'                          _("invite exception")'                          info.Mask                      );                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(msg);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }                  if (infos.Count == 0) {                      builder = CreateMessageBuilder();                      builder.AppendEventPrefix();                      builder.AppendText(_("No invite exceptions in channel")' channel);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnInviteException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.UnInviteException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.UnInviteException(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandUnInviteException,The following statement contains a magic number: if (cd.DataArray.Length == 2) {                  _IrcClient.UnInviteException(channel' cd.Parameter);              } else if (cd.DataArray.Length > 2) {                  string[] candidates = cd.Parameter.TrimEnd().Split(new char[] {' '});                  _IrcClient.UnInviteException(channel' candidates);              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKick,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string[] candidates = cd.DataArray[1].Split(new char[] {'''});                  if (cd.DataArray.Length >= 3) {                      string reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                        foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick' reason);                      }                  } else {                      foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick);                      }                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKick,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string[] candidates = cd.DataArray[1].Split(new char[] {'''});                  if (cd.DataArray.Length >= 3) {                      string reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                        foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick' reason);                      }                  } else {                      foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick);                      }                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKick,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string[] candidates = cd.DataArray[1].Split(new char[] {'''});                  if (cd.DataArray.Length >= 3) {                      string reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                        foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick' reason);                      }                  } else {                      foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick);                      }                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKick,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  string[] candidates = cd.DataArray[1].Split(new char[] {'''});                  if (cd.DataArray.Length >= 3) {                      string reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                        foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick' reason);                      }                  } else {                      foreach (string nick in candidates) {                          _IrcClient.RfcKick(channel' nick);                      }                  }              } else {                  _NotEnoughParameters(cd);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKickban,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKickban,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKickban,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandKickban,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  reason = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMode,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  // /mode #smuxi                  // /mode meebey                  var param1 = cd.DataArray[1];                  if (param1.StartsWith("+") || param1.StartsWith("-")) {                      // no target given' this is the mode already                      // /mode +i (on server)                      // /mode +b (on channel)                      // /mode +b *!*@foo (on channel)                      if (cd.Chat.ChatType == ChatType.Group) {                          target = cd.Chat.ID;                      } else {                          target = _IrcClient.Nickname;                      }                      mode = cd.Parameter;                  } else {                      target = param1;                      if (cd.DataArray.Length >= 3) {                          // /mode #smuxi +b *!*@foo                          // /mode #smuxi +b                          // /mode meebey +i                          mode = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                  }              } else {                  // /mode (on server)                  // /mode (on channel)                  if (cd.Chat.ChatType == ChatType.Group) {                      target = cd.Chat.ID;                  } else {                      target = _IrcClient.Nickname;                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMode,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  // /mode #smuxi                  // /mode meebey                  var param1 = cd.DataArray[1];                  if (param1.StartsWith("+") || param1.StartsWith("-")) {                      // no target given' this is the mode already                      // /mode +i (on server)                      // /mode +b (on channel)                      // /mode +b *!*@foo (on channel)                      if (cd.Chat.ChatType == ChatType.Group) {                          target = cd.Chat.ID;                      } else {                          target = _IrcClient.Nickname;                      }                      mode = cd.Parameter;                  } else {                      target = param1;                      if (cd.DataArray.Length >= 3) {                          // /mode #smuxi +b *!*@foo                          // /mode #smuxi +b                          // /mode meebey +i                          mode = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                  }              } else {                  // /mode (on server)                  // /mode (on channel)                  if (cd.Chat.ChatType == ChatType.Group) {                      target = cd.Chat.ID;                  } else {                      target = _IrcClient.Nickname;                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMode,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  // /mode #smuxi                  // /mode meebey                  var param1 = cd.DataArray[1];                  if (param1.StartsWith("+") || param1.StartsWith("-")) {                      // no target given' this is the mode already                      // /mode +i (on server)                      // /mode +b (on channel)                      // /mode +b *!*@foo (on channel)                      if (cd.Chat.ChatType == ChatType.Group) {                          target = cd.Chat.ID;                      } else {                          target = _IrcClient.Nickname;                      }                      mode = cd.Parameter;                  } else {                      target = param1;                      if (cd.DataArray.Length >= 3) {                          // /mode #smuxi +b *!*@foo                          // /mode #smuxi +b                          // /mode meebey +i                          mode = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                  }              } else {                  // /mode (on server)                  // /mode (on channel)                  if (cd.Chat.ChatType == ChatType.Group) {                      target = cd.Chat.ID;                  } else {                      target = _IrcClient.Nickname;                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMode,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  // /mode #smuxi                  // /mode meebey                  var param1 = cd.DataArray[1];                  if (param1.StartsWith("+") || param1.StartsWith("-")) {                      // no target given' this is the mode already                      // /mode +i (on server)                      // /mode +b (on channel)                      // /mode +b *!*@foo (on channel)                      if (cd.Chat.ChatType == ChatType.Group) {                          target = cd.Chat.ID;                      } else {                          target = _IrcClient.Nickname;                      }                      mode = cd.Parameter;                  } else {                      target = param1;                      if (cd.DataArray.Length >= 3) {                          // /mode #smuxi +b *!*@foo                          // /mode #smuxi +b                          // /mode meebey +i                          mode = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                      }                  }              } else {                  // /mode (on server)                  // /mode (on channel)                  if (cd.Chat.ChatType == ChatType.Group) {                      target = cd.Chat.ID;                  } else {                      target = _IrcClient.Nickname;                  }              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  channel = cd.DataArray[2];              } else {                  channel = cd.Chat.ID;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  channel = cd.DataArray[2];              } else {                  channel = cd.Chat.ID;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandMe,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  _NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandNotice,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string target = cd.DataArray[1];                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                    _IrcClient.SendMessage(SendType.Notice' target' message);                                    var chat = GetChat(target' ChatType.Group);                  if (chat == null) {                      // wasn't a channel but maybe a query                      chat = GetChat(target' ChatType.Person);                  }                  if (chat == null) {                      chat = _NetworkChat;                  }                  var msg = CreateMessageBuilder().                      AppendText("[notice({0})] "' target).                      AppendMessage(message).                      ToMessage();                  Session.AddMessageToChat(chat' msg' true);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandNotice,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string target = cd.DataArray[1];                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                    _IrcClient.SendMessage(SendType.Notice' target' message);                                    var chat = GetChat(target' ChatType.Group);                  if (chat == null) {                      // wasn't a channel but maybe a query                      chat = GetChat(target' ChatType.Person);                  }                  if (chat == null) {                      chat = _NetworkChat;                  }                  var msg = CreateMessageBuilder().                      AppendText("[notice({0})] "' target).                      AppendMessage(message).                      ToMessage();                  Session.AddMessageToChat(chat' msg' true);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandNotice,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  string target = cd.DataArray[1];                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                    _IrcClient.SendMessage(SendType.Notice' target' message);                                    var chat = GetChat(target' ChatType.Group);                  if (chat == null) {                      // wasn't a channel but maybe a query                      chat = GetChat(target' ChatType.Person);                  }                  if (chat == null) {                      chat = _NetworkChat;                  }                  var msg = CreateMessageBuilder().                      AppendText("[notice({0})] "' target).                      AppendMessage(message).                      ToMessage();                  Session.AddMessageToChat(chat' msg' true);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CommandNick,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  _IrcClient.RfcNick(cd.Parameter);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_Run,The following statement contains a magic number: try {                  Connect(_FrontendManager);                                    while (_Listening) {                      try {                          _Listen();  #if LOG4NET                          _Logger.Warn("_Run(): _Listen() returned.");  #endif                      } catch (ThreadAbortException) {                          throw;                      } catch (Exception ex) {  #if LOG4NET                          _Logger.Error("_Run(): exception in _Listen() occurred!" 'ex);  #endif                                                    Reconnect(_FrontendManager);                      }                                            // sleep for 10 seconds' we don't want to be abusive                      System.Threading.Thread.Sleep(10000);                  }              } catch (ThreadAbortException) {  #if LOG4NET                  _Logger.Debug("_Run(): thread aborted");  #endif              } catch (Exception ex) {  #if LOG4NET                  _Logger.Error(ex);  #endif              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.Null:                  case ReplyCode.Away: // already handled via _OnAway()                  case ReplyCode.NowAway: // already handled via _OnNowAway()                  case ReplyCode.UnAway: // already handled via _OnUnAway()                  case (ReplyCode) 329: // RPL_CREATIONTIME                  case (ReplyCode) 333: // RPL_TOPICWHOTIME: who set topic + timestamp                      // ignore                      break;                  case ReplyCode.Bounce: // RPL_ISUPPORT                      // :friendly.landlord.eloxoph.com 005 meebey CHANTYPES=# PREFIX=(ohv)@%+ NETWORK=Eloxoph AWAYLEN=200 TOPICLEN=300 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANLIMIT=#:12 IRCD=WeIRCd NICKLEN=25 CASEMAPPING=ascii USERLEN=9 :are supported by this server                      // :friendly.landlord.eloxoph.com 005 meebey CHANMODE=b'kl''cimnOrst PENALTY MAXTARGETS=1 MAXBANS=50 MODES=5 LISTMODE=997 :are supported by this server                      string line = String.Empty;                      if (e.Data.RawMessageArray.Length >= 4) {                          line = String.Join(                              " "' e.Data.RawMessageArray' 3'                              e.Data.RawMessageArray.Length - 3                          );                      }                      string[] supportList = line.Split(' ');                      foreach (string support in supportList) {                          string supportKey = null;                          string supportValue = null;                          if (support.Contains("=")) {                              supportKey = support.Split('=')[0];                              supportValue = support.Split('=')[1];                          } else {                              supportKey = support;                              supportValue = null;                          }                          switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }                      }                      break;                  case ReplyCode.ErrorNoSuchNickname:                      nick = e.Data.RawMessageArray[3];                      chat = GetChat(nick' ChatType.Person) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(_("{0}: No such nick/channel")' nick).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.ErrorChannelIsFull:                  case ReplyCode.ErrorInviteOnlyChannel:                  case ReplyCode.ErrorBadChannelKey:                  case ReplyCode.ErrorTooManyChannels:                  case ReplyCode.ErrorChannelOpPrivilegesNeeded:                  case ReplyCode.ErrorCannotSendToChannel:                  case ReplyCode.ErrorUnavailableResource:                      chan = e.Data.RawMessageArray[3];                      chat = GetChat(chan' ChatType.Group) ?? Chat;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText(chan).AppendSpace().                          AppendMessage(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        // if our own nick is temporarily not available then we                      // need to deal this like an already used nick                      if (chan == _IrcClient.Nickname) {                          AutoRenick();                      }                      break;                  case ReplyCode.ErrorBannedFromChannel:                      _OnErrorBannedFromChannel(e);                      break;                  case ReplyCode.ErrorNicknameInUse:                      _OnErrorNicknameInUse(e);                      break;                  case ReplyCode.EndOfNames:                      OnEndOfNames(e);                      break;                  case ReplyCode.ChannelModeIs:                      OnChannelModeIs(e);                      break;                  default:                      if (!handled) {                          var builder = CreateMessageBuilder();                          builder.MessageType = MessageType.Event;                            int replyCode = (int) e.Data.ReplyCode;                          string numeric = String.Format("{0:000}"' replyCode);                          string constant;                          if (Enum.IsDefined(typeof(ReplyCode)' e.Data.ReplyCode)) {                              constant = e.Data.ReplyCode.ToString();                          } else {                              constant = "?";                          }                            string parameters = String.Empty;                          if (e.Data.RawMessageArray.Length >= 4) {                              parameters = String.Join(                                  " "' e.Data.RawMessageArray' 3'                                  e.Data.RawMessageArray.Length - 3                              );                          }                          int colonPosition = parameters.IndexOf(':');                          if (colonPosition > 0) {                              parameters = " " + parameters.Substring(0' colonPosition - 1);                          } else {                              parameters = String.Empty;                          }                            TextMessagePartModel msgPart;                          msgPart = new TextMessagePartModel("[");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            msgPart = new TextMessagePartModel(numeric);                          if (replyCode >= 400 && replyCode <= 599) {                              msgPart.ForegroundColor = new TextColor(255' 0' 0);                          }                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            var response = String.Format(                              " ({0}){1}"'                              constant'                              parameters                          );                          builder.AppendText(response);                            msgPart = new TextMessagePartModel("] ");                          msgPart.ForegroundColor = IrcTextColor.Grey;                          msgPart.Bold = true;                          builder.AppendText(msgPart);                            if (e.Data.Message != null) {                              builder.MessageType = MessageType.Normal;                              builder.AppendMessage(e.Data.Message);                          }                            Session.AddMessageToChat(_NetworkChat'                                                   builder.ToMessage());                      }                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnError,The following statement contains a magic number: if (e.Data.Message.ToLower().Contains("flood")) {                  _IrcClient.SendDelay += 250;                    var msg = CreateMessageBuilder().                      AppendEventPrefix().                      AppendText(                          _("Increased send delay to {0}ms to avoid being " +                            "flooded off the server again.")'                          _IrcClient.SendDelay                      ).ToMessage();                  Session.AddMessageToChat(Chat' msg);              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnErrorNicknameInUse,The following statement contains a magic number: var text = builder.CreateText(e.Data.RawMessageArray[3]);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnErrorBannedFromChannel,The following statement contains a magic number: var text = builder.CreateText(e.Data.RawMessageArray[3]);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: string nick = e.Data.RawMessageArray[3];
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following statement contains a magic number: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnQueryMessage,The following statement contains a magic number: if (newChat) {                  // don't create chats for filtered messages                  if (Session.IsFilteredMessage(chat' msg)) {                      Session.LogMessage(chat' msg' true);                      return;                  }                  Session.AddChat(chat);                  Session.AddMessageToChat(chat' msg);                  // HACK: lower probability of sync race condition swallowing                  // messages' see: https://www.smuxi.org/issues/show/634                  ThreadPool.QueueUserWorkItem(delegate {                      Thread.Sleep(1000);                      Session.SyncChat(chat);                  });                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnQueryAction,The following statement contains a magic number: if (newChat) {                  // don't create chats for filtered messages                  if (Session.IsFilteredMessage(chat' msg)) {                      Session.LogMessage(chat' msg' true);                      return;                  }                  Session.AddChat(chat);                  Session.AddMessageToChat(chat' msg);                  // HACK: lower probability of sync race condition swallowing                  // messages' see: https://www.smuxi.org/issues/show/634                  ThreadPool.QueueUserWorkItem(delegate {                      Thread.Sleep(1000);                      Session.SyncChat(chat);                  });                  return;              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnEndOfNames,The following statement contains a magic number: var chan = e.Data.RawMessageArray[3];
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnChannelModeIs,The following statement contains a magic number: var mode = String.Join(" "' e.Data.RawMessageArray.Skip(4).ToArray()).Trim();
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnChannelModeIs,The following statement contains a magic number: var channelName = e.Data.RawMessageArray[3];
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnUserModeChange,The following statement contains a magic number: modechange = e.Data.RawMessageArray[3];
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnChannelModeChange,The following statement contains a magic number: var modechange = String.Join(" "' e.Data.RawMessageArray' 3'                                           e.Data.RawMessageArray.Length - 3);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnChannelModeChange,The following statement contains a magic number: var modechange = String.Join(" "' e.Data.RawMessageArray' 3'                                           e.Data.RawMessageArray.Length - 3);
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_LagWatcher,The following statement contains a magic number: try {                  while (true) {                      // check every 10 seconds                      Thread.Sleep(10000);                                            if (_IrcClient == null ||                          !_IrcClient.IsConnected) {                          // nothing to do                          continue;                      }                                            TimeSpan lag = _IrcClient.Lag;                      TimeSpan diff = lag - _LastLag;                      int absDiff = Math.Abs((int) diff.TotalSeconds);                      // update network status if the lag changed over 5 seconds                      if (absDiff > 5) {  #if LOG4NET                          _Logger.Debug("_LagWatcher(): lag: " + lag.TotalSeconds + " seconds' difference: " + absDiff + " seconds");  #endif                          Session.UpdateNetworkStatus();                      }                      _LastLag = lag;                  }              } catch (ThreadAbortException) {  #if LOG4NET                  _Logger.Debug("_LagWatcher(): thread aborted");  #endif              } catch (Exception ex) {  #if LOG4NET                  _Logger.Error(ex);  #endif              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_LagWatcher,The following statement contains a magic number: try {                  while (true) {                      // check every 10 seconds                      Thread.Sleep(10000);                                            if (_IrcClient == null ||                          !_IrcClient.IsConnected) {                          // nothing to do                          continue;                      }                                            TimeSpan lag = _IrcClient.Lag;                      TimeSpan diff = lag - _LastLag;                      int absDiff = Math.Abs((int) diff.TotalSeconds);                      // update network status if the lag changed over 5 seconds                      if (absDiff > 5) {  #if LOG4NET                          _Logger.Debug("_LagWatcher(): lag: " + lag.TotalSeconds + " seconds' difference: " + absDiff + " seconds");  #endif                          Session.UpdateNetworkStatus();                      }                      _LastLag = lag;                  }              } catch (ThreadAbortException) {  #if LOG4NET                  _Logger.Debug("_LagWatcher(): thread aborted");  #endif              } catch (Exception ex) {  #if LOG4NET                  _Logger.Error(ex);  #endif              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,GetProtocolMessageLength,The following statement contains a magic number: return 1 + Prefix.Length + 1 +                     command.Length + 1 +                     target.Length + 2 +                     _IrcClient.Encoding.GetByteCount(message) + 2;
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,GetProtocolMessageLength,The following statement contains a magic number: return 1 + Prefix.Length + 1 +                     command.Length + 1 +                     target.Length + 2 +                     _IrcClient.Encoding.GetByteCount(message) + 2;
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,AutoRenick,The following statement contains a magic number: if (_CurrentNickname == _Nicknames.Length - 1) {                  // we tried all nicks already' so fallback to random                   Random rand = new Random();                  int number = rand.Next(999);                  nick = _Nicknames[_CurrentNickname].Substring(0' 5) + number;              } else {                  _CurrentNickname++;                  nick = _Nicknames[_CurrentNickname];              }
Magic Number,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,AutoRenick,The following statement contains a magic number: if (_CurrentNickname == _Nicknames.Length - 1) {                  // we tried all nicks already' so fallback to random                   Random rand = new Random();                  int number = rand.Next(999);                  nick = _Nicknames[_CurrentNickname].Substring(0' 5) + number;              } else {                  _CurrentNickname++;                  nick = _Nicknames[_CurrentNickname];              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Magic Number,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,IrcColorToTextColor,The following statement contains a magic number: switch (color) {                  case 0:                      return IrcTextColor.White;                  case 1:                      return IrcTextColor.Black;                  case 2:                      return IrcTextColor.Blue;                  case 3:                      return IrcTextColor.Green;                  case 4:                      return IrcTextColor.Red;                  case 5:                      return IrcTextColor.Brown;                  case 6:                      return IrcTextColor.Purple;                  case 7:                      return IrcTextColor.Orange;                  case 8:                      return IrcTextColor.Yellow;                  case 9:                      return IrcTextColor.LightGreen;                  case 10:                      return IrcTextColor.Teal;                  case 11:                      return IrcTextColor.LightCyan;                  case 12:                      return IrcTextColor.LightBlue;                  case 13:                      return IrcTextColor.LightPurple;                  case 14:                      return IrcTextColor.Grey;                  case 15:                      return IrcTextColor.LightGrey;                  default:                      return IrcTextColor.Normal;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OpenChat,The following switch statement is missing a default case: switch (chat.ChatType) {                  case ChatType.Person:                      CommandQuery(cmd);                      break;                  case ChatType.Group:                      CommandJoin(cmd);                      break;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,CloseChat,The following switch statement is missing a default case: switch (chat.ChatType) {                  case ChatType.Person:                      Session.RemoveChat(chat);                      break;                  case ChatType.Group:                      CommandModel cmd = new CommandModel(fm' _NetworkChat' chat.ID);                      CommandPart(cmd);                      break;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,SetPresenceStatus,The following switch statement is missing a default case: switch (status) {                  case PresenceStatus.Online:                      if (!_IrcClient.IsAway) {                          // nothing to do                          return;                      }                      _IrcClient.RfcAway();                      break;                  case PresenceStatus.Away:                      if (String.IsNullOrEmpty(message)) {                          // HACK: empty away message unsets away state on IRC                          message = "away";                      }                      _IrcClient.RfcAway(message);                      break;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,Command,The following switch statement is missing a default case: switch (command.Command) {                          case "help":                              CommandHelp(command);                              handled = true;                              break;                          // commands which work on serverchat/channels/queries                          case "j":                          case "join":                              CommandJoin(command);                              handled = true;                              break;                          case "msg":                              CommandMessage(command);                              handled = true;                              break;                          case "query":                              CommandQuery(command);                              handled = true;                              break;                          case "amsg":                              CommandAllMessage(command);                              handled = true;                              break;                          case "anotice":                              CommandAllNotice(command);                              handled = true;                              break;                          case "ame":                              CommandAllMe(command);                              handled = true;                              break;                          case "notice":                              CommandNotice(command);                              handled = true;                              break;                          case "nick":                              CommandNick(command);                              handled = true;                              break;                          case "raw":                          case "quote":                              CommandRaw(command);                              handled = true;                              break;                          case "ping":                              CommandPing(command);                              handled = true;                              break;                          case "version":                              CommandVersion(command);                              handled = true;                              break;                          case "time":                              CommandTime(command);                              handled = true;                              break;                          case "finger":                              CommandFinger(command);                              handled = true;                              break;                          case "who":                              CommandWho(command);                              handled = true;                              break;                          case "whois":                              CommandWhoIs(command);                              handled = true;                              break;                          case "whowas":                              CommandWhoWas(command);                              handled = true;                              break;                          case "away":                              CommandAway(command);                              // send away on all other IRC networks too                              lock (Session.ProtocolManagers) {                                  foreach (IProtocolManager nm in Session.ProtocolManagers) {                                      if (nm == this) {                                          // skip us' else we send it 2 times                                          continue;                                      }                                      if (nm is IrcProtocolManager) {                                          IrcProtocolManager ircnm = (IrcProtocolManager)nm;                                          ircnm.CommandAway(command);                                      }                                  }                              }                              handled = true;                              break;                          case "ctcp":                              CommandCtcp(command);                              handled = true;                              break;                          case "oper":                              CommandOper(command);                              handled = true;                              break;                          // commands which only work on channels or queries                          case "me":                              CommandMe(command);                              handled = true;                             break;                          case "say":                              CommandSay(command);                              handled = true;                              break;                          // commands which only work on channels                          case "p":                          case "part":                              CommandPart(command);                              handled = true;                              break;                          case "topic":                              CommandTopic(command);                              handled = true;                              break;                          case "cycle":                          case "rejoin":                              CommandCycle(command);                              handled = true;                              break;                          case "op":                              CommandOp(command);                              handled = true;                              break;                          case "deop":                              CommandDeop(command);                              handled = true;                              break;                          case "owner":                              CommandOwner(command);                              handled = true;                              break;                          case "deowner":                              CommandDeowner(command);                              handled = true;                              break;                          case "chanadmin":                              CommandChanAdmin(command);                              handled = true;                              break;                          case "dechanadmin":                              CommandDeChanAdmin(command);                              handled = true;                              break;                          case "halfop":                              CommandHalfop(command);                              handled = true;                              break;                          case "dehalfop":                              CommandDehalfop(command);                              handled = true;                              break;                          case "voice":                              CommandVoice(command);                              handled = true;                              break;                          case "devoice":                              CommandDevoice(command);                              handled = true;                              break;                          case "ban":                              CommandBan(command);                              handled = true;                              break;                          case "unban":                              CommandUnban(command);                              handled = true;                              break;                          case "banexcept":                              CommandBanException(command);                              handled = true;                              break;                          case "unbanexcept":                              CommandUnBanException(command);                              handled = true;                              break;                          case "inviteexcept":                              CommandInviteException(command);                              handled = true;                              break;                          case "uninviteexcept":                              CommandUnInviteException(command);                              handled = true;                              break;                          case "kick":                              CommandKick(command);                              handled = true;                              break;                          case "kickban":                          case "kb":                              CommandKickban(command);                              handled = true;                              break;                          case "mode":                              CommandMode(command);                              handled = true;                              break;                          case "invite":                              CommandInvite(command);                              handled = true;                              break;                          case "names":                              CommandNames(command);                              handled = true;                              break;                          case "quit":                              CommandQuit(command);                              handled = true;                              break;                      case "sleep":                              int amount = 0;                              if (Int32.TryParse(command.Parameter' out amount)) {                                  var msg = CreateMessageBuilder().                                      AppendEventPrefix().                                      AppendText(                                          _("Sleeping for {0} milliseconds")'                                          amount                                      ).                                      ToMessage();                                  Session.AddMessageToChat(Chat' msg);                                  Thread.Sleep(amount);                              } else {                                  _NotEnoughParameters(command);                              }                              handled = true;                              break;                      }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,Command,The following switch statement is missing a default case: switch (command.Command) {                          case "help":                              CommandHelp(command);                              handled = true;                              break;                          case "connect":                              CommandConnect(command);                              handled = true;                              break;                      }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following switch statement is missing a default case: switch (e.Data.Type) {                  case ReceiveType.Who:                  case ReceiveType.List:                  case ReceiveType.Name:                  case ReceiveType.Login:                  case ReceiveType.Topic:                  case ReceiveType.BanList:                  case ReceiveType.ChannelMode:                      // ignore                      handled = true;                      break;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following switch statement is missing a default case: switch (e.Data.Type) {                      case ReceiveType.Error:                          _OnError(e);                         handled = true;                          break;                      case ReceiveType.WhoIs:                      case ReceiveType.WhoWas:                          _OnReceiveTypeWho(e);                         handled = true;                          break;                  }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnRawMessage,The following switch statement is missing a default case: switch (supportKey) {                              case "NETWORK":                                  _Network = supportValue;  #if LOG4NET                                  _Logger.Debug(                                      "_OnRawMessage(): detected IRC network: " +                                      "'" + _Network + "'"                                  );  #endif                                  break;                              case "ELIST":                                  HasListMaskSearchSupport = supportValue.Contains("M");                                  break;                              case "SAFELIST":                                  HasSafeListSupport = true;                                  break;                              case "CHANTYPES":                                  ChannelTypes.Clear();                                  foreach (var type in supportValue) {                                      ChannelTypes.Add(type.ToString());                                  }                                  break;                          }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnReceiveTypeWho,The following switch statement is missing a default case: switch (e.Data.ReplyCode) {                  case ReplyCode.WhoIsUser:                  case ReplyCode.WhoWasUser:                      string ident = e.Data.RawMessageArray[4];                      string host = e.Data.RawMessageArray[5];                      string realname = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().                          AppendText("{0} [{1}@{2}]"' nick' ident' host).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                        msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("realname: {0}"' realname).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsServer:                      string server = e.Data.RawMessageArray[4];                      string serverinfo = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("server: {0} [{1}]"' server' serverinfo).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsIdle:                      string idle = e.Data.RawMessageArray[4];                      try {                          long timestamp = Int64.Parse(e.Data.RawMessageArray[5]);                          DateTime signon =  new DateTime(1970' 1' 1' 0' 0' 0' 0);                          signon = signon.AddSeconds(timestamp).ToLocalTime();                          msg = CreateMessageBuilder().                              AppendEventPrefix().AppendSpace().                              AppendText("idle: {0} [signon: {1}]"'                                         idle' signon.ToString()).                              ToMessage();                          Session.AddMessageToChat(chat' msg);                      } catch (FormatException) {                      }                      break;                  case ReplyCode.WhoIsChannels:                      string channels = e.Data.Message;                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText("channels: {0}"' channels).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;                  case ReplyCode.WhoIsOperator:                  case ReplyCode.EndOfWhoIs:                  case ReplyCode.EndOfWhoWas:                      msg = CreateMessageBuilder().                          AppendEventPrefix().AppendSpace().                          AppendText(e.Data.Message).                          ToMessage();                      Session.AddMessageToChat(chat' msg);                      break;              }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,_OnNames,The following switch statement is missing a default case: switch (modePrefix) {                          case '~':                              groupPerson.IsOwner = true;                              break;                          case '&':                              groupPerson.IsChannelAdmin = true;                              break;                          case '@':                              groupPerson.IsOp = true;                              break;                          case '%':                              groupPerson.IsHalfop = true;                              break;                          case '+':                              groupPerson.IsVoice = true;                              break;                      }
Missing Default,Smuxi.Engine,IrcProtocolManager,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcProtocolManager.cs,OnChannelModeChange,The following switch statement is missing a default case: switch (modeChange.Action) {                      case ChannelModeChangeAction.Set:                          lock (ChannelKeys) {                              ChannelKeys[e.Channel] = modeChange.Parameter;                          }                          break;                      case ChannelModeChangeAction.Unset:                          lock (ChannelKeys) {                              ChannelKeys.Remove(e.Channel);                          }                          break;                  }
Missing Default,Smuxi.Engine,IrcMessageBuilder,C:\repos\meebey_smuxi\src\Engine-IRC\Protocols\Irc\IrcMessageBuilder.cs,AppendMessage,The following switch statement is missing a default case: switch (controlCode) {                          case IrcControlCode.Clear:  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): found clear control character");  #endif                              bold = false;                              underline = false;                              italic = false;                                                            color = false;                              fg_color = IrcTextColor.Normal;                              bg_color = IrcTextColor.Normal;                              break;                          case IrcControlCode.Bold:  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): found bold control character");  #endif                              bold = !bold;                              break;                          case IrcControlCode.Underline:  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): found underline control character");  #endif                              underline = !underline;                              break;                          case IrcControlCode.Italic:  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): found italic control character");  #endif                              italic = !italic;                              break;                          case IrcControlCode.Color:  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): found color control character");  #endif                              color = !color;                              string colorMessage = msg.Substring(controlPos);  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): colorMessage: '" + colorMessage + "'");  #endif                              Match match = Regex.Match(colorMessage' "^" + (char)IrcControlCode.Color + "(?<fg>[0-9][0-9]?)('(?<bg>[0-9][0-9]?))?");                              if (match.Success) {                                  controlChars = match.Value;                                  int color_code;                                  if (match.Groups["fg"] != null) {  #if LOG4NET && MSG_DEBUG                                      Logger.Debug("AppendMessage(): match.Groups[fg].Value: " + match.Groups["fg"].Value);  #endif                                      try {                                          color_code = Int32.Parse(match.Groups["fg"].Value);                                          fg_color = IrcColorToTextColor(color_code);                                      } catch (FormatException) {                                          fg_color = IrcTextColor.Normal;                                      }                                  }                                  if (match.Groups["bg"] != null) {  #if LOG4NET && MSG_DEBUG                                      Logger.Debug("AppendMessage(): match.Groups[bg].Value: " + match.Groups["bg"].Value);  #endif                                      try {                                          color_code = Int32.Parse(match.Groups["bg"].Value);                                          bg_color = IrcColorToTextColor(color_code);                                      } catch (FormatException) {                                          bg_color = IrcTextColor.Normal;                                      }                                  }                              } else {                                  controlChars = controlChar.ToString();                                  fg_color = IrcTextColor.Normal;                                  bg_color = IrcTextColor.Normal;                              }  #if LOG4NET && MSG_DEBUG                              Logger.Debug("AppendMessage(): fg_color.HexCode: " + String.Format("0x{0:X6}"' fg_color.HexCode));                              Logger.Debug("AppendMessage(): bg_color.HexCode: " + String.Format("0x{0:X6}"' bg_color.HexCode));  #endif                              break;                      }
