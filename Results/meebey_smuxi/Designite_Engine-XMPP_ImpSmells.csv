Implementation smell,Namespace,Class,File,Method,Description
Long Method,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreatePresenceUpdateMessage,The method has 185 lines of code.
Complex Method,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,FindGroupChats,Cyclomatic complexity of the method is 12
Complex Method,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandWhoIs,Cyclomatic complexity of the method is 9
Complex Method,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,PrintPrivateChatPresence,Cyclomatic complexity of the method is 18
Long Statement,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The length of the statement  "                builder.AppendText(_("Invalid priority: {0} (valid priorities are between -128 and 127 inclusive)")' command.DataArray[2]); " is 123.
Long Statement,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnPresence,The length of the statement  "                    builder.AppendErrorText(_("Received a presence update from {0}' but there's no corresponding chat window")' pres.From.Bare); " is 124.
Long Statement,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnGroupChatMessage,The length of the statement  "                builder.AppendErrorText(_("Received a groupchat message from {0} but there's no corresponding chat window: {1}")' msg.From' msg.Body); " is 134.
Complex Conditional,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,PrintPrivateChatPresence,The conditional expression  "resource.Presence.Show == pres.Show                      && resource.Presence.Status == pres.Status                      && resource.Presence.Last == pres.Last                      && resource.Presence.XDelay == pres.XDelay                      && resource.Presence.Priority == pres.Priority                      && resource.Presence.Type == pres.Type"  is complex.
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,FindGroupChats,The following statement contains a magic number: if ((CachedMucJids == null) ||                  ((DateTime.Now - CachedMucJidsTimeStamp) > TimeSpan.FromMinutes(5))) {                  // find all conference groups                  var mucList = new List<Jid>();                  foreach (var discoItem in discoItems) {                      var reset = new AutoResetEvent(false);                      var jid = discoItem.Jid;                      lock (this) {                          Disco.DiscoverInformation(discoItem.Jid' (sender' e) => FindGroupChatsItemDiscoInfo(e' reset' mucList' jid));                      }                      resetList.Add(reset);                  }                  foreach (var reset in resetList) {                      reset.WaitOne();                  }                  resetList.Clear();                    // find all chats in all conference groups                  var jidList = new List<Jid>();                  foreach (var mucGroup in mucList) {                      var reset = new AutoResetEvent(false);                      lock (this) {                          Disco.DiscoverItems(mucGroup' (sender' e) => FindGroupChatsDiscoMucs(e' reset' jidList));                      }                      resetList.Add(reset);                  }                  foreach (var reset in resetList) {                      reset.WaitOne();                  }                  CachedMucJids = jidList;                  CachedMucJidsTimeStamp = DateTime.Now;                  CachedMucInfo = new Dictionary<Jid' DiscoInfo>();              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OpenContactChat,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(delegate {                  Thread.Sleep(5000);                  lock (this) {                      if (IsDisposed) {                          return;                      }                      if (ContactChat != null) {                          Session.SyncChat(ContactChat);                      }                  }              });
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMe,The following statement contains a magic number: if (command.Data.Length <= 4) {                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMe,The following statement contains a magic number: string actionstring = command.Data.Substring(3);
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandWhoIs,The following statement contains a magic number: if (cmd.DataArray.Length < 2) {                  if ((cmd.DataArray.Length == 1)                      && (cmd.Chat is PersonChatModel)) {                      jid = (cmd.Chat as PersonChatModel).Person.ID;                  } else {                      NotEnoughParameters(cmd);                      return;                  }              } else {                  jid = GetJidFromNickname(cmd.DataArray[1]);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: if (cd.DataArray.Length < 3) {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: Jid jid = GetJidFromNickname(cd.DataArray[2]);
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: switch (cmd) {                  case "addgroup":                      if (cd.DataArray.Length < 4) {                          NotEnoughParameters(cd);                          return;                      }                      JabberClient.RosterManager.AddRosterItem(jid' null' cd.DataArray[3]);                      break;                  case "addonly":                      JabberClient.RosterManager.AddRosterItem(jid);                      break;                  case "add":                      XmppPersonModel person;                      if (Contacts.TryGetValue(jid.Bare' out person)) {                          if (person.Subscription == SubscriptionType.both) break;                          if (person.Subscription != SubscriptionType.to) {                              JabberClient.PresenceManager.Subscribe(jid);                          }                          if (person.Subscription != SubscriptionType.from) {                              // in case we already know this contactâ€¦ but he can't see us                              JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                          }                      } else {                          JabberClient.RosterManager.AddRosterItem(jid);                          JabberClient.PresenceManager.Subscribe(jid);                          JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      }                      break;                  case "subscribe":                      JabberClient.PresenceManager.Subscribe(jid);                      break;                  case "unsubscribe":                      // stop receiving status updates from this contact                      // that contact will still receive your updates                      JabberClient.PresenceManager.Unsubscribe(jid);                      break;                  case "remove":                  case "rm":                  case "del":                  case "delete":                      JabberClient.RosterManager.RemoveRosterItem(jid);                      // unsubscribing is unnecessary' the server is required to do this                      break;                  case "accept":                  case "allow":                  case "approve":                  case "auth":                  case "authorize":                      JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      break;                  case "deny":                  case "refuse":                      // stop the contact from receiving your updates                      // you will still receive the contact's status updates                      JabberClient.PresenceManager.RefuseSubscriptionRequest(jid);                      break;                  case "rename":                      if (cd.DataArray.Length < 4) {                          JabberClient.RosterManager.UpdateRosterItem(jid' "");                      } else {                          var newNick = String.Join(" "' cd.DataArray.Skip(3).ToArray());                          JabberClient.RosterManager.UpdateRosterItem(jid' newNick);                      }                      break;                  default:                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid contact command: {0}")' cmd);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: switch (cmd) {                  case "addgroup":                      if (cd.DataArray.Length < 4) {                          NotEnoughParameters(cd);                          return;                      }                      JabberClient.RosterManager.AddRosterItem(jid' null' cd.DataArray[3]);                      break;                  case "addonly":                      JabberClient.RosterManager.AddRosterItem(jid);                      break;                  case "add":                      XmppPersonModel person;                      if (Contacts.TryGetValue(jid.Bare' out person)) {                          if (person.Subscription == SubscriptionType.both) break;                          if (person.Subscription != SubscriptionType.to) {                              JabberClient.PresenceManager.Subscribe(jid);                          }                          if (person.Subscription != SubscriptionType.from) {                              // in case we already know this contactâ€¦ but he can't see us                              JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                          }                      } else {                          JabberClient.RosterManager.AddRosterItem(jid);                          JabberClient.PresenceManager.Subscribe(jid);                          JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      }                      break;                  case "subscribe":                      JabberClient.PresenceManager.Subscribe(jid);                      break;                  case "unsubscribe":                      // stop receiving status updates from this contact                      // that contact will still receive your updates                      JabberClient.PresenceManager.Unsubscribe(jid);                      break;                  case "remove":                  case "rm":                  case "del":                  case "delete":                      JabberClient.RosterManager.RemoveRosterItem(jid);                      // unsubscribing is unnecessary' the server is required to do this                      break;                  case "accept":                  case "allow":                  case "approve":                  case "auth":                  case "authorize":                      JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      break;                  case "deny":                  case "refuse":                      // stop the contact from receiving your updates                      // you will still receive the contact's status updates                      JabberClient.PresenceManager.RefuseSubscriptionRequest(jid);                      break;                  case "rename":                      if (cd.DataArray.Length < 4) {                          JabberClient.RosterManager.UpdateRosterItem(jid' "");                      } else {                          var newNick = String.Join(" "' cd.DataArray.Skip(3).ToArray());                          JabberClient.RosterManager.UpdateRosterItem(jid' newNick);                      }                      break;                  default:                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid contact command: {0}")' cmd);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: switch (cmd) {                  case "addgroup":                      if (cd.DataArray.Length < 4) {                          NotEnoughParameters(cd);                          return;                      }                      JabberClient.RosterManager.AddRosterItem(jid' null' cd.DataArray[3]);                      break;                  case "addonly":                      JabberClient.RosterManager.AddRosterItem(jid);                      break;                  case "add":                      XmppPersonModel person;                      if (Contacts.TryGetValue(jid.Bare' out person)) {                          if (person.Subscription == SubscriptionType.both) break;                          if (person.Subscription != SubscriptionType.to) {                              JabberClient.PresenceManager.Subscribe(jid);                          }                          if (person.Subscription != SubscriptionType.from) {                              // in case we already know this contactâ€¦ but he can't see us                              JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                          }                      } else {                          JabberClient.RosterManager.AddRosterItem(jid);                          JabberClient.PresenceManager.Subscribe(jid);                          JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      }                      break;                  case "subscribe":                      JabberClient.PresenceManager.Subscribe(jid);                      break;                  case "unsubscribe":                      // stop receiving status updates from this contact                      // that contact will still receive your updates                      JabberClient.PresenceManager.Unsubscribe(jid);                      break;                  case "remove":                  case "rm":                  case "del":                  case "delete":                      JabberClient.RosterManager.RemoveRosterItem(jid);                      // unsubscribing is unnecessary' the server is required to do this                      break;                  case "accept":                  case "allow":                  case "approve":                  case "auth":                  case "authorize":                      JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      break;                  case "deny":                  case "refuse":                      // stop the contact from receiving your updates                      // you will still receive the contact's status updates                      JabberClient.PresenceManager.RefuseSubscriptionRequest(jid);                      break;                  case "rename":                      if (cd.DataArray.Length < 4) {                          JabberClient.RosterManager.UpdateRosterItem(jid' "");                      } else {                          var newNick = String.Join(" "' cd.DataArray.Skip(3).ToArray());                          JabberClient.RosterManager.UpdateRosterItem(jid' newNick);                      }                      break;                  default:                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid contact command: {0}")' cmd);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandContact,The following statement contains a magic number: switch (cmd) {                  case "addgroup":                      if (cd.DataArray.Length < 4) {                          NotEnoughParameters(cd);                          return;                      }                      JabberClient.RosterManager.AddRosterItem(jid' null' cd.DataArray[3]);                      break;                  case "addonly":                      JabberClient.RosterManager.AddRosterItem(jid);                      break;                  case "add":                      XmppPersonModel person;                      if (Contacts.TryGetValue(jid.Bare' out person)) {                          if (person.Subscription == SubscriptionType.both) break;                          if (person.Subscription != SubscriptionType.to) {                              JabberClient.PresenceManager.Subscribe(jid);                          }                          if (person.Subscription != SubscriptionType.from) {                              // in case we already know this contactâ€¦ but he can't see us                              JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                          }                      } else {                          JabberClient.RosterManager.AddRosterItem(jid);                          JabberClient.PresenceManager.Subscribe(jid);                          JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      }                      break;                  case "subscribe":                      JabberClient.PresenceManager.Subscribe(jid);                      break;                  case "unsubscribe":                      // stop receiving status updates from this contact                      // that contact will still receive your updates                      JabberClient.PresenceManager.Unsubscribe(jid);                      break;                  case "remove":                  case "rm":                  case "del":                  case "delete":                      JabberClient.RosterManager.RemoveRosterItem(jid);                      // unsubscribing is unnecessary' the server is required to do this                      break;                  case "accept":                  case "allow":                  case "approve":                  case "auth":                  case "authorize":                      JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      break;                  case "deny":                  case "refuse":                      // stop the contact from receiving your updates                      // you will still receive the contact's status updates                      JabberClient.PresenceManager.RefuseSubscriptionRequest(jid);                      break;                  case "rename":                      if (cd.DataArray.Length < 4) {                          JabberClient.RosterManager.UpdateRosterItem(jid' "");                      } else {                          var newNick = String.Join(" "' cd.DataArray.Skip(3).ToArray());                          JabberClient.RosterManager.UpdateRosterItem(jid' newNick);                      }                      break;                  default:                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid contact command: {0}")' cmd);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  server.Hostname = cd.DataArray[2];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  server.Hostname = cd.DataArray[2];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  try {                      server.Port = Int32.Parse(cd.DataArray[3]);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid port: {0}")' cd.DataArray[3]);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  try {                      server.Port = Int32.Parse(cd.DataArray[3]);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid port: {0}")' cd.DataArray[3]);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 4) {                  try {                      server.Port = Int32.Parse(cd.DataArray[3]);                  } catch (FormatException) {                      var builder = CreateMessageBuilder();                      builder.AppendText(_("Invalid port: {0}")' cd.DataArray[3]);                      Session.AddMessageToFrontend(cd' builder.ToMessage());                      return;                  }              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 5) {                  server.Username = cd.DataArray[4];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 5) {                  server.Username = cd.DataArray[4];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 6) {                  server.Password = cd.DataArray[5];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 6) {                  server.Password = cd.DataArray[5];              } else {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 7) {                  server.Resource = cd.DataArray[6];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandConnect,The following statement contains a magic number: if (cd.DataArray.Length >= 7) {                  server.Resource = cd.DataArray[6];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The following statement contains a magic number: if (command.DataArray.Length < 3) {                  var builder = CreateMessageBuilder();                  builder.AppendText(_("Priority for Available is: {0}")' Server.Priorities[PresenceStatus.Online]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  builder = CreateMessageBuilder();                  builder.AppendText(_("Priority for Away is: {0}")' Server.Priorities[PresenceStatus.Away]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The following statement contains a magic number: if (!int.TryParse(command.DataArray[2]' out prio) || prio < -128 || prio > 127) {                  var builder = CreateMessageBuilder();                  builder.AppendText(_("Invalid priority: {0} (valid priorities are between -128 and 127 inclusive)")' command.DataArray[2]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The following statement contains a magic number: if (!int.TryParse(command.DataArray[2]' out prio) || prio < -128 || prio > 127) {                  var builder = CreateMessageBuilder();                  builder.AppendText(_("Invalid priority: {0} (valid priorities are between -128 and 127 inclusive)")' command.DataArray[2]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The following statement contains a magic number: if (!int.TryParse(command.DataArray[2]' out prio) || prio < -128 || prio > 127) {                  var builder = CreateMessageBuilder();                  builder.AppendText(_("Invalid priority: {0} (valid priorities are between -128 and 127 inclusive)")' command.DataArray[2]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPriority,The following statement contains a magic number: if (!int.TryParse(command.DataArray[2]' out prio) || prio < -128 || prio > 127) {                  var builder = CreateMessageBuilder();                  builder.AppendText(_("Invalid priority: {0} (valid priorities are between -128 and 127 inclusive)")' command.DataArray[2]);                  Session.AddMessageToFrontend(command' builder.ToMessage());                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMessageQuery,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMessageQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // we have a message                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  MessageQuery(jid' message);              } else {                  MessageQuery(jid' null);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMessageQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // we have a message                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  MessageQuery(jid' message);              } else {                  MessageQuery(jid' null);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandMessageQuery,The following statement contains a magic number: if (cd.DataArray.Length >= 3) {                  // we have a message                  string message = String.Join(" "' cd.DataArray' 2' cd.DataArray.Length-2);                  MessageQuery(jid' message);              } else {                  MessageQuery(jid' null);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length < 2) {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length > 2) {                  password = cd.DataArray[2];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoin,The following statement contains a magic number: if (cd.DataArray.Length > 2) {                  password = cd.DataArray[2];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoinAs,The following statement contains a magic number: if (cd.DataArray.Length < 3) {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoinAs,The following statement contains a magic number: if (cd.DataArray.Length > 3) {                  password = cd.DataArray[3];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoinAs,The following statement contains a magic number: if (cd.DataArray.Length > 3) {                  password = cd.DataArray[3];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandJoinAs,The following statement contains a magic number: JoinRoom(cd.DataArray[1]' cd.DataArray[2]' password);
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandPart,The following statement contains a magic number: if (cd.DataArray.Length >= 2)                  jid = cd.DataArray[1];              else                  jid = cd.Chat.ID;
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length < 3) {                  NotEnoughParameters(cd);                  return;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length > 3) {                  password = cd.DataArray[3];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandInvite,The following statement contains a magic number: if (cd.DataArray.Length > 3) {                  password = cd.DataArray[3];              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandInvite,The following statement contains a magic number: Invite(cd.DataArray[2]' cd.DataArray[1]' null' password);
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandAway,The following statement contains a magic number: if (cd.DataArray.Length >= 2) {                  SetPresenceStatus(PresenceStatus.Away' cd.Parameter);              } else {                  SetPresenceStatus(PresenceStatus.Online' null);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnReadXml,The following statement contains a magic number: try {                  var strWriter = new StringWriter();                  var xmlWriter = new XmlTextWriter(strWriter);                  xmlWriter.Formatting = Formatting.Indented;                  xmlWriter.Indentation = 2;                  xmlWriter.IndentChar =  ' ';                                    var document = new XmlDocument();                  document.LoadXml(text);                  document.WriteContentTo(xmlWriter);                                    DebugRead("\n" + strWriter.ToString());              } catch (XmlException) {                  DebugRead("\n" + text);              } catch (Exception ex) {  #if LOG4NET                  _Logger.Error("OnProtocol(): Exception"' ex);  #endif              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnWriteXml,The following statement contains a magic number: try {                  if (text == null || text.Trim().Length == 0) {                      // suppress logging keep-alive messages                      return;                  }                    var strWriter = new StringWriter();                  var xmlWriter = new XmlTextWriter(strWriter);                  xmlWriter.Formatting = Formatting.Indented;                  xmlWriter.Indentation = 2;                  xmlWriter.IndentChar =  ' ';                    var document = new XmlDocument();                  document.LoadXml(text);                  document.WriteContentTo(xmlWriter);                    DebugWrite("\n" + strWriter.ToString());              } catch (XmlException) {                  // HACK: in case of an invalid doucment fallback to                  // plain string logging                  DebugWrite("\n" + text);              } catch (Exception ex) {  #if LOG4NET                  _Logger.Error("OnWriteText(): Exception"' ex);  #endif              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnGroupChatPresence,The following statement contains a magic number: switch (pres.Type) {                  case PresenceType.available:                      // don't do anything if the contact already exists                      if (chat.UnsafePersons.ContainsKey(person.ID)) {                          return;                      }                      // is the chat synced? add the new contact the regular way                      if (chat.IsSynced) {                          Session.AddPersonToGroupChat(chat' person);                          return;                      }                        chat.UnsafePersons.Add(person.ID' person);                        // did I join? then the chat roster is fully received                      if (pres.From.Resource == chat.OwnNickname ||                          pres.MucUser.StatusCodes.Exists(x => x.Code == StatusCode.SelfPresence)) {                          if (pres.MucUser.StatusCodes.Exists(x => x.Code == StatusCode.ModifiedNick)) {                              // as per XEP-0045 7.2.3 Example 24 the server is                              // allowed to give us a different nick than we requested                              chat.OwnNickname = pres.From.Resource;                          }                          chat.IsJoining = false;                          // HACK: lower probability of sync race condition swallowing messages                          ThreadPool.QueueUserWorkItem(delegate {                              Thread.Sleep(1000);                              lock (this) {                                  if (IsDisposed) {                                      return;                                  }                                  chat.IsSynced = true;                                  Session.SyncChat(chat);                                  Session.EnableChat(chat);                              }                          });                      }                      break;                  case PresenceType.unavailable:                      Session.RemovePersonFromGroupChat(chat' person);                      // did I leave? then I "probably" left the room                      if (pres.From.Resource == chat.OwnNickname) {                          Session.RemoveChat(chat);                      }                      break;                  case PresenceType.error:                      OnGroupChatPresenceError(chat' pres);                      break;              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreateEchoGroupChatMessage,The following statement contains a magic number: if (msgstring.StartsWith("/me ")) {                  // leave the " " intact                  msgstring = msgstring.Substring(3);                  builder.AppendActionPrefix();                  builder.AppendIdendityName(self);              } else {                  builder.AppendSenderPrefix(self);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreateGroupChatMessage,The following statement contains a magic number: if (msgstring.StartsWith("/me ")) {                  // leave the " " intact                  msgstring = msgstring.Substring(3);                  builder.AppendActionPrefix();                  builder.AppendIdendityName(person);              } else {                  builder.AppendSenderPrefix(person);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreatePrivateChatMessage,The following statement contains a magic number: if (msgstring.StartsWith("/me ")) {                  // leave the " " intact                  msgstring = msgstring.Substring(3);                  builder.AppendActionPrefix();                  builder.AppendIdendityName(person' true);              } else {                  builder.AppendSenderPrefix(person' true);              }
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,ApplyConfig,The following statement contains a magic number: Me.IdentityNameColored.ForegroundColor = new TextColor(0' 0' 255);
Magic Number,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,ApplyConfig,The following statement contains a magic number: if (server.UseEncryption) {                  // HACK: Google Talk doesn't support StartTLS :(                  if (server.Hostname == "talk.google.com" &&                      server.Port == 5223) {                      JabberClient.ForceStartTls = false;                      JabberClient.UseSSL = true;                  } else {                      JabberClient.ForceStartTls = true;                  }              } else {                  JabberClient.ForceStartTls = false;                  JabberClient.UseStartTLS = true;              }
Magic Number,Smuxi.Engine,XmppServerModel,C:\repos\meebey_smuxi\src\Engine-XMPP\Config\XmppServerModel.cs,InitDefaults,The following statement contains a magic number: Priorities[PresenceStatus.Online] = 5;
Magic Number,Smuxi.Engine,XmppPersonModel,C:\repos\meebey_smuxi\src\Engine-XMPP\Config\XmppPersonModel.cs,GetResourcesWithHighestPriority,The following statement contains a magic number: int prio = -99999;
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OpenChat,The following switch statement is missing a default case: switch (chat.ChatType) {                  case ChatType.Person:                      CommandMessageQuery(cmd);                      break;                  case ChatType.Group:                      CommandJoin(cmd);                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,SetPresenceStatus,The following switch statement is missing a default case: switch (status) {                  case PresenceStatus.Online:                      JabberClient.Show = ShowType.NONE;                      JabberClient.Priority = Server.Priorities[status];                      JabberClient.Status = message;                      break;                  case PresenceStatus.Away:                      JabberClient.Priority = Server.Priorities[status];                      JabberClient.Show = ShowType.away;                      JabberClient.Status = message;                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,Command,The following switch statement is missing a default case: switch (command.Command) {                          case "help":                              CommandHelp(command);                              handled = true;                              break;                          case "msg":                          case "query":                              CommandMessageQuery(command);                              handled = true;                              break;                          case "me":                              CommandMe(command);                              handled = true;                              break;                          case "say":                              CommandSay(command);                              handled = true;                              break;                          case "joinas":                              CommandJoinAs(command);                              handled = true;                              break;                          case "join":                              CommandJoin(command);                              handled = true;                              break;                          case "invite":                              CommandInvite(command);                              handled = true;                              break;                          case "part":                          case "leave":                              CommandPart(command);                              handled = true;                              break;                          case "away":                              CommandAway(command);                              handled = true;                              break;                          case "roster":                              CommandRoster(command);                              handled = true;                              break;                          case "contact":                              CommandContact(command);                              handled = true;                              break;                          case "priority":                              CommandPriority(command);                              handled = true;                              break;                          case "whois":                              CommandWhoIs(command);                              handled = true;                              break;                          case "register":                              CommandRegister(command);                              handled = true;                              break;                      }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,Command,The following switch statement is missing a default case: switch (command.Command) {                          case "help":                              CommandHelp(command);                              handled = true;                              break;                          case "connect":                              CommandConnect(command);                              handled = true;                              break;                      }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CommandWhoIs,The following switch statement is missing a default case: switch (person.Subscription) {                  case SubscriptionType.both:                      builder.AppendText(_("You have a mutual subscription with this contact"));                      break;                  case SubscriptionType.none:                      builder.AppendText(_("You have no subscription with this contact and this contact is not subscribed to you"));                      break;                  case SubscriptionType.to:                      builder.AppendText(_("You are subscribed to this contact' but the contact is not subscribed to you"));                      break;                  case SubscriptionType.from:                      builder.AppendText(_("You are not subscribed to this contact' but the contact is subscribed to you"));                      break;                  case SubscriptionType.remove:  #if LOG4NET                      _Logger.Debug("a contact with SubscriptionType remove has been found");  #endif                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreatePresenceUpdateMessage,The following switch statement is missing a default case: switch(pres.Show) {                          case ShowType.NONE:                              builder.AppendFormat(_("{0}{1} is available")' person' idstring);                              builder.AppendPresenceState(person' MessageType.PresenceStateOnline);                              break;                          case ShowType.away:                              builder.AppendFormat(_("{0}{1} is away")' person' idstring);                              builder.AppendPresenceState(person' MessageType.PresenceStateAway);                              break;                          case ShowType.xa:                              builder.AppendFormat(_("{0}{1} is extended away")' person' idstring);                              builder.AppendPresenceState(person' MessageType.PresenceStateAway);                              break;                          case ShowType.dnd:                              builder.AppendFormat(_("{0}{1} wishes not to be disturbed")' person' idstring);                              builder.AppendPresenceState(person' MessageType.PresenceStateAway);                              break;                          case ShowType.chat:                              builder.AppendFormat(_("{0}{1} wants to chat")' person' idstring);                              builder.AppendPresenceState(person' MessageType.PresenceStateOnline);                              break;                      }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnGroupChatPresence,The following switch statement is missing a default case: switch (pres.Type) {                  case PresenceType.available:                      // don't do anything if the contact already exists                      if (chat.UnsafePersons.ContainsKey(person.ID)) {                          return;                      }                      // is the chat synced? add the new contact the regular way                      if (chat.IsSynced) {                          Session.AddPersonToGroupChat(chat' person);                          return;                      }                        chat.UnsafePersons.Add(person.ID' person);                        // did I join? then the chat roster is fully received                      if (pres.From.Resource == chat.OwnNickname ||                          pres.MucUser.StatusCodes.Exists(x => x.Code == StatusCode.SelfPresence)) {                          if (pres.MucUser.StatusCodes.Exists(x => x.Code == StatusCode.ModifiedNick)) {                              // as per XEP-0045 7.2.3 Example 24 the server is                              // allowed to give us a different nick than we requested                              chat.OwnNickname = pres.From.Resource;                          }                          chat.IsJoining = false;                          // HACK: lower probability of sync race condition swallowing messages                          ThreadPool.QueueUserWorkItem(delegate {                              Thread.Sleep(1000);                              lock (this) {                                  if (IsDisposed) {                                      return;                                  }                                  chat.IsSynced = true;                                  Session.SyncChat(chat);                                  Session.EnableChat(chat);                              }                          });                      }                      break;                  case PresenceType.unavailable:                      Session.RemovePersonFromGroupChat(chat' person);                      // did I leave? then I "probably" left the room                      if (pres.From.Resource == chat.OwnNickname) {                          Session.RemoveChat(chat);                      }                      break;                  case PresenceType.error:                      OnGroupChatPresenceError(chat' pres);                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreateGroupChatPresenceErrorMessage,The following switch statement is missing a default case: switch (pres.Error.Type) {                  case ErrorType.cancel:                      switch (pres.Error.Condition) {                          case ErrorCondition.RemoteServerNotFound:                              builder.AppendErrorText(_("Server of groupchat \"{0}\" not found.")' pres.From.Bare);                              break;                          case ErrorCondition.ServiceUnavailable:                              builder.AppendErrorText(_("MUC service is not available for \"{0}\"")' pres.From.Bare);                              break;                      }                      break;                  case ErrorType.auth:                      switch (pres.Error.Condition) {                          case ErrorCondition.NotAuthorized:                              builder.AppendErrorText(_("You do not have permission to join \"{0}\"")' pres.From.Bare);                              break;                      }                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreateGroupChatPresenceErrorMessage,The following switch statement is missing a default case: switch (pres.Error.Condition) {                          case ErrorCondition.RemoteServerNotFound:                              builder.AppendErrorText(_("Server of groupchat \"{0}\" not found.")' pres.From.Bare);                              break;                          case ErrorCondition.ServiceUnavailable:                              builder.AppendErrorText(_("MUC service is not available for \"{0}\"")' pres.From.Bare);                              break;                      }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,CreateGroupChatPresenceErrorMessage,The following switch statement is missing a default case: switch (pres.Error.Condition) {                          case ErrorCondition.NotAuthorized:                              builder.AppendErrorText(_("You do not have permission to join \"{0}\"")' pres.From.Bare);                              break;                      }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnPrivateChatPresence,The following switch statement is missing a default case: switch (pres.Type) {                  case PresenceType.available:                      if (pres.Priority < 0) break;                      if (ContactChat == null) break;                      if (ContactChat.UnsafePersons.ContainsKey(jid.Bare)) break;                      Session.AddPersonToGroupChat(ContactChat' person.ToPersonModel());                      break;                  case PresenceType.unavailable:                      person.RemoveResource(jid);                      if (pres.Priority < 0) break;                      if (ContactChat == null) break;                      if (!ContactChat.UnsafePersons.ContainsKey(jid.Bare)) break;                      var pers = ContactChat.GetPerson(jid.Bare);                      Session.RemovePersonFromGroupChat(ContactChat' pers);                      break;                  case PresenceType.subscribe:                      if (person.Ask == AskType.subscribe) {                          // we are currently asking the contact OR are subscribed to him                          // so we allow the contact to subscribe                          // TODO: make the following dependent on some user setable boolean                          JabberClient.PresenceManager.ApproveSubscriptionRequest(jid);                      }                      break;                  case PresenceType.subscribed:                      // we are now able to see that contact's presences                      break;                  case PresenceType.unsubscribed:                      // the contact does not wish us to see his presences anymore                      if (person.Subscription == SubscriptionType.from) {                          // but the contact can still see us                          // TODO: make the following dependent on some user setable boolean                          JabberClient.PresenceManager.RefuseSubscriptionRequest(jid);                      } else {                          // TODO: this contact was just created in OnPresenceâ€¦ prevent it from doing that?                          // TODO: this can happen when a subscription=none contact sends a denyâ€¦                          Contacts.Remove(jid.Bare);                      }                      break;                  case PresenceType.unsubscribe:                      // the contact does not wish to see our presence anymore?                      // we could care less                      break;              }
Missing Default,Smuxi.Engine,XmppProtocolManager,C:\repos\meebey_smuxi\src\Engine-XMPP\Protocols\Xmpp\XmppProtocolManager.cs,OnMessage,The following switch statement is missing a default case: switch (msg.Type) {                  case XmppMessageType.groupchat:                      OnGroupChatMessage(msg);                      break;                  case XmppMessageType.chat:                  case XmppMessageType.headline:                  case XmppMessageType.normal:                      if (String.IsNullOrEmpty(msg.From.User)) {                          OnServerMessage(msg);                      } else if (msg.MucUser != null) {                          OnMucMessage(msg);                      } else {                          OnPrivateChatMessage(msg);                      }                      break;                  case XmppMessageType.error:                  {                      var chat = Session.GetChat(msg.From' ChatType.Group' this);                      if (chat != null) {                          OnGroupChatMessageError(msg' chat as XmppGroupChatModel);                          break;                      }                      chat = Session.GetChat(msg.From' ChatType.Person' this);                      if (chat != null) {                          OnPrivateChatMessageError(msg' chat as PersonChatModel);                          break;                      }                      // no person and no groupchat open? -> dump in networkchat                      var builder = CreateMessageBuilder();                      // TODO: nicer formatting                      if (msg.Error.ErrorText != null) {                          builder.AppendErrorText(msg.Error.ErrorText);                      } else {                          builder.AppendErrorText(msg.Error.ToString());                      }                      Session.AddMessageToChat(NetworkChat' builder.ToMessage());                  }                      break;              }
