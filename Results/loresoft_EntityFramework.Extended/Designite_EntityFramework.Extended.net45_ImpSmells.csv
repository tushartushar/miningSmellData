Implementation smell,Namespace,Class,File,Method,Description
Long Method,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The method has 135 lines of code.
Long Method,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The method has 135 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,NextToken,The method has 173 lines of code.
Long Method,EntityFramework.Reflection,DelegateFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\DelegateFactory.cs,CreateMethod,The method has 108 lines of code.
Complex Method,EntityFramework.Audit,AuditLog,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLog.cs,Refresh,Cyclomatic complexity of the method is 8
Complex Method,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,UpdateLog,Cyclomatic complexity of the method is 8
Complex Method,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,WriteProperties,Cyclomatic complexity of the method is 16
Complex Method,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,WriteRelationships,Cyclomatic complexity of the method is 21
Complex Method,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,Cyclomatic complexity of the method is 17
Complex Method,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,Cyclomatic complexity of the method is 17
Complex Method,EntityFramework.Caching,MemoryCacheProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Caching\MemoryCacheProvider.cs,CreatePolicy,Cyclomatic complexity of the method is 13
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,NextToken,Cyclomatic complexity of the method is 111
Complex Method,EntityFramework.Extensions,BatchExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Extensions\BatchExtensions.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,EntityFramework.Mapping,MappingResolver,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MappingResolver.cs,CreateEntitySetMappings,Cyclomatic complexity of the method is 9
Complex Method,EntityFramework.Reflection,DelegateFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\DelegateFactory.cs,CreateMethod,Cyclomatic complexity of the method is 15
Complex Method,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,Cyclomatic complexity of the method is 21
Complex Method,EntityFramework.Reflection,ObjectCloner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ObjectCloner.cs,CloneInstance,Cyclomatic complexity of the method is 10
Long Parameter List,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The method has 5 parameters.
Long Parameter List,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,FindMethod,The method has 5 parameters.
Long Statement,EntityFramework.Audit,AuditConfiguration,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditConfiguration.cs,HasAttribute,The length of the statement  "	var metadataTypeAttribute = declaringType.GetCustomAttributes (typeof(MetadataTypeAttribute)' true).FirstOrDefault () as MetadataTypeAttribute; " is 143.
Long Statement,EntityFramework.Audit,AuditConfiguration,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditConfiguration.cs,GetAttribute,The length of the statement  "	var metadataTypeAttribute = declaringType.GetCustomAttributes (typeof(MetadataTypeAttribute)' true).FirstOrDefault () as MetadataTypeAttribute; " is 143.
Long Statement,EntityFramework.Audit,AuditEntity,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditEntity.cs,GetHashCode,The length of the statement  "		return Keys.Where (key => key.Value != null).Aggregate (result' (current' key) => (current * HASH_SEED) ^ key.Value.GetHashCode ()); " is 132.
Long Statement,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,WriteRelationships,The length of the statement  "		if (navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many || navigationProperty.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many) " is 187.
Long Statement,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,GetDisplayValue,The length of the statement  "	sql.Append ("SELECT VALUE t.").Append (displayMember.Name).Append (" FROM ").Append (entitySet.Name).Append (" as t").Append (" WHERE "); " is 137.
Long Statement,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,GetType,The length of the statement  "	string type = primitiveType != null && primitiveType.ClrEquivalentType != null ? primitiveType.ClrEquivalentType.FullName : edmMember.TypeUsage.EdmType.FullName; " is 161.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalDelete,The length of the statement  "		int result = async ? await deleteCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : deleteCommand.ExecuteNonQuery (); " is 123.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The length of the statement  "			string columnName = entityMap.PropertyMaps.Where (p => p.PropertyName == propertyName).Select (p => p.ColumnName).FirstOrDefault (); " is 132.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The length of the statement  "				throw new ArgumentException ("The update expression MemberBinding must only by type MemberAssignment."' "updateExpression"); " is 124.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The length of the statement  "				MethodCallExpression selectExpression = Expression.Call (typeof(Queryable)' "Select"' typeArguments' constantExpression' lambdaExpression); " is 139.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The length of the statement  "				string regex = @"SELECT\s*\r\n(?<ColumnValue>.+)?\s*AS\s*(?<ColumnAlias>\w+)\r\nFROM\s*(?<TableName>\w+\.\w+|\w+)\s*AS\s*(?<TableAlias>\w+)"; " is 141.
Long Statement,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The length of the statement  "		int result = async ? await updateCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : updateCommand.ExecuteNonQuery (); " is 123.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalDelete,The length of the statement  "		int result = async ? await deleteCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : deleteCommand.ExecuteNonQuery (); " is 123.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The length of the statement  "			string columnName = entityMap.PropertyMaps.Where (p => p.PropertyName == propertyName).Select (p => p.ColumnName).FirstOrDefault (); " is 132.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The length of the statement  "				throw new ArgumentException ("The update expression MemberBinding must only by type MemberAssignment."' "updateExpression"); " is 124.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The length of the statement  "				MethodCallExpression selectExpression = Expression.Call (typeof(Queryable)' "Select"' typeArguments' constantExpression' lambdaExpression); " is 139.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The length of the statement  "				string regex = @"SELECT\s*\r\n\s*(?<ColumnValue>.+)?\s*AS\s*(?<ColumnAlias>\[\w+\])\r\n\s*FROM\s*(?<TableName>\[\w+\]\.\[\w+\]|\[\w+\])\s*AS\s*(?<TableAlias>\[\w+\])"; " is 167.
Long Statement,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The length of the statement  "		int result = async ? await updateCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : updateCommand.ExecuteNonQuery (); " is 123.
Long Statement,EntityFramework.Caching,CacheManager,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Caching\CacheManager.cs,ResolveProvider,The length of the statement  "		throw new InvalidOperationException ("Could not resolve the ICacheProvider. Make sure ICacheProvider is registered in the Locator.Current container."); " is 151.
Long Statement,EntityFramework.Future,FutureQueryBase,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureQueryBase.cs,SetResult,The length of the statement  "		dynamic shaper = shaperFactory.Create (reader' dataContext' dataContext.MetadataWorkspace' MergeOption.AppendOnly' false' true' false); " is 135.
Long Statement,EntityFramework.Future,FutureRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureRunner.cs,ExecuteFutureQueries,The length of the statement  "			using (var reader = DbInterception.Dispatch.Command.Reader (command' new DbCommandInterceptionContext (interceptionContext))) { " is 127.
Long Statement,EntityFramework.Future,FutureRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureRunner.cs,CreateFutureCommand,The length of the statement  "	var command = entityConnection == null ? dbConnection.CreateCommand () : entityConnection.StoreConnection.CreateCommand (); " is 123.
Long Statement,EntityFramework.Future,FutureContext,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureContext.cs,ExecuteFutureQueries,The length of the statement  "		throw new InvalidOperationException ("Could not resolve the IFutureRunner. Make sure IFutureRunner is registered in the Locator.Current container."); " is 149.
Long Statement,EntityFramework,Container,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Container.cs,Register,The length of the statement  "	Func<TService> partialFactory = () => factory (Resolve<TArg1> ()' Resolve<TArg2> ()' Resolve<TArg3> ()' Resolve<TArg4> ()); " is 123.
Long Statement,System.Linq.Dynamic,ClassFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,System.Linq.Dynamic,ClassFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,System.Linq.Dynamic,ClassFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,System.Linq.Dynamic,ClassFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,EntityFramework.Extensions,CacheExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Extensions\CacheExtensions.cs,FromCache,The length of the statement  "	var result = manager.GetOrAdd (cacheKey' k => query.AsNoTracking ().ToList ()' cachePolicy ?? CachePolicy.Default) as IEnumerable<TEntity>; " is 139.
Long Statement,EntityFramework.Extensions,CacheExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Extensions\CacheExtensions.cs,FromCacheAsync,The length of the statement  "	var result = await manager.GetOrAddAsync (cacheKey' async k => await query.AsNoTracking ().ToListAsync ().ConfigureAwait (false)' cachePolicy ?? CachePolicy.Default).ConfigureAwait (false) as IEnumerable<TEntity>; " is 213.
Long Statement,EntityFramework.Extensions,BatchExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Extensions\BatchExtensions.cs,ResolveRunner,The length of the statement  "		throw new InvalidOperationException ("Could not resolve the IBatchRunner. Make sure IBatchRunner is registered in the Locator.Current container."); " is 147.
Long Statement,EntityFramework.Extensions,FutureExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Extensions\FutureExtensions.cs,FutureValue,The length of the statement  "		throw new ArgumentException ("The body of lambda expression must be a Count' Min' Max' Sum or Average method call"' "selector"); " is 128.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetEntityMap,The length of the statement  "	var entityType = metadata.GetItems<EntityType> (DataSpace.OSpace).Single (e => objectItemCollection.GetClrType (e) == type); " is 124.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetEntityMap,The length of the statement  "	var entitySet = metadata.GetItems<EntityContainer> (DataSpace.CSpace).SelectMany (a => a.EntitySets).FirstOrDefault (s => s.ElementType.Name == entityType.Name); " is 161.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetEntityMap,The length of the statement  "	var entitySetMappings = metadata.GetItems<EntityContainerMapping> (DataSpace.CSSpace).Single ().EntitySetMappings.ToList (); " is 124.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetEntityMap,The length of the statement  "	var mapping = GetMapping (entitySetMappings' metadata.GetItems (DataSpace.CSpace).Where (x => x.BuiltInTypeKind == BuiltInTypeKind.EntityType).Cast<EntityType> ().Single (x => x.Name == entityType.Name)); " is 204.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetEntityMap,The length of the statement  "	var mappingFragment = (mapping.EntityTypeMappings.FirstOrDefault (a => a.IsHierarchyMapping) ?? mapping.EntityTypeMappings.First ()).Fragments.First (); " is 152.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetMapping,The length of the statement  "	mapping = entitySetMappings.SingleOrDefault (x => x.EntityTypeMappings.Where (y => y.EntityType != null).Any (y => y.EntityType.Name == entitySet.Name)); " is 153.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,GetMapping,The length of the statement  "	return entitySetMappings.Single (x => x.EntityTypeMappings.Any (y => y.IsOfEntityTypes.Any (z => z.Name == entitySet.Name))); " is 125.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,SetProperties,The length of the statement  "	foreach (var propertyMapping in mapping.EntityTypeMappings.Where (o => o.EntityTypes == null || o.EntityTypes.Count < 1 || o.EntityTypes.Any (et => isTypeOf.Contains (et.Name))).SelectMany (o => o.Fragments).SelectMany (o => o.PropertyMappings)//.Where(o => o.Property.DeclaringType.) " is 284.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,SetTableName,The length of the statement  "		storeSet.MetadataProperties.TryGetValue ("http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator:Table"' true' out tableProperty); " is 147.
Long Statement,EntityFramework.Mapping,MetadataMappingProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Mapping\MetadataMappingProvider.cs,SetTableName,The length of the statement  "		storeSet.MetadataProperties.TryGetValue ("http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator:Schema"' true' out schemaProperty); " is 149.
Long Statement,EntityFramework.Reflection,DelegateFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\DelegateFactory.cs,CreateDynamicMethod,The length of the statement  "	return !owner.IsInterface ? new DynamicMethod (name' returnType' parameterTypes' owner' true) : new DynamicMethod (name' returnType' parameterTypes' owner.Assembly.ManifestModule' true); " is 186.
Long Statement,EntityFramework.Reflection,DelegateFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\DelegateFactory.cs,CreateConstructor,The length of the statement  "	      var constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null);" is 141.
Long Statement,EntityFramework.Reflection,DelegateFactory,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\DelegateFactory.cs,CreateConstructor,The length of the statement  "		ConstructorInfo constructorInfo = type.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 154.
Long Statement,EntityFramework.Reflection,LateBinder,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\LateBinder.cs,SetProperty,The length of the statement  "		throw new InvalidOperationException (string.Format ("Could not find property '{0}' in type '{1}'."' name' rootType.Name)); " is 122.
Long Statement,EntityFramework.Reflection,LateBinder,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\LateBinder.cs,Set,The length of the statement  "		throw new InvalidOperationException (string.Format ("Could not find a property or field with a name of '{0}' in type '{1}'."' name' rootType.Name)); " is 148.
Long Statement,EntityFramework.Reflection,LateBinder,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\LateBinder.cs,GetProperty,The length of the statement  "		throw new InvalidOperationException (string.Format ("Could not find property '{0}' in type '{1}'."' name' rootType.Name)); " is 122.
Long Statement,EntityFramework.Reflection,LateBinder,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\LateBinder.cs,Get,The length of the statement  "		throw new InvalidOperationException (string.Format ("Could not find a property or field with a name of '{0}' in type '{1}'."' name' rootType.Name)); " is 148.
Long Statement,EntityFramework.Reflection,LateBinder,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\LateBinder.cs,InvokeMethod,The length of the statement  "		throw new InvalidOperationException (string.Format ("Could not find method '{0}' in type '{1}'."' name' rootType.Name)); " is 120.
Long Statement,EntityFramework.Reflection,ObjectCloner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ObjectCloner.cs,CloneCollection,The length of the statement  "	object targetValue = accessor.HasSetter ? CreateTargetValue (accessor' originalValue' target) : accessor.GetValue (target); " is 123.
Long Statement,EntityFramework.Reflection,ObjectCloner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ObjectCloner.cs,CloneDictionary,The length of the statement  "	object targetValue = accessor.HasSetter ? CreateTargetValue (accessor' originalValue' target) : accessor.GetValue (target); " is 123.
Long Statement,EntityFramework.Reflection,ReflectionHelper,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ReflectionHelper.cs,IsCollection,The length of the statement  "	return type.GetInterfaces ().Any (x => (x.IsGenericType && x.GetGenericTypeDefinition () == _genericCollectionType) || x.GetType () == _collectionType); " is 152.
Long Statement,EntityFramework.Reflection,ReflectionHelper,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ReflectionHelper.cs,IsDictionary,The length of the statement  "	return type.GetInterfaces ().Any (x => (x.IsGenericType && x.GetGenericTypeDefinition () == _genericDictionaryType) || x.GetType () == _dictionaryType); " is 152.
Long Statement,EntityFramework.Reflection,ReflectionHelper,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ReflectionHelper.cs,CoerceValue,The length of the statement  "	if ((desiredType.IsPrimitive || desiredType.Equals (typeof(decimal))) && valueType.Equals (_stringType) && String.IsNullOrEmpty ((string)value)) " is 144.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Complex Conditional,EntityFramework.Reflection,ReflectionHelper,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ReflectionHelper.cs,CoerceValue,The conditional expression  "(desiredType.IsPrimitive || desiredType.Equals (typeof(decimal))) && valueType.Equals (_stringType) && String.IsNullOrEmpty ((string)value)"  is complex.
Magic Number,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalDelete,The following statement contains a magic number: try {  	// get store connection and transaction  	var store = GetStore (objectContext);  	deleteConnection = store.Item1;  	deleteTransaction = store.Item2;  	if (deleteConnection.State != ConnectionState.Open) {  		deleteConnection.Open ();  		ownConnection = true;  	}  	if (deleteTransaction == null) {  		deleteTransaction = deleteConnection.BeginTransaction ();  		ownTransaction = true;  	}  	deleteCommand = deleteConnection.CreateCommand ();  	deleteCommand.Transaction = deleteTransaction;  	if (objectContext.CommandTimeout.HasValue)  		deleteCommand.CommandTimeout = objectContext.CommandTimeout.Value;  	var innerSelect = GetSelectSql (query' entityMap' deleteCommand);  	var sqlBuilder = new StringBuilder (innerSelect.Length * 2);  	sqlBuilder.Append ("DELETE j0");  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendFormat ("FROM {0} AS j0 INNER JOIN ("' entityMap.TableName);  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendLine (innerSelect);  	sqlBuilder.Append (") AS j1 ON (");  	bool wroteKey = false;  	foreach (var keyMap in entityMap.KeyMaps) {  		if (wroteKey)  			sqlBuilder.Append (" AND ");  		sqlBuilder.AppendFormat ("j0.{0} = j1.{0}"' keyMap.ColumnName);  		wroteKey = true;  	}  	sqlBuilder.Append (")");  	deleteCommand.CommandText = sqlBuilder.ToString ().Replace ("["' "").Replace ("]"' "");  	#if NET45  	int result = async ? await deleteCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : deleteCommand.ExecuteNonQuery ();  	#else  	                int result = deleteCommand.ExecuteNonQuery(); #endif  	// only commit if created transaction  	if (ownTransaction)  		deleteTransaction.Commit ();  	return result;  } finally {  	if (deleteCommand != null)  		deleteCommand.Dispose ();  	if (deleteTransaction != null && ownTransaction)  		deleteTransaction.Dispose ();  	if (deleteConnection != null && ownConnection)  		deleteConnection.Close ();  }  
Magic Number,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,InternalUpdate,The following statement contains a magic number: try {  	// get store connection and transaction  	var store = GetStore (objectContext);  	updateConnection = store.Item1;  	updateTransaction = store.Item2;  	if (updateConnection.State != ConnectionState.Open) {  		updateConnection.Open ();  		ownConnection = true;  	}  	// use existing transaction or create new  	if (updateTransaction == null) {  		updateTransaction = updateConnection.BeginTransaction ();  		ownTransaction = true;  	}  	updateCommand = updateConnection.CreateCommand ();  	updateCommand.Transaction = updateTransaction;  	if (objectContext.CommandTimeout.HasValue)  		updateCommand.CommandTimeout = objectContext.CommandTimeout.Value;  	var innerSelect = GetSelectSql (query' entityMap' updateCommand);  	var sqlBuilder = new StringBuilder (innerSelect.Length * 2);  	sqlBuilder.Append ("UPDATE ");  	sqlBuilder.Append (entityMap.TableName);  	sqlBuilder.AppendFormat (" AS j0 INNER JOIN ("' entityMap.TableName);  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendLine (innerSelect);  	sqlBuilder.Append (") AS j1 ON (");  	bool wroteKey = false;  	foreach (var keyMap in entityMap.KeyMaps) {  		if (wroteKey)  			sqlBuilder.Append (" AND ");  		sqlBuilder.AppendFormat ("j0.{0} = j1.{0}"' keyMap.ColumnName);  		wroteKey = true;  	}  	sqlBuilder.Append (")");  	sqlBuilder.AppendLine (" ");  	sqlBuilder.AppendLine (" SET ");  	var memberInitExpression = updateExpression.Body as MemberInitExpression;  	if (memberInitExpression == null)  		throw new ArgumentException ("The update expression must be of type MemberInitExpression."' "updateExpression");  	int nameCount = 0;  	bool wroteSet = false;  	foreach (MemberBinding binding in memberInitExpression.Bindings) {  		if (wroteSet)  			sqlBuilder.AppendLine ("' ");  		string propertyName = binding.Member.Name;  		string columnName = entityMap.PropertyMaps.Where (p => p.PropertyName == propertyName).Select (p => p.ColumnName).FirstOrDefault ();  		var memberAssignment = binding as MemberAssignment;  		if (memberAssignment == null)  			throw new ArgumentException ("The update expression MemberBinding must only by type MemberAssignment."' "updateExpression");  		Expression memberExpression = memberAssignment.Expression;  		ParameterExpression parameterExpression = null;  		memberExpression.Visit ((ParameterExpression p) => {  			if (p.Type == entityMap.EntityType)  				parameterExpression = p;  			return p;  		});  		if (parameterExpression == null) {  			object value;  			if (memberExpression.NodeType == ExpressionType.Constant) {  				var constantExpression = memberExpression as ConstantExpression;  				if (constantExpression == null)  					throw new ArgumentException ("The MemberAssignment expression is not a ConstantExpression."' "updateExpression");  				value = constantExpression.Value;  			} else {  				LambdaExpression lambda = Expression.Lambda (memberExpression' null);  				value = lambda.Compile ().DynamicInvoke ();  			}  			if (value != null) {  				string parameterName = "p__update__" + nameCount++;  				var parameter = updateCommand.CreateParameter ();  				parameter.ParameterName = parameterName;  				parameter.Value = value;  				updateCommand.Parameters.Add (parameter);  				sqlBuilder.AppendFormat ("{0} = @{1}"' columnName' parameterName);  			} else {  				sqlBuilder.AppendFormat ("{0} = NULL"' columnName);  			}  		} else {  			// create clean objectset to build query from  			var objectSet = objectContext.CreateObjectSet<TEntity> ();  			Type[] typeArguments = new[] {  				entityMap.EntityType'  				memberExpression.Type  			};  			ConstantExpression constantExpression = Expression.Constant (objectSet);  			LambdaExpression lambdaExpression = Expression.Lambda (memberExpression' parameterExpression);  			MethodCallExpression selectExpression = Expression.Call (typeof(Queryable)' "Select"' typeArguments' constantExpression' lambdaExpression);  			// create query from expression  			var selectQuery = objectSet.CreateQuery (selectExpression' entityMap.EntityType);  			string sql = selectQuery.ToTraceString ();  			// parse select part of sql to use as update  			string regex = @"SELECT\s*\r\n(?<ColumnValue>.+)?\s*AS\s*(?<ColumnAlias>\w+)\r\nFROM\s*(?<TableName>\w+\.\w+|\w+)\s*AS\s*(?<TableAlias>\w+)";  			Match match = Regex.Match (sql' regex);  			if (!match.Success)  				throw new ArgumentException ("The MemberAssignment expression could not be processed."' "updateExpression");  			string value = match.Groups ["ColumnValue"].Value;  			string alias = match.Groups ["TableAlias"].Value;  			value = value.Replace (alias + "."' "");  			foreach (ObjectParameter objectParameter in selectQuery.Parameters) {  				string parameterName = "p__update__" + nameCount++;  				var parameter = updateCommand.CreateParameter ();  				parameter.ParameterName = parameterName;  				parameter.Value = objectParameter.Value;  				updateCommand.Parameters.Add (parameter);  				value = value.Replace (objectParameter.Name' parameterName);  			}  			sqlBuilder.AppendFormat ("{0} = {1}"' columnName' value);  		}  		wroteSet = true;  	}  	updateCommand.CommandText = sqlBuilder.ToString ().Replace ("["' "").Replace ("]"' "");  	#if NET45  	int result = async ? await updateCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : updateCommand.ExecuteNonQuery ();  	#else  	                int result = updateCommand.ExecuteNonQuery(); #endif  	// only commit if created transaction  	if (ownTransaction)  		updateTransaction.Commit ();  	return result;  } finally {  	if (updateCommand != null)  		updateCommand.Dispose ();  	if (updateTransaction != null && ownTransaction)  		updateTransaction.Dispose ();  	if (updateConnection != null && ownConnection)  		updateConnection.Close ();  }  
Magic Number,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,GetSelectSql,The following statement contains a magic number: foreach (var propertyMap in entityMap.KeyMaps) {  	if (selector.Length > 4)  		selector.Append (("' "));  	selector.Append (propertyMap.PropertyName);  }  
Magic Number,EntityFramework.Batch,MySqlBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\MySqlBatchRunner.cs,GetSelectSql,The following statement contains a magic number: if (selector.Length > 4)  	selector.Append (("' "));  
Magic Number,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalDelete,The following statement contains a magic number: try {  	// get store connection and transaction  	var store = GetStore (objectContext);  	deleteConnection = store.Item1;  	deleteTransaction = store.Item2;  	if (deleteConnection.State != ConnectionState.Open) {  		deleteConnection.Open ();  		ownConnection = true;  	}  	if (deleteTransaction == null) {  		deleteTransaction = deleteConnection.BeginTransaction ();  		ownTransaction = true;  	}  	deleteCommand = deleteConnection.CreateCommand ();  	deleteCommand.Transaction = deleteTransaction;  	if (objectContext.CommandTimeout.HasValue)  		deleteCommand.CommandTimeout = objectContext.CommandTimeout.Value;  	var innerSelect = GetSelectSql (query' entityMap' deleteCommand);  	var sqlBuilder = new StringBuilder (innerSelect.Length * 2);  	sqlBuilder.Append ("DELETE ");  	sqlBuilder.Append (entityMap.TableName);  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendFormat ("FROM {0} AS j0 INNER JOIN ("' entityMap.TableName);  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendLine (innerSelect);  	sqlBuilder.Append (") AS j1 ON (");  	bool wroteKey = false;  	foreach (var keyMap in entityMap.KeyMaps) {  		if (wroteKey)  			sqlBuilder.Append (" AND ");  		sqlBuilder.AppendFormat ("j0.[{0}] = j1.[{0}]"' keyMap.ColumnName);  		wroteKey = true;  	}  	sqlBuilder.Append (")");  	deleteCommand.CommandText = sqlBuilder.ToString ();  	#if NET45  	int result = async ? await deleteCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : deleteCommand.ExecuteNonQuery ();  	#else  	                int result = deleteCommand.ExecuteNonQuery(); #endif  	// only commit if created transaction  	if (ownTransaction)  		deleteTransaction.Commit ();  	return result;  } finally {  	if (deleteCommand != null)  		deleteCommand.Dispose ();  	if (deleteTransaction != null && ownTransaction)  		deleteTransaction.Dispose ();  	if (deleteConnection != null && ownConnection)  		deleteConnection.Close ();  }  
Magic Number,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,InternalUpdate,The following statement contains a magic number: try {  	// get store connection and transaction  	var store = GetStore (objectContext);  	updateConnection = store.Item1;  	updateTransaction = store.Item2;  	if (updateConnection.State != ConnectionState.Open) {  		updateConnection.Open ();  		ownConnection = true;  	}  	// use existing transaction or create new  	if (updateTransaction == null) {  		updateTransaction = updateConnection.BeginTransaction ();  		ownTransaction = true;  	}  	updateCommand = updateConnection.CreateCommand ();  	updateCommand.Transaction = updateTransaction;  	if (objectContext.CommandTimeout.HasValue)  		updateCommand.CommandTimeout = objectContext.CommandTimeout.Value;  	var innerSelect = GetSelectSql (query' entityMap' updateCommand);  	var sqlBuilder = new StringBuilder (innerSelect.Length * 2);  	sqlBuilder.Append ("UPDATE ");  	sqlBuilder.Append (entityMap.TableName);  	sqlBuilder.AppendLine (" SET ");  	var memberInitExpression = updateExpression.Body as MemberInitExpression;  	if (memberInitExpression == null)  		throw new ArgumentException ("The update expression must be of type MemberInitExpression."' "updateExpression");  	int nameCount = 0;  	bool wroteSet = false;  	foreach (MemberBinding binding in memberInitExpression.Bindings) {  		if (wroteSet)  			sqlBuilder.AppendLine ("' ");  		string propertyName = binding.Member.Name;  		string columnName = entityMap.PropertyMaps.Where (p => p.PropertyName == propertyName).Select (p => p.ColumnName).FirstOrDefault ();  		var memberAssignment = binding as MemberAssignment;  		if (memberAssignment == null)  			throw new ArgumentException ("The update expression MemberBinding must only by type MemberAssignment."' "updateExpression");  		Expression memberExpression = memberAssignment.Expression;  		ParameterExpression parameterExpression = null;  		memberExpression.Visit ((ParameterExpression p) => {  			if (p.Type == entityMap.EntityType)  				parameterExpression = p;  			return p;  		});  		if (parameterExpression == null) {  			object value;  			if (memberExpression.NodeType == ExpressionType.Constant) {  				var constantExpression = memberExpression as ConstantExpression;  				if (constantExpression == null)  					throw new ArgumentException ("The MemberAssignment expression is not a ConstantExpression."' "updateExpression");  				value = constantExpression.Value;  			} else {  				LambdaExpression lambda = Expression.Lambda (memberExpression' null);  				value = lambda.Compile ().DynamicInvoke ();  			}  			if (value != null) {  				string parameterName = "p__update__" + nameCount++;  				var parameter = updateCommand.CreateParameter ();  				parameter.ParameterName = parameterName;  				parameter.Value = value;  				updateCommand.Parameters.Add (parameter);  				sqlBuilder.AppendFormat ("[{0}] = @{1}"' columnName' parameterName);  			} else {  				sqlBuilder.AppendFormat ("[{0}] = NULL"' columnName);  			}  		} else {  			// create clean objectset to build query from  			var objectSet = objectContext.CreateObjectSet<TEntity> ();  			Type[] typeArguments = new[] {  				entityMap.EntityType'  				memberExpression.Type  			};  			ConstantExpression constantExpression = Expression.Constant (objectSet);  			LambdaExpression lambdaExpression = Expression.Lambda (memberExpression' parameterExpression);  			MethodCallExpression selectExpression = Expression.Call (typeof(Queryable)' "Select"' typeArguments' constantExpression' lambdaExpression);  			// create query from expression  			var selectQuery = objectSet.CreateQuery (selectExpression' entityMap.EntityType);  			string sql = selectQuery.ToTraceString ();  			// parse select part of sql to use as update  			string regex = @"SELECT\s*\r\n\s*(?<ColumnValue>.+)?\s*AS\s*(?<ColumnAlias>\[\w+\])\r\n\s*FROM\s*(?<TableName>\[\w+\]\.\[\w+\]|\[\w+\])\s*AS\s*(?<TableAlias>\[\w+\])";  			Match match = Regex.Match (sql' regex);  			if (!match.Success)  				throw new ArgumentException ("The MemberAssignment expression could not be processed."' "updateExpression");  			string value = match.Groups ["ColumnValue"].Value;  			string alias = match.Groups ["TableAlias"].Value;  			value = value.Replace (alias + "."' "");  			foreach (ObjectParameter objectParameter in selectQuery.Parameters) {  				string parameterName = "p__update__" + nameCount++;  				var parameter = updateCommand.CreateParameter ();  				parameter.ParameterName = parameterName;  				parameter.Value = objectParameter.Value ?? DBNull.Value;  				updateCommand.Parameters.Add (parameter);  				value = value.Replace (objectParameter.Name' parameterName);  			}  			sqlBuilder.AppendFormat ("[{0}] = {1}"' columnName' value);  		}  		wroteSet = true;  	}  	sqlBuilder.AppendLine (" ");  	sqlBuilder.AppendFormat ("FROM {0} AS j0 INNER JOIN ("' entityMap.TableName);  	sqlBuilder.AppendLine ();  	sqlBuilder.AppendLine (innerSelect);  	sqlBuilder.Append (") AS j1 ON (");  	bool wroteKey = false;  	foreach (var keyMap in entityMap.KeyMaps) {  		if (wroteKey)  			sqlBuilder.Append (" AND ");  		sqlBuilder.AppendFormat ("j0.[{0}] = j1.[{0}]"' keyMap.ColumnName);  		wroteKey = true;  	}  	sqlBuilder.Append (")");  	updateCommand.CommandText = sqlBuilder.ToString ();  	#if NET45  	int result = async ? await updateCommand.ExecuteNonQueryAsync ().ConfigureAwait (false) : updateCommand.ExecuteNonQuery ();  	#else  	                int result = updateCommand.ExecuteNonQuery(); #endif  	// only commit if created transaction  	if (ownTransaction)  		updateTransaction.Commit ();  	return result;  } finally {  	if (updateCommand != null)  		updateCommand.Dispose ();  	if (updateTransaction != null && ownTransaction)  		updateTransaction.Dispose ();  	if (updateConnection != null && ownConnection)  		updateConnection.Close ();  }  
Magic Number,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,GetSelectSql,The following statement contains a magic number: foreach (var propertyMap in entityMap.KeyMaps) {  	if (selector.Length > 4)  		selector.Append (("' "));  	selector.Append (propertyMap.PropertyName);  }  
Magic Number,EntityFramework.Batch,SqlServerBatchRunner,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Batch\SqlServerBatchRunner.cs,GetSelectSql,The following statement contains a magic number: if (selector.Length > 4)  	selector.Append (("' "));  
Magic Number,EntityFramework.Caching,MemoryCacheProvider,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Caching\MemoryCacheProvider.cs,ClearCache,The following statement contains a magic number: return MemoryCache.Default.Trim (100);  
Magic Number,EntityFramework.Caching,Utility,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Caching\Query\Utility.cs,ToMd5Fingerprint,The following statement contains a magic number: return hash.Aggregate (new StringBuilder (32)' (sb' b) => sb.Append (b.ToString ("X2"))).ToString ();  
Magic Number,EntityFramework.Future,FutureStore,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureStore.cs,FutureStore,The following statement contains a magic number: Threshold = 70;  
Magic Number,EntityFramework.Future,FutureStore,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Future\FutureStore.cs,ShouldCleanup,The following statement contains a magic number: return percent >= MakeFit (Threshold' 0' 100);  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: if (value > -129 && value < 128) {  	il.Emit (OpCodes.Ldc_I4_S' (SByte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following statement contains a magic number: if (value > -129 && value < 128) {  	il.Emit (OpCodes.Ldc_I4_S' (SByte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,EntityFramework.Reflection,MethodAccessor,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\MethodAccessor.cs,GetKey,The following statement contains a magic number: unchecked {  	int result = (name != null ? name.GetHashCode () : 0);  	result = parameterTypes.Aggregate (result' (r' p) => (r * 397) ^ (p != null ? p.GetHashCode () : 0));  	return result;  }  
Magic Number,EntityFramework.Reflection,MethodAccessor,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\MethodAccessor.cs,GetKey,The following statement contains a magic number: result = parameterTypes.Aggregate (result' (r' p) => (r * 397) ^ (p != null ? p.GetHashCode () : 0));  
Missing Default,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,WriteProperties,The following switch statement is missing a default case: switch (state.AuditEntity.Action) {  case AuditAction.Added:  	auditProperty.Current = currentValue;  	break;  case AuditAction.Modified:  	auditProperty.Current = currentValue;  	if (originalValues != null) {  		object originalValue = originalValues.GetValue (edmProperty.Name);  		originalValue = FormatValue (state' name' originalValue);  		auditProperty.Original = originalValue;  	}  	break;  case AuditAction.Deleted:  	auditProperty.Original = currentValue;  	break;  }  
Missing Default,EntityFramework.Audit,AuditLogger,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Audit\AuditLogger.cs,WriteRelationships,The following switch statement is missing a default case: switch (state.AuditEntity.Action) {  case AuditAction.Added:  	auditProperty.Current = currentValue;  	break;  case AuditAction.Modified:  	auditProperty.Current = currentValue ?? _nullText;  	if (Configuration.LoadRelationships) {  		object originalValue = GetDisplayValue (state' navigationProperty' displayMember' originalValues);  		originalValue = FormatValue (state' name' originalValue);  		auditProperty.Original = originalValue;  	}  	break;  case AuditAction.Deleted:  	auditProperty.Original = currentValue;  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Dynamic\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
Missing Default,EntityFramework.Reflection,ILGeneratorExtensions,F:\newReposMay17\loresoft_EntityFramework.Extended\Source\EntityFramework.Extended\Reflection\ILGeneratorExtensions.cs,FastInt,The following switch statement is missing a default case: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
