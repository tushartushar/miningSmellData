Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundDown,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundUp,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,TimeSpanTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,Shift,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,TimeSpanTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,RoundDown,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,IsolineTrackingGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTrackingGraph.xaml.cs,UpdateUIRepresentation,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,IsolineTrackingGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTrackingGraph.xaml.cs,Search,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,UpdateSizeGetters,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,UpdateUIResources,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CreateDataRect,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,UpdateUI,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawMinorTicks,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CreateTicks,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeLabelProviderBase.cs,GetDateFormat,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,Shift,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,RoundDown,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,RoundUp,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,GetDateFormat,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisBase.cs,GetInsertionIndexByPlacement,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisBase.cs,CreateRangeFromRect,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.Research.DynamicDataDisplay,AxisGrid,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisGrid.cs,UpdateUIRepresentation,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ChartPlotter.cs,VerifyAxisType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,OnVisualCollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,OnChildrenCollectionChanged,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,OnChildAdded,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,OnChildRemoving,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay,ElementMarkerPointsGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\MarkerElementPointGraph.cs,OnRenderCore,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,Cyclomatic complexity of the method is 31
Complex Method,Microsoft.Research.DynamicDataDisplay,ViewportElement2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportElement2D.cs,OnRender,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Axes,GeneralAxis,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\GeneralAxis.cs,GetPanelByPlacement,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter2,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter2.cs,Filter,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutEdge,Cyclomatic complexity of the method is 34
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetAdjacentEdge,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetSubCell,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,MakeEdgePassed,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,TrackLine,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,PrepareCells,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,AxisNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\AxisNavigation.cs,SetListeningPanel,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,AxisNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\AxisNavigation.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,OldAxisNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\OldAxisNavigation.cs,OnOrientationChanged,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,UpdateUIRepresentation,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,GetEncoderByExtension,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,SaveBitmapToFile,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,DomainRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\DomainRestriction.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,DataHeightRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\DataHeightRestriction.cs,Apply,Cyclomatic complexity of the method is 15
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,LegendBottomButtonIsEnabledConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\LegendBottomButtonIsEnabledConverter.cs,ConvertCore,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,IsolineTrackingGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTrackingGraph.xaml.cs,Interpolate,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,UpdateSizeGetters,The method has 14 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CheckLabelsArrangement,The method has 9 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,GetTicks,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay,Plotter2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Plotter2DExtensions.cs,AddLineGraph,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay,Plotter2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Plotter2DExtensions.cs,AddLineGraph,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay,Plotter2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Plotter2DExtensions.cs,AddLineGraph,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetPoint,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,TrackLine,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Navigation,TouchpadScroll,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\TouchPadScroll.cs,OnMessageAppeared,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,ConvertCore,The method has 7 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,ConvertCore,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Converters,TwoValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\TwoValuesMultiConverter.cs,ConvertCore,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.DataSources.MultiDimensional,DataSource2DHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\DataSources\MultiDimensional\DataSource2DHelper.cs,CreateUniformGrid,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.DataSources.MultiDimensional,NonUniformDataSource2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\DataSources\MultiDimensional\NonUniformDataSource2D.cs,GetSubset,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.DataSources.MultiDimensional,EmptyDataSource2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\DataSources\MultiDimensional\EmptyDataSource2D.cs,GetSubset,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.DataSources.MultiDimensional,WarpedDataSource2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\DataSources\MultiDimensional\WarpedDataSource2D.cs,GetSubset,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.DataSources,IDataSource2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\DataSources\MultiDimensional\IDataSource2D.cs,GetSubset,The method has 6 parameters.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,TimePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,GetTicks,The length of the statement  "	RoundingInfo bounds = RoundingHelper.CreateRoundedRange (GetSpecificValue (start' start)' GetSpecificValue (start' end)); " is 121.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundDown,The length of the statement  "		res = time.Date.AddHours (time.Hour).AddMinutes (time.Minute).AddSeconds (time.Second).AddMilliseconds (time.Millisecond); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The length of the statement  "	var ticks = majorTicks.GetPairs ().Select (r => Clip (provider.GetTicks (r' ticksCount)' r)).SelectMany (t => t.Ticks).ToArray (); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,LegendStyles,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\LegendStyles.cs,GetLegendStyles,The length of the statement  "	var legendStyles = (ResourceDictionary)Application.LoadComponent (new Uri ("/DynamicDataDisplay;component/Charts/Legend items/LegendResources.xaml"' UriKind.Relative)); " is 168.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,TimeSpanTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,RoundDown,The length of the statement  "			res = TimeSpan.FromDays (timeSpan.Days).Add (TimeSpan.FromHours (timeSpan.Hours)).Add (TimeSpan.FromMinutes (timeSpan.Minutes)); " is 128.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,TimeSpanTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,RoundDown,The length of the statement  "			res = TimeSpan.FromDays (timeSpan.Days).Add (TimeSpan.FromHours (timeSpan.Hours)).Add (TimeSpan.FromMinutes (timeSpan.Minutes)).Add (TimeSpan.FromSeconds (timeSpan.Seconds)); " is 174.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawMajorLabels,The length of the statement  "		double[] screenCoords = majorTicks.Ticks.Select (tick => createDataPoint (convertToDouble (tick))).Select (p => p.DataToScreen (transform)).Select (p => getCoordinate (p)).ToArray (); " is 183.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawMinorTicks,The length of the statement  "		double[] screenCoords = minorTicks.Ticks.Select (coord => getCoordinate (createDataPoint (convertToDouble (coord)).DataToScreen (transform))).ToArray (); " is 153.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,RoundDown,The length of the statement  "		res = dateTime.Date.AddHours (dateTime.Hour).AddMinutes (dateTime.Minute).AddSeconds (dateTime.Second).AddMilliseconds (dateTime.Millisecond); " is 142.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The length of the statement  "		// doing binding as described at http://sdolha.spaces.live.com/blog/cns!4121802308C5AB4E!3724.entry?wa=wsignin1.0&sa=835372863 " is 126.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementSize,The length of the statement  "		res = new Size (hasViewportWidth ? screenBounds.Width : selfWidth' hasViewportHeight ? screenBounds.Height : selfHeight); " is 121.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The length of the statement  "		DataRect r = new DataRect (new Size (hasViewportWidth ? viewportWidth : child.DesiredSize.Width' hasViewportHeight ? viewportHeight : child.DesiredSize.Height)); " is 161.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRectExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\DataRectExtensions.cs,IsCloseTo,The length of the statement  "	bool areClose = MathHelper.AreClose (square1' intersectionSquare' difference) && MathHelper.AreClose (square2' intersectionSquare' difference); " is 143.
Long Statement,Microsoft.Research.DynamicDataDisplay,GenericChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\GenericChartPlotter.cs,CreateGenericRect,The length of the statement  "	GenericRect<THorizontal' TVertical> res = new GenericRect<THorizontal' TVertical> (DoubleToHorizontalConverter (xMin)' DoubleToVerticalConverter (yMin)' DoubleToHorizontalConverter (xMax)' DoubleToVerticalConverter (yMax)); " is 223.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,IntersectsWith,The length of the statement  "	return ((((rect.XMin <= this.XMax) && (rect.XMax >= this.XMin)) && (rect.YMax >= this.YMin)) && (rect.YMin <= this.YMax)); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,EqualEps,The length of the statement  "	return Math.Abs (rect1.XMin - rect2.XMin) < width * eps && Math.Abs (rect1.XMax - rect2.XMax) < width * eps && Math.Abs (rect1.YMin - rect2.YMin) < height * eps && Math.Abs (rect1.YMax - rect2.YMax) < height * eps; " is 214.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,ConvertToString,The length of the statement  "	return String.Format (provider' "{1:" + format + "}{0}{2:" + format + "}{0}{3:" + format + "}{0}{4:" + format + "}"' listSeparator' xMin' yMin' width' height); " is 159.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The length of the statement  "			rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo)); " is 197.
Long Statement,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The length of the statement  "			rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo)); " is 200.
Long Statement,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,ShouldSerializeProperty,The length of the statement  "	// do not serialize context menu if it was created by DefaultContextMenu' because that context menu items contains references of plotter " is 136.
Long Statement,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Plotter.cs,OnChildRemoving,The length of the statement  "				throw new InvalidOperationException (String.Format (Strings.Exceptions.PlotterElementDidnotCleanedAfterItself' child.ToString ())); " is 131.
Long Statement,Microsoft.Research.DynamicDataDisplay,GenericRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\GenericRect.cs,Equals,The length of the statement  "	return this.xMin.Equals (other.xMin) && this.xMax.Equals (other.xMax) && this.yMin.Equals (other.yMin) && this.yMax.Equals (other.yMax); " is 136.
Long Statement,Microsoft.Research.DynamicDataDisplay,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend.xaml.cs,UpdateVisibility,The length of the statement  "	if (stackPanel.Children.Count > 0 && ReadLocalValue (VisibilityProperty) == DependencyProperty.UnsetValue && autoShowAndHide == true) { " is 135.
Long Statement,Microsoft.Research.DynamicDataDisplay,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend.xaml.cs,UpdateVisibility,The length of the statement  "	else if (stackPanel.Children.Count == 0 && ReadLocalValue (VisibilityProperty) != DependencyProperty.UnsetValue && autoShowAndHide == true) { " is 141.
Long Statement,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The length of the statement  "				if (squareBottomLimit < currRatio && currRatio < squareTopLimit && squareBottomLimit < prevRatio && prevRatio < squareTopLimit) { " is 129.
Long Statement,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,RaisePropertyChanged,The length of the statement  "	//    pendingRaisePropertyChangedOperation = Dispatcher.BeginInvoke(() => RaisePropertyChanged(args)' DispatcherPriority.Normal); " is 129.
Long Statement,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The length of the statement  "	return Color.FromArgb ((byte)(Math.Round (alpha * 255))' (byte)(Math.Round (r * 255))' (byte)(Math.Round (g * 255))' (byte)(Math.Round (b * 255))); " is 147.
Long Statement,Microsoft.Research.DynamicDataDisplay,Plotter2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Plotter2DExtensions.cs,AddLineGraph,The length of the statement  "	return AddLineGraph (plotter' pointSource' new Pen (new SolidColorBrush (lineColor)' lineThickness)' new PenDescription (description)); " is 135.
Long Statement,Microsoft.Research.DynamicDataDisplay,Plotter2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Plotter2DExtensions.cs,AddLineGraph,The length of the statement  "	var res = AddLineGraph (plotter' pointSource' new Pen (new SolidColorBrush (ColorHelper.CreateRandomHsbColor ())' lineThickness)' (PointMarker)null' new PenDescription (description)); " is 183.
Long Statement,Microsoft.Research.DynamicDataDisplay,Viewport2DExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2DExtensions.cs,Zoom,The length of the statement  "	viewport.Plotter.UndoProvider.AddAction (new DependencyPropertyChangedUndoAction (viewport' Viewport2D.VisibleProperty' oldVisible' visible)); " is 142.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineDisplay,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineDisplay.xaml.cs,OnApplyTemplate,The length of the statement  "	//Binding contentBoundsBinding = new Binding { Path = new PropertyPath("(0)"' Viewport2D.ContentBoundsProperty)' Source = isolineRenderer }; " is 140.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineDisplay,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineDisplay.xaml.cs,OnApplyTemplate,The length of the statement  "		isolineRenderer.AddHandler (Viewport2D.ContentBoundsChangedEvent' new RoutedEventHandler (OnRendererContentBoundsChanged)); " is 123.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The length of the statement  "	Annotater.WayBeforeText = Math.Sqrt (visible.Width * visible.Width + visible.Height * visible.Height) / 100 * WayBeforeTextMultiplier; " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateFormattedText,The length of the statement  "	FormattedText result = new FormattedText (text' CultureInfo.CurrentCulture' System.Windows.FlowDirection.LeftToRight' new Typeface ("Arial")' 12' Brushes.Black); " is 161.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,RenderIsolineCollection,The length of the statement  "				context.PolyBezierTo (BezierBuilder.GetBezierPoints (line.AllPoints.ViewportToScreen (transform).ToArray ()).Skip (1).ToArray ()' true' true); " is 142.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\Enums.cs,IsDiagonal,The length of the statement  "	return bitmask == (CellBitmask.RightBottom | CellBitmask.LeftTop) || bitmask == (CellBitmask.LeftBottom | CellBitmask.RightTop); " is 128.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	bottomDict.Add (Edge.Left' CellBitmask.LeftTop' CellBitmask.LeftBottom | CellBitmask.RightBottom | CellBitmask.RightTop' CellBitmask.LeftTop | CellBitmask.RightBottom | CellBitmask.RightTop' CellBitmask.LeftBottom); " is 215.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	bottomDict.Add (Edge.Right' CellBitmask.RightTop' CellBitmask.LeftBottom | CellBitmask.RightBottom | CellBitmask.LeftTop' CellBitmask.LeftBottom | CellBitmask.LeftTop | CellBitmask.RightTop); " is 191.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	bottomDict.Add (Edge.Top' CellBitmask.RightBottom | CellBitmask.RightTop' CellBitmask.LeftBottom | CellBitmask.LeftTop); " is 120.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	leftDict.Add (Edge.Right' CellBitmask.LeftTop | CellBitmask.RightTop' CellBitmask.LeftBottom | CellBitmask.RightBottom); " is 120.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	leftDict.Add (Edge.Bottom' CellBitmask.RightBottom | CellBitmask.RightTop | CellBitmask.LeftTop' CellBitmask.LeftBottom); " is 121.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	topDict.Add (Edge.Left' CellBitmask.RightBottom | CellBitmask.RightTop | CellBitmask.LeftTop' CellBitmask.LeftBottom' CellBitmask.LeftTop' CellBitmask.LeftBottom | CellBitmask.RightBottom | CellBitmask.RightTop); " is 212.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	topDict.Add (Edge.Bottom' CellBitmask.RightBottom | CellBitmask.RightTop' CellBitmask.LeftTop | CellBitmask.LeftBottom); " is 120.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	rightDict.Add (Edge.Left' CellBitmask.LeftTop | CellBitmask.RightTop' CellBitmask.LeftBottom | CellBitmask.RightBottom); " is 120.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,SetCellDictionaries,The length of the statement  "	rightDict.Add (Edge.Bottom' CellBitmask.RightBottom' CellBitmask.LeftTop | CellBitmask.LeftBottom | CellBitmask.RightTop); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,TrackLine,The length of the statement  "	ValuesInCell vc = (missingValue.IsNaN ()) ? (new ValuesInCell (values [x' y]' values [x + 1' y]' values [x + 1' y + 1]' values [x' y + 1])) : (new ValuesInCell (values [x' y]' values [x + 1' y]' values [x + 1' y + 1]' values [x' y + 1]' missingValue)); " is 252.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,TrackLineNonRecursive,The length of the statement  "	ValuesInCell vc = (missingValue.IsNaN ()) ? (new ValuesInCell (values [x' y]' values [x + 1' y]' values [x + 1' y + 1]' values [x' y + 1])) : (new ValuesInCell (values [x' y]' values [x + 1' y]' values [x + 1' y + 1]' values [x' y + 1]' missingValue)); " is 252.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,HasIsoline,The length of the statement  "	return (edges [x' y] != 0 && ((x < edges.GetLength (0) - 1 && edges [x + 1' y] != 0) || (y < edges.GetLength (1) - 1 && edges [x' y + 1] != 0))); " is 145.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,PrepareCells,The length of the statement  "			if ((edges [x' y] & (byte)Edge.Bottom) == 0 && BelongsToEdge (value' values [x' y]' values [x + 1' y]' false) && !processed [x' y - 1]) { " is 137.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,PrepareCells,The length of the statement  "			if ((edges [x' y] & (byte)Edge.Bottom) == 0 && BelongsToEdge (value' values [x' y]' values [x + 1' y]' false) && !processed [x' y]) { " is 133.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,PrepareCells,The length of the statement  "			if ((edges [x' y] & (byte)Edge.Left) == 0 && BelongsToEdge (value' values [x' y]' values [x' y - 1]' false) && !processed [x - 1' y - 1]) { " is 139.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,PrepareCells,The length of the statement  "			if ((edges [x' y] & (byte)Edge.Left) == 0 && BelongsToEdge (value' values [x' y]' values [x' y - 1]' false) && !processed [x' y - 1]) { " is 135.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,LongOperationsIndicator,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\LongOperationsIndicator.cs,LoadIndicator,The length of the statement  "	var resources = (ResourceDictionary)Application.LoadComponent (new Uri ("/DynamicDataDisplay;component/Charts/Navigation/LongOperationsIndicatorResources.xaml"' UriKind.Relative)); " is 180.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Markers,OldBarChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Markers\BarChart.cs,OnMarkerBind,The length of the statement  "	//marker.SetBinding(ViewportRectPanel.ViewportVerticalAlignmentProperty' new Binding { Path = new PropertyPath("Value")' Converter = converter }); " is 146.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,DefaultContextMenu,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\DefaultContextMenu.cs,LoadIcon,The length of the statement  "	icon.StreamSource = currentAssembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Resources." + name + ".png"); " is 131.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,DefaultContextMenu,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\DefaultContextMenu.cs,reportFeedback_Click,The length of the statement  "		using (Process.Start ("mailto:" + Strings.UIResources.SendFeedbackEmail + "?Subject=[D3]%20" + typeof(DefaultContextMenu).Assembly.GetName ().Version)) { " is 153.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,DefaultContextMenu,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\DefaultContextMenu.cs,reportFeedback_Click,The length of the statement  "		MessageBox.Show (Strings.UIResources.SendFeedbackError + Strings.UIResources.SendFeedbackEmail' "Error while sending feedback"' MessageBoxButton.OK' MessageBoxImage.Information); " is 178.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var zoomOutToMouseCommandBinding = new CommandBinding (ChartCommands.ZoomOutToMouse' ZoomOutToMouseExecute' ZoomOutToMouseCanExecute); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var zoomInToMouseCommandBinding = new CommandBinding (ChartCommands.ZoomInToMouse' ZoomInToMouseExecute' ZoomInToMouseCanExecute); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var zoomWithParamCommandBinding = new CommandBinding (ChartCommands.ZoomWithParameter' ZoomWithParamExecute' ZoomWithParamCanExecute); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var ScrollRightCommandBinding = new CommandBinding (ChartCommands.ScrollRight' ScrollRightExecute' ScrollRightCanExecute); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var SaveScreenshotCommandBinding = new CommandBinding (ChartCommands.SaveScreenshot' SaveScreenshotExecute' SaveScreenshotCanExecute); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,InitCommands,The length of the statement  "	var CopyScreenshotCommandBinding = new CommandBinding (ChartCommands.CopyScreenshot' CopyScreenshotExecute' CopyScreenshotCanExecute); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,KeyboardNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\KeyboardNavigation.cs,ScrollVisibleProportionally,The length of the statement  "	plotter2D.UndoProvider.AddAction (new DependencyPropertyChangedUndoAction (Viewport' Viewport2D.VisibleProperty' oldVisible' visible)); " is 135.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,TriangleMath,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\TriangleMath.cs,TriangleContains,The length of the statement  "		bool res = AreClose (ab.X * ax.Y' ab.Y * ax.X) && !AreClose (ab.LengthSquared' 0) || AreClose (ac.X * ax.Y' ac.Y * ax.X) && !AreClose (ac.LengthSquared' 0) || AreClose (bc.X * bx.Y' bc.Y * bx.X) && !AreClose (bc.LengthSquared' 0); " is 230.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,CreateScreenshot,The length of the statement  "	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)(size.Width * dpiCoeff)' (int)(size.Height * dpiCoeff)' dpi' dpi' PixelFormats.Default); " is 142.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,CreateElementScreenshot,The length of the statement  "	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)uiElement.RenderSize.Width' (int)uiElement.RenderSize.Height' 96' 96' PixelFormats.Default); " is 146.
Long Statement,Microsoft.Research.DynamicDataDisplay.MarkupExtensions,XbapConditionalExpression,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\MarkupExtensions\XbapConditionalExpression.cs,ProvideValue,The length of the statement  "	return ((ResourceDictionary)Application.LoadComponent (new Uri ("/DynamicDataDisplay;component/Themes/Generic.xaml"' UriKind.Relative))) [Value]; " is 145.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Palettes,LinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\LinearPalette.cs,GetColor,The length of the statement  "	Color result = Color.FromRgb ((byte)((1 - ratio) * c0.R + ratio * c1.R)' (byte)((1 - ratio) * c0.G + ratio * c1.G)' (byte)((1 - ratio) * c0.B + ratio * c1.B)); " is 159.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,GetColor,The length of the statement  "		Color res = Color.FromRgb ((byte)(c0.R * ratio + c1.R * (1 - ratio))' (byte)(c0.G * ratio + c1.G * (1 - ratio))' (byte)(c0.B * ratio + c1.B * (1 - ratio))); " is 156.
Long Statement,Microsoft.Research.DynamicDataDisplay.PointMarkers,CenteredTextMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CenteredTextMarker.cs,Render,The length of the statement  "	FormattedText textToDraw = new FormattedText (Text' Thread.CurrentThread.CurrentCulture' FlowDirection.LeftToRight' new Typeface ("Arial")' 12' Brushes.Black); " is 159.
Long Statement,Microsoft.Research.DynamicDataDisplay.PointMarkers,CenteredTextMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CenteredTextMarker.cs,Render,The length of the statement  "	Rect bounds = RectExtensions.FromCenterSize (new Point (screenPoint.X' screenPoint.Y + verticalShift - height / 2)' new Size (width' height)); " is 142.
Long Statement,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,FollowWidthRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\FollowWidthRestriction.cs,Apply,The length of the statement  "	Rect visible = new Rect (proposedDataRect.XMin + proposedDataRect.Width - followWidth' proposedDataRect.YMin' followWidth' proposedDataRect.Height); " is 148.
Complex Conditional,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,UpdateUI,The conditional expression  "transform.ScreenRect.Width == 0 && isHorizontal || transform.ScreenRect.Height == 0 && !isHorizontal"  is complex.
Complex Conditional,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The conditional expression  "left.IsNaN () && right.IsNaN () && bottom.IsNaN () && top.IsNaN ()"  is complex.
Complex Conditional,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The conditional expression  "squareBottomLimit < currRatio && currRatio < squareTopLimit && squareBottomLimit < prevRatio && prevRatio < squareTopLimit"  is complex.
Complex Conditional,Microsoft.Research.DynamicDataDisplay,ViewportElement2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportElement2D.cs,OnRender,The conditional expression  "shouldReRender || manualTranslate || renderTarget == RenderTo.Image || beforeFirstUpdate || updateCalled"  is complex.
Complex Conditional,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The conditional expression  "values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4"  is complex.
Empty Catch Block,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,SaveBitmapToFile,The method has an empty catch block.
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ExtendedDaysStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\Strategies\ExtendedDaysStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 365)  	diff = DifferenceIn.Year;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 365)  	diff = DifferenceIn.Year;  else if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 365)  	diff = DifferenceIn.Year;  else if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The following statement contains a magic number: if (ticksCount == 0)  	ticksCount = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The following statement contains a magic number: ticksCount = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeSpanAxis,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanAxis.cs,TimeSpanToDouble,The following statement contains a magic number: return time.Ticks / 10000000000.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DataFollowChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\DataFollowChart.cs,CreateDefaultMarker,The following statement contains a magic number: return new Ellipse {  	Width = 10'  	Height = 10'  	Stroke = Brushes.Green'  	StrokeThickness = 1'  	Fill = Brushes.LightGreen'  	Visibility = Visibility.Hidden  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DataFollowChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\DataFollowChart.cs,CreateDefaultMarker,The following statement contains a magic number: return new Ellipse {  	Width = 10'  	Height = 10'  	Stroke = Brushes.Green'  	StrokeThickness = 1'  	Fill = Brushes.LightGreen'  	Visibility = Visibility.Hidden  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,LiveToolTipAdorner,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\LiveToolTips\LiveToolTipAdorner.cs,ArrangeTooltip,The following statement contains a magic number: location.Offset (-tooltipSize.Width / 2' -tooltipSize.Height - 1);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondTimeSpanProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeSpanTicksProviderBase.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: if (res < 2)  	res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: if (res < 2)  	res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeTicksProviderBase.cs,IncreaseTickCount,The following statement contains a magic number: DebugVerify.Is (ticksCount < 2000);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\TimeSpan\TimeTicksProviderBase.cs,IncreaseTickCount,The following statement contains a magic number: return ticksCount * 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateUIRepresentation,The following statement contains a magic number: if (Collection != null) {  	DataRect bounds = DataRect.Empty;  	foreach (var line in Collection.Lines) {  		foreach (var point in line.AllPoints) {  			bounds.Union (point);  		}  		Path path = new Path {  			Stroke = new SolidColorBrush (Palette.GetColor (line.Value01))'  			StrokeThickness = StrokeThickness'  			Data = CreateGeometry (line)'  			Tag = line  		};  		content.Children.Add (path);  		linePaths.Add (path);  	}  	Viewport2D.SetContentBounds (this' bounds);  	if (DrawLabels) {  		var transform = Plotter2D.Viewport.Transform;  		double wayBeforeText = new Rect (new Size (2000' 2000)).ScreenToData (transform).Width;  		Annotater.WayBeforeText = wayBeforeText;  		var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  		foreach (var textLabel in textLabels) {  			var text = CreateTextLabel (textLabel);  			content.Children.Add (text);  			textBlocks.Add (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateUIRepresentation,The following statement contains a magic number: if (Collection != null) {  	DataRect bounds = DataRect.Empty;  	foreach (var line in Collection.Lines) {  		foreach (var point in line.AllPoints) {  			bounds.Union (point);  		}  		Path path = new Path {  			Stroke = new SolidColorBrush (Palette.GetColor (line.Value01))'  			StrokeThickness = StrokeThickness'  			Data = CreateGeometry (line)'  			Tag = line  		};  		content.Children.Add (path);  		linePaths.Add (path);  	}  	Viewport2D.SetContentBounds (this' bounds);  	if (DrawLabels) {  		var transform = Plotter2D.Viewport.Transform;  		double wayBeforeText = new Rect (new Size (2000' 2000)).ScreenToData (transform).Width;  		Annotater.WayBeforeText = wayBeforeText;  		var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  		foreach (var textLabel in textLabels) {  			var text = CreateTextLabel (textLabel);  			content.Children.Add (text);  			textBlocks.Add (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateUIRepresentation,The following statement contains a magic number: if (DrawLabels) {  	var transform = Plotter2D.Viewport.Transform;  	double wayBeforeText = new Rect (new Size (2000' 2000)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		content.Children.Add (text);  		textBlocks.Add (text);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateUIRepresentation,The following statement contains a magic number: if (DrawLabels) {  	var transform = Plotter2D.Viewport.Transform;  	double wayBeforeText = new Rect (new Size (2000' 2000)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		content.Children.Add (text);  		textBlocks.Add (text);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: if (angle < 0)  	angle += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: angle += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: if (135 < angle && angle < 225)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: if (135 < angle && angle < 225)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: if (135 < angle && angle < 225)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,CreateTextLabel,The following statement contains a magic number: angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,OnViewportPropertyChanged,The following statement contains a magic number: if (e.PropertyName == "Visible" || e.PropertyName == "Output") {  	bool isVisibleChanged = e.PropertyName == "Visible";  	DataRect prevRect = isVisibleChanged ? (DataRect)e.OldValue : new DataRect ((Rect)e.OldValue);  	DataRect currRect = isVisibleChanged ? (DataRect)e.NewValue : new DataRect ((Rect)e.NewValue);  	// completely rebuild text only if width and height have changed many  	const double smallChangePercent = 0.05;  	bool widthChangedLittle = Math.Abs (currRect.Width - prevRect.Width) / currRect.Width < smallChangePercent;  	bool heightChangedLittle = Math.Abs (currRect.Height - prevRect.Height) / currRect.Height < smallChangePercent;  	rebuildText = !(widthChangedLittle && heightChangedLittle);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: if (rebuildText && DrawLabels) {  	rebuildText = false;  	foreach (var text in textBlocks) {  		if (text.Visibility == Visibility.Visible)  			content.Children.Remove (text);  	}  	textBlocks.Clear ();  	double wayBeforeText = new Rect (new Size (100' 100)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		textBlocks.Add (text);  		if (visible.Contains (textLabel.Position)) {  			content.Children.Add (text);  		}  		else {  			text.Visibility = Visibility.Hidden;  		}  	}  }  else {  	foreach (var text in textBlocks) {  		IsolineTextLabel label = (IsolineTextLabel)text.Tag;  		Point screenPos = label.Position.DataToScreen (transform);  		Size textSize = text.DesiredSize;  		Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  		if (output.Contains (position)) {  			Canvas.SetLeft (text' position.X);  			Canvas.SetTop (text' position.Y);  			if (text.Visibility == Visibility.Hidden) {  				text.Visibility = Visibility.Visible;  				content.Children.Add (text);  			}  		}  		else if (text.Visibility == Visibility.Visible) {  			text.Visibility = Visibility.Hidden;  			content.Children.Remove (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: if (rebuildText && DrawLabels) {  	rebuildText = false;  	foreach (var text in textBlocks) {  		if (text.Visibility == Visibility.Visible)  			content.Children.Remove (text);  	}  	textBlocks.Clear ();  	double wayBeforeText = new Rect (new Size (100' 100)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		textBlocks.Add (text);  		if (visible.Contains (textLabel.Position)) {  			content.Children.Add (text);  		}  		else {  			text.Visibility = Visibility.Hidden;  		}  	}  }  else {  	foreach (var text in textBlocks) {  		IsolineTextLabel label = (IsolineTextLabel)text.Tag;  		Point screenPos = label.Position.DataToScreen (transform);  		Size textSize = text.DesiredSize;  		Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  		if (output.Contains (position)) {  			Canvas.SetLeft (text' position.X);  			Canvas.SetTop (text' position.Y);  			if (text.Visibility == Visibility.Hidden) {  				text.Visibility = Visibility.Visible;  				content.Children.Add (text);  			}  		}  		else if (text.Visibility == Visibility.Visible) {  			text.Visibility = Visibility.Hidden;  			content.Children.Remove (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: if (rebuildText && DrawLabels) {  	rebuildText = false;  	foreach (var text in textBlocks) {  		if (text.Visibility == Visibility.Visible)  			content.Children.Remove (text);  	}  	textBlocks.Clear ();  	double wayBeforeText = new Rect (new Size (100' 100)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		textBlocks.Add (text);  		if (visible.Contains (textLabel.Position)) {  			content.Children.Add (text);  		}  		else {  			text.Visibility = Visibility.Hidden;  		}  	}  }  else {  	foreach (var text in textBlocks) {  		IsolineTextLabel label = (IsolineTextLabel)text.Tag;  		Point screenPos = label.Position.DataToScreen (transform);  		Size textSize = text.DesiredSize;  		Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  		if (output.Contains (position)) {  			Canvas.SetLeft (text' position.X);  			Canvas.SetTop (text' position.Y);  			if (text.Visibility == Visibility.Hidden) {  				text.Visibility = Visibility.Visible;  				content.Children.Add (text);  			}  		}  		else if (text.Visibility == Visibility.Visible) {  			text.Visibility = Visibility.Hidden;  			content.Children.Remove (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: if (rebuildText && DrawLabels) {  	rebuildText = false;  	foreach (var text in textBlocks) {  		if (text.Visibility == Visibility.Visible)  			content.Children.Remove (text);  	}  	textBlocks.Clear ();  	double wayBeforeText = new Rect (new Size (100' 100)).ScreenToData (transform).Width;  	Annotater.WayBeforeText = wayBeforeText;  	var textLabels = Annotater.Annotate (Collection' Plotter2D.Viewport.Visible);  	foreach (var textLabel in textLabels) {  		var text = CreateTextLabel (textLabel);  		textBlocks.Add (text);  		if (visible.Contains (textLabel.Position)) {  			content.Children.Add (text);  		}  		else {  			text.Visibility = Visibility.Hidden;  		}  	}  }  else {  	foreach (var text in textBlocks) {  		IsolineTextLabel label = (IsolineTextLabel)text.Tag;  		Point screenPos = label.Position.DataToScreen (transform);  		Size textSize = text.DesiredSize;  		Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  		if (output.Contains (position)) {  			Canvas.SetLeft (text' position.X);  			Canvas.SetTop (text' position.Y);  			if (text.Visibility == Visibility.Hidden) {  				text.Visibility = Visibility.Visible;  				content.Children.Add (text);  			}  		}  		else if (text.Visibility == Visibility.Visible) {  			text.Visibility = Visibility.Hidden;  			content.Children.Remove (text);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: foreach (var text in textBlocks) {  	IsolineTextLabel label = (IsolineTextLabel)text.Tag;  	Point screenPos = label.Position.DataToScreen (transform);  	Size textSize = text.DesiredSize;  	Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  	if (output.Contains (position)) {  		Canvas.SetLeft (text' position.X);  		Canvas.SetTop (text' position.Y);  		if (text.Visibility == Visibility.Hidden) {  			text.Visibility = Visibility.Visible;  			content.Children.Add (text);  		}  	}  	else if (text.Visibility == Visibility.Visible) {  		text.Visibility = Visibility.Hidden;  		content.Children.Remove (text);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineGraph.cs,UpdateUIRepresentation,The following statement contains a magic number: foreach (var text in textBlocks) {  	IsolineTextLabel label = (IsolineTextLabel)text.Tag;  	Point screenPos = label.Position.DataToScreen (transform);  	Size textSize = text.DesiredSize;  	Point position = new Point (screenPos.X - textSize.Width / 2' screenPos.Y - textSize.Height / 2);  	if (output.Contains (position)) {  		Canvas.SetLeft (text' position.X);  		Canvas.SetTop (text' position.Y);  		if (text.Visibility == Visibility.Hidden) {  			text.Visibility = Visibility.Visible;  			content.Children.Add (text);  		}  	}  	else if (text.Visibility == Visibility.Visible) {  		text.Visibility = Visibility.Hidden;  		content.Children.Remove (text);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineTrackingGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTrackingGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: if (Search (visiblePoint' out isolineLevel)) {  	var collection = IsolineBuilder.BuildIsoline (isolineLevel);  	string format = "G3";  	if (Math.Abs (isolineLevel) < 1000)  		format = "F";  	textBlock.Text = isolineLevel.ToString (format);  	double x = mousePos.X + labelShift.X;  	if (x + labelGrid.ActualWidth > output.Right)  		x = mousePos.X - labelShift.X - labelGrid.ActualWidth;  	double y = mousePos.Y - labelShift.Y - labelGrid.ActualHeight;  	if (y < output.Top)  		y = mousePos.Y + labelShift.Y;  	Canvas.SetLeft (labelGrid' x);  	Canvas.SetTop (labelGrid' y);  	foreach (LevelLine segment in collection.Lines) {  		StreamGeometry streamGeom = new StreamGeometry ();  		using (StreamGeometryContext context = streamGeom.Open ()) {  			Point startPoint = segment.StartPoint.DataToScreen (transform);  			var otherPoints = segment.OtherPoints.DataToScreenAsList (transform);  			context.BeginFigure (startPoint' false' false);  			context.PolyLineTo (otherPoints' true' true);  		}  		Path path = new Path {  			Stroke = new SolidColorBrush (Palette.GetColor (segment.Value01))'  			Data = streamGeom'  			Style = pathStyle  		};  		content.Children.Add (path);  		addedPaths.Add (path);  		labelGrid.Visibility = Visibility.Visible;  		Binding pathBinding = new Binding {  			Path = new PropertyPath ("StrokeThickness")'  			Source = this  		};  		path.SetBinding (Path.StrokeThicknessProperty' pathBinding);  	}  }  else {  	labelGrid.Visibility = Visibility.Hidden;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,IsolineTrackingGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTrackingGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: if (Math.Abs (isolineLevel) < 1000)  	format = "F";  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: if (rect != null) {  	rect.Effect = new DropShadowEffect {  		Direction = 300'  		ShadowDepth = 3'  		Opacity = 0.4  	};  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: if (rect != null) {  	rect.Effect = new DropShadowEffect {  		Direction = 300'  		ShadowDepth = 3'  		Opacity = 0.4  	};  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: if (rect != null) {  	rect.Effect = new DropShadowEffect {  		Direction = 300'  		ShadowDepth = 3'  		Opacity = 0.4  	};  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: rect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: rect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NewLegend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend items\NewLegend.cs,OnApplyTemplate,The following statement contains a magic number: rect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 3 > getSize (renderSize))  	result = TickCountChange.Decrease;  else if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickCountChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 3 > getSize (renderSize))  	result = TickCountChange.Decrease;  else if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickCountChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickCountChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length; i++) {  	FrameworkElement tickLabel = (FrameworkElement)labels [i];  	if (tickLabel == null)  		continue;  	Debug.Assert (((FrameworkElement)tickLabel).Parent == null);  	tickLabel.Measure (new Size (Double.PositiveInfinity' Double.PositiveInfinity));  	double screenX = screenTicksX [i];  	double coord = screenX;  	tickLabel.HorizontalAlignment = HorizontalAlignment.Center;  	tickLabel.VerticalAlignment = VerticalAlignment.Center;  	if (isStaticAxis) {  		// getting real size of label  		tickLabel.Measure (renderSize);  		Size tickLabelSize = tickLabel.DesiredSize;  		if (Math.Abs (screenX - minCoord) < maxCoordDiff) {  			coord = minCoord + staticAxisMargin;  			if (placement.IsBottomOrTop ())  				tickLabel.HorizontalAlignment = HorizontalAlignment.Left;  			else  				tickLabel.VerticalAlignment = VerticalAlignment.Top;  		}  		else if (Math.Abs (screenX - maxCoord) < maxCoordDiff) {  			coord = maxCoord - getSize (tickLabelSize) / 2 - staticAxisMargin;  			if (!placement.IsBottomOrTop ()) {  				tickLabel.VerticalAlignment = VerticalAlignment.Bottom;  				coord = maxCoord - staticAxisMargin;  			}  		}  	}  	// label is out of visible area  	if (coord < minCoord || coord > maxCoord) {  		continue;  	}  	if (coord.IsNaN ())  		continue;  	StackCanvas.SetCoordinate (tickLabel' coord);  	commonLabelsCanvas.Children.Add (tickLabel);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,The following statement contains a magic number: if (isStaticAxis) {  	// getting real size of label  	tickLabel.Measure (renderSize);  	Size tickLabelSize = tickLabel.DesiredSize;  	if (Math.Abs (screenX - minCoord) < maxCoordDiff) {  		coord = minCoord + staticAxisMargin;  		if (placement.IsBottomOrTop ())  			tickLabel.HorizontalAlignment = HorizontalAlignment.Left;  		else  			tickLabel.VerticalAlignment = VerticalAlignment.Top;  	}  	else if (Math.Abs (screenX - maxCoord) < maxCoordDiff) {  		coord = maxCoord - getSize (tickLabelSize) / 2 - staticAxisMargin;  		if (!placement.IsBottomOrTop ()) {  			tickLabel.VerticalAlignment = VerticalAlignment.Bottom;  			coord = maxCoord - staticAxisMargin;  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,The following statement contains a magic number: if (Math.Abs (screenX - minCoord) < maxCoordDiff) {  	coord = minCoord + staticAxisMargin;  	if (placement.IsBottomOrTop ())  		tickLabel.HorizontalAlignment = HorizontalAlignment.Left;  	else  		tickLabel.VerticalAlignment = VerticalAlignment.Top;  }  else if (Math.Abs (screenX - maxCoord) < maxCoordDiff) {  	coord = maxCoord - getSize (tickLabelSize) / 2 - staticAxisMargin;  	if (!placement.IsBottomOrTop ()) {  		tickLabel.VerticalAlignment = VerticalAlignment.Bottom;  		coord = maxCoord - staticAxisMargin;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,The following statement contains a magic number: if (Math.Abs (screenX - maxCoord) < maxCoordDiff) {  	coord = maxCoord - getSize (tickLabelSize) / 2 - staticAxisMargin;  	if (!placement.IsBottomOrTop ()) {  		tickLabel.VerticalAlignment = VerticalAlignment.Bottom;  		coord = maxCoord - staticAxisMargin;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,DoDrawCommonLabels,The following statement contains a magic number: coord = maxCoord - getSize (tickLabelSize) / 2 - staticAxisMargin;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisControl.cs,CheckLabelsArrangement,The following statement contains a magic number: if (increaseCount > sizeInfos.Length / 2)  	res = TickCountChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetSpecificValue,The following statement contains a magic number: return dt.Month + (dt.Year - start.Year) * 12;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: DebugVerify.Is (ticks.Length < 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {    	};  	// doing binding as described at http://sdolha.spaces.live.com/blog/cns!4121802308C5AB4E!3724.entry?wa=wsignin1.0&sa=835372863  	grid.SetBinding (Grid.BackgroundProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelBackgroundBrushProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Rectangle rect = new Rectangle {  		StrokeThickness = 2  	};  	rect.SetBinding (Rectangle.StrokeProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelRectangleBorderPropertyProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {    	};  	// doing binding as described at http://sdolha.spaces.live.com/blog/cns!4121802308C5AB4E!3724.entry?wa=wsignin1.0&sa=835372863  	grid.SetBinding (Grid.BackgroundProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelBackgroundBrushProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Rectangle rect = new Rectangle {  		StrokeThickness = 2  	};  	rect.SetBinding (Rectangle.StrokeProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelRectangleBorderPropertyProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {    	};  	// doing binding as described at http://sdolha.spaces.live.com/blog/cns!4121802308C5AB4E!3724.entry?wa=wsignin1.0&sa=835372863  	grid.SetBinding (Grid.BackgroundProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelBackgroundBrushProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Rectangle rect = new Rectangle {  		StrokeThickness = 2  	};  	rect.SetBinding (Rectangle.StrokeProperty' new Binding {  		Path = new PropertyPath ("(0)"' DateTimeAxis.MajorLabelRectangleBorderPropertyProperty)'  		RelativeSource = new RelativeSource (RelativeSourceMode.FindAncestor) {  			AncestorType = typeof(AxisControlBase)  		}  	});  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int j = 0; j < labelsNum; j++) {  	var tb = new TextBlock {  		Text = tickText'  		HorizontalAlignment = HorizontalAlignment.Center'  		Margin = new Thickness (0' 3' 0' 3)  	};  	Grid.SetColumn (tb' j);  	grid.Children.Add (tb);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MajorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\DateTime\MajorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int j = 0; j < labelsNum; j++) {  	var tb = new TextBlock {  		Text = tickText'  		HorizontalAlignment = HorizontalAlignment.Center'  		Margin = new Thickness (0' 3' 0' 3)  	};  	Grid.SetColumn (tb' j);  	grid.Children.Add (tb);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,MinorNumericTicksProvider,The following statement contains a magic number: Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,CreateTicks,The following statement contains a magic number: while (x <= increasedFinish) {  	res.Add (x);  	DebugVerify.Is (res.Count < 2000);  	x += step;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericTicksProvider.cs,CreateTicks,The following statement contains a magic number: DebugVerify.Is (res.Count < 2000);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericAxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericAxisControl.cs,NumericAxisControl,The following statement contains a magic number: Range = new Range<double> (0' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ExponentialLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\ExponentialLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < res.Length; i++) {  	var tick = ticks [i];  	tickInfo.Tick = tick;  	tickInfo.Index = i;  	string labelText = GetString (tickInfo);  	TextBlock label;  	if (labelText.Contains ('E')) {  		string[] substrs = labelText.Split ('E');  		string mantissa = substrs [0];  		string exponenta = substrs [1];  		exponenta = exponenta.TrimStart ('+');  		Span span = new Span ();  		span.Inlines.Add (String.Format (CultureInfo.CurrentCulture' "{0}·10"' mantissa));  		Span exponentaSpan = new Span (new Run (exponenta));  		exponentaSpan.BaselineAlignment = BaselineAlignment.Superscript;  		exponentaSpan.FontSize = 8;  		span.Inlines.Add (exponentaSpan);  		label = new TextBlock (span);  		LabelProviderProperties.SetExponentialIsCommonLabel (label' false);  	}  	else {  		label = (TextBlock)GetResourceFromPool ();  		if (label == null) {  			label = new TextBlock ();  		}  		label.Text = labelText;  	}  	res [i] = label;  	label.ToolTip = tick.ToString (CultureInfo.CurrentCulture);  	ApplyCustomView (tickInfo' label);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ExponentialLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\ExponentialLabelProvider.cs,CreateLabels,The following statement contains a magic number: if (labelText.Contains ('E')) {  	string[] substrs = labelText.Split ('E');  	string mantissa = substrs [0];  	string exponenta = substrs [1];  	exponenta = exponenta.TrimStart ('+');  	Span span = new Span ();  	span.Inlines.Add (String.Format (CultureInfo.CurrentCulture' "{0}·10"' mantissa));  	Span exponentaSpan = new Span (new Run (exponenta));  	exponentaSpan.BaselineAlignment = BaselineAlignment.Superscript;  	exponentaSpan.FontSize = 8;  	span.Inlines.Add (exponentaSpan);  	label = new TextBlock (span);  	LabelProviderProperties.SetExponentialIsCommonLabel (label' false);  }  else {  	label = (TextBlock)GetResourceFromPool ();  	if (label == null) {  		label = new TextBlock ();  	}  	label.Text = labelText;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ExponentialLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\ExponentialLabelProvider.cs,CreateLabels,The following statement contains a magic number: exponentaSpan.FontSize = 8;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 3));  	// was rounding - 2  	res = RoundingHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 3));  	// was rounding - 2  	res = RoundingHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 3));  	// was rounding - 2  	res = RoundingHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\AxisBase.cs,OnViewportPropertyChanged,The following statement contains a magic number: if (viewportPropertyChangedEnters > 4) {  	if (e.PropertyName == "Visible") {  		visibleChangedEventArgs = e;  	}  	return;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: if (!ownViewportBounds.IsEmpty) {  	bounds = ownViewportBounds.ViewportToScreen (transform);  }  else {  	double viewportX = GetX (child);  	double viewportY = GetY (child);  	if (viewportX.IsNaN () || viewportY.IsNaN ()) {  		//Debug.WriteLine("ViewportRectPanel: Position is not set!");  		return bounds;  	}  	double viewportWidth = GetViewportWidth (child);  	if (viewportWidth < 0)  		viewportWidth = 0;  	double viewportHeight = GetViewportHeight (child);  	if (viewportHeight < 0)  		viewportHeight = 0;  	bool hasViewportWidth = viewportWidth.IsNotNaN ();  	bool hasViewportHeight = viewportHeight.IsNotNaN ();  	DataRect r = new DataRect (new Size (hasViewportWidth ? viewportWidth : child.DesiredSize.Width' hasViewportHeight ? viewportHeight : child.DesiredSize.Height));  	r = r.ViewportToScreen (transform);  	double screenWidth = hasViewportWidth ? r.Width : child.DesiredSize.Width;  	double screenHeight = hasViewportHeight ? r.Height : child.DesiredSize.Height;  	double minScreenWidth = GetMinScreenWidth (child);  	bool hasMinScreemWidth = minScreenWidth.IsNotNaN ();  	if (hasViewportWidth && screenWidth < minScreenWidth)  		screenWidth = minScreenWidth;  	Point location = new Point (viewportX' viewportY).ViewportToScreen (transform);  	double screenX = location.X;  	double screenY = location.Y;  	HorizontalAlignment horizAlignment = GetViewportHorizontalAlignment (child);  	switch (horizAlignment) {  	case HorizontalAlignment.Stretch:  	case HorizontalAlignment.Center:  		screenX -= screenWidth / 2;  		break;  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		screenX -= screenWidth;  		break;  	}  	VerticalAlignment vertAlignment = GetViewportVerticalAlignment (child);  	switch (vertAlignment) {  	case VerticalAlignment.Bottom:  		screenY -= screenHeight;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		screenY -= screenHeight / 2;  		break;  	case VerticalAlignment.Top:  		break;  	default:  		break;  	}  	bounds = new Rect (screenX' screenY' screenWidth' screenHeight);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: if (!ownViewportBounds.IsEmpty) {  	bounds = ownViewportBounds.ViewportToScreen (transform);  }  else {  	double viewportX = GetX (child);  	double viewportY = GetY (child);  	if (viewportX.IsNaN () || viewportY.IsNaN ()) {  		//Debug.WriteLine("ViewportRectPanel: Position is not set!");  		return bounds;  	}  	double viewportWidth = GetViewportWidth (child);  	if (viewportWidth < 0)  		viewportWidth = 0;  	double viewportHeight = GetViewportHeight (child);  	if (viewportHeight < 0)  		viewportHeight = 0;  	bool hasViewportWidth = viewportWidth.IsNotNaN ();  	bool hasViewportHeight = viewportHeight.IsNotNaN ();  	DataRect r = new DataRect (new Size (hasViewportWidth ? viewportWidth : child.DesiredSize.Width' hasViewportHeight ? viewportHeight : child.DesiredSize.Height));  	r = r.ViewportToScreen (transform);  	double screenWidth = hasViewportWidth ? r.Width : child.DesiredSize.Width;  	double screenHeight = hasViewportHeight ? r.Height : child.DesiredSize.Height;  	double minScreenWidth = GetMinScreenWidth (child);  	bool hasMinScreemWidth = minScreenWidth.IsNotNaN ();  	if (hasViewportWidth && screenWidth < minScreenWidth)  		screenWidth = minScreenWidth;  	Point location = new Point (viewportX' viewportY).ViewportToScreen (transform);  	double screenX = location.X;  	double screenY = location.Y;  	HorizontalAlignment horizAlignment = GetViewportHorizontalAlignment (child);  	switch (horizAlignment) {  	case HorizontalAlignment.Stretch:  	case HorizontalAlignment.Center:  		screenX -= screenWidth / 2;  		break;  	case HorizontalAlignment.Left:  		break;  	case HorizontalAlignment.Right:  		screenX -= screenWidth;  		break;  	}  	VerticalAlignment vertAlignment = GetViewportVerticalAlignment (child);  	switch (vertAlignment) {  	case VerticalAlignment.Bottom:  		screenY -= screenHeight;  		break;  	case VerticalAlignment.Center:  	case VerticalAlignment.Stretch:  		screenY -= screenHeight / 2;  		break;  	case VerticalAlignment.Top:  		break;  	default:  		break;  	}  	bounds = new Rect (screenX' screenY' screenWidth' screenHeight);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: switch (horizAlignment) {  case HorizontalAlignment.Stretch:  case HorizontalAlignment.Center:  	screenX -= screenWidth / 2;  	break;  case HorizontalAlignment.Left:  	break;  case HorizontalAlignment.Right:  	screenX -= screenWidth;  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: screenX -= screenWidth / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: switch (vertAlignment) {  case VerticalAlignment.Bottom:  	screenY -= screenHeight;  	break;  case VerticalAlignment.Center:  case VerticalAlignment.Stretch:  	screenY -= screenHeight / 2;  	break;  case VerticalAlignment.Top:  	break;  default:  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following statement contains a magic number: screenY -= screenHeight / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: if (plotterPanel == PlotterPanel.MainCanvas) {  	// if all four Canvas.{Left|Right|Top|Bottom} properties are not set'  	// and as we are adding by default content to MainCanvas'   	// and since I like more when buttons are by default in right down corner -   	// set bottom and right to 10.  	var left = Canvas.GetLeft (content);  	var top = Canvas.GetTop (content);  	var bottom = Canvas.GetBottom (content);  	var right = Canvas.GetRight (content);  	if (left.IsNaN () && right.IsNaN () && bottom.IsNaN () && top.IsNaN ()) {  		Canvas.SetBottom (content' 10.0);  		Canvas.SetRight (content' 10.0);  	}  	plotter.MainCanvas.Children.Add (Content);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: if (plotterPanel == PlotterPanel.MainCanvas) {  	// if all four Canvas.{Left|Right|Top|Bottom} properties are not set'  	// and as we are adding by default content to MainCanvas'   	// and since I like more when buttons are by default in right down corner -   	// set bottom and right to 10.  	var left = Canvas.GetLeft (content);  	var top = Canvas.GetTop (content);  	var bottom = Canvas.GetBottom (content);  	var right = Canvas.GetRight (content);  	if (left.IsNaN () && right.IsNaN () && bottom.IsNaN () && top.IsNaN ()) {  		Canvas.SetBottom (content' 10.0);  		Canvas.SetRight (content' 10.0);  	}  	plotter.MainCanvas.Children.Add (Content);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: if (left.IsNaN () && right.IsNaN () && bottom.IsNaN () && top.IsNaN ()) {  	Canvas.SetBottom (content' 10.0);  	Canvas.SetRight (content' 10.0);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: if (left.IsNaN () && right.IsNaN () && bottom.IsNaN () && top.IsNaN ()) {  	Canvas.SetBottom (content' 10.0);  	Canvas.SetRight (content' 10.0);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: Canvas.SetBottom (content' 10.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportUIContainer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportUIContainer.cs,OnPlotterAttached,The following statement contains a magic number: Canvas.SetRight (content' 10.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundingHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\RoundingHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundingHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\RoundingHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundingHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\RoundingHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundingHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\RoundingHelper.cs,Round,The following statement contains a magic number: rem = MathHelper.Clamp (-rem' 0' 15);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: foreach (FrameworkElement element in base.Children) {  	if (element == null) {  		continue;  	}  	Size elementSize = element.DesiredSize;  	double x = 0.0;  	double y = 0.0;  	switch (Placement) {  	case AxisPlacement.Left:  		x = finalSize.Width - elementSize.Width;  		break;  	case AxisPlacement.Right:  		x = 0;  		break;  	case AxisPlacement.Top:  		y = finalSize.Height - elementSize.Height;  		break;  	case AxisPlacement.Bottom:  		y = 0;  		break;  	default:  		break;  	}  	double coordinate = GetCoordinate (element);  	if (!Double.IsNaN (GetEndCoordinate (element))) {  		double endCoordinate = GetEndCoordinate (element);  		double size = endCoordinate - coordinate;  		if (size < 0) {  			size = -size;  			coordinate -= size;  		}  		if (isHorizontal)  			elementSize.Width = size;  		else  			elementSize.Height = size;  	}  	// shift for common tick labels' not for major ones.  	if (isHorizontal) {  		x = coordinate;  		if (element.HorizontalAlignment == HorizontalAlignment.Center)  			x = coordinate - elementSize.Width / 2;  	}  	else {  		if (element.VerticalAlignment == VerticalAlignment.Center)  			y = coordinate - elementSize.Height / 2;  		else if (element.VerticalAlignment == VerticalAlignment.Bottom)  			y = coordinate - elementSize.Height;  		else if (element.VerticalAlignment == VerticalAlignment.Top)  			y = coordinate;  	}  	Rect bounds = new Rect (new Point (x' y)' elementSize);  	element.Arrange (bounds);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: foreach (FrameworkElement element in base.Children) {  	if (element == null) {  		continue;  	}  	Size elementSize = element.DesiredSize;  	double x = 0.0;  	double y = 0.0;  	switch (Placement) {  	case AxisPlacement.Left:  		x = finalSize.Width - elementSize.Width;  		break;  	case AxisPlacement.Right:  		x = 0;  		break;  	case AxisPlacement.Top:  		y = finalSize.Height - elementSize.Height;  		break;  	case AxisPlacement.Bottom:  		y = 0;  		break;  	default:  		break;  	}  	double coordinate = GetCoordinate (element);  	if (!Double.IsNaN (GetEndCoordinate (element))) {  		double endCoordinate = GetEndCoordinate (element);  		double size = endCoordinate - coordinate;  		if (size < 0) {  			size = -size;  			coordinate -= size;  		}  		if (isHorizontal)  			elementSize.Width = size;  		else  			elementSize.Height = size;  	}  	// shift for common tick labels' not for major ones.  	if (isHorizontal) {  		x = coordinate;  		if (element.HorizontalAlignment == HorizontalAlignment.Center)  			x = coordinate - elementSize.Width / 2;  	}  	else {  		if (element.VerticalAlignment == VerticalAlignment.Center)  			y = coordinate - elementSize.Height / 2;  		else if (element.VerticalAlignment == VerticalAlignment.Bottom)  			y = coordinate - elementSize.Height;  		else if (element.VerticalAlignment == VerticalAlignment.Top)  			y = coordinate;  	}  	Rect bounds = new Rect (new Point (x' y)' elementSize);  	element.Arrange (bounds);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: if (isHorizontal) {  	x = coordinate;  	if (element.HorizontalAlignment == HorizontalAlignment.Center)  		x = coordinate - elementSize.Width / 2;  }  else {  	if (element.VerticalAlignment == VerticalAlignment.Center)  		y = coordinate - elementSize.Height / 2;  	else if (element.VerticalAlignment == VerticalAlignment.Bottom)  		y = coordinate - elementSize.Height;  	else if (element.VerticalAlignment == VerticalAlignment.Top)  		y = coordinate;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: if (isHorizontal) {  	x = coordinate;  	if (element.HorizontalAlignment == HorizontalAlignment.Center)  		x = coordinate - elementSize.Width / 2;  }  else {  	if (element.VerticalAlignment == VerticalAlignment.Center)  		y = coordinate - elementSize.Height / 2;  	else if (element.VerticalAlignment == VerticalAlignment.Bottom)  		y = coordinate - elementSize.Height;  	else if (element.VerticalAlignment == VerticalAlignment.Top)  		y = coordinate;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: if (element.HorizontalAlignment == HorizontalAlignment.Center)  	x = coordinate - elementSize.Width / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: x = coordinate - elementSize.Width / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: if (element.VerticalAlignment == VerticalAlignment.Center)  	y = coordinate - elementSize.Height / 2;  else if (element.VerticalAlignment == VerticalAlignment.Bottom)  	y = coordinate - elementSize.Height;  else if (element.VerticalAlignment == VerticalAlignment.Top)  	y = coordinate;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\StackCanvas.cs,ArrangeOverride,The following statement contains a magic number: y = coordinate - elementSize.Height / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,ViewportShape,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Shapes\ViewportShape.cs,ViewportShape,The following statement contains a magic number: Shape.StrokeThicknessProperty.AddOwner (type' new FrameworkPropertyMetadata (2.0));  
Magic Number,Microsoft.Research.DynamicDataDisplay,BitmapBasedGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,OnMouseMove,The following statement contains a magic number: popup.VerticalOffset = p.Y + 20;  
Magic Number,Microsoft.Research.DynamicDataDisplay,BitmapBasedGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,OnMouseMove,The following statement contains a magic number: sp.Margin = new Thickness (4' 2' 4' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,BitmapBasedGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,OnMouseMove,The following statement contains a magic number: sp.Margin = new Thickness (4' 2' 4' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,BitmapBasedGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,OnMouseMove,The following statement contains a magic number: sp.Margin = new Thickness (4' 2' 4' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,BitmapBasedGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,OnMouseMove,The following statement contains a magic number: sp.Margin = new Thickness (4' 2' 4' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,RenderResult,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\BitmapBasedGraph.cs,RenderResult,The following statement contains a magic number: stride = result.PixelWidth * result.Format.BitsPerPixel / 8;  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRectExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\DataRectExtensions.cs,GetCenter,The following statement contains a magic number: return new Point (rect.XMin + rect.Width * 0.5' rect.YMin + rect.Height * 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRectExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\DataRectExtensions.cs,GetCenter,The following statement contains a magic number: return new Point (rect.XMin + rect.Width * 0.5' rect.YMin + rect.Height * 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay,BrushHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\BrushHelper.cs,MakeTransparent,The following statement contains a magic number: return MakeTransparent (brush' (int)(opacity * 255));  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (source == "Empty") {  	rect = DataRect.Empty;  }  else {  	// format X'Y'Width'Height  	string[] values = source.Split (''');  	if (values.Length == 4) {  		rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  	else {  		// format XMin' YMin - XMax' YMax  		values = source.Split (new Char[] {  			''''  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (source == "Empty") {  	rect = DataRect.Empty;  }  else {  	// format X'Y'Width'Height  	string[] values = source.Split (''');  	if (values.Length == 4) {  		rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  	else {  		// format XMin' YMin - XMax' YMax  		values = source.Split (new Char[] {  			''''  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (source == "Empty") {  	rect = DataRect.Empty;  }  else {  	// format X'Y'Width'Height  	string[] values = source.Split (''');  	if (values.Length == 4) {  		rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  	else {  		// format XMin' YMin - XMax' YMax  		values = source.Split (new Char[] {  			''''  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (source == "Empty") {  	rect = DataRect.Empty;  }  else {  	// format X'Y'Width'Height  	string[] values = source.Split (''');  	if (values.Length == 4) {  		rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  	else {  		// format XMin' YMin - XMax' YMax  		values = source.Split (new Char[] {  			''''  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (source == "Empty") {  	rect = DataRect.Empty;  }  else {  	// format X'Y'Width'Height  	string[] values = source.Split (''');  	if (values.Length == 4) {  		rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  	else {  		// format XMin' YMin - XMax' YMax  		values = source.Split (new Char[] {  			''''  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (values.Length == 4) {  	rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  else {  	// format XMin' YMin - XMax' YMax  	values = source.Split (new Char[] {  		''''  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (values.Length == 4) {  	rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  else {  	// format XMin' YMin - XMax' YMax  	values = source.Split (new Char[] {  		''''  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (values.Length == 4) {  	rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  else {  	// format XMin' YMin - XMax' YMax  	values = source.Split (new Char[] {  		''''  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (values.Length == 4) {  	rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  else {  	// format XMin' YMin - XMax' YMax  	values = source.Split (new Char[] {  		''''  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: if (values.Length == 4) {  	rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  else {  	// format XMin' YMin - XMax' YMax  	values = source.Split (new Char[] {  		''''  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: rect = new DataRect (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  
Magic Number,Microsoft.Research.DynamicDataDisplay,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\DataRect.cs,Parse,The following statement contains a magic number: rect = DataRect.Create (Convert.ToDouble (values [0]' cultureInfo)' Convert.ToDouble (values [1]' cultureInfo)' Convert.ToDouble (values [2]' cultureInfo)' Convert.ToDouble (values [3]' cultureInfo));  
Magic Number,Microsoft.Research.DynamicDataDisplay,Footer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Footer.cs,Footer,The following statement contains a magic number: Margin = new Thickness (0' 0' 0' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay,Header,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Header.cs,Header,The following statement contains a magic number: FontSize = 18;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Header,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Header.cs,Header,The following statement contains a magic number: Margin = new Thickness (0' 0' 0' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\MagnifyingGlass.xaml.cs,OnPreviewMouseWheel,The following statement contains a magic number: Magnification += e.Delta / Mouse.MouseWheelDeltaForOneLine * 0.2;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\MagnifyingGlass.xaml.cs,plotter_PreviewMouseMove,The following statement contains a magic number: Canvas.SetLeft (this' pos.X - Width / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\MagnifyingGlass.xaml.cs,plotter_PreviewMouseMove,The following statement contains a magic number: Canvas.SetTop (this' pos.Y - Height / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend.xaml.cs,Legend,The following statement contains a magic number: shadowRect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend.xaml.cs,Legend,The following statement contains a magic number: shadowRect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Legend.xaml.cs,Legend,The following statement contains a magic number: shadowRect.Effect = new DropShadowEffect {  	Direction = 300'  	ShadowDepth = 3'  	Opacity = 0.4  };  
Magic Number,Microsoft.Research.DynamicDataDisplay,Log10YTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: return new Point (pt.X' Math.Pow (10' pt.Y));  
Magic Number,Microsoft.Research.DynamicDataDisplay,Log10XTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: return new Point (Math.Pow (10' pt.X)' pt.Y);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,CalcScale,The following statement contains a magic number: scale = maxLatDeg / Math.Log (Math.Tan (maxLatRad / 2 + Math.PI / 4));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,CalcScale,The following statement contains a magic number: scale = maxLatDeg / Math.Log (Math.Tan (maxLatRad / 2 + Math.PI / 4));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	double e = Math.Exp (y / scale);  	y = 360 * Math.Atan (e) / Math.PI - 90;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	double e = Math.Exp (y / scale);  	y = 360 * Math.Atan (e) / Math.PI - 90;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: y = 360 * Math.Atan (e) / Math.PI - 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: y = 360 * Math.Atan (e) / Math.PI - 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Log10Transform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\Log10Transform.cs,ViewportToData,The following statement contains a magic number: return new Point (Math.Pow (10' pt.X)' Math.Pow (10' pt.Y));  
Magic Number,Microsoft.Research.DynamicDataDisplay,Log10Transform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Transforms\Log10Transform.cs,ViewportToData,The following statement contains a magic number: return new Point (Math.Pow (10' pt.X)' Math.Pow (10' pt.Y));  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.IsEmpty) {  	newVisible = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  }  else if (newVisible.Width == 0 || newVisible.Height == 0) {  	DataRect defRect = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  	Size size = newVisible.Size;  	Point loc = newVisible.Location;  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new DataRect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.IsEmpty) {  	newVisible = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  }  else if (newVisible.Width == 0 || newVisible.Height == 0) {  	DataRect defRect = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  	Size size = newVisible.Size;  	Point loc = newVisible.Location;  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new DataRect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0 || newVisible.Height == 0) {  	DataRect defRect = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  	Size size = newVisible.Size;  	Point loc = newVisible.Location;  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new DataRect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0 || newVisible.Height == 0) {  	DataRect defRect = (DataRect)VisibleProperty.DefaultMetadata.DefaultValue;  	Size size = newVisible.Size;  	Point loc = newVisible.Location;  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new DataRect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0) {  	size.Width = defRect.Width;  	loc.X -= size.Width / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: loc.X -= size.Width / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Height == 0) {  	size.Height = defRect.Height;  	loc.Y -= size.Height / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: loc.Y -= size.Height / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\MathHelper.cs,RadiansToDegrees,The following statement contains a magic number: return radians * 180 / Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\MathHelper.cs,DegreesToRadians,The following statement contains a magic number: return degrees / 180 * Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HorizontalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\HorizontalAxisTitle.cs,HorizontalAxisTitle,The following statement contains a magic number: FontSize = 16;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (max == 0 || len == 0) {  	sat = hue = 0;  }  else {  	sat = len / max;  	if (r == max) {  		hue = (g - b) / len;  	}  	else if (g == max) {  		hue = 2 + (b - r) / len;  	}  	else {  		hue = 4 + (r - g) / len;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (max == 0 || len == 0) {  	sat = hue = 0;  }  else {  	sat = len / max;  	if (r == max) {  		hue = (g - b) / len;  	}  	else if (g == max) {  		hue = 2 + (b - r) / len;  	}  	else {  		hue = 4 + (r - g) / len;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (r == max) {  	hue = (g - b) / len;  }  else if (g == max) {  	hue = 2 + (b - r) / len;  }  else {  	hue = 4 + (r - g) / len;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (r == max) {  	hue = (g - b) / len;  }  else if (g == max) {  	hue = 2 + (b - r) / len;  }  else {  	hue = 4 + (r - g) / len;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (g == max) {  	hue = 2 + (b - r) / len;  }  else {  	hue = 4 + (r - g) / len;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (g == max) {  	hue = 2 + (b - r) / len;  }  else {  	hue = 4 + (r - g) / len;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: hue = 2 + (b - r) / len;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: hue = 4 + (r - g) / len;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: hue *= 60;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: if (hue < 0)  	hue += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,FromArgbColor,The following statement contains a magic number: hue += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: if (saturation == 0.0) {  	r = g = b = brightness;  }  else {  	double smallHue = hue / 60.0;  	int smallHueInt = (int)Math.Floor (smallHue);  	double smallHueFrac = smallHue - smallHueInt;  	double val1 = brightness * (1.0 - saturation);  	double val2 = brightness * (1.0 - (saturation * smallHueFrac));  	double val3 = brightness * (1.0 - (saturation * (1.0 - smallHueFrac)));  	switch (smallHueInt) {  	case 0:  		r = brightness;  		g = val3;  		b = val1;  		break;  	case 1:  		r = val2;  		g = brightness;  		b = val1;  		break;  	case 2:  		r = val1;  		g = brightness;  		b = val3;  		break;  	case 3:  		r = val1;  		g = val2;  		b = brightness;  		break;  	case 4:  		r = val3;  		g = val1;  		b = brightness;  		break;  	case 5:  		r = brightness;  		g = val1;  		b = val2;  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: if (saturation == 0.0) {  	r = g = b = brightness;  }  else {  	double smallHue = hue / 60.0;  	int smallHueInt = (int)Math.Floor (smallHue);  	double smallHueFrac = smallHue - smallHueInt;  	double val1 = brightness * (1.0 - saturation);  	double val2 = brightness * (1.0 - (saturation * smallHueFrac));  	double val3 = brightness * (1.0 - (saturation * (1.0 - smallHueFrac)));  	switch (smallHueInt) {  	case 0:  		r = brightness;  		g = val3;  		b = val1;  		break;  	case 1:  		r = val2;  		g = brightness;  		b = val1;  		break;  	case 2:  		r = val1;  		g = brightness;  		b = val3;  		break;  	case 3:  		r = val1;  		g = val2;  		b = brightness;  		break;  	case 4:  		r = val3;  		g = val1;  		b = brightness;  		break;  	case 5:  		r = brightness;  		g = val1;  		b = val2;  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: if (saturation == 0.0) {  	r = g = b = brightness;  }  else {  	double smallHue = hue / 60.0;  	int smallHueInt = (int)Math.Floor (smallHue);  	double smallHueFrac = smallHue - smallHueInt;  	double val1 = brightness * (1.0 - saturation);  	double val2 = brightness * (1.0 - (saturation * smallHueFrac));  	double val3 = brightness * (1.0 - (saturation * (1.0 - smallHueFrac)));  	switch (smallHueInt) {  	case 0:  		r = brightness;  		g = val3;  		b = val1;  		break;  	case 1:  		r = val2;  		g = brightness;  		b = val1;  		break;  	case 2:  		r = val1;  		g = brightness;  		b = val3;  		break;  	case 3:  		r = val1;  		g = val2;  		b = brightness;  		break;  	case 4:  		r = val3;  		g = val1;  		b = brightness;  		break;  	case 5:  		r = brightness;  		g = val1;  		b = val2;  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: if (saturation == 0.0) {  	r = g = b = brightness;  }  else {  	double smallHue = hue / 60.0;  	int smallHueInt = (int)Math.Floor (smallHue);  	double smallHueFrac = smallHue - smallHueInt;  	double val1 = brightness * (1.0 - saturation);  	double val2 = brightness * (1.0 - (saturation * smallHueFrac));  	double val3 = brightness * (1.0 - (saturation * (1.0 - smallHueFrac)));  	switch (smallHueInt) {  	case 0:  		r = brightness;  		g = val3;  		b = val1;  		break;  	case 1:  		r = val2;  		g = brightness;  		b = val1;  		break;  	case 2:  		r = val1;  		g = brightness;  		b = val3;  		break;  	case 3:  		r = val1;  		g = val2;  		b = brightness;  		break;  	case 4:  		r = val3;  		g = val1;  		b = brightness;  		break;  	case 5:  		r = brightness;  		g = val1;  		b = val2;  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: if (saturation == 0.0) {  	r = g = b = brightness;  }  else {  	double smallHue = hue / 60.0;  	int smallHueInt = (int)Math.Floor (smallHue);  	double smallHueFrac = smallHue - smallHueInt;  	double val1 = brightness * (1.0 - saturation);  	double val2 = brightness * (1.0 - (saturation * smallHueFrac));  	double val3 = brightness * (1.0 - (saturation * (1.0 - smallHueFrac)));  	switch (smallHueInt) {  	case 0:  		r = brightness;  		g = val3;  		b = val1;  		break;  	case 1:  		r = val2;  		g = brightness;  		b = val1;  		break;  	case 2:  		r = val1;  		g = brightness;  		b = val3;  		break;  	case 3:  		r = val1;  		g = val2;  		b = brightness;  		break;  	case 4:  		r = val3;  		g = val1;  		b = brightness;  		break;  	case 5:  		r = brightness;  		g = val1;  		b = val2;  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: switch (smallHueInt) {  case 0:  	r = brightness;  	g = val3;  	b = val1;  	break;  case 1:  	r = val2;  	g = brightness;  	b = val1;  	break;  case 2:  	r = val1;  	g = brightness;  	b = val3;  	break;  case 3:  	r = val1;  	g = val2;  	b = brightness;  	break;  case 4:  	r = val3;  	g = val1;  	b = brightness;  	break;  case 5:  	r = brightness;  	g = val1;  	b = val2;  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: switch (smallHueInt) {  case 0:  	r = brightness;  	g = val3;  	b = val1;  	break;  case 1:  	r = val2;  	g = brightness;  	b = val1;  	break;  case 2:  	r = val1;  	g = brightness;  	b = val3;  	break;  case 3:  	r = val1;  	g = val2;  	b = brightness;  	break;  case 4:  	r = val3;  	g = val1;  	b = brightness;  	break;  case 5:  	r = brightness;  	g = val1;  	b = val2;  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: switch (smallHueInt) {  case 0:  	r = brightness;  	g = val3;  	b = val1;  	break;  case 1:  	r = val2;  	g = brightness;  	b = val1;  	break;  case 2:  	r = val1;  	g = brightness;  	b = val3;  	break;  case 3:  	r = val1;  	g = val2;  	b = brightness;  	break;  case 4:  	r = val3;  	g = val1;  	b = brightness;  	break;  case 5:  	r = brightness;  	g = val1;  	b = val2;  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: switch (smallHueInt) {  case 0:  	r = brightness;  	g = val3;  	b = val1;  	break;  case 1:  	r = val2;  	g = brightness;  	b = val1;  	break;  case 2:  	r = val1;  	g = brightness;  	b = val3;  	break;  case 3:  	r = val1;  	g = val2;  	b = brightness;  	break;  case 4:  	r = val3;  	g = val1;  	b = brightness;  	break;  case 5:  	r = brightness;  	g = val1;  	b = val2;  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: return Color.FromArgb ((byte)(Math.Round (alpha * 255))' (byte)(Math.Round (r * 255))' (byte)(Math.Round (g * 255))' (byte)(Math.Round (b * 255)));  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: return Color.FromArgb ((byte)(Math.Round (alpha * 255))' (byte)(Math.Round (r * 255))' (byte)(Math.Round (g * 255))' (byte)(Math.Round (b * 255)));  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: return Color.FromArgb ((byte)(Math.Round (alpha * 255))' (byte)(Math.Round (r * 255))' (byte)(Math.Round (g * 255))' (byte)(Math.Round (b * 255)));  
Magic Number,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following statement contains a magic number: return Color.FromArgb ((byte)(Math.Round (alpha * 255))' (byte)(Math.Round (r * 255))' (byte)(Math.Round (g * 255))' (byte)(Math.Round (b * 255)));  
Magic Number,Microsoft.Research.DynamicDataDisplay,RectExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\RectExtensions.cs,GetCenter,The following statement contains a magic number: return new Point (rect.Left + rect.Width * 0.5' rect.Top + rect.Height * 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay,RectExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\RectExtensions.cs,GetCenter,The following statement contains a magic number: return new Point (rect.Left + rect.Width * 0.5' rect.Top + rect.Height * 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\VerticalAxisTitle.cs,VerticalAxisTitle,The following statement contains a magic number: FontSize = 16;  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\VerticalAxisTitle.cs,ChangeLayoutTransform,The following statement contains a magic number: if (placement == AxisPlacement.Left)  	LayoutTransform = new RotateTransform (-90);  else  	LayoutTransform = new RotateTransform (90);  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\VerticalAxisTitle.cs,ChangeLayoutTransform,The following statement contains a magic number: if (placement == AxisPlacement.Left)  	LayoutTransform = new RotateTransform (-90);  else  	LayoutTransform = new RotateTransform (90);  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\VerticalAxisTitle.cs,ChangeLayoutTransform,The following statement contains a magic number: LayoutTransform = new RotateTransform (-90);  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\VerticalAxisTitle.cs,ChangeLayoutTransform,The following statement contains a magic number: LayoutTransform = new RotateTransform (90);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ViewportElement2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportElement2D.cs,RenderThumbnail,The following statement contains a magic number: using (DrawingContext dc = visual.RenderOpen ()) {  	Point outputStart = visible.Location.DataToScreen (transform);  	double x = -outputStart.X + offset.X;  	double y = -outputStart.Y + output.Bottom - output.Top + offset.Y;  	bool translate = !manualTranslate && IsTranslated;  	if (translate) {  		dc.PushTransform (new TranslateTransform (x' y));  	}  	const byte c = 240;  	Brush brush = new SolidColorBrush (Color.FromArgb (120' c' c' c));  	Pen pen = new Pen (Brushes.Black' 1);  	dc.DrawRectangle (brush' pen' output);  	dc.DrawDrawing (graphContents);  	if (translate) {  		dc.Pop ();  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ViewportElement2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportElement2D.cs,RenderThumbnail,The following statement contains a magic number: using (DrawingContext dc = visual.RenderOpen ()) {  	Point outputStart = visible.Location.DataToScreen (transform);  	double x = -outputStart.X + offset.X;  	double y = -outputStart.Y + output.Bottom - output.Top + offset.Y;  	bool translate = !manualTranslate && IsTranslated;  	if (translate) {  		dc.PushTransform (new TranslateTransform (x' y));  	}  	const byte c = 240;  	Brush brush = new SolidColorBrush (Color.FromArgb (120' c' c' c));  	Pen pen = new Pen (Brushes.Black' 1);  	dc.DrawRectangle (brush' pen' output);  	dc.DrawDrawing (graphContents);  	if (translate) {  		dc.Pop ();  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Axes,IntegerTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Axes\Integer\IntegerTicksProvider.cs,CreateTicks,The following statement contains a magic number: checked {  	double increasedFinish = finish + step * 1.05;  	while (x <= increasedFinish) {  		res.Add (x);  		x += step;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (points.Count > 2 * screenRect.Width) {  	resultPoints = new List<Point> ();  	double currentX = Math.Floor (points [0].X);  	foreach (Point p in points) {  		if (Math.Floor (p.X) == currentX) {  			currentChain.Add (p);  		}  		else {  			// Analyse current chain  			if (currentChain.Count <= 2) {  				resultPoints.AddRange (currentChain);  			}  			else {  				Point first = MinByX (currentChain);  				Point last = MaxByX (currentChain);  				Point min = MinByY (currentChain);  				Point max = MaxByY (currentChain);  				resultPoints.Add (first);  				Point smaller = min.X < max.X ? min : max;  				Point greater = min.X > max.X ? min : max;  				if (smaller != resultPoints.GetLast ()) {  					resultPoints.Add (smaller);  				}  				if (greater != resultPoints.GetLast ()) {  					resultPoints.Add (greater);  				}  				if (last != resultPoints.GetLast ()) {  					resultPoints.Add (last);  				}  			}  			currentChain.Clear ();  			currentChain.Add (p);  			currentX = Math.Floor (p.X);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (points.Count > 2 * screenRect.Width) {  	resultPoints = new List<Point> ();  	double currentX = Math.Floor (points [0].X);  	foreach (Point p in points) {  		if (Math.Floor (p.X) == currentX) {  			currentChain.Add (p);  		}  		else {  			// Analyse current chain  			if (currentChain.Count <= 2) {  				resultPoints.AddRange (currentChain);  			}  			else {  				Point first = MinByX (currentChain);  				Point last = MaxByX (currentChain);  				Point min = MinByY (currentChain);  				Point max = MaxByY (currentChain);  				resultPoints.Add (first);  				Point smaller = min.X < max.X ? min : max;  				Point greater = min.X > max.X ? min : max;  				if (smaller != resultPoints.GetLast ()) {  					resultPoints.Add (smaller);  				}  				if (greater != resultPoints.GetLast ()) {  					resultPoints.Add (greater);  				}  				if (last != resultPoints.GetLast ()) {  					resultPoints.Add (last);  				}  			}  			currentChain.Clear ();  			currentChain.Add (p);  			currentX = Math.Floor (p.X);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: foreach (Point p in points) {  	if (Math.Floor (p.X) == currentX) {  		currentChain.Add (p);  	}  	else {  		// Analyse current chain  		if (currentChain.Count <= 2) {  			resultPoints.AddRange (currentChain);  		}  		else {  			Point first = MinByX (currentChain);  			Point last = MaxByX (currentChain);  			Point min = MinByY (currentChain);  			Point max = MaxByY (currentChain);  			resultPoints.Add (first);  			Point smaller = min.X < max.X ? min : max;  			Point greater = min.X > max.X ? min : max;  			if (smaller != resultPoints.GetLast ()) {  				resultPoints.Add (smaller);  			}  			if (greater != resultPoints.GetLast ()) {  				resultPoints.Add (greater);  			}  			if (last != resultPoints.GetLast ()) {  				resultPoints.Add (last);  			}  		}  		currentChain.Clear ();  		currentChain.Add (p);  		currentX = Math.Floor (p.X);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (Math.Floor (p.X) == currentX) {  	currentChain.Add (p);  }  else {  	// Analyse current chain  	if (currentChain.Count <= 2) {  		resultPoints.AddRange (currentChain);  	}  	else {  		Point first = MinByX (currentChain);  		Point last = MaxByX (currentChain);  		Point min = MinByY (currentChain);  		Point max = MaxByY (currentChain);  		resultPoints.Add (first);  		Point smaller = min.X < max.X ? min : max;  		Point greater = min.X > max.X ? min : max;  		if (smaller != resultPoints.GetLast ()) {  			resultPoints.Add (smaller);  		}  		if (greater != resultPoints.GetLast ()) {  			resultPoints.Add (greater);  		}  		if (last != resultPoints.GetLast ()) {  			resultPoints.Add (last);  		}  	}  	currentChain.Clear ();  	currentChain.Add (p);  	currentX = Math.Floor (p.X);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (currentChain.Count <= 2) {  	resultPoints.AddRange (currentChain);  }  else {  	Point first = MinByX (currentChain);  	Point last = MaxByX (currentChain);  	Point min = MinByY (currentChain);  	Point max = MaxByY (currentChain);  	resultPoints.Add (first);  	Point smaller = min.X < max.X ? min : max;  	Point greater = min.X > max.X ? min : max;  	if (smaller != resultPoints.GetLast ()) {  		resultPoints.Add (smaller);  	}  	if (greater != resultPoints.GetLast ()) {  		resultPoints.Add (greater);  	}  	if (last != resultPoints.GetLast ()) {  		resultPoints.Add (last);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\InclinationFilter.cs,Filter,The following statement contains a magic number: while (i < points.Count) {  	bool added = false;  	int j = i;  	while (!added && (j < points.Count - 1)) {  		Point x1 = res [res.Count - 1];  		Point x2 = points [j];  		Point x3 = points [j + 1];  		double a = (x1 - x2).Length;  		double b = (x2 - x3).Length;  		double c = (x1 - x3).Length;  		double angle13 = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  		double degrees = 180 / Math.PI * angle13;  		if (degrees < criticalAngle) {  			res.Add (x2);  			added = true;  			i = j + 1;  		}  		else {  			j++;  		}  	}  	// reached the end of resultPoints  	if (!added) {  		res.Add (points.GetLast ());  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\InclinationFilter.cs,Filter,The following statement contains a magic number: while (i < points.Count) {  	bool added = false;  	int j = i;  	while (!added && (j < points.Count - 1)) {  		Point x1 = res [res.Count - 1];  		Point x2 = points [j];  		Point x3 = points [j + 1];  		double a = (x1 - x2).Length;  		double b = (x2 - x3).Length;  		double c = (x1 - x3).Length;  		double angle13 = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  		double degrees = 180 / Math.PI * angle13;  		if (degrees < criticalAngle) {  			res.Add (x2);  			added = true;  			i = j + 1;  		}  		else {  			j++;  		}  	}  	// reached the end of resultPoints  	if (!added) {  		res.Add (points.GetLast ());  		break;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\InclinationFilter.cs,Filter,The following statement contains a magic number: while (!added && (j < points.Count - 1)) {  	Point x1 = res [res.Count - 1];  	Point x2 = points [j];  	Point x3 = points [j + 1];  	double a = (x1 - x2).Length;  	double b = (x2 - x3).Length;  	double c = (x1 - x3).Length;  	double angle13 = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  	double degrees = 180 / Math.PI * angle13;  	if (degrees < criticalAngle) {  		res.Add (x2);  		added = true;  		i = j + 1;  	}  	else {  		j++;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Filters\InclinationFilter.cs,Filter,The following statement contains a magic number: while (!added && (j < points.Count - 1)) {  	Point x1 = res [res.Count - 1];  	Point x2 = points [j];  	Point x3 = points [j + 1];  	double a = (x1 - x2).Length;  	double b = (x2 - x3).Length;  	double c = (x1 - x3).Length;  	double angle13 = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  	double degrees = 180 / Math.PI * angle13;  	if (degrees < criticalAngle) {  		res.Add (x2);  		added = true;  		i = j + 1;  	}  	else {  		j++;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,GetAdditionalIsolines,The following statement contains a magic number: if (log > 0.9) {  	var upperLog = Math.Ceiling (log);  	var divisionsNum = Math.Pow (10' upperLog);  	var delta = (collection.Max - collection.Min) / divisionsNum;  	var start = Math.Ceiling (visibleMinMax.Min / delta) * delta;  	var x = start;  	while (x < visibleMinMax.Max) {  		yield return x;  		x += delta;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,GetAdditionalIsolines,The following statement contains a magic number: if (log > 0.9) {  	var upperLog = Math.Ceiling (log);  	var divisionsNum = Math.Pow (10' upperLog);  	var delta = (collection.Max - collection.Min) / divisionsNum;  	var start = Math.Ceiling (visibleMinMax.Min / delta) * delta;  	var x = start;  	while (x < visibleMinMax.Max) {  		yield return x;  		x += delta;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: Annotater.WayBeforeText = Math.Sqrt (visible.Width * visible.Width + visible.Height * visible.Height) / 100 * WayBeforeTextMultiplier;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: foreach (var annotation in annotations) {  	FormattedText text = CreateFormattedText (annotation.Value.ToString (LabelStringFormat));  	Point position = annotation.Position.DataToScreen (transform);  	var labelTransform = CreateTransform (annotation' text' position);  	// creating rectange stroke  	double colorRatio = (annotation.Value - collection.Min) / (collection.Max - collection.Min);  	colorRatio = MathHelper.Clamp (colorRatio);  	Color rectangleStrokeColor = Palette.GetColor (colorRatio);  	SolidColorBrush rectangleStroke = new SolidColorBrush (rectangleStrokeColor);  	Pen labelRectangleStrokePen = new Pen (rectangleStroke' 2);  	dc.PushTransform (labelTransform);  	{  		var bounds = RectExtensions.FromCenterSize (position' new Size (text.Width' text.Height));  		bounds = bounds.ZoomOutFromCenter (1.3);  		dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  		DrawTextInPosition (dc' text' position);  	}  	dc.Pop ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: foreach (var annotation in annotations) {  	FormattedText text = CreateFormattedText (annotation.Value.ToString (LabelStringFormat));  	Point position = annotation.Position.DataToScreen (transform);  	var labelTransform = CreateTransform (annotation' text' position);  	// creating rectange stroke  	double colorRatio = (annotation.Value - collection.Min) / (collection.Max - collection.Min);  	colorRatio = MathHelper.Clamp (colorRatio);  	Color rectangleStrokeColor = Palette.GetColor (colorRatio);  	SolidColorBrush rectangleStroke = new SolidColorBrush (rectangleStrokeColor);  	Pen labelRectangleStrokePen = new Pen (rectangleStroke' 2);  	dc.PushTransform (labelTransform);  	{  		var bounds = RectExtensions.FromCenterSize (position' new Size (text.Width' text.Height));  		bounds = bounds.ZoomOutFromCenter (1.3);  		dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  		DrawTextInPosition (dc' text' position);  	}  	dc.Pop ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: foreach (var annotation in annotations) {  	FormattedText text = CreateFormattedText (annotation.Value.ToString (LabelStringFormat));  	Point position = annotation.Position.DataToScreen (transform);  	var labelTransform = CreateTransform (annotation' text' position);  	// creating rectange stroke  	double colorRatio = (annotation.Value - collection.Min) / (collection.Max - collection.Min);  	colorRatio = MathHelper.Clamp (colorRatio);  	Color rectangleStrokeColor = Palette.GetColor (colorRatio);  	SolidColorBrush rectangleStroke = new SolidColorBrush (rectangleStrokeColor);  	Pen labelRectangleStrokePen = new Pen (rectangleStroke' 2);  	dc.PushTransform (labelTransform);  	{  		var bounds = RectExtensions.FromCenterSize (position' new Size (text.Width' text.Height));  		bounds = bounds.ZoomOutFromCenter (1.3);  		dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  		DrawTextInPosition (dc' text' position);  	}  	dc.Pop ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: foreach (var annotation in annotations) {  	FormattedText text = CreateFormattedText (annotation.Value.ToString (LabelStringFormat));  	Point position = annotation.Position.DataToScreen (transform);  	var labelTransform = CreateTransform (annotation' text' position);  	// creating rectange stroke  	double colorRatio = (annotation.Value - collection.Min) / (collection.Max - collection.Min);  	colorRatio = MathHelper.Clamp (colorRatio);  	Color rectangleStrokeColor = Palette.GetColor (colorRatio);  	SolidColorBrush rectangleStroke = new SolidColorBrush (rectangleStrokeColor);  	Pen labelRectangleStrokePen = new Pen (rectangleStroke' 2);  	dc.PushTransform (labelTransform);  	{  		var bounds = RectExtensions.FromCenterSize (position' new Size (text.Width' text.Height));  		bounds = bounds.ZoomOutFromCenter (1.3);  		dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  		DrawTextInPosition (dc' text' position);  	}  	dc.Pop ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: bounds = bounds.ZoomOutFromCenter (1.3);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,RenderLabels,The following statement contains a magic number: dc.DrawRoundedRectangle (labelRectangleFill' labelRectangleStrokePen' bounds' 8' 8);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,DrawTextInPosition,The following statement contains a magic number: textPosition.Offset (-text.Width / 2' -text.Height / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,DrawTextInPosition,The following statement contains a magic number: textPosition.Offset (-text.Width / 2' -text.Height / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: if (angle < 0)  	angle += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: angle += 360;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: if (90 < angle && angle < 270)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: if (90 < angle && angle < 270)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: if (90 < angle && angle < 270)  	angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,FastIsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\FastIsolineRenderer.cs,CreateTransform,The following statement contains a magic number: angle -= 180;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: if (true || 2 * defaultDelta < visibleMinMaxRatio) {  	double number = Math.Ceiling (visibleMinMaxRatio * 4);  	number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  	double delta = totalDelta / number;  	double x = collection.Min + Math.Ceiling ((visibleMinMax.Min - collection.Min) / delta) * delta;  	List<double> result = new List<double> ();  	while (x < visibleMinMax.Max) {  		result.Add (x);  		x += delta;  	}  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: if (true || 2 * defaultDelta < visibleMinMaxRatio) {  	double number = Math.Ceiling (visibleMinMaxRatio * 4);  	number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  	double delta = totalDelta / number;  	double x = collection.Min + Math.Ceiling ((visibleMinMax.Min - collection.Min) / delta) * delta;  	List<double> result = new List<double> ();  	while (x < visibleMinMax.Max) {  		result.Add (x);  		x += delta;  	}  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: if (true || 2 * defaultDelta < visibleMinMaxRatio) {  	double number = Math.Ceiling (visibleMinMaxRatio * 4);  	number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  	double delta = totalDelta / number;  	double x = collection.Min + Math.Ceiling ((visibleMinMax.Min - collection.Min) / delta) * delta;  	List<double> result = new List<double> ();  	while (x < visibleMinMax.Max) {  		result.Add (x);  		x += delta;  	}  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: if (true || 2 * defaultDelta < visibleMinMaxRatio) {  	double number = Math.Ceiling (visibleMinMaxRatio * 4);  	number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  	double delta = totalDelta / number;  	double x = collection.Min + Math.Ceiling ((visibleMinMax.Min - collection.Min) / delta) * delta;  	List<double> result = new List<double> ();  	while (x < visibleMinMax.Max) {  		result.Add (x);  		x += delta;  	}  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineRenderer.cs,GetAdditionalLevels,The following statement contains a magic number: number = Math.Pow (2' Math.Ceiling (Math.Log (number) / Math.Log (2)));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: left = (leftTop + leftBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: bottom = (leftBottom + rightBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: right = (rightTop + rightBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: top = (rightTop + leftTop) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: left = (this.leftTop + this.leftBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: bottom = (this.leftBottom + this.rightBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: right = (this.rightTop + this.rightBottom) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,ValuesInCell,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\CellInfo.cs,ValuesInCell,The following statement contains a magic number: top = (this.rightTop + this.leftTop) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: do {  	ValuesInCell subValues = cellValues.GetSubCell (subCell);  	IrregularCell subRect = rect.GetSubRect (subCell);  	outEdge = GetOutEdge (inEdge' subValues' subRect' value);  	if (outEdge == Edge.None)  		return Edge.None;  	bool isAppropriate = subCell.IsAppropriate (outEdge);  	if (isAppropriate) {  		ValuesInCell sValues = subValues.GetSubCell (subCell);  		Point point = GetPointXY (outEdge' value' subValues' subRect);  		segments.AddPoint (point);  		return outEdge;  	}  	else {  		subCell = GetAdjacentEdge (subCell' outEdge);  	}  	byte e = (byte)outEdge;  	inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  	iters--;  }  while (iters >= 0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: do {  	ValuesInCell subValues = cellValues.GetSubCell (subCell);  	IrregularCell subRect = rect.GetSubRect (subCell);  	outEdge = GetOutEdge (inEdge' subValues' subRect' value);  	if (outEdge == Edge.None)  		return Edge.None;  	bool isAppropriate = subCell.IsAppropriate (outEdge);  	if (isAppropriate) {  		ValuesInCell sValues = subValues.GetSubCell (subCell);  		Point point = GetPointXY (outEdge' value' subValues' subRect);  		segments.AddPoint (point);  		return outEdge;  	}  	else {  		subCell = GetAdjacentEdge (subCell' outEdge);  	}  	byte e = (byte)outEdge;  	inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  	iters--;  }  while (iters >= 0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: do {  	ValuesInCell subValues = cellValues.GetSubCell (subCell);  	IrregularCell subRect = rect.GetSubRect (subCell);  	outEdge = GetOutEdge (inEdge' subValues' subRect' value);  	if (outEdge == Edge.None)  		return Edge.None;  	bool isAppropriate = subCell.IsAppropriate (outEdge);  	if (isAppropriate) {  		ValuesInCell sValues = subValues.GetSubCell (subCell);  		Point point = GetPointXY (outEdge' value' subValues' subRect);  		segments.AddPoint (point);  		return outEdge;  	}  	else {  		subCell = GetAdjacentEdge (subCell' outEdge);  	}  	byte e = (byte)outEdge;  	inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  	iters--;  }  while (iters >= 0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutForOpposite,The following statement contains a magic number: inEdge = (Edge)((e > 2) ? (e >> 2) : (e << 2));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,IsPassed,The following statement contains a magic number: switch (edge) {  case Edge.Left:  	return (i == 0) || (edges [i' j] & (byte)edge) != 0;  case Edge.Bottom:  	return (j == 0) || (edges [i' j] & (byte)edge) != 0;  case Edge.Top:  	return (j == edges.GetLength (1) - 2) || (edges [i' j + 1] & (byte)Edge.Bottom) != 0;  case Edge.Right:  	return (i == edges.GetLength (0) - 2) || (edges [i + 1' j] & (byte)Edge.Left) != 0;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,IsPassed,The following statement contains a magic number: switch (edge) {  case Edge.Left:  	return (i == 0) || (edges [i' j] & (byte)edge) != 0;  case Edge.Bottom:  	return (j == 0) || (edges [i' j] & (byte)edge) != 0;  case Edge.Top:  	return (j == edges.GetLength (1) - 2) || (edges [i' j + 1] & (byte)Edge.Bottom) != 0;  case Edge.Right:  	return (i == edges.GetLength (0) - 2) || (edges [i + 1' j] & (byte)Edge.Left) != 0;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,IsPassed,The following statement contains a magic number: return (j == edges.GetLength (1) - 2) || (edges [i' j + 1] & (byte)Edge.Bottom) != 0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,IsPassed,The following statement contains a magic number: return (i == edges.GetLength (0) - 2) || (edges [i + 1' j] & (byte)Edge.Left) != 0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineTextAnnotater,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTextAnnotater.cs,Annotate,The following statement contains a magic number: foreach (var line in collection.Lines) {  	double way = 0;  	var forwardSegments = line.GetSegments ();  	var forwardEnumerator = forwardSegments.GetEnumerator ();  	forwardEnumerator.MoveNext ();  	foreach (var segment in line.GetSegments ()) {  		bool hasForwardSegment = forwardEnumerator.MoveNext ();  		double length = segment.GetLength ();  		way += length;  		if (way > wayBeforeText) {  			way = 0;  			var rotation = (segment.Max - segment.Min).ToAngle ();  			if (hasForwardSegment) {  				var forwardSegment = forwardEnumerator.Current;  				rotation = (rotation + (forwardSegment.Max - forwardSegment.Min).ToAngle ()) / 2;  			}  			res.Add (new IsolineTextLabel {  				Value = line.RealValue'  				Position = segment.Max'  				Rotation = rotation  			});  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineTextAnnotater,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTextAnnotater.cs,Annotate,The following statement contains a magic number: foreach (var segment in line.GetSegments ()) {  	bool hasForwardSegment = forwardEnumerator.MoveNext ();  	double length = segment.GetLength ();  	way += length;  	if (way > wayBeforeText) {  		way = 0;  		var rotation = (segment.Max - segment.Min).ToAngle ();  		if (hasForwardSegment) {  			var forwardSegment = forwardEnumerator.Current;  			rotation = (rotation + (forwardSegment.Max - forwardSegment.Min).ToAngle ()) / 2;  		}  		res.Add (new IsolineTextLabel {  			Value = line.RealValue'  			Position = segment.Max'  			Rotation = rotation  		});  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineTextAnnotater,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTextAnnotater.cs,Annotate,The following statement contains a magic number: if (way > wayBeforeText) {  	way = 0;  	var rotation = (segment.Max - segment.Min).ToAngle ();  	if (hasForwardSegment) {  		var forwardSegment = forwardEnumerator.Current;  		rotation = (rotation + (forwardSegment.Max - forwardSegment.Min).ToAngle ()) / 2;  	}  	res.Add (new IsolineTextLabel {  		Value = line.RealValue'  		Position = segment.Max'  		Rotation = rotation  	});  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineTextAnnotater,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTextAnnotater.cs,Annotate,The following statement contains a magic number: if (hasForwardSegment) {  	var forwardSegment = forwardEnumerator.Current;  	rotation = (rotation + (forwardSegment.Max - forwardSegment.Min).ToAngle ()) / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineTextAnnotater,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineTextAnnotater.cs,Annotate,The following statement contains a magic number: rotation = (rotation + (forwardSegment.Max - forwardSegment.Min).ToAngle ()) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,AxisCursorGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\AxisCursorGraph.cs,OnPlotterAttached,The following statement contains a magic number: Grid.SetRow (bottomCanvas' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,OldAxisNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\OldAxisNavigation.cs,SetHorizontalOrientation,The following statement contains a magic number: Grid.SetRow (this' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,PhysicalNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\PhysicalNavigation.cs,PhysicalNavigation,The following statement contains a magic number: timer = new DispatcherTimer {  	Interval = TimeSpan.FromMilliseconds (30)  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,PhysicalRectAnimation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\PhysicalRectAnimation.cs,GetValue,The following statement contains a magic number: if (!(shift.Length < viewportSize * 0.002 && time > 0.5)) {  	position += shift;  }  else {  	isFinished = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,PhysicalRectAnimation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\PhysicalRectAnimation.cs,GetValue,The following statement contains a magic number: if (!(shift.Length < viewportSize * 0.002 && time > 0.5)) {  	position += shift;  }  else {  	isFinished = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: if (UseDashOffset) {  	horizLine.StrokeDashOffset = (output.Right - mousePos.X) / 2;  	vertLine.StrokeDashOffset = (output.Bottom - mousePos.Y) / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: if (UseDashOffset) {  	horizLine.StrokeDashOffset = (output.Right - mousePos.X) / 2;  	vertLine.StrokeDashOffset = (output.Bottom - mousePos.Y) / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: horizLine.StrokeDashOffset = (output.Right - mousePos.X) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,UpdateUIRepresentation,The following statement contains a magic number: vertLine.StrokeDashOffset = (output.Bottom - mousePos.Y) / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,GetRoundedValue,The following statement contains a magic number: if (1E3 < diff && diff < 1E6) {  	format = "F0";  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,GetRoundedValue,The following statement contains a magic number: if (1E3 < diff && diff < 1E6) {  	format = "F0";  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,GetRoundedValue,The following statement contains a magic number: if (log < 0)  	format = "G" + (-log + 2).ToString ();  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Navigation,CursorCoordinateGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\CursorCoordinateGraph.xaml.cs,GetRoundedValue,The following statement contains a magic number: format = "G" + (-log + 2).ToString ();  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MessagesHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Navigation\MessagesHelper.cs,HIWORD,The following statement contains a magic number: return (short)((i & 0xFFFF0000) >> 16);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ColorExtensions,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ColorExtensions.cs,MakeTransparent,The following statement contains a magic number: return MakeTransparent (color' (int)(255 * opacity));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,CreateElementScreenshot,The following statement contains a magic number: if (!measureValid) {  	double width = 300;  	double height = 300;  	FrameworkElement frElement = uiElement as FrameworkElement;  	if (frElement != null) {  		if (!Double.IsNaN (frElement.Width))  			width = frElement.Width;  		if (!Double.IsNaN (frElement.Height))  			height = frElement.Height;  	}  	Size size = new Size (width' height);  	uiElement.Measure (size);  	uiElement.Arrange (new Rect (size));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,ScreenshotHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\ScreenshotHelper.cs,CreateElementScreenshot,The following statement contains a magic number: if (!measureValid) {  	double width = 300;  	double height = 300;  	FrameworkElement frElement = uiElement as FrameworkElement;  	if (frElement != null) {  		if (!Double.IsNaN (frElement.Width))  			width = frElement.Width;  		if (!Double.IsNaN (frElement.Height))  			height = frElement.Height;  	}  	Size size = new Size (width' height);  	uiElement.Measure (size);  	uiElement.Arrange (new Rect (size));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (n == 1) {  	// Special case: Bezier curve should be a straight line.  	firstControlPoints = new Point[1];  	// 3P1 = 2P0 + P3  	firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  	firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  	secondControlPoints = new Point[1];  	// P2 = 2P1 – P0  	secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  	secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  	return Join (points' firstControlPoints' secondControlPoints);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: firstControlPoints [0].X = (2 * points [0].X + points [1].X) / 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: firstControlPoints [0].Y = (2 * points [0].Y + points [1].Y) / 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [0].X = 2 * firstControlPoints [0].X - points [0].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [0].Y = 2 * firstControlPoints [0].Y - points [0].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 1; i < n - 1; ++i)  	rhs [i] = 4 * points [i].X + 2 * points [i + 1].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 1; i < n - 1; ++i)  	rhs [i] = 4 * points [i].X + 2 * points [i + 1].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [i] = 4 * points [i].X + 2 * points [i + 1].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [i] = 4 * points [i].X + 2 * points [i + 1].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [0] = points [0].X + 2 * points [1].X;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [n - 1] = (8 * points [n - 1].X + points [n].X) / 2.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [n - 1] = (8 * points [n - 1].X + points [n].X) / 2.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 1; i < n - 1; ++i)  	rhs [i] = 4 * points [i].Y + 2 * points [i + 1].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 1; i < n - 1; ++i)  	rhs [i] = 4 * points [i].Y + 2 * points [i + 1].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [i] = 4 * points [i].Y + 2 * points [i + 1].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [i] = 4 * points [i].Y + 2 * points [i + 1].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [0] = points [0].Y + 2 * points [1].Y;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [n - 1] = (8 * points [n - 1].Y + points [n].Y) / 2.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: rhs [n - 1] = (8 * points [n - 1].Y + points [n].Y) / 2.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 0; i < n; ++i) {  	// First control point  	firstControlPoints [i] = new Point (x [i]' y [i]);  	// Second control point  	if (i < n - 1)  		secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  	else  		secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 0; i < n; ++i) {  	// First control point  	firstControlPoints [i] = new Point (x [i]' y [i]);  	// Second control point  	if (i < n - 1)  		secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  	else  		secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 0; i < n; ++i) {  	// First control point  	firstControlPoints [i] = new Point (x [i]' y [i]);  	// Second control point  	if (i < n - 1)  		secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  	else  		secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: for (int i = 0; i < n; ++i) {  	// First control point  	firstControlPoints [i] = new Point (x [i]' y [i]);  	// Second control point  	if (i < n - 1)  		secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  	else  		secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (i < n - 1)  	secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  else  	secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (i < n - 1)  	secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  else  	secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (i < n - 1)  	secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  else  	secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: if (i < n - 1)  	secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  else  	secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [i] = new Point (2 * points [i + 1].X - x [i + 1]' 2 * points [i + 1].Y - y [i + 1]);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetBezierPoints,The following statement contains a magic number: secondControlPoints [i] = new Point ((points [n].X + x [n - 1]) / 2' (points [n].Y + y [n - 1]) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetFirstControlPoints,The following statement contains a magic number: for (int i = 1; i < n; i++)// Decomposition and forward substitution.   {  	tmp [i] = 1 / b;  	b = (i < n - 1 ? 4.0 : 3.5) - tmp [i];  	x [i] = (rhs [i] - x [i - 1]) / b;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetFirstControlPoints,The following statement contains a magic number: for (int i = 1; i < n; i++)// Decomposition and forward substitution.   {  	tmp [i] = 1 / b;  	b = (i < n - 1 ? 4.0 : 3.5) - tmp [i];  	x [i] = (rhs [i] - x [i - 1]) / b;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetFirstControlPoints,The following statement contains a magic number: b = (i < n - 1 ? 4.0 : 3.5) - tmp [i];  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine,BezierBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\BezierBuilder.cs,GetFirstControlPoints,The following statement contains a magic number: b = (i < n - 1 ? 4.0 : 3.5) - tmp [i];  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,MinMaxLoggingPalete,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\MinMaxLoggingPalette.cs,GetColor,The following statement contains a magic number: if (counter % 100000 == 0) {  	Debug.WriteLine ("Palette: Min = " + min + "' max = " + max);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,UniformLinearPalette,The following statement contains a magic number: if (colors.Length < 2)  	throw new ArgumentException (Strings.Exceptions.PaletteTooFewColors);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,GetColor,The following statement contains a magic number: if (t <= 0)  	return colors [0];  else if (t >= 1)  	return colors [colors.Count - 1];  else {  	int i = 0;  	while (points [i] < t)  		i++;  	double ratio = (points [i] - t) / (points [i] - points [i - 1]);  	Verify.IsTrue (0 <= ratio && ratio <= 1);  	Color c0 = colors [i - 1];  	Color c1 = colors [i];  	Color res = Color.FromRgb ((byte)(c0.R * ratio + c1.R * (1 - ratio))' (byte)(c0.G * ratio + c1.G * (1 - ratio))' (byte)(c0.B * ratio + c1.B * (1 - ratio)));  	// Increasing saturation and brightness  	if (increaseBrightness) {  		HsbColor hsb = res.ToHsbColor ();  		//hsb.Saturation = 0.5 * (1 + hsb.Saturation);  		hsb.Brightness = 0.5 * (1 + hsb.Brightness);  		return hsb.ToArgbColor ();  	}  	else {  		return res;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,GetColor,The following statement contains a magic number: if (t >= 1)  	return colors [colors.Count - 1];  else {  	int i = 0;  	while (points [i] < t)  		i++;  	double ratio = (points [i] - t) / (points [i] - points [i - 1]);  	Verify.IsTrue (0 <= ratio && ratio <= 1);  	Color c0 = colors [i - 1];  	Color c1 = colors [i];  	Color res = Color.FromRgb ((byte)(c0.R * ratio + c1.R * (1 - ratio))' (byte)(c0.G * ratio + c1.G * (1 - ratio))' (byte)(c0.B * ratio + c1.B * (1 - ratio)));  	// Increasing saturation and brightness  	if (increaseBrightness) {  		HsbColor hsb = res.ToHsbColor ();  		//hsb.Saturation = 0.5 * (1 + hsb.Saturation);  		hsb.Brightness = 0.5 * (1 + hsb.Brightness);  		return hsb.ToArgbColor ();  	}  	else {  		return res;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,GetColor,The following statement contains a magic number: if (increaseBrightness) {  	HsbColor hsb = res.ToHsbColor ();  	//hsb.Saturation = 0.5 * (1 + hsb.Saturation);  	hsb.Brightness = 0.5 * (1 + hsb.Brightness);  	return hsb.ToArgbColor ();  }  else {  	return res;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Palettes,UniformLinearPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Palettes\UniformLinearPalette.cs,GetColor,The following statement contains a magic number: hsb.Brightness = 0.5 * (1 + hsb.Brightness);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 4) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		T4 param4 = (T4)values [3];  		var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 4) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		T4 param4 = (T4)values [3];  		var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 4) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		T4 param4 = (T4)values [3];  		var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 4) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		T4 param4 = (T4)values [3];  		var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 4) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		T4 param4 = (T4)values [3];  		var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	T4 param4 = (T4)values [3];  	var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	T4 param4 = (T4)values [3];  	var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	T4 param4 = (T4)values [3];  	var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,FourValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\FourValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3 && values [3] is T4) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	T4 param4 = (T4)values [3];  	var result = ConvertCore (param1' param2' param3' param4' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 3) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		var result = ConvertCore (param1' param2' param3' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 3) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		var result = ConvertCore (param1' param2' param3' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 3) {  	if (values [0] is T1 && values [1] is T2 && values [2] is T3) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		T3 param3 = (T3)values [2];  		var result = ConvertCore (param1' param2' param3' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	var result = ConvertCore (param1' param2' param3' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,ThreeValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\ThreeValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values [0] is T1 && values [1] is T2 && values [2] is T3) {  	T1 param1 = (T1)values [0];  	T2 param2 = (T2)values [1];  	T3 param3 = (T3)values [2];  	var result = ConvertCore (param1' param2' param3' targetType' parameter' culture);  	return result;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Converters,TwoValuesMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Converters\TwoValuesMultiConverter.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 2) {  	if (values [0] is T1 && values [1] is T2) {  		T1 param1 = (T1)values [0];  		T2 param2 = (T2)values [1];  		var result = ConvertCore (param1' param2' targetType' parameter' culture);  		return result;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,RectElementPointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\RectElementPointMarker.cs,SetPosition,The following statement contains a magic number: Canvas.SetLeft (marker' screenPoint.X - Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,RectElementPointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\RectElementPointMarker.cs,SetPosition,The following statement contains a magic number: Canvas.SetTop (marker' screenPoint.Y - Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CirclePointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CirclePointMarker.cs,Render,The following statement contains a magic number: dc.DrawEllipse (Fill' Pen' screenPoint' Size / 2' Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CirclePointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CirclePointMarker.cs,Render,The following statement contains a magic number: dc.DrawEllipse (Fill' Pen' screenPoint' Size / 2' Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CenteredTextMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CenteredTextMarker.cs,Render,The following statement contains a magic number: bounds = CoordinateUtilities.RectZoom (bounds' 1.05' 1.15);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CenteredTextMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CenteredTextMarker.cs,Render,The following statement contains a magic number: bounds = CoordinateUtilities.RectZoom (bounds' 1.05' 1.15);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CircleElementPointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CircleElementPointMarker.cs,SetPosition,The following statement contains a magic number: Canvas.SetLeft (marker' screenPoint.X - Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.PointMarkers,CircleElementPointMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\PointMarkers\CircleElementPointMarker.cs,SetPosition,The following statement contains a magic number: Canvas.SetTop (marker' screenPoint.Y - Size / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,DataHeightRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\DataHeightRestriction.cs,Apply,The following statement contains a magic number: if (!overallBounds.IsEmpty) {  	double y = overallBounds.YMin;  	double height = overallBounds.Height;  	if (height == 0) {  		height = newDataRect.Height;  		y -= height / 2;  	}  	newDataRect = new DataRect (newDataRect.XMin' y' newDataRect.Width' height);  	newDataRect = DataRectExtensions.ZoomY (newDataRect' newDataRect.GetCenter ()' yEnlargeCoeff);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,DataHeightRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\DataHeightRestriction.cs,Apply,The following statement contains a magic number: if (height == 0) {  	height = newDataRect.Height;  	y -= height / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.ViewportRestrictions,DataHeightRestriction,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\ViewportRestrictions\DataHeightRestriction.cs,Apply,The following statement contains a magic number: y -= height / 2;  
Missing Default,Microsoft.Research.DynamicDataDisplay.Charts,ViewportPanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\ViewportPanel.cs,GetElementScreenBoundsCore,The following switch statement is missing a default case: switch (horizAlignment) {  case HorizontalAlignment.Stretch:  case HorizontalAlignment.Center:  	screenX -= screenWidth / 2;  	break;  case HorizontalAlignment.Left:  	break;  case HorizontalAlignment.Right:  	screenX -= screenWidth;  	break;  }  
Missing Default,Microsoft.Research.DynamicDataDisplay,HsbColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Common\Auxiliary\HsbColor.cs,ToArgbColor,The following switch statement is missing a default case: switch (smallHueInt) {  case 0:  	r = brightness;  	g = val3;  	b = val1;  	break;  case 1:  	r = val2;  	g = brightness;  	b = val1;  	break;  case 2:  	r = val1;  	g = brightness;  	b = val3;  	break;  case 3:  	r = val1;  	g = val2;  	b = brightness;  	break;  case 4:  	r = val3;  	g = val1;  	b = brightness;  	break;  case 5:  	r = brightness;  	g = val1;  	b = val2;  	break;  }  
Missing Default,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutEdge,The following switch statement is missing a default case: switch (result) {  case Edge.Left:  	if (cv.LeftTop.IsNaN () || cv.LeftBottom.IsNaN ())  		result = Edge.None;  	break;  case Edge.Right:  	if (cv.RightTop.IsNaN () || cv.RightBottom.IsNaN ())  		result = Edge.None;  	break;  case Edge.Top:  	if (cv.RightTop.IsNaN () || cv.LeftTop.IsNaN ())  		result = Edge.None;  	break;  case Edge.Bottom:  	if (cv.LeftBottom.IsNaN () || cv.RightBottom.IsNaN ())  		result = Edge.None;  	break;  }  
Missing Default,Microsoft.Research.DynamicDataDisplay.Charts.Isolines,IsolineBuilder,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay\Charts\Isolines\IsolineBuilder.cs,GetOutEdge,The following switch statement is missing a default case: switch (inEdge) {  case Edge.Left:  	if (value == lt)  		value = near_one * lt + near_zero * lb;  	else if (value == lb)  		value = near_one * lb + near_zero * lt;  	else  		return Edge.None;  	// Now this is possible because of missing value  	//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);  	break;  case Edge.Top:  	if (value == rt)  		value = near_one * rt + near_zero * lt;  	else if (value == lt)  		value = near_one * lt + near_zero * rt;  	else  		return Edge.None;  	// Now this is possibe because of missing value  	//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);  	break;  case Edge.Right:  	if (value == rb)  		value = near_one * rb + near_zero * rt;  	else if (value == rt)  		value = near_one * rt + near_zero * rb;  	else  		return Edge.None;  	// Now this is possibe because of missing value  	//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);  	break;  case Edge.Bottom:  	if (value == rb)  		value = near_one * rb + near_zero * lb;  	else if (value == lb)  		value = near_one * lb + near_zero * rb;  	else  		return Edge.None;  	// Now this is possibe because of missing value  	//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);  	break;  }  
