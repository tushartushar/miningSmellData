Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,OnRender,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Maps,ZipFileTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\ZipFileTileServer.cs,CreatePackage,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Maps,FileSystemTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\FileSystemTileServer.cs,SetCachePath,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Maps,TileServerSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\TileServerSystem.cs,BeginLoadImage,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Research.DynamicDataDisplay.Maps.Servers,LRUMemoryCacheBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\MemoryServers\LRUMemoryCacheBase.cs,PerformCleanup,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,TilePathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\TilePathProvider.cs,TryParse,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Maps.Network,OpenStreetMapServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\OpenStreetMapServer.cs,CreateRequestUriCore,Cyclomatic complexity of the method is 14
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,Plotter2D_PreviewMouseWheel,The length of the statement  "		size *= e.Delta > 0 ? sizeZoom * e.Delta / Mouse.MouseWheelDeltaForOneLine : 1 / (-e.Delta / Mouse.MouseWheelDeltaForOneLine) / sizeZoom; " is 137.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,UpdateLittleVisible,The length of the statement  "	Size littleSize = new Size (Plotter2D.Viewport.Visible.Width / zoomCoeff * ActualWidth / Plotter2D.Viewport.Output.Width' Plotter2D.Viewport.Visible.Height / zoomCoeff * ActualHeight / Plotter2D.Viewport.Output.Height); " is 219.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,CreateText,The length of the statement  "	FormattedText text = new FormattedText (tileIndex.ToString ()' CultureInfo.CurrentCulture' FlowDirection.LeftToRight' new Typeface ("Arial")' 8' Brushes.Red); " is 158.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The length of the statement  "	// todo discover why sometimes we arrive here from PlotterChildren_CollectionChanged when we have removed this handler from " is 123.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,WriteableFileSystemTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\WriteableFileSystemTileServer.cs,BeginSaveImage,The length of the statement  "			MapsTraceSource.Instance.ServerInformationTraceSource.TraceInformation ("{0} - error while deleting tile {1}: {2}"' ServerName' id' exc.Message); " is 145.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,WriteableFileSystemTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\WriteableFileSystemTileServer.cs,BeginSaveImage,The length of the statement  "	bool shouldSave = saveOption == SaveOption.ForceUpdate && !errorWhileDeleting || saveOption == SaveOption.PreserveOld && !containsOld; " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,WriteableFileSystemTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\WriteableFileSystemTileServer.cs,BeginSaveImage,The length of the statement  "		MapsTraceSource.Instance.ServerInformationTraceSource.TraceInformation (String.Format ("{0}: begin to save: id = {1}"' ServerName' id)); " is 136.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,ZipFileTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\ZipFileTileServer.cs,CreatePackage,The length of the statement  "			using (FileStream fs = new FileStream (Path.Combine (sourceDirectory' foundTile.Path)' FileMode.Open' FileAccess.Read)) { " is 121.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NetworkTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\NetworkTileServer.cs,BeginLoadImage,The length of the statement  "	MapsTraceSource.Instance.ServerInformationTraceSource.TraceInformation ("\"{0}\" - began to load url=\"{1}\""' GetCustomName ()' uri); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NetworkTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\NetworkTileServer.cs,ResponseReadyCallback,The length of the statement  "		MapsTraceSource.Instance.ServerInformationTraceSource.TraceInformation ("{0} Network \"{1}\" Failure: url=\"{2}\": {3}"' DateTime.Now' ServerName' responseUri' exc.Message); " is 173.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Maps,TileServerSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\TileServerSystem.cs,Contains,The length of the statement  "		return memoryServer.Contains (id) || fileServer.Contains (id) || sourceServer.CanLoadFast (id) && sourceServer.Contains (id); " is 125.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,GetVector,The length of the statement  "	Vector result = (1 - xRatio) * v00 + xRatio * v10 + (1 - xRatio) * v01 + xRatio * v11 + (1 - yRatio) * v00 + yRatio * v01 + (1 - yRatio) * v10 + yRatio * v11; " is 158.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderingMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderingMap.cs,GetAvailableUpperLevel,The length of the statement  "	return levels.OrderBy (d => -d).FirstOrDefault (level => level < currLevel && cache.Where (id => id.Level == level).Count () >= 3); " is 131.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileServer.cs,OnChildRenderingFinished,The length of the statement  "	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)tileSize.Width' (int)tileSize.Height' 96' 96' PixelFormats.Pbgra32); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileServer.cs,RenderToBitmapCore,The length of the statement  "		RenderTargetBitmap bmp = new RenderTargetBitmap ((int)tileSize.Width' (int)tileSize.Height' 96' 96' PixelFormats.Pbgra32); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,ThreadedRenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\ThreadedRenderTileServer.cs,RenderToBitmapCore,The length of the statement  "	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)tileSize.Width' (int)tileSize.Height' 96' 96' PixelFormats.Pbgra32); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Maps.Servers,LRUMemoryCacheBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\MemoryServers\LRUMemoryCacheBase.cs,PerformCleanup,The length of the statement  "	//MapsTraceSource.Instance.ServerInformationTraceSource.TraceInformation("LRUMemoryCache: CleanUp - " + extraNum + " tiles over limit of " + maxCacheSize); " is 155.
Empty Catch Block,Microsoft.Research.DynamicDataDisplay.Charts.Maps,AutoDisposableFileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\AutoDisposableFileServer.cs,DeleteCache,The method has an empty catch block.
Empty Catch Block,Microsoft.Research.DynamicDataDisplay.Charts.Maps,WriteableFileSystemTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\WriteableFileSystemTileServer.cs,Clear,The method has an empty catch block.
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,MapMagnifyingGlass,The following statement contains a magic number: Width = 200;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,MapMagnifyingGlass,The following statement contains a magic number: Height = 200;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,OnPlotterAttached,The following statement contains a magic number: littlePlotter.Viewport.Visible = new Rect (-180' -90' 360' 180);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,OnPlotterAttached,The following statement contains a magic number: littlePlotter.Viewport.Visible = new Rect (-180' -90' 360' 180);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,OnPlotterAttached,The following statement contains a magic number: littlePlotter.Viewport.Visible = new Rect (-180' -90' 360' 180);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,OnPlotterAttached,The following statement contains a magic number: littlePlotter.Viewport.Visible = new Rect (-180' -90' 360' 180);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,Plotter2D_PreviewMouseWheel,The following statement contains a magic number: if ((Keyboard.Modifiers | ModifierKeys.Control) == Keyboard.Modifiers) {  	ZoomCoeff += e.Delta / Mouse.MouseWheelDeltaForOneLine;  	e.Handled = true;  }  else if ((Keyboard.Modifiers | ModifierKeys.Shift) == Keyboard.Modifiers) {  	double size = 1;  	const double sizeZoom = 1.3;  	size *= e.Delta > 0 ? sizeZoom * e.Delta / Mouse.MouseWheelDeltaForOneLine : 1 / (-e.Delta / Mouse.MouseWheelDeltaForOneLine) / sizeZoom;  	Width *= size;  	Height *= size;  	UpdateSize ();  	UpdateLittleVisible ();  	UpdatePosition ();  	e.Handled = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,Plotter2D_PreviewMouseWheel,The following statement contains a magic number: if ((Keyboard.Modifiers | ModifierKeys.Shift) == Keyboard.Modifiers) {  	double size = 1;  	const double sizeZoom = 1.3;  	size *= e.Delta > 0 ? sizeZoom * e.Delta / Mouse.MouseWheelDeltaForOneLine : 1 / (-e.Delta / Mouse.MouseWheelDeltaForOneLine) / sizeZoom;  	Width *= size;  	Height *= size;  	UpdateSize ();  	UpdateLittleVisible ();  	UpdatePosition ();  	e.Handled = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,UpdatePosition,The following statement contains a magic number: Canvas.SetLeft (this' pos.X - ActualWidth / 2 + Plotter2D.LeftPanel.ActualWidth);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapMagnifyingGlass,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\MapMagnifyingGlass.cs,UpdatePosition,The following statement contains a magic number: Canvas.SetTop (this' pos.Y - ActualHeight / 2 + Plotter2D.TopPanel.ActualHeight);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: if (cursorGraph != null) {  	changedTextFormat = true;  	// saving previous text mappings  	prevXMapping = cursorGraph.XTextMapping;  	prevYMapping = cursorGraph.YTextMapping;  	// setting new text mappings  	cursorGraph.XTextMapping = value =>  {  		if (Double.IsNaN (value))  			return "";  		if (-180 <= value && value <= 180) {  			Degree degree = Degree.CreateLongitude (value);  			return degree.ToString ();  		}  		else  			return null;  	};  	cursorGraph.YTextMapping = value =>  {  		if (Double.IsNaN (value))  			return "";  		var mapTileProvider = tileProvider as MapTileProvider;  		if (mapTileProvider != null) {  			if (mapTileProvider.MinLatitude <= value && value <= mapTileProvider.MaxLatitude) {  				Degree degree = Degree.CreateLatitude (value);  				return degree.ToString ();  			}  		}  		return null;  	};  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: if (cursorGraph != null) {  	changedTextFormat = true;  	// saving previous text mappings  	prevXMapping = cursorGraph.XTextMapping;  	prevYMapping = cursorGraph.YTextMapping;  	// setting new text mappings  	cursorGraph.XTextMapping = value =>  {  		if (Double.IsNaN (value))  			return "";  		if (-180 <= value && value <= 180) {  			Degree degree = Degree.CreateLongitude (value);  			return degree.ToString ();  		}  		else  			return null;  	};  	cursorGraph.YTextMapping = value =>  {  		if (Double.IsNaN (value))  			return "";  		var mapTileProvider = tileProvider as MapTileProvider;  		if (mapTileProvider != null) {  			if (mapTileProvider.MinLatitude <= value && value <= mapTileProvider.MaxLatitude) {  				Degree degree = Degree.CreateLatitude (value);  				return degree.ToString ();  			}  		}  		return null;  	};  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: cursorGraph.XTextMapping = value =>  {  	if (Double.IsNaN (value))  		return "";  	if (-180 <= value && value <= 180) {  		Degree degree = Degree.CreateLongitude (value);  		return degree.ToString ();  	}  	else  		return null;  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: cursorGraph.XTextMapping = value =>  {  	if (Double.IsNaN (value))  		return "";  	if (-180 <= value && value <= 180) {  		Degree degree = Degree.CreateLongitude (value);  		return degree.ToString ();  	}  	else  		return null;  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: if (-180 <= value && value <= 180) {  	Degree degree = Degree.CreateLongitude (value);  	return degree.ToString ();  }  else  	return null;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,ChangeTextFormat,The following statement contains a magic number: if (-180 <= value && value <= 180) {  	Degree degree = Degree.CreateLongitude (value);  	return degree.ToString ();  }  else  	return null;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,UpdateLevel,The following statement contains a magic number: do {  	double width = tileProvider.GetTileWidth (tileProvider.Level);  	double height = tileProvider.GetTileHeight (tileProvider.Level);  	DataRect size = new DataRect (new Size (width' height));  	Rect onScreen = size.ViewportToScreen (transform);  	// todo написать нормально  	if (onScreen.Width > tileWidth * 1.45) {  		if (tileProvider.IncreaseLevel ()) {  			continue;  		}  	}  	else if (onScreen.Width < tileWidth / 1.45) {  		if (tileProvider.DecreaseLevel ()) {  			continue;  		}  	}  	ok = true;  }  while (!ok);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,UpdateLevel,The following statement contains a magic number: do {  	double width = tileProvider.GetTileWidth (tileProvider.Level);  	double height = tileProvider.GetTileHeight (tileProvider.Level);  	DataRect size = new DataRect (new Size (width' height));  	Rect onScreen = size.ViewportToScreen (transform);  	// todo написать нормально  	if (onScreen.Width > tileWidth * 1.45) {  		if (tileProvider.IncreaseLevel ()) {  			continue;  		}  	}  	else if (onScreen.Width < tileWidth / 1.45) {  		if (tileProvider.DecreaseLevel ()) {  			continue;  		}  	}  	ok = true;  }  while (!ok);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,UpdateLevel,The following statement contains a magic number: if (onScreen.Width > tileWidth * 1.45) {  	if (tileProvider.IncreaseLevel ()) {  		continue;  	}  }  else if (onScreen.Width < tileWidth / 1.45) {  	if (tileProvider.DecreaseLevel ()) {  		continue;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,UpdateLevel,The following statement contains a magic number: if (onScreen.Width > tileWidth * 1.45) {  	if (tileProvider.IncreaseLevel ()) {  		continue;  	}  }  else if (onScreen.Width < tileWidth / 1.45) {  	if (tileProvider.DecreaseLevel ()) {  		continue;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,NewMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\NewMap.cs,UpdateLevel,The following statement contains a magic number: if (onScreen.Width < tileWidth / 1.45) {  	if (tileProvider.DecreaseLevel ()) {  		continue;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,Degree,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Degree.cs,Degree,The following statement contains a magic number: if (Math.Abs (minutes) >= 60)  	throw new ArgumentOutOfRangeException ("minutes");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,Degree,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Degree.cs,Degree,The following statement contains a magic number: if (Math.Abs (seconds) >= 60.0)  	throw new ArgumentOutOfRangeException ("seconds");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapTileProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\MapTileProvider.cs,GetSideTilesCount,The following statement contains a magic number: return (int)Math.Pow (2' level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapTileProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\MapTileProvider.cs,GetTileWidth,The following statement contains a magic number: return XSize / Math.Pow (2' level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapTileProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\MapTileProvider.cs,GetTileHeight,The following statement contains a magic number: return YSize / Math.Pow (2' level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps,MapTileProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\MapTileProvider.cs,GetTilesForRegion,The following statement contains a magic number: checked {  	double tileWidth = TileWidth;  	double tileHeight = TileHeight;  	int minIx = (int)Math.Floor (region.XMin / tileWidth);  	int maxIx = (int)Math.Ceiling (region.XMax / tileWidth);  	int minIy = (int)Math.Floor (region.YMin / tileHeight);  	int maxIy = (int)Math.Ceiling (region.YMax / tileHeight);  	var maxSideCount = GetSideTilesCount (Level);  	int maxIndex = maxSideCount / 2;  	if (maxIx > maxIndex)  		maxIx = maxIndex;  	if (maxIy > maxIndex)  		maxIy = maxIndex;  	if (minIx < -maxIndex)  		minIx = -maxIndex;  	if (minIy < -maxIndex)  		minIy = -maxIndex;  	if (level != 0) {  		maxIx--;  		maxIy--;  	}  	for (int ix = minIx; ix <= maxIx; ix++) {  		for (int iy = minIy; iy <= maxIy; iy++) {  			yield return new TileIndex (ix' iy' level);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateWhiteNoizeBmp,The following statement contains a magic number: for (int i = 0; i < width * height; i++) {  	HsbColor color = new HsbColor (0' 0' Math.Round (5 * rnd.NextDouble ()) / 4);  	int argb = color.ToArgb ();  	pixels [i] = argb;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateWhiteNoizeBmp,The following statement contains a magic number: for (int i = 0; i < width * height; i++) {  	HsbColor color = new HsbColor (0' 0' Math.Round (5 * rnd.NextDouble ()) / 4);  	int argb = color.ToArgb ();  	pixels [i] = argb;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateConvolutionArray,The following statement contains a magic number: Parallel.For (0' width * height' i =>  {  	int ix = i % width;  	int iy = i / width;  	double sum = 1;  	double positiveDistance = 0;  	Point position = dataSource.Grid [ix' iy];  	ConvolutionColor color = ConvolutionColor.FromArgb (pixels [ix + width * iy]);  	int counter = 0;  	do {  		counter++;  		var vector = dataSource.Data [ix' iy];  		vector.Normalize ();  		position += vector;  		positiveDistance += vector.Length;  		IntPoint coordinate;  		bool found = GetCoordinate (dataSource' position' out coordinate);  		if (found) {  			ix = coordinate.X;  			iy = coordinate.Y;  			var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  			// *1 / Math.Sqrt(counter);  			color += currentColor;  			sum += 1;  		}  		else {  			break;  		}  	}  	while (positiveDistance < L || counter < 50);  	var negativeDistance = 0.0;  	counter = 0;  	do {  		counter++;  		var vector = dataSource.Data [ix' iy];  		vector.Normalize ();  		position -= vector;  		negativeDistance += vector.Length;  		IntPoint coordinate;  		bool found = GetCoordinate (dataSource' position' out coordinate);  		if (found) {  			ix = coordinate.X;  			iy = coordinate.Y;  			var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  			// * 1 / Math.Sqrt(counter);  			color += currentColor;  			sum += 1;  		}  		else {  			break;  		}  	}  	while (negativeDistance < L || counter < 50);  	color /= sum;  	effectivePixels [i] = color.ToArgb ();  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateConvolutionArray,The following statement contains a magic number: Parallel.For (0' width * height' i =>  {  	int ix = i % width;  	int iy = i / width;  	double sum = 1;  	double positiveDistance = 0;  	Point position = dataSource.Grid [ix' iy];  	ConvolutionColor color = ConvolutionColor.FromArgb (pixels [ix + width * iy]);  	int counter = 0;  	do {  		counter++;  		var vector = dataSource.Data [ix' iy];  		vector.Normalize ();  		position += vector;  		positiveDistance += vector.Length;  		IntPoint coordinate;  		bool found = GetCoordinate (dataSource' position' out coordinate);  		if (found) {  			ix = coordinate.X;  			iy = coordinate.Y;  			var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  			// *1 / Math.Sqrt(counter);  			color += currentColor;  			sum += 1;  		}  		else {  			break;  		}  	}  	while (positiveDistance < L || counter < 50);  	var negativeDistance = 0.0;  	counter = 0;  	do {  		counter++;  		var vector = dataSource.Data [ix' iy];  		vector.Normalize ();  		position -= vector;  		negativeDistance += vector.Length;  		IntPoint coordinate;  		bool found = GetCoordinate (dataSource' position' out coordinate);  		if (found) {  			ix = coordinate.X;  			iy = coordinate.Y;  			var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  			// * 1 / Math.Sqrt(counter);  			color += currentColor;  			sum += 1;  		}  		else {  			break;  		}  	}  	while (negativeDistance < L || counter < 50);  	color /= sum;  	effectivePixels [i] = color.ToArgb ();  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateConvolutionArray,The following statement contains a magic number: do {  	counter++;  	var vector = dataSource.Data [ix' iy];  	vector.Normalize ();  	position += vector;  	positiveDistance += vector.Length;  	IntPoint coordinate;  	bool found = GetCoordinate (dataSource' position' out coordinate);  	if (found) {  		ix = coordinate.X;  		iy = coordinate.Y;  		var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  		// *1 / Math.Sqrt(counter);  		color += currentColor;  		sum += 1;  	}  	else {  		break;  	}  }  while (positiveDistance < L || counter < 50);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,CreateConvolutionArray,The following statement contains a magic number: do {  	counter++;  	var vector = dataSource.Data [ix' iy];  	vector.Normalize ();  	position -= vector;  	negativeDistance += vector.Length;  	IntPoint coordinate;  	bool found = GetCoordinate (dataSource' position' out coordinate);  	if (found) {  		ix = coordinate.X;  		iy = coordinate.Y;  		var currentColor = ConvolutionColor.FromArgb (pixels [ix + iy * width]);  		// * 1 / Math.Sqrt(counter);  		color += currentColor;  		sum += 1;  	}  	else {  		break;  	}  }  while (negativeDistance < L || counter < 50);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts,VectorFieldConvolutionChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\VectorFieldConvolutionChart.cs,GetVector,The following statement contains a magic number: result *= 0.25;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderingMap,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderingMap.cs,GetAvailableUpperLevel,The following statement contains a magic number: return levels.OrderBy (d => -d).FirstOrDefault (level => level < currLevel && cache.Where (id => id.Level == level).Count () >= 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileProvider.cs,GetTileSide,The following statement contains a magic number: return Math.Pow (2' -level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileServer.cs,RenderToBitmapCore,The following statement contains a magic number: if (!BackgroundRenderer.GetUsesBackgroundRendering (child)) {  	// this is done to make all inside plotter to perform measure and arrange procedures  	plotter.Dispatcher.Invoke (() =>  {  	}' DispatcherPriority.Input);  	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)tileSize.Width' (int)tileSize.Height' 96' 96' PixelFormats.Pbgra32);  	bmp.Render (plotter);  	bmp.Freeze ();  	ReportSuccessAsync (null' bmp' id);  	rendering = false;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileServer.cs,RenderToBitmapCore,The following statement contains a magic number: if (!BackgroundRenderer.GetUsesBackgroundRendering (child)) {  	// this is done to make all inside plotter to perform measure and arrange procedures  	plotter.Dispatcher.Invoke (() =>  {  	}' DispatcherPriority.Input);  	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)tileSize.Width' (int)tileSize.Height' 96' 96' PixelFormats.Pbgra32);  	bmp.Render (plotter);  	bmp.Freeze ();  	ReportSuccessAsync (null' bmp' id);  	rendering = false;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,RenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\RenderTileServer.cs,GetTileSide,The following statement contains a magic number: return 1.0 * Math.Pow (2' -level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.TiledRendering,ThreadedRenderTileServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\TiledRendering\ThreadedRenderTileServer.cs,GetTileSide,The following statement contains a magic number: return 1.0 * Math.Pow (2' -level);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,FromArgb,The following statement contains a magic number: result.R = argb >> 16;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,FromArgb,The following statement contains a magic number: result.G = argb >> 8 & 0xFF;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToArgb,The following statement contains a magic number: return 255 << 24 | (R & 0xFF) << 16 | (G & 0xFF) << 8 | (B & 0xFF);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToArgb,The following statement contains a magic number: return 255 << 24 | (R & 0xFF) << 16 | (G & 0xFF) << 8 | (B & 0xFF);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToArgb,The following statement contains a magic number: return 255 << 24 | (R & 0xFF) << 16 | (G & 0xFF) << 8 | (B & 0xFF);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToArgb,The following statement contains a magic number: return 255 << 24 | (R & 0xFF) << 16 | (G & 0xFF) << 8 | (B & 0xFF);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToBgra,The following statement contains a magic number: return (B & 0xFF) << 24 | (G & 0xFF) << 16 | (R & 0xFF) << 8 | 0xFF;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToBgra,The following statement contains a magic number: return (B & 0xFF) << 24 | (G & 0xFF) << 16 | (R & 0xFF) << 8 | 0xFF;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,ConvolutionColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\ConvolutionColor.cs,ToBgra,The following statement contains a magic number: return (B & 0xFF) << 24 | (G & 0xFF) << 16 | (R & 0xFF) << 8 | 0xFF;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,NormalizeFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\NormalizeFilter.cs,Filter,The following statement contains a magic number: for (int i = 0; i < pixels.Length; i++) {  	int x = i % width;  	int y = i / width;  	if (width - x < 10)  		continue;  	if (height - y < 10)  		continue;  	int argb = pixels [i];  	var color = HsbColor.FromArgb (argb);  	var brightness = color.Brightness;  	if (brightness < minBrightness)  		minBrightness = brightness;  	if (brightness > maxBrightness)  		maxBrightness = brightness;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,NormalizeFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\NormalizeFilter.cs,Filter,The following statement contains a magic number: for (int i = 0; i < pixels.Length; i++) {  	int x = i % width;  	int y = i / width;  	if (width - x < 10)  		continue;  	if (height - y < 10)  		continue;  	int argb = pixels [i];  	var color = HsbColor.FromArgb (argb);  	var brightness = color.Brightness;  	if (brightness < minBrightness)  		minBrightness = brightness;  	if (brightness > maxBrightness)  		maxBrightness = brightness;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,NormalizeFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\NormalizeFilter.cs,Filter,The following statement contains a magic number: if (width - x < 10)  	continue;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Charts.VectorFields,NormalizeFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Charts\VectorFields\NormalizeFilter.cs,Filter,The following statement contains a magic number: if (height - y < 10)  	continue;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers,LRUMemoryCacheBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\MemoryServers\LRUMemoryCacheBase.cs,LRUMemoryCacheBase,The following statement contains a magic number: cleanupTimer = new DispatcherTimer {  	Interval = TimeSpan.FromSeconds (20)  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,TilePathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\TilePathProvider.cs,TryParse,The following statement contains a magic number: foreach (char ch in name) {  	switch (ch) {  	case '0':  		break;  	case '1':  		x++;  		break;  	case '2':  		y++;  		break;  	case '3':  		x++;  		y++;  		break;  	default:  		index = new TileIndex ();  		return false;  	}  	level++;  	x *= 2;  	y *= 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,TilePathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\TilePathProvider.cs,TryParse,The following statement contains a magic number: foreach (char ch in name) {  	switch (ch) {  	case '0':  		break;  	case '1':  		x++;  		break;  	case '2':  		y++;  		break;  	case '3':  		x++;  		y++;  		break;  	default:  		index = new TileIndex ();  		return false;  	}  	level++;  	x *= 2;  	y *= 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,TilePathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\TilePathProvider.cs,TryParse,The following statement contains a magic number: x *= 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,TilePathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\TilePathProvider.cs,TryParse,The following statement contains a magic number: y *= 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: checked {  	for (int level = minLevel; level <= id.Level; level++) {  		char ch = '0';  		int halfTilesNum = (int)Math.Pow (2' id.Level - level);  		if ((id.X & halfTilesNum) != 0)  			ch += (char)1;  		if ((id.Y & halfTilesNum) == 0)  			ch += (char)2;  		builder.Append (ch);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: checked {  	for (int level = minLevel; level <= id.Level; level++) {  		char ch = '0';  		int halfTilesNum = (int)Math.Pow (2' id.Level - level);  		if ((id.X & halfTilesNum) != 0)  			ch += (char)1;  		if ((id.Y & halfTilesNum) == 0)  			ch += (char)2;  		builder.Append (ch);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: for (int level = minLevel; level <= id.Level; level++) {  	char ch = '0';  	int halfTilesNum = (int)Math.Pow (2' id.Level - level);  	if ((id.X & halfTilesNum) != 0)  		ch += (char)1;  	if ((id.Y & halfTilesNum) == 0)  		ch += (char)2;  	builder.Append (ch);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: for (int level = minLevel; level <= id.Level; level++) {  	char ch = '0';  	int halfTilesNum = (int)Math.Pow (2' id.Level - level);  	if ((id.X & halfTilesNum) != 0)  		ch += (char)1;  	if ((id.Y & halfTilesNum) == 0)  		ch += (char)2;  	builder.Append (ch);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: if ((id.Y & halfTilesNum) == 0)  	ch += (char)2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Maps.Servers.FileServers,VEPathProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\FileServers\VEPathProvider.cs,GetTilePath,The following statement contains a magic number: ch += (char)2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps.Network,OpenStreetMapServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\OpenStreetMapServer.cs,OpenStreetMapServer,The following statement contains a magic number: MaxLatitude = 85.2878;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps.Network,OpenStreetMapServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\OpenStreetMapServer.cs,OpenStreetMapServer,The following statement contains a magic number: MaxLevel = 17;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps.Network,OpenStreetMapServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\OpenStreetMapServer.cs,OpenStreetMapServer,The following statement contains a magic number: MaxConcurrentDownloads = 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Maps.Network,OpenStreetMapServer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Maps\Servers\Network\OpenStreetMapServer.cs,OpenStreetMapServer,The following statement contains a magic number: ServersNum = 3;  
