Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,VerifyAxisType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisBase.cs,GetPanelByPlacement,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisBase.cs,CreateRangeFromRect,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateSizeGetters,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CreateDataRect,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,DoDrawMinorTicks,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DateTimeLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeLabelProviderBase.cs,GetDateFormat,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,GetDateFormat,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundDown,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundUp,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,Children_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.Axes,StackCanvas,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\StackCanvas.cs,ArrangeOverride,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,MeasureOverride,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateSizeGetters,The method has 14 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CheckLabelsArrangement,The method has 9 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,MinorNumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\MinorNumericTicksProvider.cs,GetTicks,The method has 6 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Charts,FakePointList,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\FakePointList.cs,FakePointList,The method has 5 parameters.
Long Statement,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,UpdateClippings,The length of the statement  "	bottomClip.Rect = new Rect (new Point (0' 0)' new Size (CentralGrid.ActualWidth' ActualHeight - CentralGrid.ActualHeight - HeaderPanel.ActualHeight)); " is 150.
Long Statement,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,UpdateClippings,The length of the statement  "	headerClip.Rect = new Rect (new Point (0' 0)' new Size (CentralGrid.ActualWidth' ActualHeight - CentralGrid.ActualHeight - BottomPanel.ActualHeight)); " is 150.
Long Statement,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,UpdateClippings,The length of the statement  "	leftPanelClip.Rect = new Rect (new Point (0' 0)' new Size (ActualWidth - CentralGrid.ActualWidth - RightPanel.ActualWidth' CentralGrid.ActualHeight)); " is 150.
Long Statement,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,UpdateClippings,The length of the statement  "	rightPanelClip.Rect = new Rect (new Point (0' 0)' new Size (ActualWidth - CentralGrid.ActualWidth - LeftPanel.ActualWidth' CentralGrid.ActualHeight)); " is 150.
Long Statement,Microsoft.Research.DynamicDataDisplay,LineGraph,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\LineGraph.cs,UpdateCore,The length of the statement  "	filteredPoints = new FakePointList (FilterPoints (transformedPoints)' output.Left' output.Right' output.Top' output.Bottom); " is 124.
Long Statement,Microsoft.Research.DynamicDataDisplay,Plotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Plotter.xaml.cs,Plotter_Loaded,The length of the statement  "		children.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler (children_CollectionChanged); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUIRepresentation,The length of the statement  "	screenTicks = ticks.Select (tick => createDataPoint (convertToDouble (tick))).Select (p => p.ToScreen (converter)).Select (p => getCoordinate (p)).ToArray (); " is 158.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,DoDrawMayorLabels,The length of the statement  "		double[] screenCoords = mayorTicks.Ticks.Select (tick => createDataPoint (convertToDouble (tick))).Select (p => p.ToScreen (converter)).Select (p => getCoordinate (p)).ToArray (); " is 179.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,DoDrawMinorTicks,The length of the statement  "		double[] screenCoords = minorTicks.Ticks.Select (coord => getCoordinate (createDataPoint (convertToDouble (coord)).ToScreen (converter))).ToArray (); " is 149.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The length of the statement  "	var ticks = mayorTicks.GetPairs ().Select (r => Clip (provider.GetTicks (r' ticksCount)' r)).SelectMany (t => t.Ticks).ToArray (); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,DatePeriodTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\TimePeriodTicksProvider.cs,RoundDown,The length of the statement  "		res = time.Date.AddHours (time.Hour).AddMinutes (time.Minute).AddSeconds (time.Second).AddMilliseconds (time.Millisecond); " is 122.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,AssociatePlotter,The length of the statement  "	Plotter.Children.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler (Children_CollectionChanged); " is 138.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,minus_MouseLeftButtonDown,The length of the statement  "	Point zoomTo = new Point (plotter2D.Viewport.Visible.Width / 2 + plotter2D.Viewport.Visible.X' plotter2D.Viewport.Visible.Height / 2 + plotter2D.Viewport.Visible.Y); " is 165.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,plus_MouseLeftButtonDown,The length of the statement  "	Point zoomTo = new Point (plotter2D.Viewport.Visible.Width / 2 + plotter2D.Viewport.Visible.X' plotter2D.Viewport.Visible.Height / 2 + plotter2D.Viewport.Visible.Y); " is 165.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,relocateVisisble,The length of the statement  "	//MessageBox.Show("Shifting visible to "+shiftX+" "+shiftY+" from "+panningStartPointInViewport+" to "+panningEndPointInViewport); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The length of the statement  "	//MessageBox.Show("vis loc "+Viewport.Visible.X+" "+Viewport.Visible.Y+" size "+Viewport.Visible.Width+" "+Viewport.Visible.Height); " is 132.
Long Statement,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The length of the statement  "	//MessageBox.Show("Coords screen "+panningStartPointInScreen.X+" "+panningStartPointInScreen.Y+" viewport "+panningStartPointInViewport.X+" "+panningStartPointInViewport.Y); " is 173.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,PerformanceCounter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\PerformaceCounter.cs,GetString,The length of the statement  "		strBuilder.AppendLine (kvp.Key + ":\t\t" + kvp.Value + "(" + ((double)kvp.Value.Ticks / (double)overall.Ticks * 100.0) + "%)"); " is 127.
Long Statement,Microsoft.Research.DynamicDataDisplay.Common,DataRect,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\DataRect.cs,IntersectsWith,The length of the statement  "	return ((((rect.XMin <= this.XMax) && (rect.XMax >= this.XMin)) && (rect.YMax >= this.YMin)) && (rect.YMin <= this.YMax)); " is 122.
Complex Conditional,Microsoft.Research.DynamicDataDisplay.Common.Stubs,RectExt,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Stubs\Extensions.cs,Intersect,The conditional expression  "r1.Left > r2.Right || r2.Left > r1.Right || r1.Bottom > r2.Top || r2.Bottom > r1.Top"  is complex.
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (!alreadyLoaded) {  	VerticalAxis = new VerticalAxis ();  	#region Different initialization  	if (settings.HorizontalAxisType == ChartPlotterSettings.AxisType.NumericAxis) {  		HorizontalAxis = new HorizontalAxis ();  	}  	else  		HorizontalAxis = new HorizontalDateTimeAxis ();  	if (settings.IsButtonNavigationPresents) {  		buttonsNavigation = new buttonsNavigation (this);  		HoveringStackPanel.Children.Add (buttonsNavigation);  	}  	if (settings.IsLegendPresents) {  		legend = new Legend (this);  		ScrollWraper legendWraper = new ScrollWraper (legend);  		legendWraper.Margin = new Thickness (5' 10' 10' 10);  		HoveringStackPanel.Children.Add (legendWraper);  	}  	#endregion  	Children.Add (axisGrid);  	Children.Add (mouseNavigation);  	MainCanvas.SizeChanged += new SizeChangedEventHandler (MainCanvas_SizeChanged);  	HoveringStackPanel.SizeChanged += new SizeChangedEventHandler (hoveringPanel_SizeChanged);  	Viewport.FitToView ();  	alreadyLoaded = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (!alreadyLoaded) {  	VerticalAxis = new VerticalAxis ();  	#region Different initialization  	if (settings.HorizontalAxisType == ChartPlotterSettings.AxisType.NumericAxis) {  		HorizontalAxis = new HorizontalAxis ();  	}  	else  		HorizontalAxis = new HorizontalDateTimeAxis ();  	if (settings.IsButtonNavigationPresents) {  		buttonsNavigation = new buttonsNavigation (this);  		HoveringStackPanel.Children.Add (buttonsNavigation);  	}  	if (settings.IsLegendPresents) {  		legend = new Legend (this);  		ScrollWraper legendWraper = new ScrollWraper (legend);  		legendWraper.Margin = new Thickness (5' 10' 10' 10);  		HoveringStackPanel.Children.Add (legendWraper);  	}  	#endregion  	Children.Add (axisGrid);  	Children.Add (mouseNavigation);  	MainCanvas.SizeChanged += new SizeChangedEventHandler (MainCanvas_SizeChanged);  	HoveringStackPanel.SizeChanged += new SizeChangedEventHandler (hoveringPanel_SizeChanged);  	Viewport.FitToView ();  	alreadyLoaded = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (!alreadyLoaded) {  	VerticalAxis = new VerticalAxis ();  	#region Different initialization  	if (settings.HorizontalAxisType == ChartPlotterSettings.AxisType.NumericAxis) {  		HorizontalAxis = new HorizontalAxis ();  	}  	else  		HorizontalAxis = new HorizontalDateTimeAxis ();  	if (settings.IsButtonNavigationPresents) {  		buttonsNavigation = new buttonsNavigation (this);  		HoveringStackPanel.Children.Add (buttonsNavigation);  	}  	if (settings.IsLegendPresents) {  		legend = new Legend (this);  		ScrollWraper legendWraper = new ScrollWraper (legend);  		legendWraper.Margin = new Thickness (5' 10' 10' 10);  		HoveringStackPanel.Children.Add (legendWraper);  	}  	#endregion  	Children.Add (axisGrid);  	Children.Add (mouseNavigation);  	MainCanvas.SizeChanged += new SizeChangedEventHandler (MainCanvas_SizeChanged);  	HoveringStackPanel.SizeChanged += new SizeChangedEventHandler (hoveringPanel_SizeChanged);  	Viewport.FitToView ();  	alreadyLoaded = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (!alreadyLoaded) {  	VerticalAxis = new VerticalAxis ();  	#region Different initialization  	if (settings.HorizontalAxisType == ChartPlotterSettings.AxisType.NumericAxis) {  		HorizontalAxis = new HorizontalAxis ();  	}  	else  		HorizontalAxis = new HorizontalDateTimeAxis ();  	if (settings.IsButtonNavigationPresents) {  		buttonsNavigation = new buttonsNavigation (this);  		HoveringStackPanel.Children.Add (buttonsNavigation);  	}  	if (settings.IsLegendPresents) {  		legend = new Legend (this);  		ScrollWraper legendWraper = new ScrollWraper (legend);  		legendWraper.Margin = new Thickness (5' 10' 10' 10);  		HoveringStackPanel.Children.Add (legendWraper);  	}  	#endregion  	Children.Add (axisGrid);  	Children.Add (mouseNavigation);  	MainCanvas.SizeChanged += new SizeChangedEventHandler (MainCanvas_SizeChanged);  	HoveringStackPanel.SizeChanged += new SizeChangedEventHandler (hoveringPanel_SizeChanged);  	Viewport.FitToView ();  	alreadyLoaded = true;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (settings.IsLegendPresents) {  	legend = new Legend (this);  	ScrollWraper legendWraper = new ScrollWraper (legend);  	legendWraper.Margin = new Thickness (5' 10' 10' 10);  	HoveringStackPanel.Children.Add (legendWraper);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (settings.IsLegendPresents) {  	legend = new Legend (this);  	ScrollWraper legendWraper = new ScrollWraper (legend);  	legendWraper.Margin = new Thickness (5' 10' 10' 10);  	HoveringStackPanel.Children.Add (legendWraper);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (settings.IsLegendPresents) {  	legend = new Legend (this);  	ScrollWraper legendWraper = new ScrollWraper (legend);  	legendWraper.Margin = new Thickness (5' 10' 10' 10);  	HoveringStackPanel.Children.Add (legendWraper);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: if (settings.IsLegendPresents) {  	legend = new Legend (this);  	ScrollWraper legendWraper = new ScrollWraper (legend);  	legendWraper.Margin = new Thickness (5' 10' 10' 10);  	HoveringStackPanel.Children.Add (legendWraper);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: legendWraper.Margin = new Thickness (5' 10' 10' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: legendWraper.Margin = new Thickness (5' 10' 10' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: legendWraper.Margin = new Thickness (5' 10' 10' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,ChartPlotter_Loaded,The following statement contains a magic number: legendWraper.Margin = new Thickness (5' 10' 10' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,hoveringPanel_SizeChanged,The following statement contains a magic number: if ((!isHoveringPanelCliped) && (e.NewSize.Height > CentralGrid.ActualHeight - 10)) {  	h.Height = CentralGrid.ActualHeight - 15;  	isHoveringPanelCliped = true;  	return;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,hoveringPanel_SizeChanged,The following statement contains a magic number: if ((!isHoveringPanelCliped) && (e.NewSize.Height > CentralGrid.ActualHeight - 10)) {  	h.Height = CentralGrid.ActualHeight - 15;  	isHoveringPanelCliped = true;  	return;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,hoveringPanel_SizeChanged,The following statement contains a magic number: h.Height = CentralGrid.ActualHeight - 15;  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,hoveringPanel_SizeChanged,The following statement contains a magic number: if ((isHoveringPanelCliped) && (e.NewSize.Height < CentralGrid.ActualHeight - 20)) {  	h.Height = double.NaN;  	isHoveringPanelCliped = false;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,MeasureOverride,The following statement contains a magic number: toMeasure.Width = double.IsInfinity (availableSize.Width) ? (800) : (availableSize.Width);  
Magic Number,Microsoft.Research.DynamicDataDisplay,ChartPlotter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\ChartPlotter.cs,MeasureOverride,The following statement contains a magic number: toMeasure.Height = double.IsInfinity (availableSize.Height) ? (400) : (availableSize.Height);  
Magic Number,Microsoft.Research.DynamicDataDisplay,LineGraphSettings,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\LineGraph.cs,LineGraphSettings,The following statement contains a magic number: LineThickness = 2.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\MathHelper.cs,CreateRectFromCenterSize,The following statement contains a magic number: return new Rect (center.X - size.Width / 2' center.Y - size.Height / 2' size.Width' size.Height);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\MathHelper.cs,CreateRectFromCenterSize,The following statement contains a magic number: return new Rect (center.X - size.Width / 2' center.Y - size.Height / 2' size.Width' size.Height);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\MathHelper.cs,ToDegrees,The following statement contains a magic number: return angleInRadians * 180 / Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay,SolidColorHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\SolidColorHelper.cs,GetRandomComponent,The following statement contains a magic number: return (byte)(random.Next (256));  
Magic Number,Microsoft.Research.DynamicDataDisplay,SolidColorHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\SolidColorHelper.cs,Next,The following statement contains a magic number: if (lastColor.A == 0) {  	lastColor = GetRandomColor ();  	return lastColor;  }  else {  	Color newColor = Colors.Black;  	bool first = true;  	do {  		if (first)  			first = false;  		else  			lastColor = newColor;  		newColor = GetRandomColor ();  	}  	while (GetDiff (lastColor' newColor) < 255);  	lastColor = newColor;  	return newColor;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,SolidColorHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\SolidColorHelper.cs,Next,The following statement contains a magic number: do {  	if (first)  		first = false;  	else  		lastColor = newColor;  	newColor = GetRandomColor ();  }  while (GetDiff (lastColor' newColor) < 255);  
Magic Number,Microsoft.Research.DynamicDataDisplay,Footer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\footer.cs,Footer,The following statement contains a magic number: FontSize = 18;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Footer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\footer.cs,Footer,The following statement contains a magic number: Margin = new Thickness (0' 0' 0' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay,Header,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\header.cs,Header,The following statement contains a magic number: FontSize = 18;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Header,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\header.cs,Header,The following statement contains a magic number: Margin = new Thickness (0' 0' 0' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay,HorizontalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\HorizontalAxisTitle.cs,HorizontalAxisTitle,The following statement contains a magic number: FontSize = 16;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Log10XTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: return new Point (Math.Pow (10' pt.X)' pt.Y);  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,CalcScale,The following statement contains a magic number: scale = maxLatDeg / Math.Log (Math.Tan (maxLatRad / 2 + Math.PI / 4));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,CalcScale,The following statement contains a magic number: scale = maxLatDeg / Math.Log (Math.Tan (maxLatRad / 2 + Math.PI / 4));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,DataToViewport,The following statement contains a magic number: y = scale * Math.Log (Math.Tan (Math.PI * (pt.Y + 90) / 360));  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	double e = Math.Exp (y / scale);  	y = 360 * Math.Atan (e) / Math.PI - 90;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: if (-maxLatitude <= y && y <= maxLatitude) {  	double e = Math.Exp (y / scale);  	y = 360 * Math.Atan (e) / Math.PI - 90;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: y = 360 * Math.Atan (e) / Math.PI - 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay,MercatorTransform,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Transforms\DataTransforms.cs,ViewportToData,The following statement contains a magic number: y = 360 * Math.Atan (e) / Math.PI - 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay,VerticalAxisTitle,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\VerticalAxisTitle.cs,ArrangeOverride,The following statement contains a magic number: rotation.Angle = -90;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.IsEmpty) {  	newVisible = defaultRect;  }  else if (newVisible.Width == 0 || newVisible.Height == 0) {  	Rect defRect = defaultRect;  	Size size = new Size (newVisible.Width' newVisible.Height);  	Point loc = new Point (newVisible.X' newVisible.Y);  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new Rect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.IsEmpty) {  	newVisible = defaultRect;  }  else if (newVisible.Width == 0 || newVisible.Height == 0) {  	Rect defRect = defaultRect;  	Size size = new Size (newVisible.Width' newVisible.Height);  	Point loc = new Point (newVisible.X' newVisible.Y);  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new Rect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0 || newVisible.Height == 0) {  	Rect defRect = defaultRect;  	Size size = new Size (newVisible.Width' newVisible.Height);  	Point loc = new Point (newVisible.X' newVisible.Y);  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new Rect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0 || newVisible.Height == 0) {  	Rect defRect = defaultRect;  	Size size = new Size (newVisible.Width' newVisible.Height);  	Point loc = new Point (newVisible.X' newVisible.Y);  	if (newVisible.Width == 0) {  		size.Width = defRect.Width;  		loc.X -= size.Width / 2;  	}  	if (newVisible.Height == 0) {  		size.Height = defRect.Height;  		loc.Y -= size.Height / 2;  	}  	newVisible = new Rect (loc' size);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Width == 0) {  	size.Width = defRect.Width;  	loc.X -= size.Width / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: loc.X -= size.Width / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: if (newVisible.Height == 0) {  	size.Height = defRect.Height;  	loc.Y -= size.Height / 2;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay,Viewport2D,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Viewport2D.cs,CoerceVisible,The following statement contains a magic number: loc.Y -= size.Height / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,AxisControl_SizeChanged,The following statement contains a magic number: AdditionalAxisTranslate.X = ticksInfo.Ticks.Length / 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: Grid.SetRow (AdditionalLabelsCanvas' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: Grid.SetRow (TicksPath' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: Grid.SetColumn (TicksPath' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following statement contains a magic number: Grid.SetColumn (AdditionalLabelsCanvas' 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CreateCommonLabels,The following statement contains a magic number: for (int i = 0; i < labels.Count; i++) {  	FrameworkElement tickLabel = labels [i];  	Size tickLabelSize = new Size (tickLabel.ActualWidth' tickLabel.ActualHeight);  	StackCanvas.SetCoordinate (tickLabel' screenTicksX [i] - getSize (tickLabelSize) / 2);  	CommonLabelsCanvas.Children.Add (tickLabel);  	//if (i >= allocatedLabels)  	//{  	//    CommonLabelsCanvas.Children.Add(tickLabel);  	//}  	//else  	//{  	//    labelsEnumerator.MoveNext();  	//    i = CommonLabelsCanvas.Children.IndexOf(labelsEnumerator.Current);  	//    //labelsEnumerator.Current = tickLabel;  	//    //CommonLabelsCanvas.Children.  	//    CommonLabelsCanvas.Children[i] = tickLabel;  	//}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CreateCommonLabels,The following statement contains a magic number: StackCanvas.SetCoordinate (tickLabel' screenTicksX [i] - getSize (tickLabelSize) / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 3 > getSize (renderSize))  	result = TickChange.Decrease;  else if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 3 > getSize (renderSize))  	result = TickChange.Decrease;  else if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CheckMinorTicksArrangement,The following statement contains a magic number: if (minorTicks.Ticks.Length * 6 < getSize (renderSize))  	result = TickChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,CheckLabelsArrangement,The following statement contains a magic number: if (increaseCount > sizeInfos.Length / 2)  	res = TickChange.Increase;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,YearDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	20'  	10'  	5'  	4'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MonthDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetSpecificValue,The following statement contains a magic number: return dt.Month + (dt.Year - start.Year) * 12;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DayDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	30'  	15'  	10'  	5'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,HourDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	24'  	12'  	6'  	4'  	3'  	2'  	1  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinuteDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,SecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	60'  	30'  	20'  	15'  	10'  	5'  	4'  	3'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MillisecondDateTimeProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProvider.cs,GetTickCountsCore,The following statement contains a magic number: return new int[] {  	100'  	50'  	40'  	25'  	20'  	10'  	5'  	4'  	2  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: if (res < 2)  	res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: if (res < 2)  	res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,DecreaseTickCount,The following statement contains a magic number: res = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,IncreaseTickCount,The following statement contains a magic number: DebugVerify.Is (ticksCount < 2000);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,TimeTicksProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\DateTimeTicksProviderBase.cs,IncreaseTickCount,The following statement contains a magic number: return ticksCount * 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: DebugVerify.Is (ticks.Length < 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {  		Background = new SolidColorBrush (Colors.LightGray)  	};  	Rectangle rect = new Rectangle {  		Stroke = new SolidColorBrush (Colors.Brown)'  		StrokeThickness = 2  	};  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {  		Background = new SolidColorBrush (Colors.LightGray)  	};  	Rectangle rect = new Rectangle {  		Stroke = new SolidColorBrush (Colors.Brown)'  		StrokeThickness = 2  	};  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int i = 0; i < ticks.Length - 1; i++) {  	tickInfo.Info = info;  	tickInfo.Tick = ticks [i];  	string tickText = GetString (tickInfo);  	Grid grid = new Grid {  		Background = new SolidColorBrush (Colors.LightGray)  	};  	Rectangle rect = new Rectangle {  		Stroke = new SolidColorBrush (Colors.Brown)'  		StrokeThickness = 2  	};  	Grid.SetColumn (rect' 0);  	Grid.SetColumnSpan (rect' labelsNum);  	for (int j = 0; j < labelsNum; j++) {  		grid.ColumnDefinitions.Add (new ColumnDefinition ());  	}  	grid.Children.Add (rect);  	for (int j = 0; j < labelsNum; j++) {  		var tb = new TextBlock {  			Text = tickText'  			HorizontalAlignment = HorizontalAlignment.Center'  			Margin = new Thickness (0' 3' 0' 3)  		};  		Grid.SetColumn (tb' j);  		grid.Children.Add (tb);  	}  	ApplyCustomView (tickInfo' grid);  	res [i] = grid;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int j = 0; j < labelsNum; j++) {  	var tb = new TextBlock {  		Text = tickText'  		HorizontalAlignment = HorizontalAlignment.Center'  		Margin = new Thickness (0' 3' 0' 3)  	};  	Grid.SetColumn (tb' j);  	grid.Children.Add (tb);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MayorDateTimeLabelProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MayorDateTimeLabelProvider.cs,CreateLabels,The following statement contains a magic number: for (int j = 0; j < labelsNum; j++) {  	var tb = new TextBlock {  		Text = tickText'  		HorizontalAlignment = HorizontalAlignment.Center'  		Margin = new Thickness (0' 3' 0' 3)  	};  	Grid.SetColumn (tb' j);  	grid.Children.Add (tb);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The following statement contains a magic number: if (ticksCount == 0)  	ticksCount = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,MinorTimeProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\MinorTimeProviderBase.cs,GetTicks,The following statement contains a magic number: ticksCount = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 365)  	diff = DifferenceIn.Year;  else if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 365)  	diff = DifferenceIn.Year;  else if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,DefaultDateTimeTicksStrategy,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\DateTime\Strategies\DefaultDateTimeTicksStrategy.cs,GetDifference,The following statement contains a magic number: if (span.Days > 30)  	diff = DifferenceIn.Month;  else if (span.Days > 0)  	diff = DifferenceIn.Day;  else if (span.Hours > 0)  	diff = DifferenceIn.Hour;  else if (span.Minutes > 0)  	diff = DifferenceIn.Minute;  else if (span.Seconds > 0)  	diff = DifferenceIn.Second;  else  	diff = DifferenceIn.Millisecond;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericAxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericAxisControl.cs,NumericAxisControl,The following statement contains a magic number: Range = new Range<double> (0' 10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 2));  	res = RoundHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 2));  	res = RoundHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericLabelProviderBase,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericLabelProviderBase.cs,GetStringCore,The following statement contains a magic number: if (!shouldRound) {  	res = tickInfo.Tick.ToString ();  }  else {  	int round = Math.Min (15' Math.Max (-15' rounding - 2));  	res = RoundHelper.Round (tickInfo.Tick' round).ToString ();  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,NumericTicksProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\Numeric\NumericTicksProvider.cs,NumericTicksProvider,The following statement contains a magic number: minorProvider.Coeffs = new double[] {  	0.3'  	0.3'  	0.3'  	0.3'  	0.6'  	0.3'  	0.3'  	0.3'  	0.3  };  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\RoundHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\RoundHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\RoundHelper.cs,Round,The following statement contains a magic number: if (rem <= 0) {  	rem = MathHelper.Clamp (-rem' 0' 15);  	return Math.Round (number' rem);  }  else {  	double pow = Math.Pow (10' rem - 1);  	double val = pow * Math.Round (number / Math.Pow (10' rem - 1));  	return val;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,RoundHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\RoundHelper.cs,Round,The following statement contains a magic number: rem = MathHelper.Clamp (-rem' 0' 15);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,mainStackPanel_SizeChanged,The following statement contains a magic number: boundingRect.Width = mainStackPanel.ActualWidth + 10;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,mainStackPanel_SizeChanged,The following statement contains a magic number: boundingRect.Height = mainStackPanel.ActualHeight + 10;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: foreach (ILegendable l in graphsInLegend) {  	if (!l.ShowInLegend)  		continue;  	empty = false;  	StackPanel legendItem = new StackPanel ();  	legendItem.Orientation = Orientation.Horizontal;  	Line line = new Line ();  	line.Stroke = new SolidColorBrush (l.LineColor);  	line.StrokeThickness = l.LineThickness;  	line.X2 = 0;  	line.Y2 = 0;  	line.X1 = 15;  	line.Y1 = 15;  	legendItem.Children.Add (line);  	TextBlock textBlock = new TextBlock ();  	textBlock.Margin = new Thickness (5.0);  	textBlock.Text = l.Description;  	legendItem.Children.Add (textBlock);  	mainStackPanel.Children.Add (legendItem);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: foreach (ILegendable l in graphsInLegend) {  	if (!l.ShowInLegend)  		continue;  	empty = false;  	StackPanel legendItem = new StackPanel ();  	legendItem.Orientation = Orientation.Horizontal;  	Line line = new Line ();  	line.Stroke = new SolidColorBrush (l.LineColor);  	line.StrokeThickness = l.LineThickness;  	line.X2 = 0;  	line.Y2 = 0;  	line.X1 = 15;  	line.Y1 = 15;  	legendItem.Children.Add (line);  	TextBlock textBlock = new TextBlock ();  	textBlock.Margin = new Thickness (5.0);  	textBlock.Text = l.Description;  	legendItem.Children.Add (textBlock);  	mainStackPanel.Children.Add (legendItem);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: foreach (ILegendable l in graphsInLegend) {  	if (!l.ShowInLegend)  		continue;  	empty = false;  	StackPanel legendItem = new StackPanel ();  	legendItem.Orientation = Orientation.Horizontal;  	Line line = new Line ();  	line.Stroke = new SolidColorBrush (l.LineColor);  	line.StrokeThickness = l.LineThickness;  	line.X2 = 0;  	line.Y2 = 0;  	line.X1 = 15;  	line.Y1 = 15;  	legendItem.Children.Add (line);  	TextBlock textBlock = new TextBlock ();  	textBlock.Margin = new Thickness (5.0);  	textBlock.Text = l.Description;  	legendItem.Children.Add (textBlock);  	mainStackPanel.Children.Add (legendItem);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: line.X1 = 15;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: line.Y1 = 15;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts,Legend,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Legend.xaml.cs,UpdateStackPanel,The following statement contains a magic number: textBlock.Margin = new Thickness (5.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (points.Count > 2 * screenRect.Width) {  	resultPoints = new List<Point> ();  	List<Point> currentChain = new List<Point> ();  	double currentX = Math.Floor (points [0].X);  	foreach (Point p in points) {  		if (Math.Floor (p.X) == currentX) {  			currentChain.Add (p);  		}  		else {  			// Analyse current chain  			if (currentChain.Count <= 2) {  				resultPoints.AddRange (currentChain);  			}  			else {  				Point first = MinByX (currentChain);  				Point last = MaxByX (currentChain);  				Point min = MinByY (currentChain);  				Point max = MaxByY (currentChain);  				resultPoints.Add (first);  				Point smaller = min.X < max.X ? min : max;  				Point greater = min.X > max.X ? min : max;  				if (smaller != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (smaller);  				}  				if (greater != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (greater);  				}  				if (last != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (last);  				}  			}  			currentChain.Clear ();  			currentChain.Add (p);  			currentX = Math.Floor (p.X);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (points.Count > 2 * screenRect.Width) {  	resultPoints = new List<Point> ();  	List<Point> currentChain = new List<Point> ();  	double currentX = Math.Floor (points [0].X);  	foreach (Point p in points) {  		if (Math.Floor (p.X) == currentX) {  			currentChain.Add (p);  		}  		else {  			// Analyse current chain  			if (currentChain.Count <= 2) {  				resultPoints.AddRange (currentChain);  			}  			else {  				Point first = MinByX (currentChain);  				Point last = MaxByX (currentChain);  				Point min = MinByY (currentChain);  				Point max = MaxByY (currentChain);  				resultPoints.Add (first);  				Point smaller = min.X < max.X ? min : max;  				Point greater = min.X > max.X ? min : max;  				if (smaller != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (smaller);  				}  				if (greater != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (greater);  				}  				if (last != resultPoints [resultPoints.Count - 1]) {  					resultPoints.Add (last);  				}  			}  			currentChain.Clear ();  			currentChain.Add (p);  			currentX = Math.Floor (p.X);  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: foreach (Point p in points) {  	if (Math.Floor (p.X) == currentX) {  		currentChain.Add (p);  	}  	else {  		// Analyse current chain  		if (currentChain.Count <= 2) {  			resultPoints.AddRange (currentChain);  		}  		else {  			Point first = MinByX (currentChain);  			Point last = MaxByX (currentChain);  			Point min = MinByY (currentChain);  			Point max = MaxByY (currentChain);  			resultPoints.Add (first);  			Point smaller = min.X < max.X ? min : max;  			Point greater = min.X > max.X ? min : max;  			if (smaller != resultPoints [resultPoints.Count - 1]) {  				resultPoints.Add (smaller);  			}  			if (greater != resultPoints [resultPoints.Count - 1]) {  				resultPoints.Add (greater);  			}  			if (last != resultPoints [resultPoints.Count - 1]) {  				resultPoints.Add (last);  			}  		}  		currentChain.Clear ();  		currentChain.Add (p);  		currentX = Math.Floor (p.X);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (Math.Floor (p.X) == currentX) {  	currentChain.Add (p);  }  else {  	// Analyse current chain  	if (currentChain.Count <= 2) {  		resultPoints.AddRange (currentChain);  	}  	else {  		Point first = MinByX (currentChain);  		Point last = MaxByX (currentChain);  		Point min = MinByY (currentChain);  		Point max = MaxByY (currentChain);  		resultPoints.Add (first);  		Point smaller = min.X < max.X ? min : max;  		Point greater = min.X > max.X ? min : max;  		if (smaller != resultPoints [resultPoints.Count - 1]) {  			resultPoints.Add (smaller);  		}  		if (greater != resultPoints [resultPoints.Count - 1]) {  			resultPoints.Add (greater);  		}  		if (last != resultPoints [resultPoints.Count - 1]) {  			resultPoints.Add (last);  		}  	}  	currentChain.Clear ();  	currentChain.Add (p);  	currentX = Math.Floor (p.X);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Filters,FrequencyFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Filters\FrequencyFilter.cs,Filter,The following statement contains a magic number: if (currentChain.Count <= 2) {  	resultPoints.AddRange (currentChain);  }  else {  	Point first = MinByX (currentChain);  	Point last = MaxByX (currentChain);  	Point min = MinByY (currentChain);  	Point max = MaxByY (currentChain);  	resultPoints.Add (first);  	Point smaller = min.X < max.X ? min : max;  	Point greater = min.X > max.X ? min : max;  	if (smaller != resultPoints [resultPoints.Count - 1]) {  		resultPoints.Add (smaller);  	}  	if (greater != resultPoints [resultPoints.Count - 1]) {  		resultPoints.Add (greater);  	}  	if (last != resultPoints [resultPoints.Count - 1]) {  		resultPoints.Add (last);  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: plus.RadiusX = 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: plus.RadiusY = 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: plus.Width = 30;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: plus.Height = 30;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: FillColor.A = 20;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: minus.RadiusX = 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: minus.RadiusY = 3;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: minus.Width = 30;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,Initiale,The following statement contains a magic number: minus.Height = 30;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: Width = 50;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: Height = 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: drawingCanvas.Width = 50;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: drawingCanvas.Height = 90;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: minus.SetValue (Canvas.LeftProperty' 10.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: minus.SetValue (Canvas.TopProperty' 10.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: plus.SetValue (Canvas.LeftProperty' 10.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: plus.SetValue (Canvas.TopProperty' 50.0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p1.X1 = 35;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p1.X2 = 15;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p1.Y1 = 25.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p1.Y2 = 25.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p2.X1 = 35;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p2.X2 = 15;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p2.Y1 = 65.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p2.Y2 = 65.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p3.X1 = 25;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p3.X2 = 25;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p3.Y1 = 15.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: p3.Y2 = 35.0;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: foreach (Line l in lines) {  	l.Stroke = new SolidColorBrush (borderColor);  	Canvas.SetZIndex (l' Int16.MaxValue - 2);  	drawingCanvas.Children.Add (l);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,buttonsNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\buttonsNavigation.cs,buttonsNavigation_Loaded,The following statement contains a magic number: Canvas.SetZIndex (l' Int16.MaxValue - 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,OnPlotterAttached,The following statement contains a magic number: fillColor.A = 40;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,OnPlotterAttached,The following statement contains a magic number: zoomingRect.RadiusX = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,OnPlotterAttached,The following statement contains a magic number: zoomingRect.RadiusY = 2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The following statement contains a magic number: if (isCtrlPressed) {  	zoomingRectStartPointInScreen = e.GetPosition (Plotter.CentralGrid);  	if (!Plotter.MainCanvas.Children.Contains (zoomingRect))  		Plotter.MainCanvas.Children.Add (zoomingRect);  	Canvas.SetZIndex (zoomingRect' Int16.MaxValue - 3);  	Canvas.SetLeft (zoomingRect' zoomingRectStartPointInScreen.X);  	Canvas.SetTop (zoomingRect' zoomingRectStartPointInScreen.Y);  	zoomingRect.Width = 0;  	zoomingRect.Height = 0;  	isZoomRectCreting = true;  }  else {  	Point panningStartPointInScreen;  	if ((DateTime.Now - lastClick).Milliseconds < 200) {  		Viewport.FitToView ();  		return;  	}  	isPanning = true;  	panningStartPointInScreen = e.GetPosition (Plotter.CentralGrid);  	panningStartPointInViewport = panningStartPointInScreen.ScreenToViewport (Viewport.Transform);  	Viewport.AutoFitToView = false;  	lastClick = DateTime.Now;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The following statement contains a magic number: if (isCtrlPressed) {  	zoomingRectStartPointInScreen = e.GetPosition (Plotter.CentralGrid);  	if (!Plotter.MainCanvas.Children.Contains (zoomingRect))  		Plotter.MainCanvas.Children.Add (zoomingRect);  	Canvas.SetZIndex (zoomingRect' Int16.MaxValue - 3);  	Canvas.SetLeft (zoomingRect' zoomingRectStartPointInScreen.X);  	Canvas.SetTop (zoomingRect' zoomingRectStartPointInScreen.Y);  	zoomingRect.Width = 0;  	zoomingRect.Height = 0;  	isZoomRectCreting = true;  }  else {  	Point panningStartPointInScreen;  	if ((DateTime.Now - lastClick).Milliseconds < 200) {  		Viewport.FitToView ();  		return;  	}  	isPanning = true;  	panningStartPointInScreen = e.GetPosition (Plotter.CentralGrid);  	panningStartPointInViewport = panningStartPointInScreen.ScreenToViewport (Viewport.Transform);  	Viewport.AutoFitToView = false;  	lastClick = DateTime.Now;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The following statement contains a magic number: Canvas.SetZIndex (zoomingRect' Int16.MaxValue - 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Navigation,MouseNavigation,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Navigation\MouseNavigation.cs,CentralGrid_MouseLeftButtonDown,The following statement contains a magic number: if ((DateTime.Now - lastClick).Milliseconds < 200) {  	Viewport.FitToView ();  	return;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,PerformanceCounter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\PerformaceCounter.cs,GetString,The following statement contains a magic number: foreach (KeyValuePair<string' TimeSpan> kvp in performanceCounters) {  	strBuilder.AppendLine (kvp.Key + ":\t\t" + kvp.Value + "(" + ((double)kvp.Value.Ticks / (double)overall.Ticks * 100.0) + "%)");  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common.Auxiliary,PerformanceCounter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\Auxiliary\PerformaceCounter.cs,GetString,The following statement contains a magic number: strBuilder.AppendLine (kvp.Key + ":\t\t" + kvp.Value + "(" + ((double)kvp.Value.Ticks / (double)overall.Ticks * 100.0) + "%)");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,up_MouseLeftButtonDown,The following statement contains a magic number: offset -= 10;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,down_MouseLeftButtonDown,The following statement contains a magic number: offset += 10;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,MeasureOverride,The following statement contains a magic number: if (MainContent == null)  	return new Size (20' 20);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,MeasureOverride,The following statement contains a magic number: if (MainContent == null)  	return new Size (20' 20);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,MeasureOverride,The following statement contains a magic number: return new Size (20' 20);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Common,ScrollWraper,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Common\ScrollWraper.xaml.cs,MeasureOverride,The following statement contains a magic number: return new Size (20' 20);  
Missing Default,Microsoft.Research.DynamicDataDisplay.Charts,AxisControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.SL\Charts\Axes\AxisControl.cs,UpdateUILayout,The following switch statement is missing a default case: switch (placement) {  case AxisPlacement.Bottom:  	Grid.SetRow (TicksPath' 0);  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 2);  	break;  case AxisPlacement.Top:  	Grid.SetRow (TicksPath' 2);  	//TODO matrixTranform TickPath  	Grid.SetRow (CommonLabelsCanvas' 1);  	Grid.SetRow (AdditionalLabelsCanvas' 0);  	break;  case AxisPlacement.Left:  	MatrixTransform reflection = new MatrixTransform ();  	reflection.Matrix = new Matrix (-1' 0' 0' 1' 0' 0);  	TicksPath.RenderTransformOrigin = new Point (0.5' 0.5);  	TicksPath.RenderTransform = reflection;  	Grid.SetColumn (TicksPath' 2);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 0);  	TicksPath.Margin = new Thickness (0' 0' 0' 0);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	AdditionalLabelsCanvas.Margin = new Thickness (1' 0' 1' 0);  	break;  case AxisPlacement.Right:  	Grid.SetColumn (TicksPath' 0);  	Grid.SetColumn (CommonLabelsCanvas' 1);  	Grid.SetColumn (AdditionalLabelsCanvas' 2);  	CommonLabelsCanvas.Margin = new Thickness (1' 0' 0' 0);  	break;  }  
