Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,FrequencyScreenXFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\FrequencyScreenXFilter.cs,Filter,Cyclomatic complexity of the method is 12
Long Parameter List,DynamicDataDisplay.Markers,AcceptableRangeMultiConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\AcceptableRange\AcceptableRangeMultiConverter.cs,ConvertCore,The method has 5 parameters.
Long Parameter List,DynamicDataDisplay.Markers,StockFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\StockChart files\StockFillConverter.cs,ConvertCore,The method has 5 parameters.
Long Parameter List,DynamicDataDisplay.Markers,StockGridColumnConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\StockChart files\StockGridColumnConverter.cs,ConvertCore,The method has 5 parameters.
Long Parameter List,DynamicDataDisplay.Markers.MarkerGenerators,ForestBoundsConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestBoundsConverter.cs,ConvertCore,The method has 7 parameters.
Long Statement,DynamicDataDisplay.Markers,ForestDisplayControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestDisplayControl.xaml.cs,Viewport_ContentBoundsChanged,The length of the statement  "	plotter.Viewport.Domain = plotter.Viewport.UnitedContentBounds.Zoom (plotter.Viewport.UnitedContentBounds.GetCenter ()' 1.05); " is 126.
Long Statement,DynamicDataDisplay.Markers,ShapeMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\ShapeMarker.cs,OnPropertyChanged,The length of the statement  "	if (property != MarkerFillProperty && property != MarkerHeightProperty && property != MarkerWidthProperty && property != MarkerStrokeProperty && property != MarkerStrokeThicknessProperty) { " is 189.
Long Statement,DynamicDataDisplay.Markers.DataSources,CompositeEnumerator,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\DataSources\Composite\CompositeEnumerator.cs,CreatePropertyDescriptors,The length of the statement  "		CompositeDataSourcePropertyDescriptor descriptor = new CompositeDataSourcePropertyDescriptor (part.PropertyName' enumerator' part.PropertyType); " is 144.
Long Statement,DynamicDataDisplay.Markers.Filters,ParallelClusteringFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\ParallelClusteringFilter.cs,Filter,The length of the statement  "		int clusterIndexX = (int)Math.Max (0' Math.Min (xClustersNum - 1' (int)(Math.Floor ((point.X - xMin) / clusterWidth)))); " is 120.
Long Statement,DynamicDataDisplay.Markers.Filters,ParallelClusteringFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\ParallelClusteringFilter.cs,Filter,The length of the statement  "		int clusterIndexY = (int)Math.Max (0' Math.Min (yClustersNum - 1' (int)(Math.Floor ((point.Y - yMin) / clusterHeight)))); " is 121.
Long Statement,DynamicDataDisplay.Markers.Filters,BoundsFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\BoundsFilter.cs,OnViewportPropertyChanged,The length of the statement  "		bool shouldUpdate = !bounds.Contains (currVisible) || AreDifferentRectangles (prevVisible.ToRect ()' currVisible.ToRect ()); " is 124.
Long Statement,DynamicDataDisplay.Markers.Filters,BoundsFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\BoundsFilter.cs,AreDifferentRectangles,The length of the statement  "	return rect1.Width / rect2.Width > outputRatio || rect2.Width / rect1.Width > outputRatio || rect1.Height / rect2.Height > outputRatio || rect2.Height / rect1.Height > outputRatio; " is 180.
Long Statement,DynamicDataDisplay.Markers.Filters,BoundsFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\BoundsFilter.cs,Filter,The length of the statement  "	bounds = DataRect.FromCenterSize (visible.GetCenter ()' new Size (visible.Width * visibleIncreaseRatio' visible.Height * visibleIncreaseRatio)); " is 144.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,PointSelector,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\PointSelector.xaml.cs,RemovePointExecute,The length of the statement  "			//plotter.UndoProvider.AddAction(new LambdaUndoAction(() => points.Remove(pointToRemove)' () => points.Insert(index' pointToRemove))); " is 134.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,ClickAndDragHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Rectangle\ClickAndDragHandler.cs,OnMouseLeftButtonUp,The length of the statement  "		Selector.SelectedRectangle = new DataRect (firstPoint.ScreenToViewport (transform)' secondPoint.ScreenToViewport (transform)); " is 126.
Long Statement,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,ClickAndDragHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Rectangle\ClickAndDragHandler.cs,OnMouseMove,The length of the statement  "		Selector.SelectedRectangle = new DataRect (firstPoint.ScreenToViewport (transform)' secondPoint.ScreenToViewport (transform)); " is 126.
Complex Conditional,DynamicDataDisplay.Markers,ShapeMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\ShapeMarker.cs,OnPropertyChanged,The conditional expression  "property != MarkerFillProperty && property != MarkerHeightProperty && property != MarkerWidthProperty && property != MarkerStrokeProperty && property != MarkerStrokeThicknessProperty"  is complex.
Empty Catch Block,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,PointSelector,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\PointSelector.xaml.cs,AddPointExecute,The method has an empty catch block.
Empty Catch Block,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,PointSelector,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\PointSelector.xaml.cs,AddPointExecute,The method has an empty catch block.
Magic Number,DynamicDataDisplay.Markers,ForestDisplayControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestDisplayControl.xaml.cs,Viewport_ContentBoundsChanged,The following statement contains a magic number: plotter.Viewport.Domain = plotter.Viewport.UnitedContentBounds.Zoom (plotter.Viewport.UnitedContentBounds.GetCenter ()' 1.05);  
Magic Number,DynamicDataDisplay.Markers,ForestDisplayControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestDisplayControl.xaml.cs,OnForestConverterChanged,The following statement contains a magic number: foreach (var item in dict) {  	var geometry = (Geometry)forestDisplayGenerator.Resources [item.Value.ViewID];  	var crown = new Path {  		Width = 15'  		Height = 15'  		Data = geometry'  		Stretch = Stretch.Fill'  		Fill = (Brush)forestConverter.Convert (item.Key' typeof(Brush)' null' null)  	};  	//plotter.NewLegend.AddLegendItem(markerChart' new NewLegendItem {Description = item.Key' VisualContent = crown});  }  
Magic Number,DynamicDataDisplay.Markers,ForestDisplayControl,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestDisplayControl.xaml.cs,OnForestConverterChanged,The following statement contains a magic number: foreach (var item in dict) {  	var geometry = (Geometry)forestDisplayGenerator.Resources [item.Value.ViewID];  	var crown = new Path {  		Width = 15'  		Height = 15'  		Data = geometry'  		Stretch = Stretch.Fill'  		Fill = (Brush)forestConverter.Convert (item.Key' typeof(Brush)' null' null)  	};  	//plotter.NewLegend.AddLegendItem(markerChart' new NewLegendItem {Description = item.Key' VisualContent = crown});  }  
Magic Number,DynamicDataDisplay.Markers,DiamondMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\DiamondMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (0.5' 0.5)' true));  
Magic Number,DynamicDataDisplay.Markers,DiamondMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\DiamondMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (0.5' 0.5)' true));  
Magic Number,DynamicDataDisplay.Markers,DiamondMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\DiamondMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (-0.5' 0.5)' true));  
Magic Number,DynamicDataDisplay.Markers,DiamondMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\DiamondMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (-0.5' 0.5)' true));  
Magic Number,DynamicDataDisplay.Markers,DownTriangleMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\DownTriangleMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (0.5' 1)' true));  
Magic Number,DynamicDataDisplay.Markers,PlusMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\PlusMarker.cs,CreateGeometry,The following statement contains a magic number: group.Children.Add (new LineGeometry (new Point (0' 0.5)' new Point (1' 0.5)));  
Magic Number,DynamicDataDisplay.Markers,PlusMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\PlusMarker.cs,CreateGeometry,The following statement contains a magic number: group.Children.Add (new LineGeometry (new Point (0' 0.5)' new Point (1' 0.5)));  
Magic Number,DynamicDataDisplay.Markers,PlusMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\PlusMarker.cs,CreateGeometry,The following statement contains a magic number: group.Children.Add (new LineGeometry (new Point (0.5' 0)' new Point (0.5' 1)));  
Magic Number,DynamicDataDisplay.Markers,PlusMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\PlusMarker.cs,CreateGeometry,The following statement contains a magic number: group.Children.Add (new LineGeometry (new Point (0.5' 0)' new Point (0.5' 1)));  
Magic Number,DynamicDataDisplay.Markers,UpTriangleMarker,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\BuiltinMarkers\UpTriangleMarker.cs,CreateGeometry,The following statement contains a magic number: figure.Segments.Add (new LineSegment (new Point (0.5' -1)' true));  
Magic Number,DynamicDataDisplay.Markers,PieLegendItemTooltipConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PieLegendItemTooltipConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2)  	return DependencyProperty.UnsetValue;  
Magic Number,DynamicDataDisplay.Markers,AngleToIsLargeArcConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\AngleToIsLargeArcConverter.cs,Convert,The following statement contains a magic number: return angle >= 180;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,MeasureOverride,The following statement contains a magic number: elementRatio = 2 * Math.PI / summAngle;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	FrameworkElement child = (FrameworkElement)InternalChildren [i];  	if (child.Visibility != Visibility.Visible)  		continue;  	double childAngle = GetArcWidth (child);  	var angleInRadians = childAngle * elementRatio;  	var angleInDegrees = angleInRadians.RadiansToDegrees ();  	var childStartAngleInDegrees = childStartAngle.RadiansToDegrees ();  	childEndAngle = childStartAngle + angleInRadians;  	child.SetValue (PieChartItem.AngleInChartProperty' angleInDegrees);  	double centerX = 0;  	if (angleInDegrees <= 90)  		centerX = 0;  	else if (angleInDegrees < 180)  		centerX = -radius * Math.Cos (angleInRadians);  	else  		centerX = radius;  	double centerY = 0;  	if (angleInDegrees <= 90)  		centerY = radius * Math.Cos (angleInRadians);  	else  		centerY = radius;  	Point renderTransformOrigin = new Point ();  	if (angleInDegrees < 90)  		renderTransformOrigin = new Point (0' 1);  	else if (angleInDegrees < 180)  		renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  	else if (angleInDegrees < 270)  		renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  	else  		renderTransformOrigin = new Point (0.5' 0.5);  	double rotationAngle = -childStartAngleInDegrees;  	if (childAngle > 180)  		rotationAngle = -rotationAngle;  	RotateTransform rotateTransform = new RotateTransform (rotationAngle);  	child.RenderTransformOrigin = renderTransformOrigin;  	child.RenderTransform = rotateTransform;  	//child.LayoutTransform = rotateTransform;  	Size childSize = GetChildSize (radius' angleInRadians' angleInDegrees);  	Point childLocation = GetChildLocation (radius' angleInRadians);  	Rect childBounds = new Rect (childLocation' childSize);  	child.Arrange (childBounds);  	childStartAngle = childEndAngle;  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees <= 90)  	centerX = 0;  else if (angleInDegrees < 180)  	centerX = -radius * Math.Cos (angleInRadians);  else  	centerX = radius;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees <= 90)  	centerX = 0;  else if (angleInDegrees < 180)  	centerX = -radius * Math.Cos (angleInRadians);  else  	centerX = radius;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	centerX = -radius * Math.Cos (angleInRadians);  else  	centerX = radius;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees <= 90)  	centerY = radius * Math.Cos (angleInRadians);  else  	centerY = radius;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 90)  	renderTransformOrigin = new Point (0' 1);  else if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 180)  	renderTransformOrigin = new Point (-Math.Cos (angleInRadians) / (1 - Math.Cos (angleInRadians))' 1);  else if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (angleInDegrees < 270)  	renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  else  	renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: renderTransformOrigin = new Point (0.5' 1 / ((1 - Math.Sin (angleInRadians))));  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: renderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (childAngle > 180)  	rotationAngle = -rotationAngle;  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 90) {  	location = new Point (radius' radius * (1 - Math.Sin (angleInRadians)));  }  else if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 90) {  	location = new Point (radius' radius * (1 - Math.Sin (angleInRadians)));  }  else if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 90) {  	location = new Point (radius' radius * (1 - Math.Sin (angleInRadians)));  }  else if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 90) {  	location = new Point (radius' radius * (1 - Math.Sin (angleInRadians)));  }  else if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 180) {  	location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  }  else if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: location = new Point (2 * radius - radius * (1 - Math.Cos (angleInRadians))' 0);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildLocation,The following statement contains a magic number: if (angleInDegrees < 270) {  	location = new Point (0' 0);  }  else {  	location = new Point (0' 0);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 90) {  	childSize = new Size (radius' radius * Math.Sin (angleInRadians));  }  else if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees < 180) {  	childSize = new Size (radius * (1 - Math.Cos (angleInRadians))' radius);  }  else if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: if (angleInDegrees <= 270) {  	childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  }  else {  	childSize = new Size (2 * radius' 2 * radius);  }  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: childSize = new Size (2 * radius' radius * (1 - Math.Sin (angleInRadians)));  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: childSize = new Size (2 * radius' 2 * radius);  
Magic Number,DynamicDataDisplay.Markers,PiePanel,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\PieChart files\PiePanel.cs,GetChildSize,The following statement contains a magic number: childSize = new Size (2 * radius' 2 * radius);  
Magic Number,DynamicDataDisplay.Markers,StockHeightConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\StockChart files\StockHeightConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 2) {  	if (values [0] is double) {  		high = (double)values [0];  		if (values [1] is double) {  			low = (double)values [1];  			return high - low;  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Markers,ColumnChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ColumnChart.cs,AddCommonBindings,The following statement contains a magic number: if (ViewportPanel.GetViewportWidth (marker).IsNaN ())  	marker.SetValue (ViewportPanel.ViewportWidthProperty' 0.85);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Markers,ColumnChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ColumnChart.cs,AddCommonBindings,The following statement contains a magic number: marker.SetValue (ViewportPanel.ViewportWidthProperty' 0.85);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Markers,HorizontalColumnChart,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\HorizontalColumnChart.cs,AddCommonBindings,The following statement contains a magic number: marker.SetValue (ViewportPanel.ViewportHeightProperty' 0.85);  
Magic Number,DynamicDataDisplay.Markers.MarkerGenerators,ForestFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestFillConverter.cs,Convert,The following statement contains a magic number: if (solidBrush != null) {  	Color color = solidBrush.Color;  	color.A = 128;  	return new SolidColorBrush (color);  }  else {  	return stroke;  }  
Magic Number,DynamicDataDisplay.Markers.MarkerGenerators,ForestFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\ForestDisplay\ForestFillConverter.cs,Convert,The following statement contains a magic number: color.A = 128;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Markers.MarkerGenerators.Rendering,EllipseRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\Rendering\EllipseRenderer.cs,Render,The following statement contains a magic number: dc.DrawEllipse (Brushes.Red' null' new Point (x' y).ViewportToScreen (transform)' 3' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Markers.MarkerGenerators.Rendering,EllipseRenderer,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\MarkerGenerators\Rendering\EllipseRenderer.cs,Render,The following statement contains a magic number: dc.DrawEllipse (Brushes.Red' null' new Point (x' y).ViewportToScreen (transform)' 3' 3);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,MultipleSelectHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\MultipleSelectHandler.cs,AttachCore,The following statement contains a magic number: foreach (FrameworkElement marker in selector.MarkerChart.Items) {  	var xamlString = XamlWriter.Save (marker);  	var markerCopy = (FrameworkElement)XamlReader.Parse (xamlString);  	var x = ViewportPanel.GetX (marker);  	var y = ViewportPanel.GetY (marker);  	Point position = new Point (x' y);  	var positionInScreen = position.ViewportToScreen (transform);  	if (!marker.IsMeasureValid)  		marker.Measure (new Size (Double.PositiveInfinity' Double.PositiveInfinity));  	InkCanvas.SetLeft (markerCopy' positionInScreen.X - marker.Width / 2);  	InkCanvas.SetTop (markerCopy' positionInScreen.Y - marker.Height / 2);  	markerCopy.DataContext = marker.DataContext;  	inkCanvas.Children.Add (markerCopy);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,MultipleSelectHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\MultipleSelectHandler.cs,AttachCore,The following statement contains a magic number: foreach (FrameworkElement marker in selector.MarkerChart.Items) {  	var xamlString = XamlWriter.Save (marker);  	var markerCopy = (FrameworkElement)XamlReader.Parse (xamlString);  	var x = ViewportPanel.GetX (marker);  	var y = ViewportPanel.GetY (marker);  	Point position = new Point (x' y);  	var positionInScreen = position.ViewportToScreen (transform);  	if (!marker.IsMeasureValid)  		marker.Measure (new Size (Double.PositiveInfinity' Double.PositiveInfinity));  	InkCanvas.SetLeft (markerCopy' positionInScreen.X - marker.Width / 2);  	InkCanvas.SetTop (markerCopy' positionInScreen.Y - marker.Height / 2);  	markerCopy.DataContext = marker.DataContext;  	inkCanvas.Children.Add (markerCopy);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,MultipleSelectHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\MultipleSelectHandler.cs,AttachCore,The following statement contains a magic number: InkCanvas.SetLeft (markerCopy' positionInScreen.X - marker.Width / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,MultipleSelectHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Point\MultipleSelectHandler.cs,AttachCore,The following statement contains a magic number: InkCanvas.SetTop (markerCopy' positionInScreen.Y - marker.Height / 2);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.Selectors,TwoClicksHandler,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Selectors\Rectangle\TwoClicksHandler.cs,CentralGrid_MouseUp,The following statement contains a magic number: if (clickIndex % 2 == 1) {  	firstPoint = mousePos;  }  else {  	var transform = Plotter.Transform;  	Selector.SelectedRectangle = new DataRect (mousePos.ScreenToData (transform)' firstPoint.ScreenToData (transform));  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter.cs,OnCoerceCriticalAngle,The following statement contains a magic number: return Math.Min (180.0' Math.Max (angle' 0.0));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter.cs,Filter,The following statement contains a magic number: if (!points.CountGreaterOrEqual (3))  	return points;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter2,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter2.cs,OnCoerceCriticalAngle,The following statement contains a magic number: return Math.Min (180.0' Math.Max (angle' 0.0));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter2,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter2.cs,Filter,The following statement contains a magic number: if (!points.CountGreaterOrEqual (3))  	return points;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter2,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter2.cs,FilterLongerThan3,The following statement contains a magic number: using (var enumerator = points.GetEnumerator ()) {  	enumerator.MoveNext ();  	Point prevPoint = enumerator.Current;  	enumerator.MoveNext ();  	Point currPoint = enumerator.Current;  	yield return prevPoint;  	bool added = false;  	while (enumerator.MoveNext ()) {  		Point nextPoint = enumerator.Current;  		double a = (prevPoint - currPoint).Length;  		double b = (currPoint - nextPoint).Length;  		double c = (prevPoint - nextPoint).Length;  		double currAngle = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  		double doubledArea = a * b * Math.Sin (currAngle);  		double height = doubledArea / c;  		if (currAngle <= minAngle || height > minHeight) {  			yield return currPoint;  			prevPoint = currPoint;  			currPoint = nextPoint;  			added = true;  		}  		else {  			added = false;  			currPoint = nextPoint;  		}  	}  	if (!added)  		yield return currPoint;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Charts.NewLine.Filters,InclinationFilter2,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Markers\Filters\InclinationFilter2.cs,FilterLongerThan3,The following statement contains a magic number: while (enumerator.MoveNext ()) {  	Point nextPoint = enumerator.Current;  	double a = (prevPoint - currPoint).Length;  	double b = (currPoint - nextPoint).Length;  	double c = (prevPoint - nextPoint).Length;  	double currAngle = Math.Acos ((a * a + b * b - c * c) / (2 * a * b));  	double doubledArea = a * b * Math.Sin (currAngle);  	double height = doubledArea / c;  	if (currAngle <= minAngle || height > minHeight) {  		yield return currPoint;  		prevPoint = currPoint;  		currPoint = nextPoint;  		added = true;  	}  	else {  		added = false;  		currPoint = nextPoint;  	}  }  
