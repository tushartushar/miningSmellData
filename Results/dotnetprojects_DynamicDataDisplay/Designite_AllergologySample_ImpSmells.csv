Implementation smell,Namespace,Class,File,Method,Description
Long Method,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The method has 110 lines of code.
Complex Method,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,Cyclomatic complexity of the method is 45
Long Statement,AllergologySample,App,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\App.xaml.cs,ReportErrorToDOM,The length of the statement  "		System.Windows.Browser.HtmlPage.Window.Eval ("throw new Error(\"Unhandled Error in Silverlight 2 Application " + errorMsg + "\");"); " is 132.
Empty Catch Block,AllergologySample,App,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\App.xaml.cs,ReportErrorToDOM,The method has an empty catch block.
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("AllergologySample." + filename)) {  	using (XmlReader reader = XmlReader.Create (resourceStream)) {  		StringBuilder alergenBuilder = null;  		data = new Dictionary<string' Dictionary<DateTime' double>> ();  		int columnsCounter = 0;  		DateTime currProccessingDate = DateTime.Today;  		string alergenString = "";  		double alergenConcentration = 0;  		bool inTd = false;  		while (reader.Read ()) {  			switch (reader.NodeType) {  			case XmlNodeType.EndElement:  				if (inTd) {  					inTd = false;  					columnsCounter++;  				}  				else if (reader.Name != "location")//tr closing... Commiting fetched data  				 {  					if (!data.ContainsKey (alergenString))  						data.Add (alergenString' new Dictionary<DateTime' double> ());  					if (group) {  						if (!data [alergenString].ContainsKey (currProccessingDate))  							data [alergenString].Add (currProccessingDate' alergenConcentration);  						else  							data [alergenString] [currProccessingDate] += alergenConcentration;  					}  					else  						data [alergenString] [currProccessingDate] = alergenConcentration;  				}  				break;  			case XmlNodeType.Element:  				switch (reader.Name) {  				case "location":  					break;  				case "tr":  					columnsCounter = 0;  					break;  				case "td":  					inTd = true;  					break;  				}  				break;  			case XmlNodeType.Text:  				if (inTd) {  					switch (columnsCounter) {  					case 0:  						//date  						currProccessingDate = DateTime.Parse (reader.Value);  						break;  					case 1:  						//класс алегена  						if (group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 2:  						//название алергена  						if (!group) {  							alergenBuilder = new StringBuilder (reader.Value);  							int i = 0;  							while (i < alergenBuilder.Length)//triming  							 {  								if (Char.IsLetterOrDigit (alergenBuilder [i++]))  									break;  							}  							alergenBuilder.Remove (0' i - 1);  							i = alergenBuilder.Length - 1;  							// tail trimming  							while (i >= 0) {  								if (Char.IsLetterOrDigit (alergenBuilder [i--]))  									break;  							}  							alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  							alergenString = alergenBuilder.ToString ();  						}  						break;  					case 3:  						//contration  						alergenConcentration = double.Parse (reader.Value);  						break;  					default:  						break;  					}  				}  				break;  			default:  				break;  			}  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: using (XmlReader reader = XmlReader.Create (resourceStream)) {  	StringBuilder alergenBuilder = null;  	data = new Dictionary<string' Dictionary<DateTime' double>> ();  	int columnsCounter = 0;  	DateTime currProccessingDate = DateTime.Today;  	string alergenString = "";  	double alergenConcentration = 0;  	bool inTd = false;  	while (reader.Read ()) {  		switch (reader.NodeType) {  		case XmlNodeType.EndElement:  			if (inTd) {  				inTd = false;  				columnsCounter++;  			}  			else if (reader.Name != "location")//tr closing... Commiting fetched data  			 {  				if (!data.ContainsKey (alergenString))  					data.Add (alergenString' new Dictionary<DateTime' double> ());  				if (group) {  					if (!data [alergenString].ContainsKey (currProccessingDate))  						data [alergenString].Add (currProccessingDate' alergenConcentration);  					else  						data [alergenString] [currProccessingDate] += alergenConcentration;  				}  				else  					data [alergenString] [currProccessingDate] = alergenConcentration;  			}  			break;  		case XmlNodeType.Element:  			switch (reader.Name) {  			case "location":  				break;  			case "tr":  				columnsCounter = 0;  				break;  			case "td":  				inTd = true;  				break;  			}  			break;  		case XmlNodeType.Text:  			if (inTd) {  				switch (columnsCounter) {  				case 0:  					//date  					currProccessingDate = DateTime.Parse (reader.Value);  					break;  				case 1:  					//класс алегена  					if (group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 2:  					//название алергена  					if (!group) {  						alergenBuilder = new StringBuilder (reader.Value);  						int i = 0;  						while (i < alergenBuilder.Length)//triming  						 {  							if (Char.IsLetterOrDigit (alergenBuilder [i++]))  								break;  						}  						alergenBuilder.Remove (0' i - 1);  						i = alergenBuilder.Length - 1;  						// tail trimming  						while (i >= 0) {  							if (Char.IsLetterOrDigit (alergenBuilder [i--]))  								break;  						}  						alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  						alergenString = alergenBuilder.ToString ();  					}  					break;  				case 3:  					//contration  					alergenConcentration = double.Parse (reader.Value);  					break;  				default:  					break;  				}  			}  			break;  		default:  			break;  		}  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (inTd) {  			inTd = false;  			columnsCounter++;  		}  		else if (reader.Name != "location")//tr closing... Commiting fetched data  		 {  			if (!data.ContainsKey (alergenString))  				data.Add (alergenString' new Dictionary<DateTime' double> ());  			if (group) {  				if (!data [alergenString].ContainsKey (currProccessingDate))  					data [alergenString].Add (currProccessingDate' alergenConcentration);  				else  					data [alergenString] [currProccessingDate] += alergenConcentration;  			}  			else  				data [alergenString] [currProccessingDate] = alergenConcentration;  		}  		break;  	case XmlNodeType.Element:  		switch (reader.Name) {  		case "location":  			break;  		case "tr":  			columnsCounter = 0;  			break;  		case "td":  			inTd = true;  			break;  		}  		break;  	case XmlNodeType.Text:  		if (inTd) {  			switch (columnsCounter) {  			case 0:  				//date  				currProccessingDate = DateTime.Parse (reader.Value);  				break;  			case 1:  				//класс алегена  				if (group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 2:  				//название алергена  				if (!group) {  					alergenBuilder = new StringBuilder (reader.Value);  					int i = 0;  					while (i < alergenBuilder.Length)//triming  					 {  						if (Char.IsLetterOrDigit (alergenBuilder [i++]))  							break;  					}  					alergenBuilder.Remove (0' i - 1);  					i = alergenBuilder.Length - 1;  					// tail trimming  					while (i >= 0) {  						if (Char.IsLetterOrDigit (alergenBuilder [i--]))  							break;  					}  					alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  					alergenString = alergenBuilder.ToString ();  				}  				break;  			case 3:  				//contration  				alergenConcentration = double.Parse (reader.Value);  				break;  			default:  				break;  			}  		}  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (inTd) {  		inTd = false;  		columnsCounter++;  	}  	else if (reader.Name != "location")//tr closing... Commiting fetched data  	 {  		if (!data.ContainsKey (alergenString))  			data.Add (alergenString' new Dictionary<DateTime' double> ());  		if (group) {  			if (!data [alergenString].ContainsKey (currProccessingDate))  				data [alergenString].Add (currProccessingDate' alergenConcentration);  			else  				data [alergenString] [currProccessingDate] += alergenConcentration;  		}  		else  			data [alergenString] [currProccessingDate] = alergenConcentration;  	}  	break;  case XmlNodeType.Element:  	switch (reader.Name) {  	case "location":  		break;  	case "tr":  		columnsCounter = 0;  		break;  	case "td":  		inTd = true;  		break;  	}  	break;  case XmlNodeType.Text:  	if (inTd) {  		switch (columnsCounter) {  		case 0:  			//date  			currProccessingDate = DateTime.Parse (reader.Value);  			break;  		case 1:  			//класс алегена  			if (group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 2:  			//название алергена  			if (!group) {  				alergenBuilder = new StringBuilder (reader.Value);  				int i = 0;  				while (i < alergenBuilder.Length)//triming  				 {  					if (Char.IsLetterOrDigit (alergenBuilder [i++]))  						break;  				}  				alergenBuilder.Remove (0' i - 1);  				i = alergenBuilder.Length - 1;  				// tail trimming  				while (i >= 0) {  					if (Char.IsLetterOrDigit (alergenBuilder [i--]))  						break;  				}  				alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  				alergenString = alergenBuilder.ToString ();  			}  			break;  		case 3:  			//contration  			alergenConcentration = double.Parse (reader.Value);  			break;  		default:  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (inTd) {  	switch (columnsCounter) {  	case 0:  		//date  		currProccessingDate = DateTime.Parse (reader.Value);  		break;  	case 1:  		//класс алегена  		if (group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 2:  		//название алергена  		if (!group) {  			alergenBuilder = new StringBuilder (reader.Value);  			int i = 0;  			while (i < alergenBuilder.Length)//triming  			 {  				if (Char.IsLetterOrDigit (alergenBuilder [i++]))  					break;  			}  			alergenBuilder.Remove (0' i - 1);  			i = alergenBuilder.Length - 1;  			// tail trimming  			while (i >= 0) {  				if (Char.IsLetterOrDigit (alergenBuilder [i--]))  					break;  			}  			alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  			alergenString = alergenBuilder.ToString ();  		}  		break;  	case 3:  		//contration  		alergenConcentration = double.Parse (reader.Value);  		break;  	default:  		break;  	}  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: switch (columnsCounter) {  case 0:  	//date  	currProccessingDate = DateTime.Parse (reader.Value);  	break;  case 1:  	//класс алегена  	if (group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 2:  	//название алергена  	if (!group) {  		alergenBuilder = new StringBuilder (reader.Value);  		int i = 0;  		while (i < alergenBuilder.Length)//triming  		 {  			if (Char.IsLetterOrDigit (alergenBuilder [i++]))  				break;  		}  		alergenBuilder.Remove (0' i - 1);  		i = alergenBuilder.Length - 1;  		// tail trimming  		while (i >= 0) {  			if (Char.IsLetterOrDigit (alergenBuilder [i--]))  				break;  		}  		alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  		alergenString = alergenBuilder.ToString ();  	}  	break;  case 3:  	//contration  	alergenConcentration = double.Parse (reader.Value);  	break;  default:  	break;  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (group) {  	alergenBuilder = new StringBuilder (reader.Value);  	int i = 0;  	while (i < alergenBuilder.Length)//triming  	 {  		if (Char.IsLetterOrDigit (alergenBuilder [i++]))  			break;  	}  	alergenBuilder.Remove (0' i - 1);  	i = alergenBuilder.Length - 1;  	// tail trimming  	while (i >= 0) {  		if (Char.IsLetterOrDigit (alergenBuilder [i--]))  			break;  	}  	alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  	alergenString = alergenBuilder.ToString ();  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (group) {  	alergenBuilder = new StringBuilder (reader.Value);  	int i = 0;  	while (i < alergenBuilder.Length)//triming  	 {  		if (Char.IsLetterOrDigit (alergenBuilder [i++]))  			break;  	}  	alergenBuilder.Remove (0' i - 1);  	i = alergenBuilder.Length - 1;  	// tail trimming  	while (i >= 0) {  		if (Char.IsLetterOrDigit (alergenBuilder [i--]))  			break;  	}  	alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  	alergenString = alergenBuilder.ToString ();  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (!group) {  	alergenBuilder = new StringBuilder (reader.Value);  	int i = 0;  	while (i < alergenBuilder.Length)//triming  	 {  		if (Char.IsLetterOrDigit (alergenBuilder [i++]))  			break;  	}  	alergenBuilder.Remove (0' i - 1);  	i = alergenBuilder.Length - 1;  	// tail trimming  	while (i >= 0) {  		if (Char.IsLetterOrDigit (alergenBuilder [i--]))  			break;  	}  	alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  	alergenString = alergenBuilder.ToString ();  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: if (!group) {  	alergenBuilder = new StringBuilder (reader.Value);  	int i = 0;  	while (i < alergenBuilder.Length)//triming  	 {  		if (Char.IsLetterOrDigit (alergenBuilder [i++]))  			break;  	}  	alergenBuilder.Remove (0' i - 1);  	i = alergenBuilder.Length - 1;  	// tail trimming  	while (i >= 0) {  		if (Char.IsLetterOrDigit (alergenBuilder [i--]))  			break;  	}  	alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  	alergenString = alergenBuilder.ToString ();  }  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  
Magic Number,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following statement contains a magic number: alergenBuilder.Remove (i + 2' alergenBuilder.Length - i - 2);  
Missing Default,AllergologySample,DataProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Samples.SL\AllergologySample\DataProvider.cs,Load,The following switch statement is missing a default case: switch (reader.Name) {  case "location":  	break;  case "tr":  	columnsCounter = 0;  	break;  case "td":  	inTd = true;  	break;  }  
