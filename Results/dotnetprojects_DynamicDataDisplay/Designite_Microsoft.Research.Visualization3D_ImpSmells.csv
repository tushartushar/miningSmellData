Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The method has 117 lines of code.
Complex Method,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,Interpolate,The method has 5 parameters.
Long Parameter List,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,WiredCube,The method has 7 parameters.
Long Parameter List,Microsoft.Research.Visualization3D.Particles,Particle,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\Particle.cs,Particle,The method has 5 parameters.
Long Parameter List,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,ParticleSystem3D,The method has 6 parameters.
Long Parameter List,Microsoft.Research.Visualization3D.Particles,Projectile,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\Projectile.cs,Projectile,The method has 5 parameters.
Long Statement,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The length of the statement  "	return array [i' j' k] == missingValue || array [i + 1' j' k] == missingValue || array [i + 1' j + 1' k] == missingValue || array [i' j + 1' k] == missingValue || array [i' j' k + 1] == missingValue || array [i + 1' j' k + 1] == missingValue || array [i + 1' j + 1' k + 1] == missingValue || array [i' j + 1' k + 1] == missingValue; " is 332.
Long Statement,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,CheckPosition,The length of the statement  "	if (position.X >= 0 && position.X < i && position.Y >= 0 && position.Y < j && position.Z >= 0 && position.Z < k && !MathHelper.MissingCheck (position' array' missingValue)) " is 172.
Long Statement,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,Initialize,The length of the statement  "			deviceEx = new DeviceEx ((Direct3DEx)Direct3D' 0' DeviceType.Hardware' hwnd.Handle' CreateFlags.HardwareVertexProcessing' pp); " is 126.
Long Statement,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The length of the statement  "	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertices.Length' Usage.WriteOnly' VertexPositionNormalColor.Format' Pool.Default); " is 153.
Long Statement,Microsoft.Research.Visualization3D.CameraUtilities,Camera,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\CameraUtilities\Camera.cs,RotateAroundTargetY,The length of the statement  "	Vector3 normal = MathHelper.CalculateNormal (this.location' this.target' new Vector3 (this.target.X' this.target.Y + 0.1f' this.target.Z)); " is 139.
Long Statement,Microsoft.Research.Visualization3D.Isosurfaces,Metaball,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Isosurfaces\Metaball.ConstArrays.cs,Completed,The length of the statement  "		vb = new VertexBuffer (device' MetaballVertex.SizeInBytes * vertexList.Count' Usage.WriteOnly' MetaballVertex.Format' Pool.Default); " is 132.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,Initialize,The length of the statement  "		effect = Effect.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Shaders.ParticleEffect.fx")' ShaderFlags.None); " is 171.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,Initialize,The length of the statement  "		projectiles.Add (new Projectile (explosionParticleSystem' smokeParticleSystem' projectileParticleSystem' GeneratePosition ()' (float)r.NextDouble ())); " is 151.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,SetCamera,The length of the statement  "	camera.Location = cameraScale * new Vector3 (dataSource.DisplayData.GetLength (0)' dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2)); " is 159.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,SetCamera,The length of the statement  "	camera.Target = new Vector3 (dataSource.DisplayData.GetLength (0) / 2f' dataSource.DisplayData.GetLength (1) / 2f' dataSource.DisplayData.GetLength (2) / 2f); " is 158.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,Update,The length of the statement  "			projectiles [i] = new Projectile (explosionParticleSystem' smokeParticleSystem' projectileParticleSystem' GeneratePosition ()' (float)r.NextDouble ()); " is 151.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,GeneratePosition,The length of the statement  "	//return new Vector3(dataSource.DisplayData.GetLength(0) / 2.0f' dataSource.DisplayData.GetLength(1) / 2.0f' dataSource.DisplayData.GetLength(2) / 2.0f); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,GeneratePosition,The length of the statement  "	return new Vector3 ((float)r.NextDouble () * dataSource.DisplayData.GetLength (0)' (float)r.NextDouble () * dataSource.DisplayData.GetLength (1)' (float)r.NextDouble () * dataSource.DisplayData.GetLength (2)); " is 209.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Initialize,The length of the statement  "		effect = Effect.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Shaders.ParticleEffect.fx")' ShaderFlags.None); " is 171.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Initialize,The length of the statement  "	texture = Texture.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Textures." + settings.TextureName)' Usage.Dynamic' Pool.Default); " is 191.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,SetCamera,The length of the statement  "	camera.Location = cameraScale * new Vector3 (dataSource.DisplayData.GetLength (0)' dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2)); " is 159.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,SetCamera,The length of the statement  "	camera.Target = new Vector3 (dataSource.DisplayData.GetLength (0) / 2f' dataSource.DisplayData.GetLength (1) / 2f' dataSource.DisplayData.GetLength (2) / 2f); " is 158.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The length of the statement  "		Vector3 newPosition = ComputeNewPosition (startPositions [i]' particlesList [i].Velocity' (currentTime - times [i]) * (1 + settings.DurationRandomness)); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The length of the statement  "		if (MathHelper.CheckPosition (newPosition' dataSource.DisplayData' dataSource.MissingValue) && (particlesList [i].Time < settings.Duration.TotalSeconds + times [i])) { " is 167.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The length of the statement  "			particlesList.Add (new ParticleVertex (newPosition' particlesList [i].Velocity' (int)RgbPalette.ColorARGB (RgbPalette.GetColor (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue))' particlesList [i].Time + (float)timeEntity.ElapsedTime.TotalSeconds)); " is 272.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The length of the statement  "		vertexBuffer = new VertexBuffer (device' ParticleVertex.SizeInBytes * Math.Max (10' particlesList.Count)' Usage.WriteOnly | Usage.Points' ParticleVertex.Format' Pool.Default); " is 175.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,QuerieNewParticle,The length of the statement  "	float horizontalVelocity = MathHelper.Lerp (settings.MinHorizontalVelocity' settings.MaxHorizontalVelocity' (float)random.NextDouble ()); " is 137.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,QuerieNewParticle,The length of the statement  "	velocity.Y += MathHelper.Lerp (settings.MinVerticalVelocity' settings.MaxVerticalVelocity' (float)random.NextDouble ()); " is 120.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,QuerieNewParticle,The length of the statement  "		this.particlesList.Add (new ParticleVertex (position' velocity' (int)RgbPalette.ColorARGB (RgbPalette.GetColor (MathHelper.GetValue (position' dataSource.DisplayData' dataSource.MissingValue)' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue))' currentTime)); " is 274.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,QuerieNewParticle,The length of the statement  "	//this.particlesList.Add(new ParticleVertex(position' velocity' (int)RgbPalette.ColorARGB(new Color3(1'1'1))' currentTime)); " is 124.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,ComputeNewPosition,The length of the statement  "	float velocityIntegral = startVelocity * normalizedAge + (endVelocity - startVelocity) * normalizedAge * normalizedAge / 2.0f; " is 126.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position)) " is 398.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position)) " is 398.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The length of the statement  "			particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50); " is 173.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "		vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default); " is 145.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard); " is 167.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard); " is 227.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard); " is 334.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard); " is 334.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB); " is 161.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB); " is 167.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB); " is 167.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The length of the statement  "					VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB); " is 167.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,GeneratePosition,The length of the statement  "	Vector3 tempVector = new Vector3 ((float)(r.NextDouble ()) * (array.GetLength (0) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (1) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (2) - 1 - numericalStep * 3f) + numericalStep * 1.5f); " is 328.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,GeneratePosition,The length of the statement  "		tempVector = new Vector3 ((float)(r.NextDouble ()) * (array.GetLength (0) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (1) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (2) - 1 - numericalStep * 3f) + numericalStep * 1.5f); " is 320.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		effect = Effect.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Shaders.PerPixelLightning.fx")' ShaderFlags.None); " is 174.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		while (float.IsNaN (position.X) || position.X - gradientStep < 0 || position.Y - gradientStep < 0 || position.Z - gradientStep < 0 || position.X + gradientStep > array.GetLength (0) - 1 || position.Y + gradientStep > array.GetLength (1) - 1 || position.Z + gradientStep > array.GetLength (2) - 1) { " is 298.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep); " is 153.
Long Statement,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The length of the statement  "		this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50)); " is 178.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The length of the statement  "	texture = new VolumeTexture (device' textureSizeX' textureSizeY' textureSizeZ' 1' Usage.Dynamic' Format.A8R8G8B8' Pool.Default); " is 128.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The length of the statement  "	effect.SetValue ("g_SamplingParams"' new Vector4 (intensitiveInterval' intensitiveScale' (float)1.0f / camera.ProjectionMatrix.M11' (float)1.0f / camera.ProjectionMatrix.M22)); " is 176.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The length of the statement  "	effect.SetValue ("g_TexCoordOffset"' new Vector4 ((float)timeEntity.TotalTime.TotalMilliseconds * 0.002f' (float)timeEntity.TotalTime.TotalMilliseconds * 0.001f' densityMod' 0)); " is 178.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The length of the statement  "	effect.SetValue ("denValueRange"' new Vector4 ((CurrentValue - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum)' 0' 0' step)); " is 141.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,SetCamera,The length of the statement  "	this.camera.Location = cameraScale * new Vector3 (-dataSource.DisplayData.GetLength (0) / dataLengthMax' dataSource.DisplayData.GetLength (1) / dataLengthMax' dataSource.DisplayData.GetLength (2) / dataLengthMax); " is 213.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The length of the statement  "	dataLengthMax = Math.Max (dataSource.DisplayData.GetLength (0)' Math.Max (dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2))); " is 151.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The length of the statement  "		effect = Effect.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Shaders.RayCasting.fx")' ShaderFlags.None); " is 167.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The length of the statement  "	denModTex = Texture.FromStream (device' this.GetType ().Assembly.GetManifestResourceStream ("Microsoft.Research.Visualization3D.Textures.denmod.dds")' Usage.Dynamic' Pool.Default); " is 180.
Long Statement,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The length of the statement  "	fulScreenTriangle = new VertexBuffer (device' 3 * Vertex.SizeInBytes' Usage.WriteOnly' VertexFormat.Position' Pool.Default); " is 124.
Long Statement,Microsoft.Research.Visualization3D.VertexStructures,TransformedColoredVertex,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\VertexStructures\TransformedColoredVertex.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.CurrentCulture' "{0} ({1})"' Position.ToString ()' System.Drawing.Color.FromArgb (Color).ToString ()); " is 136.
Long Statement,Microsoft.Research.Visualization3D.VertexStructures,VertexPositionNormalColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\VertexStructures\VertexPositionNormalColor.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.CurrentCulture' "{0} ({1}' {2})"' Position.ToString ()' Color.ToString ()' Normal.ToString ()); " is 129.
Complex Conditional,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,CheckPosition,The conditional expression  "position.X >= 0 && position.X < i && position.Y >= 0 && position.Y < j && position.Z >= 0 && position.Z < k"  is complex.
Complex Conditional,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,CheckPosition,The conditional expression  "position.X >= 0 && position.X < i && position.Y >= 0 && position.Y < j && position.Z >= 0 && position.Z < k && !MathHelper.MissingCheck (position' array' missingValue)"  is complex.
Complex Conditional,Microsoft.Research.Visualization3D.CameraUtilities,Camera,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\CameraUtilities\Camera.cs,RotateAroundTargetY,The conditional expression  "(dot > -0.95 && angle > 0) || (dot < 0.95 && angle < 0)"  is complex.
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [0] = 542326876;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [1] = 124;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [2] = DDSD_CAPS | DDSD_PIXELFORMAT | DDSD_WIDTH | DDSD_HEIGHT | DDSD_DEPTH | DDSD_PITCH;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [3] = height;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [4] = width;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [5] = width * 4;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [5] = width * 4;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [6] = depth;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [19] = 32;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [19] = 32;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [20] = DDPF_RGB | DDPF_ALPHAPIXELS;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [22] = 8;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [22] = 8;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [23] = 0xff0000;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [24] = 0xff00;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [25] = 0xff;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [26] = 0xff000000;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [27] = DDSCAPS_TEXTURE | DDSCAPS_COMPLEX;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,DDS,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\DDS.cs,CreateHeader,The following statement contains a magic number: header [28] = DDSCAPS2_VOLUME;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: if (i >= array.GetLength (0) - 1)  	i = array.GetLength (0) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: i = array.GetLength (0) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: if (j >= array.GetLength (1) - 1)  	j = array.GetLength (1) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: j = array.GetLength (1) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,GetValue,The following statement contains a magic number: k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: if (i >= array.GetLength (0) - 1)  	i = array.GetLength (0) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: i = array.GetLength (0) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: if (j >= array.GetLength (1) - 1)  	j = array.GetLength (1) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: j = array.GetLength (1) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: if (k >= array.GetLength (2) - 1)  	k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,MissingCheck,The following statement contains a magic number: k = array.GetLength (2) - 2;  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMax,The following statement contains a magic number: for (int i = 0; i < array.GetLength (0); i++) {  	for (int j = 0; j < array.GetLength (1); j++) {  		for (int k = 0; k < array.GetLength (2); k++) {  			if (max < array [i' j' k] && array [i' j' k] != missingValue)  				max = array [i' j' k];  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMax,The following statement contains a magic number: for (int j = 0; j < array.GetLength (1); j++) {  	for (int k = 0; k < array.GetLength (2); k++) {  		if (max < array [i' j' k] && array [i' j' k] != missingValue)  			max = array [i' j' k];  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMax,The following statement contains a magic number: for (int k = 0; k < array.GetLength (2); k++) {  	if (max < array [i' j' k] && array [i' j' k] != missingValue)  		max = array [i' j' k];  }  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMin,The following statement contains a magic number: for (int i = 0; i < array.GetLength (0); i++) {  	for (int j = 0; j < array.GetLength (1); j++) {  		for (int k = 0; k < array.GetLength (2); k++) {  			if (min > array [i' j' k] && array [i' j' k] != missingValue)  				min = array [i' j' k];  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMin,The following statement contains a magic number: for (int j = 0; j < array.GetLength (1); j++) {  	for (int k = 0; k < array.GetLength (2); k++) {  		if (min > array [i' j' k] && array [i' j' k] != missingValue)  			min = array [i' j' k];  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Auxilaries,MathHelper,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Auxilaries\MathHelper.cs,FindMin,The following statement contains a magic number: for (int k = 0; k < array.GetLength (2); k++) {  	if (min > array [i' j' k] && array [i' j' k] != missingValue)  		min = array [i' j' k];  }  
Magic Number,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,OnMouseMove,The following statement contains a magic number: if (e.LeftButton == MouseButtonState.Pressed) {  	Point newPosition = e.GetPosition (this);  	camera.RotateAroundTargetX ((float)(newPosition.X - oldPosition.X) / 100);  	camera.RotateAroundTargetY ((float)(newPosition.Y - oldPosition.Y) / 100);  	oldPosition = newPosition;  }  
Magic Number,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,OnMouseMove,The following statement contains a magic number: if (e.LeftButton == MouseButtonState.Pressed) {  	Point newPosition = e.GetPosition (this);  	camera.RotateAroundTargetX ((float)(newPosition.X - oldPosition.X) / 100);  	camera.RotateAroundTargetY ((float)(newPosition.Y - oldPosition.Y) / 100);  	oldPosition = newPosition;  }  
Magic Number,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,OnMouseMove,The following statement contains a magic number: camera.RotateAroundTargetX ((float)(newPosition.X - oldPosition.X) / 100);  
Magic Number,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,OnMouseMove,The following statement contains a magic number: camera.RotateAroundTargetY ((float)(newPosition.Y - oldPosition.Y) / 100);  
Magic Number,Microsoft.Research.Visualization3D,DX3DHost,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\DX3DHost.cs,OnMouseWheel,The following statement contains a magic number: camera.CameraMoveToTarget ((float)e.Delta / 120);  
Magic Number,Microsoft.Research.Visualization3D,ValueSlider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\ProviderValueSlider.xaml.cs,ValueSlider,The following statement contains a magic number: rcSlider.Value = (max + min) / 2.0;  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColor,The following statement contains a magic number: return new Color3 (bytes [1] / 255f' bytes [2] / 255f' bytes [3] / 255f);  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColor,The following statement contains a magic number: return new Color3 (bytes [1] / 255f' bytes [2] / 255f' bytes [3] / 255f);  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: result [0] = 255;  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: if (value > middle) {  	double alpha = (value - middle) / (max - middle);  	result [1] = (byte)(Color.Red.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Red.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Red.B * alpha + green.B * (1 - alpha));  	return result;  }  else {  	double alpha = (middle - value) / (middle - min);  	result [1] = (byte)(Color.Blue.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Blue.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Blue.B * alpha + green.B * (1 - alpha));  	return result;  }  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: if (value > middle) {  	double alpha = (value - middle) / (max - middle);  	result [1] = (byte)(Color.Red.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Red.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Red.B * alpha + green.B * (1 - alpha));  	return result;  }  else {  	double alpha = (middle - value) / (middle - min);  	result [1] = (byte)(Color.Blue.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Blue.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Blue.B * alpha + green.B * (1 - alpha));  	return result;  }  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: if (value > middle) {  	double alpha = (value - middle) / (max - middle);  	result [1] = (byte)(Color.Red.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Red.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Red.B * alpha + green.B * (1 - alpha));  	return result;  }  else {  	double alpha = (middle - value) / (middle - min);  	result [1] = (byte)(Color.Blue.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Blue.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Blue.B * alpha + green.B * (1 - alpha));  	return result;  }  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: if (value > middle) {  	double alpha = (value - middle) / (max - middle);  	result [1] = (byte)(Color.Red.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Red.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Red.B * alpha + green.B * (1 - alpha));  	return result;  }  else {  	double alpha = (middle - value) / (middle - min);  	result [1] = (byte)(Color.Blue.R * alpha + green.R * (1 - alpha));  	result [2] = (byte)(Color.Blue.G * alpha + green.G * (1 - alpha));  	result [3] = (byte)(Color.Blue.B * alpha + green.B * (1 - alpha));  	return result;  }  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: result [2] = (byte)(Color.Red.G * alpha + green.G * (1 - alpha));  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: result [3] = (byte)(Color.Red.B * alpha + green.B * (1 - alpha));  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: result [2] = (byte)(Color.Blue.G * alpha + green.G * (1 - alpha));  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,GetColorBytes,The following statement contains a magic number: result [3] = (byte)(Color.Blue.B * alpha + green.B * (1 - alpha));  
Magic Number,Microsoft.Research.Visualization3D,RgbPalette,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\RgbPalette.cs,ColorARGB,The following statement contains a magic number: return (long)(((ulong)((((red << 0x10) | (green << 8)) | blue) | (alpha << 0x18))) & 0xffffffffL);  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,SetUpBuffers,The following statement contains a magic number: indices = new int[] {  	0'  	1'  	1'  	2'  	2'  	3'  	3'  	0'  	4'  	5'  	5'  	6'  	6'  	7'  	7'  	4'  	0'  	4'  	1'  	5'  	2'  	6'  	3'  	7  };  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,Draw,The following statement contains a magic number: for (int i = 0; i < passes; i++) {  	effect.BeginPass (i);  	effect.Device.DrawIndexedPrimitives (PrimitiveType.LineList' 0' 0' vertices.Length' 0' indices.Length / 2);  	effect.EndPass ();  }  
Magic Number,Microsoft.Research.Visualization3D.BorderCube,WiredCube,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\BorderCube\WiredCube.cs,Draw,The following statement contains a magic number: effect.Device.DrawIndexedPrimitives (PrimitiveType.LineList' 0' 0' vertices.Length' 0' indices.Length / 2);  
Magic Number,Microsoft.Research.Visualization3D.CameraUtilities,Camera,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\CameraUtilities\Camera.cs,RotateAroundTargetY,The following statement contains a magic number: if ((dot > -0.95 && angle > 0) || (dot < 0.95 && angle < 0)) {  	Vector3 newLocation = this.target - direction * (this.target - this.location).Length ();  	this.location = newLocation;  	this.viewDirty = true;  }  
Magic Number,Microsoft.Research.Visualization3D.CameraUtilities,Camera,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\CameraUtilities\Camera.cs,RotateAroundTargetY,The following statement contains a magic number: if ((dot > -0.95 && angle > 0) || (dot < 0.95 && angle < 0)) {  	Vector3 newLocation = this.target - direction * (this.target - this.location).Length ();  	this.location = newLocation;  	this.viewDirty = true;  }  
Magic Number,Microsoft.Research.Visualization3D.Isosurfaces,Metaball,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Isosurfaces\Metaball.ConstArrays.cs,Completed,The following statement contains a magic number: primitiveCount = vertexList.Count / 3;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxParticles = 1000;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.Duration = TimeSpan.FromSeconds (2.5);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinHorizontalVelocity = 20;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxHorizontalVelocity = 30;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinVerticalVelocity = -20;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxVerticalVelocity = 20;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinEndSize = 10;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ExplosionParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ExplosionParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxEndSize = 10;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,SetCamera,The following statement contains a magic number: camera.Location = cameraScale * new Vector3 (dataSource.DisplayData.GetLength (0)' dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2));  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,SetCamera,The following statement contains a magic number: camera.Target = new Vector3 (dataSource.DisplayData.GetLength (0) / 2f' dataSource.DisplayData.GetLength (1) / 2f' dataSource.DisplayData.GetLength (2) / 2f);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleArtillery,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleArtillery.cs,GeneratePosition,The following statement contains a magic number: return new Vector3 ((float)r.NextDouble () * dataSource.DisplayData.GetLength (0)' (float)r.NextDouble () * dataSource.DisplayData.GetLength (1)' (float)r.NextDouble () * dataSource.DisplayData.GetLength (2));  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleEmitter,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleEmitter.cs,Update,The following statement contains a magic number: if (elapsedTime > 0) {  	// Work out how fast we are moving.  	Vector3 velocity = (newPosition - previousPosition) / elapsedTime;  	// If we had any time left over that we didn't use during the  	// previous update' add that to the current elapsed time.  	float timeToSpend = timeLeftOver + elapsedTime;  	// Counter for looping over the time interval.  	float currentTime = -timeLeftOver;  	// Create particles as long as we have a big enough time interval.  	while (timeToSpend > timeBetweenParticles) {  		currentTime += timeBetweenParticles;  		timeToSpend -= timeBetweenParticles;  		// Work out the optimal position for this particle. This will produce  		// evenly spaced particles regardless of the object speed' particle  		// creation frequency' or game update rate.  		float mu = currentTime / elapsedTime;  		Vector3 position = Vector3.Lerp (previousPosition' newPosition' mu);  		// Create the particle.  		particleSystem.QuerieNewParticle (position' velocity * 5);  	}  	// Store any time we didn't use' so it can be part of the next update.  	timeLeftOver = timeToSpend;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleEmitter,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleEmitter.cs,Update,The following statement contains a magic number: while (timeToSpend > timeBetweenParticles) {  	currentTime += timeBetweenParticles;  	timeToSpend -= timeBetweenParticles;  	// Work out the optimal position for this particle. This will produce  	// evenly spaced particles regardless of the object speed' particle  	// creation frequency' or game update rate.  	float mu = currentTime / elapsedTime;  	Vector3 position = Vector3.Lerp (previousPosition' newPosition' mu);  	// Create the particle.  	particleSystem.QuerieNewParticle (position' velocity * 5);  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleEmitter,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleEmitter.cs,Update,The following statement contains a magic number: particleSystem.QuerieNewParticle (position' velocity * 5);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,SetCamera,The following statement contains a magic number: camera.Location = cameraScale * new Vector3 (dataSource.DisplayData.GetLength (0)' dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2));  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,SetCamera,The following statement contains a magic number: camera.Target = new Vector3 (dataSource.DisplayData.GetLength (0) / 2f' dataSource.DisplayData.GetLength (1) / 2f' dataSource.DisplayData.GetLength (2) / 2f);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The following statement contains a magic number: if (particlesList.Count > 0) {  	if (vertexBuffer != null)  		vertexBuffer.Dispose ();  	vertexBuffer = new VertexBuffer (device' ParticleVertex.SizeInBytes * Math.Max (10' particlesList.Count)' Usage.WriteOnly | Usage.Points' ParticleVertex.Format' Pool.Default);  	using (DataStream ds = vertexBuffer.Lock (0' 0' LockFlags.None)) {  		ds.WriteRange (particlesList.ToArray ());  	}  	vertexBuffer.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem.cs,Update,The following statement contains a magic number: vertexBuffer = new VertexBuffer (device' ParticleVertex.SizeInBytes * Math.Max (10' particlesList.Count)' Usage.WriteOnly | Usage.Points' ParticleVertex.Format' Pool.Default);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	particles [i].LifeBar -= delta * 100;  	if (particles [i].LifeBar > 0) {  		result++;  		particles [i].Position.X += particles [i].Velocity.X;  		particles [i].Position.Y += particles [i].Velocity.Y;  		particles [i].Position.Z += particles [i].Velocity.Z;  		Vector3 position = particles [i].Position;  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    particles[i].Position = GeneratePosition();  		//    position = particles[i].Position;  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i].Velocity = -velocity;  		particles [i].Color = RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue);  	}  	else {  		Vector3 position = GeneratePosition ();  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    position = GeneratePosition();  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	particles [i].LifeBar -= delta * 100;  	if (particles [i].LifeBar > 0) {  		result++;  		particles [i].Position.X += particles [i].Velocity.X;  		particles [i].Position.Y += particles [i].Velocity.Y;  		particles [i].Position.Z += particles [i].Velocity.Z;  		Vector3 position = particles [i].Position;  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    particles[i].Position = GeneratePosition();  		//    position = particles[i].Position;  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i].Velocity = -velocity;  		particles [i].Color = RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue);  	}  	else {  		Vector3 position = GeneratePosition ();  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    position = GeneratePosition();  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	particles [i].LifeBar -= delta * 100;  	if (particles [i].LifeBar > 0) {  		result++;  		particles [i].Position.X += particles [i].Velocity.X;  		particles [i].Position.Y += particles [i].Velocity.Y;  		particles [i].Position.Z += particles [i].Velocity.Z;  		Vector3 position = particles [i].Position;  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    particles[i].Position = GeneratePosition();  		//    position = particles[i].Position;  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i].Velocity = -velocity;  		particles [i].Color = RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue);  	}  	else {  		Vector3 position = GeneratePosition ();  		//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  		//{  		//    position = GeneratePosition();  		//}  		Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  		Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  		float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  		Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  		Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  		float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  		Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  		Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  		float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  		Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  		velocity.Normalize ();  		particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: particles [i].LifeBar -= delta * 100;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	result++;  	particles [i].Position.X += particles [i].Velocity.X;  	particles [i].Position.Y += particles [i].Velocity.Y;  	particles [i].Position.Z += particles [i].Velocity.Z;  	Vector3 position = particles [i].Position;  	//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  	//{  	//    particles[i].Position = GeneratePosition();  	//    position = particles[i].Position;  	//}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	particles [i].Velocity = -velocity;  	particles [i].Color = RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue);  }  else {  	Vector3 position = GeneratePosition ();  	//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  	//{  	//    position = GeneratePosition();  	//}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	result++;  	particles [i].Position.X += particles [i].Velocity.X;  	particles [i].Position.Y += particles [i].Velocity.Y;  	particles [i].Position.Z += particles [i].Velocity.Z;  	Vector3 position = particles [i].Position;  	//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  	//{  	//    particles[i].Position = GeneratePosition();  	//    position = particles[i].Position;  	//}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	particles [i].Velocity = -velocity;  	particles [i].Color = RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue);  }  else {  	Vector3 position = GeneratePosition ();  	//while (float.IsNaN(position.X) || particles[i].Position.X - gradientStep < 0 || particles[i].Position.Y - gradientStep < 0 || particles[i].Position.Z - gradientStep < 0 || particles[i].Position.X + gradientStep > array.GetLength(0) - 1 || particles[i].Position.Y + gradientStep > array.GetLength(1) - 1 || particles[i].Position.Z + gradientStep > array.GetLength(2) - 1 || MissingCheck(position))  	//{  	//    position = GeneratePosition();  	//}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Update,The following statement contains a magic number: particles [i] = new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Draw,The following statement contains a magic number: if (vertexOffset > 0) {  	device.SetStreamSource (0' vb' 0' VertexPositionNormalColor.SizeInBytes);  	device.VertexFormat = VertexPositionNormalColor.Format;  	device.Indices = ib;  	int passes = effect.Begin (FX.None);  	for (int i = 0; i < passes; i++) {  		effect.BeginPass (i);  		effect.Device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' vertexOffset' 0' indices.Count / 3);  		effect.EndPass ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Draw,The following statement contains a magic number: for (int i = 0; i < passes; i++) {  	effect.BeginPass (i);  	effect.Device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' vertexOffset' 0' indices.Count / 3);  	effect.EndPass ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Draw,The following statement contains a magic number: effect.Device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' vertexOffset' 0' indices.Count / 3);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		vertexOffset += 4;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	vertexOffset += 4;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: vertexOffset += 4;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (vertexOffset > 0) {  	if (vb != null)  		vb.Dispose ();  	vb = new VertexBuffer (device' VertexPositionNormalColor.SizeInBytes * vertexOffset' Usage.None' VertexPositionNormalColor.Format' Pool.Default);  	vertexOffset = 0;  	using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  		for (int i = 0; i < particles.Count; i++) {  			if (particles [i].LifeBar > 0) {  				float angle = (float)Math.PI / 3.0f;  				Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  				Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  				Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  				Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  				Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex1);  				Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex2);  				Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex3);  				Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  				VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  				stream.Write (vertex4);  				indices.AddRange (new int[] {  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset'  					vertexOffset + 2'  					vertexOffset + 3'  					vertexOffset'  					vertexOffset + 1'  					vertexOffset + 3'  					vertexOffset + 1'  					vertexOffset + 2'  					vertexOffset + 3'  				});  				vertexOffset += 4;  				indexOffset += 12;  			}  		}  		vb.Unlock ();  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: using (DataStream stream = vb.Lock (0' 0' LockFlags.None)) {  	for (int i = 0; i < particles.Count; i++) {  		if (particles [i].LifeBar > 0) {  			float angle = (float)Math.PI / 3.0f;  			Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  			Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  			Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  			Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  			Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex1);  			Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex2);  			Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex3);  			Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  			VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  			stream.Write (vertex4);  			indices.AddRange (new int[] {  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset'  				vertexOffset + 2'  				vertexOffset + 3'  				vertexOffset'  				vertexOffset + 1'  				vertexOffset + 3'  				vertexOffset + 1'  				vertexOffset + 2'  				vertexOffset + 3'  			});  			vertexOffset += 4;  			indexOffset += 12;  		}  	}  	vb.Unlock ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: for (int i = 0; i < particles.Count; i++) {  	if (particles [i].LifeBar > 0) {  		float angle = (float)Math.PI / 3.0f;  		Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  		Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  		Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  		Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  		Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex1);  		Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex2);  		Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex3);  		Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  		VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  		stream.Write (vertex4);  		indices.AddRange (new int[] {  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset'  			vertexOffset + 2'  			vertexOffset + 3'  			vertexOffset'  			vertexOffset + 1'  			vertexOffset + 3'  			vertexOffset + 1'  			vertexOffset + 2'  			vertexOffset + 3'  		});  		vertexOffset += 4;  		indexOffset += 12;  	}  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: if (particles [i].LifeBar > 0) {  	float angle = (float)Math.PI / 3.0f;  	Matrix billBoard = Matrix.Translation (-particles [i].Position) * CreateTransform (particles [i].Velocity) * Matrix.Translation (particles [i].Position);  	Vector3 v1 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X' particles [i].Position.Y + particleSize * 2.0f' particles [i].Position.Z)' billBoard);  	Vector3 v2 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X + particleSize * (float)Math.Sin (angle)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z)' billBoard);  	Vector3 v3 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z + particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector3 v4 = Vector3.TransformCoordinate (new Vector3 (particles [i].Position.X - particleSize * (float)Math.Sin (angle) * (float)Math.Sin (angle / 2.0f)' particles [i].Position.Y - particleSize * (float)Math.Cos (angle)' particles [i].Position.Z - particleSize * (float)Math.Sin (angle) * (float)Math.Cos (angle / 2.0f))' billBoard);  	Vector4 v11 = new Vector4 (v1 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex1 = new VertexPositionNormalColor (v1' Vector3.TransformNormal (new Vector3 (0' 1' 0)' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex1);  	Vector4 v22 = new Vector4 (v2 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex2 = new VertexPositionNormalColor (v2' Vector3.TransformNormal (v2 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex2);  	Vector4 v33 = new Vector4 (v3 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex3 = new VertexPositionNormalColor (v3' Vector3.TransformNormal (v3 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex3);  	Vector4 v44 = new Vector4 (v4 * positionScaleParam' 1.0f);  	VertexPositionNormalColor vertex4 = new VertexPositionNormalColor (v4' Vector3.TransformNormal (v4 - particles [i].Position' billBoard)' (int)particles [i].ColorARGB);  	stream.Write (vertex4);  	indices.AddRange (new int[] {  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset'  		vertexOffset + 2'  		vertexOffset + 3'  		vertexOffset'  		vertexOffset + 1'  		vertexOffset + 3'  		vertexOffset + 1'  		vertexOffset + 2'  		vertexOffset + 3'  	});  	vertexOffset += 4;  	indexOffset += 12;  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indices.AddRange (new int[] {  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset'  	vertexOffset + 2'  	vertexOffset + 3'  	vertexOffset'  	vertexOffset + 1'  	vertexOffset + 3'  	vertexOffset + 1'  	vertexOffset + 2'  	vertexOffset + 3'  });  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: vertexOffset += 4;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetUpBuffers,The following statement contains a magic number: indexOffset += 12;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,GeneratePosition,The following statement contains a magic number: while (MathHelper.GetValue (tempVector' array) < (float)(r.NextDouble () * (max - min) + min)) {  	tempVector = new Vector3 ((float)(r.NextDouble ()) * (array.GetLength (0) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (1) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (2) - 1 - numericalStep * 3f) + numericalStep * 1.5f);  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,GeneratePosition,The following statement contains a magic number: tempVector = new Vector3 ((float)(r.NextDouble ()) * (array.GetLength (0) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (1) - 1 - numericalStep * 3f) + numericalStep * 1.5f' (float)(r.NextDouble ()) * (array.GetLength (2) - 1 - numericalStep * 3f) + numericalStep * 1.5f);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetCamera,The following statement contains a magic number: camera.Location = cameraScale * new Vector3 (array.GetLength (0)' array.GetLength (1)' array.GetLength (2));  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,SetCamera,The following statement contains a magic number: camera.Target = new Vector3 (array.GetLength (0) / 2f' array.GetLength (1) / 2f' array.GetLength (2) / 2f);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < particleNum; i++) {  	Vector3 position = GeneratePosition ();  	while (float.IsNaN (position.X) || position.X - gradientStep < 0 || position.Y - gradientStep < 0 || position.Z - gradientStep < 0 || position.X + gradientStep > array.GetLength (0) - 1 || position.Y + gradientStep > array.GetLength (1) - 1 || position.Z + gradientStep > array.GetLength (2) - 1) {  		position = GeneratePosition ();  	}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50));  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < particleNum; i++) {  	Vector3 position = GeneratePosition ();  	while (float.IsNaN (position.X) || position.X - gradientStep < 0 || position.Y - gradientStep < 0 || position.Z - gradientStep < 0 || position.X + gradientStep > array.GetLength (0) - 1 || position.Y + gradientStep > array.GetLength (1) - 1 || position.Z + gradientStep > array.GetLength (2) - 1) {  		position = GeneratePosition ();  	}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50));  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < particleNum; i++) {  	Vector3 position = GeneratePosition ();  	while (float.IsNaN (position.X) || position.X - gradientStep < 0 || position.Y - gradientStep < 0 || position.Z - gradientStep < 0 || position.X + gradientStep > array.GetLength (0) - 1 || position.Y + gradientStep > array.GetLength (1) - 1 || position.Z + gradientStep > array.GetLength (2) - 1) {  		position = GeneratePosition ();  	}  	Vector3 backPosition = new Vector3 (position.X - numericalStep' position.Y' position.Z);  	Vector3 frontPosition = new Vector3 (position.X + numericalStep' position.Y' position.Z);  	float velocityX = MathHelper.GetPatrialDerivation (MathHelper.GetValue (frontPosition' array)' MathHelper.GetValue (backPosition' array)' numericalStep);  	Vector3 bottomPosition = new Vector3 (position.X' position.Y - numericalStep' position.Z);  	Vector3 topPosition = new Vector3 (position.X' position.Y + numericalStep' position.Z);  	float velocityY = MathHelper.GetPatrialDerivation (MathHelper.GetValue (topPosition' array)' MathHelper.GetValue (bottomPosition' array)' numericalStep);  	Vector3 rightPosition = new Vector3 (position.X' position.Y' position.Z + numericalStep);  	Vector3 leftPosition = new Vector3 (position.X' position.Y' position.Z - numericalStep);  	float velocityZ = MathHelper.GetPatrialDerivation (MathHelper.GetValue (rightPosition' array)' MathHelper.GetValue (leftPosition' array)' numericalStep);  	Vector3 velocity = new Vector3 (velocityX' velocityY' velocityZ);  	velocity.Normalize ();  	this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50));  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: while (float.IsNaN (position.X) || position.X - gradientStep < 0 || position.Y - gradientStep < 0 || position.Z - gradientStep < 0 || position.X + gradientStep > array.GetLength (0) - 1 || position.Y + gradientStep > array.GetLength (1) - 1 || position.Z + gradientStep > array.GetLength (2) - 1) {  	position = GeneratePosition ();  }  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50));  
Magic Number,Microsoft.Research.Visualization3D.Particles,ParticleSystem3D,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ParticleSystem3D.cs,Initialize,The following statement contains a magic number: this.particles.Add (new Particle (position' -velocity' RgbPalette.GetColor (MathHelper.GetValue (position' array)' max' min' missingValue)' (float)(r.NextDouble () * 100) + 50));  
Magic Number,Microsoft.Research.Visualization3D.Particles,Projectile,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\Projectile.cs,Projectile,The following statement contains a magic number: velocity.X = (float)(random.NextDouble () - 0.5) * sidewaysVelocityRange;  
Magic Number,Microsoft.Research.Visualization3D.Particles,Projectile,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\Projectile.cs,Projectile,The following statement contains a magic number: velocity.Y = (float)(random.NextDouble () - 0.5) * verticalVelocityRange;  
Magic Number,Microsoft.Research.Visualization3D.Particles,Projectile,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\Projectile.cs,Projectile,The following statement contains a magic number: velocity.Z = (float)(random.NextDouble () - 0.5) * sidewaysVelocityRange;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxParticles = 1000;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.Duration = TimeSpan.FromSeconds (0.2);  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinRotateSpeed = -4;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxRotateSpeed = 4;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinStartSize = 3;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxStartSize = 3;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinEndSize = 5;  
Magic Number,Microsoft.Research.Visualization3D.Particles,ProjectileParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\ProjectileParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxEndSize = 5;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxParticles = 200;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.Duration = TimeSpan.FromSeconds (4);  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxHorizontalVelocity = 50;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinVerticalVelocity = -10;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxVerticalVelocity = 50;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.Gravity = new Vector3 (0' -20' 0);  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinRotateSpeed = -2;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxRotateSpeed = 2;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MinEndSize = 10;  
Magic Number,Microsoft.Research.Visualization3D.Particles,SmokeParticleSystem,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\Particles\SmokeParticleSystem.cs,InitializeSettings,The following statement contains a magic number: settings.MaxEndSize = 10;  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int i = 0; i < textureSizeX; i++) {  	for (int j = 0; j < textureSizeY; j++) {  		for (int k = 0; k < textureSizeZ; k++) {  			float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  			float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  			float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  			float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  			byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  			if (value > dataSource.Maximum)  				value = dataSource.Maximum;  			if (value < dataSource.Minimum)  				value = dataSource.Minimum;  			buffer [index++] = color [3];  			buffer [index++] = color [2];  			buffer [index++] = color [1];  			buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int i = 0; i < textureSizeX; i++) {  	for (int j = 0; j < textureSizeY; j++) {  		for (int k = 0; k < textureSizeZ; k++) {  			float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  			float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  			float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  			float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  			byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  			if (value > dataSource.Maximum)  				value = dataSource.Maximum;  			if (value < dataSource.Minimum)  				value = dataSource.Minimum;  			buffer [index++] = color [3];  			buffer [index++] = color [2];  			buffer [index++] = color [1];  			buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int i = 0; i < textureSizeX; i++) {  	for (int j = 0; j < textureSizeY; j++) {  		for (int k = 0; k < textureSizeZ; k++) {  			float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  			float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  			float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  			float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  			byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  			if (value > dataSource.Maximum)  				value = dataSource.Maximum;  			if (value < dataSource.Minimum)  				value = dataSource.Minimum;  			buffer [index++] = color [3];  			buffer [index++] = color [2];  			buffer [index++] = color [1];  			buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int i = 0; i < textureSizeX; i++) {  	for (int j = 0; j < textureSizeY; j++) {  		for (int k = 0; k < textureSizeZ; k++) {  			float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  			float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  			float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  			float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  			byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  			if (value > dataSource.Maximum)  				value = dataSource.Maximum;  			if (value < dataSource.Minimum)  				value = dataSource.Minimum;  			buffer [index++] = color [3];  			buffer [index++] = color [2];  			buffer [index++] = color [1];  			buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  		}  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int j = 0; j < textureSizeY; j++) {  	for (int k = 0; k < textureSizeZ; k++) {  		float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  		float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  		float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  		float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  		byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  		if (value > dataSource.Maximum)  			value = dataSource.Maximum;  		if (value < dataSource.Minimum)  			value = dataSource.Minimum;  		buffer [index++] = color [3];  		buffer [index++] = color [2];  		buffer [index++] = color [1];  		buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int j = 0; j < textureSizeY; j++) {  	for (int k = 0; k < textureSizeZ; k++) {  		float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  		float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  		float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  		float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  		byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  		if (value > dataSource.Maximum)  			value = dataSource.Maximum;  		if (value < dataSource.Minimum)  			value = dataSource.Minimum;  		buffer [index++] = color [3];  		buffer [index++] = color [2];  		buffer [index++] = color [1];  		buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int j = 0; j < textureSizeY; j++) {  	for (int k = 0; k < textureSizeZ; k++) {  		float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  		float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  		float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  		float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  		byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  		if (value > dataSource.Maximum)  			value = dataSource.Maximum;  		if (value < dataSource.Minimum)  			value = dataSource.Minimum;  		buffer [index++] = color [3];  		buffer [index++] = color [2];  		buffer [index++] = color [1];  		buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int j = 0; j < textureSizeY; j++) {  	for (int k = 0; k < textureSizeZ; k++) {  		float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  		float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  		float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  		float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  		byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  		if (value > dataSource.Maximum)  			value = dataSource.Maximum;  		if (value < dataSource.Minimum)  			value = dataSource.Minimum;  		buffer [index++] = color [3];  		buffer [index++] = color [2];  		buffer [index++] = color [1];  		buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  	}  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int k = 0; k < textureSizeZ; k++) {  	float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  	float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  	float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  	float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  	byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  	if (value > dataSource.Maximum)  		value = dataSource.Maximum;  	if (value < dataSource.Minimum)  		value = dataSource.Minimum;  	buffer [index++] = color [3];  	buffer [index++] = color [2];  	buffer [index++] = color [1];  	buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int k = 0; k < textureSizeZ; k++) {  	float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  	float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  	float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  	float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  	byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  	if (value > dataSource.Maximum)  		value = dataSource.Maximum;  	if (value < dataSource.Minimum)  		value = dataSource.Minimum;  	buffer [index++] = color [3];  	buffer [index++] = color [2];  	buffer [index++] = color [1];  	buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int k = 0; k < textureSizeZ; k++) {  	float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  	float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  	float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  	float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  	byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  	if (value > dataSource.Maximum)  		value = dataSource.Maximum;  	if (value < dataSource.Minimum)  		value = dataSource.Minimum;  	buffer [index++] = color [3];  	buffer [index++] = color [2];  	buffer [index++] = color [1];  	buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: for (int k = 0; k < textureSizeZ; k++) {  	float i1 = (float)(i * (float)(array.GetLength (0) - 1) / textureSizeX);  	float j1 = (float)(j * (float)(array.GetLength (1) - 1) / textureSizeY);  	float k1 = (float)(k * (float)(array.GetLength (2) - 1) / textureSizeZ);  	float value = MathHelper.GetValue (new Vector3 (i1' j1' k1)' array);  	byte[] color = RgbPalette.GetColorBytes (value' dataSource.Maximum' dataSource.Minimum' dataSource.MissingValue);  	if (value > dataSource.Maximum)  		value = dataSource.Maximum;  	if (value < dataSource.Minimum)  		value = dataSource.Minimum;  	buffer [index++] = color [3];  	buffer [index++] = color [2];  	buffer [index++] = color [1];  	buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: buffer [index++] = color [3];  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: buffer [index++] = color [2];  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,GenerateTexture,The following statement contains a magic number: buffer [index++] = (byte)((value - dataSource.Minimum) / (dataSource.Maximum - dataSource.Minimum) * 255);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The following statement contains a magic number: for (int i = 0; i < numPasses; i++) {  	effect.BeginPass (i);  	device.SetStreamSource (0' cube' 0' Vertex.SizeInBytes);  	device.Indices = cubeIndices;  	device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' 8' 0' 12);  	effect.EndPass ();  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The following statement contains a magic number: for (int i = 0; i < numPasses; i++) {  	effect.BeginPass (i);  	device.SetStreamSource (0' cube' 0' Vertex.SizeInBytes);  	device.Indices = cubeIndices;  	device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' 8' 0' 12);  	effect.EndPass ();  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The following statement contains a magic number: device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' 8' 0' 12);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,DrawRayCasting,The following statement contains a magic number: device.DrawIndexedPrimitives (PrimitiveType.TriangleList' 0' 0' 8' 0' 12);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,ClearRenderTarget,The following statement contains a magic number: for (int i = 0; i < numPasses; i++) {  	effect.BeginPass (i);  	device.VertexFormat = VertexFormat.Position;  	device.SetStreamSource (0' fulScreenTriangle' 0' sizeof(float) * 3);  	device.DrawPrimitives (PrimitiveType.TriangleList' 0' 1);  	effect.EndPass ();  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,ClearRenderTarget,The following statement contains a magic number: device.SetStreamSource (0' fulScreenTriangle' 0' sizeof(float) * 3);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,SetCamera,The following statement contains a magic number: this.camera.Location = cameraScale * new Vector3 (-dataSource.DisplayData.GetLength (0) / dataLengthMax' dataSource.DisplayData.GetLength (1) / dataLengthMax' dataSource.DisplayData.GetLength (2) / dataLengthMax);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: dataLengthMax = Math.Max (dataSource.DisplayData.GetLength (0)' Math.Max (dataSource.DisplayData.GetLength (1)' dataSource.DisplayData.GetLength (2)));  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: fulScreenTriangle = new VertexBuffer (device' 3 * Vertex.SizeInBytes' Usage.WriteOnly' VertexFormat.Position' Pool.Default);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: cube = new VertexBuffer (device' Vertex.SizeInBytes * 8' Usage.WriteOnly' VertexFormat.Position' Pool.Default);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: cubeIndices = new IndexBuffer (device' sizeof(int) * 36' Usage.WriteOnly' Pool.Default' false);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: using (DataStream ds = cubeIndices.Lock (0' 0' LockFlags.None)) {  	ds.WriteRange (new int[] {  		0'  		1'  		2'  		0'  		2'  		3'  		0 + 4'  		2 + 4'  		1 + 4'  		0 + 4'  		3 + 4'  		2 + 4'  		3'  		2'  		2 + 4'  		3'  		2 + 4'  		3 + 4'  		0 + 4'  		1 + 4'  		1'  		0 + 4'  		1'  		0'  		1'  		1 + 4'  		2 + 4'  		1'  		2 + 4'  		2'  		0'  		3 + 4'  		0 + 4'  		0'  		3'  		3 + 4  	});  }  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Initialize,The following statement contains a magic number: ds.WriteRange (new int[] {  	0'  	1'  	2'  	0'  	2'  	3'  	0 + 4'  	2 + 4'  	1 + 4'  	0 + 4'  	3 + 4'  	2 + 4'  	3'  	2'  	2 + 4'  	3'  	2 + 4'  	3 + 4'  	0 + 4'  	1 + 4'  	1'  	0 + 4'  	1'  	0'  	1'  	1 + 4'  	2 + 4'  	1'  	2 + 4'  	2'  	0'  	3 + 4'  	0 + 4'  	0'  	3'  	3 + 4  });  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,Draw,The following statement contains a magic number: ClearRenderTarget (new Vector4 (1000' 0' 0' 0));  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,OnDataSourceChanged,The following statement contains a magic number: this.world = new Matrix {  	M11 = dataSource.DisplayData.GetLength (0) / dataLengthMax'  	M12 = 0'  	M13 = 0'  	M14 = 0'  	M21 = 0'  	M22 = dataSource.DisplayData.GetLength (1) / dataLengthMax'  	M23 = 0'  	M24 = 0'  	M31 = 0'  	M32 = 0'  	M33 = dataSource.DisplayData.GetLength (2) / dataLengthMax'  	M34 = 0'  	M41 = -dataSource.DisplayData.GetLength (0) / (2 * dataLengthMax)'  	M42 = -dataSource.DisplayData.GetLength (1) / (2 * dataLengthMax)'  	M43 = -dataSource.DisplayData.GetLength (2) / (2 * dataLengthMax)'  	M44 = 1  } * Matrix.RotationZ ((float)Math.PI);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,OnDataSourceChanged,The following statement contains a magic number: this.world = new Matrix {  	M11 = dataSource.DisplayData.GetLength (0) / dataLengthMax'  	M12 = 0'  	M13 = 0'  	M14 = 0'  	M21 = 0'  	M22 = dataSource.DisplayData.GetLength (1) / dataLengthMax'  	M23 = 0'  	M24 = 0'  	M31 = 0'  	M32 = 0'  	M33 = dataSource.DisplayData.GetLength (2) / dataLengthMax'  	M34 = 0'  	M41 = -dataSource.DisplayData.GetLength (0) / (2 * dataLengthMax)'  	M42 = -dataSource.DisplayData.GetLength (1) / (2 * dataLengthMax)'  	M43 = -dataSource.DisplayData.GetLength (2) / (2 * dataLengthMax)'  	M44 = 1  } * Matrix.RotationZ ((float)Math.PI);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,OnDataSourceChanged,The following statement contains a magic number: this.world = new Matrix {  	M11 = dataSource.DisplayData.GetLength (0) / dataLengthMax'  	M12 = 0'  	M13 = 0'  	M14 = 0'  	M21 = 0'  	M22 = dataSource.DisplayData.GetLength (1) / dataLengthMax'  	M23 = 0'  	M24 = 0'  	M31 = 0'  	M32 = 0'  	M33 = dataSource.DisplayData.GetLength (2) / dataLengthMax'  	M34 = 0'  	M41 = -dataSource.DisplayData.GetLength (0) / (2 * dataLengthMax)'  	M42 = -dataSource.DisplayData.GetLength (1) / (2 * dataLengthMax)'  	M43 = -dataSource.DisplayData.GetLength (2) / (2 * dataLengthMax)'  	M44 = 1  } * Matrix.RotationZ ((float)Math.PI);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,OnDataSourceChanged,The following statement contains a magic number: this.world = new Matrix {  	M11 = dataSource.DisplayData.GetLength (0) / dataLengthMax'  	M12 = 0'  	M13 = 0'  	M14 = 0'  	M21 = 0'  	M22 = dataSource.DisplayData.GetLength (1) / dataLengthMax'  	M23 = 0'  	M24 = 0'  	M31 = 0'  	M32 = 0'  	M33 = dataSource.DisplayData.GetLength (2) / dataLengthMax'  	M34 = 0'  	M41 = -dataSource.DisplayData.GetLength (0) / (2 * dataLengthMax)'  	M42 = -dataSource.DisplayData.GetLength (1) / (2 * dataLengthMax)'  	M43 = -dataSource.DisplayData.GetLength (2) / (2 * dataLengthMax)'  	M44 = 1  } * Matrix.RotationZ ((float)Math.PI);  
Magic Number,Microsoft.Research.Visualization3D.RayCasting,RayCastingProvider,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\Providers\RayCasting\RayCastingProvider.cs,OnDataSourceChanged,The following statement contains a magic number: this.world = new Matrix {  	M11 = dataSource.DisplayData.GetLength (0) / dataLengthMax'  	M12 = 0'  	M13 = 0'  	M14 = 0'  	M21 = 0'  	M22 = dataSource.DisplayData.GetLength (1) / dataLengthMax'  	M23 = 0'  	M24 = 0'  	M31 = 0'  	M32 = 0'  	M33 = dataSource.DisplayData.GetLength (2) / dataLengthMax'  	M34 = 0'  	M41 = -dataSource.DisplayData.GetLength (0) / (2 * dataLengthMax)'  	M42 = -dataSource.DisplayData.GetLength (1) / (2 * dataLengthMax)'  	M43 = -dataSource.DisplayData.GetLength (2) / (2 * dataLengthMax)'  	M44 = 1  } * Matrix.RotationZ ((float)Math.PI);  
Magic Number,Microsoft.Research.Visualization3D.VertexStructures,VertexPositionNormalColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\VertexStructures\VertexPositionNormalColor.cs,VertexPositionNormalColor,The following statement contains a magic number: VertexElements = new VertexElement[] {  	new VertexElement (0' 0' DeclarationType.Float3' DeclarationMethod.Default' DeclarationUsage.Position' 0)'  	new VertexElement (0' 12' DeclarationType.Float3' DeclarationMethod.Default' DeclarationUsage.Normal' 0)'  	new VertexElement (0' 24' DeclarationType.Color' DeclarationMethod.Default' DeclarationUsage.Color' 0)  };  
Magic Number,Microsoft.Research.Visualization3D.VertexStructures,VertexPositionNormalColor,C:\repos\dotnetprojects_DynamicDataDisplay\src\Microsoft.Research.Visualization3D\VertexStructures\VertexPositionNormalColor.cs,VertexPositionNormalColor,The following statement contains a magic number: VertexElements = new VertexElement[] {  	new VertexElement (0' 0' DeclarationType.Float3' DeclarationMethod.Default' DeclarationUsage.Position' 0)'  	new VertexElement (0' 12' DeclarationType.Float3' DeclarationMethod.Default' DeclarationUsage.Normal' 0)'  	new VertexElement (0' 24' DeclarationType.Color' DeclarationMethod.Default' DeclarationUsage.Color' 0)  };  
