Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03.Isolines,Isolines,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\Isolines\Isolines.xaml.cs,LoadField,Cyclomatic complexity of the method is 12
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The method has 5 parameters.
Long Parameter List,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Window_Loaded,The method has 5 parameters.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,Window_Loaded,The length of the statement  "	plotter.AddLineGraph (new CompositeDataSource (xSrc' animatedDataSource)' new Pen (Brushes.Magenta' 3)' new PenDescription ("Sin(x + phase)")); " is 143.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,LoadCurrencyRates,The length of the statement  "	using (Stream resourceStream = assembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange." + fileName)) { " is 157.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,LoadStockRates,The length of the statement  "	using (Stream resourceStream = assembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange." + fileName)) { " is 154.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,SetupLocationalAxis,The length of the statement  "	GenericLocationalLabelProvider<CityInfo' double> labelProvider = new GenericLocationalLabelProvider<CityInfo' double> (cities' city => city.Name); " is 146.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,SetupLocationalAxis,The length of the statement  "	GenericLocationalTicksProvider<CityInfo' double> ticksProvider = new GenericLocationalTicksProvider<CityInfo' double> (cities' city => city.Coordinate); " is 152.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03.Isolines,Isolines,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\Isolines\Isolines.xaml.cs,LoadField,The length of the statement  "	using (Stream stream = assembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03.Isolines.SampleData.txt")) { " is 144.
Long Statement,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,BuildData,The length of the statement  "	ObservableCollectionWrapper<Point> collection = new ObservableCollectionWrapper<Point> (new ObservableCollection<Point> ()); " is 124.
Long Statement,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The length of the statement  "		collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime)))); " is 147.
Long Statement,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The length of the statement  "	genericPlotter.ViewportRect = new GenericRect<DateTime' double> (DateTime.Now.AddDays (-2)' -2.5' DateTime.Now.AddDays (60)' 2.5); " is 130.
Long Statement,Microsoft.Research.DynamicDataDisplay.Samples.Internals.Views,TreeDemonstrationView,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Internals\Views\TreeDemonstrationView.xaml.cs,OnLoaded,The length of the statement  "	//tree.SetBinding(TreeView.SelectedValueProperty' new Binding { Source = ViewState.State' Path = new PropertyPath("SelectedValue") }); " is 134.
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,AnimationSample,The following statement contains a magic number: headerContents.FontSize = 24;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,AnimatedPlot_Timer,The following statement contains a magic number: phase += 0.01;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,AnimatedPlot_Timer,The following statement contains a magic number: if (phase > 2 * Math.PI)  	phase -= 2 * Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,AnimatedPlot_Timer,The following statement contains a magic number: if (phase > 2 * Math.PI)  	phase -= 2 * Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,AnimatedPlot_Timer,The following statement contains a magic number: phase -= 2 * Math.PI;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: for (int i = 0; i < animatedX.Length; i++) {  	animatedX [i] = 2 * Math.PI * i / animatedX.Length;  	animatedY [i] = Math.Sin (animatedX [i]);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: animatedX [i] = 2 * Math.PI * i / animatedX.Length;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: plotter.AddLineGraph (new CompositeDataSource (xSrc' animatedDataSource)' new Pen (Brushes.Magenta' 3)' new PenDescription ("Sin(x + phase)"));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,AnimationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\AnimationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds (10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,ImageHistogram,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\ImageHistogram.xaml.cs,ProcessImage,The following statement contains a magic number: bmp.CopyPixels (pixels' bmp.PixelWidth * 4' 0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,TooltipSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\TooltipSample.xaml.cs,TooltipSample,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	x [i] = i * 0.2;  	y [i] = Math.Cos (x [i]);  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,TooltipSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\TooltipSample.xaml.cs,TooltipSample,The following statement contains a magic number: x [i] = i * 0.2;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,TooltipSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\TooltipSample.xaml.cs,TooltipSample,The following statement contains a magic number: chart = plotter.AddLineGraph (ds' new Pen (Brushes.LimeGreen' 3)' new CircleElementPointMarker {  	Size = 10'  	Brush = Brushes.Red'  	Fill = Brushes.Orange  }' new PenDescription ("Cosine"));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02,TooltipSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\TooltipSample.xaml.cs,TooltipSample,The following statement contains a magic number: chart = plotter.AddLineGraph (ds' new Pen (Brushes.LimeGreen' 3)' new CircleElementPointMarker {  	Size = 10'  	Brush = Brushes.Red'  	Fill = Brushes.Orange  }' new PenDescription ("Cosine"));  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,Window1_Loaded,The following statement contains a magic number: plotter.AddLineGraph (CreateCurrencyDataSource (gbp)' colors [2]' 1' "RUB / Â£");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,Window1_Loaded,The following statement contains a magic number: plotter.AddLineGraph (CreateCurrencyDataSource (jpy)' colors [3]' 1' "RUB / Â¥");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,LoadCurrencyRates,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange." + fileName)) {  	using (StreamReader reader = new StreamReader (resourceStream)) {  		var strings = reader.ReadToEnd ().Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		var res = new List<CurrencyInfo> (strings.Length - 1);  		for (int i = 1; i < strings.Length; i++) {  			string line = strings [i];  			string[] subLines = line.Split ('\t');  			DateTime date = DateTime.Parse (subLines [1]);  			double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  			res.Add (new CurrencyInfo {  				Date = date'  				Rate = rate  			});  		}  		return res;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,LoadCurrencyRates,The following statement contains a magic number: using (StreamReader reader = new StreamReader (resourceStream)) {  	var strings = reader.ReadToEnd ().Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	var res = new List<CurrencyInfo> (strings.Length - 1);  	for (int i = 1; i < strings.Length; i++) {  		string line = strings [i];  		string[] subLines = line.Split ('\t');  		DateTime date = DateTime.Parse (subLines [1]);  		double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  		res.Add (new CurrencyInfo {  			Date = date'  			Rate = rate  		});  	}  	return res;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.CurrencyExchange,CurrencyExchangeSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\CurrencyExchange\CurrencyExchangeSample.xaml.cs,LoadCurrencyRates,The following statement contains a magic number: for (int i = 1; i < strings.Length; i++) {  	string line = strings [i];  	string[] subLines = line.Split ('\t');  	DateTime date = DateTime.Parse (subLines [1]);  	double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  	res.Add (new CurrencyInfo {  		Date = date'  		Rate = rate  	});  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,Window1_Loaded,The following statement contains a magic number: plotter.Legend.LegendLeft = 10;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,Window1_Loaded,The following statement contains a magic number: plotter.AddLineGraph (CreateCurrencyDataSource (micex)' colors [2]' 1' "MICEX");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,LoadStockRates,The following statement contains a magic number: using (Stream resourceStream = assembly.GetManifestResourceStream ("Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange." + fileName)) {  	using (StreamReader reader = new StreamReader (resourceStream)) {  		var strings = reader.ReadToEnd ().Split (new char[] {  			'\n'  		}' StringSplitOptions.RemoveEmptyEntries);  		var res = new List<StockInfo> (strings.Length - 1);  		for (int i = 1; i < strings.Length; i++) {  			string line = strings [i];  			string[] subLines = line.Split ('\t');  			DateTime date = DateTime.Parse (subLines [1]);  			double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  			res.Add (new StockInfo {  				Date = date'  				Rate = rate  			});  		}  		return res;  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,LoadStockRates,The following statement contains a magic number: using (StreamReader reader = new StreamReader (resourceStream)) {  	var strings = reader.ReadToEnd ().Split (new char[] {  		'\n'  	}' StringSplitOptions.RemoveEmptyEntries);  	var res = new List<StockInfo> (strings.Length - 1);  	for (int i = 1; i < strings.Length; i++) {  		string line = strings [i];  		string[] subLines = line.Split ('\t');  		DateTime date = DateTime.Parse (subLines [1]);  		double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  		res.Add (new StockInfo {  			Date = date'  			Rate = rate  		});  	}  	return res;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v02.StockExchange,Page1,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v02\StockExchange\StockExchangeSample.xaml.cs,LoadStockRates,The following statement contains a magic number: for (int i = 1; i < strings.Length; i++) {  	string line = strings [i];  	string[] subLines = line.Split ('\t');  	DateTime date = DateTime.Parse (subLines [1]);  	double rate = Double.Parse (subLines [5]' CultureInfo.InvariantCulture);  	res.Add (new StockInfo {  		Date = date'  		Rate = rate  	});  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: plotter.MainHorizontalAxis.Background = Brushes.Aqua.MakeTransparent (0.1);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: plotter.MainVerticalAxis.Background = new LinearGradientBrush (Colors.White' Colors.LightBlue' 90);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: secondAxis.LabelProvider.SetCustomFormatter (info => (info.Tick * 100).ToString ());  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: secondAxis.LabelProvider.SetCustomView ((info' ui) =>  {  	if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  		TextBlock text = (TextBlock)ui;  		text.Foreground = Brushes.Red;  		text.FontSize = 20;  	}  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: secondAxis.LabelProvider.SetCustomView ((info' ui) =>  {  	if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  		TextBlock text = (TextBlock)ui;  		text.Foreground = Brushes.Red;  		text.FontSize = 20;  	}  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: secondAxis.LabelProvider.SetCustomView ((info' ui) =>  {  	if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  		TextBlock text = (TextBlock)ui;  		text.Foreground = Brushes.Red;  		text.FontSize = 20;  	}  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  	TextBlock text = (TextBlock)ui;  	text.Foreground = Brushes.Red;  	text.FontSize = 20;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  	TextBlock text = (TextBlock)ui;  	text.Foreground = Brushes.Red;  	text.FontSize = 20;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: if (((int)Math.Round (info.Tick * 100)) % 50 == 0) {  	TextBlock text = (TextBlock)ui;  	text.Foreground = Brushes.Red;  	text.FontSize = 20;  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,AxisColoringSample,The following statement contains a magic number: text.FontSize = 20;  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,SetupLocationalAxis,The following statement contains a magic number: labelProvider.SetCustomView ((li' uiElement) =>  {  	FrameworkElement element = (FrameworkElement)uiElement;  	element.LayoutTransform = new RotateTransform (-15' 0' 0);  });  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v031,AxisColoringSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v031\AxisColoringSample.xaml.cs,SetupLocationalAxis,The following statement contains a magic number: element.LayoutTransform = new RotateTransform (-15' 0' 0);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (Stream spimStream = executingAssembly.GetManifestResourceStream (spimDataName)) {  	using (StreamReader r = new StreamReader (spimStream)) {  		string line = r.ReadLine ();  		while (!r.EndOfStream) {  			line = r.ReadLine ();  			string[] values = line.Split (''');  			double x = Double.Parse (values [0]' culture);  			double y1 = Double.Parse (values [1]' culture);  			double y2 = Double.Parse (values [2]' culture);  			double y3 = Double.Parse (values [3]' culture);  			Point p1 = new Point (x' y1);  			Point p2 = new Point (x' y2);  			Point p3 = new Point (x' y3);  			source1.AppendAsync (Dispatcher' p1);  			source2.AppendAsync (Dispatcher' p2);  			source3.AppendAsync (Dispatcher' p3);  			Thread.Sleep (10);  			// Long-long time for computations...  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (Stream spimStream = executingAssembly.GetManifestResourceStream (spimDataName)) {  	using (StreamReader r = new StreamReader (spimStream)) {  		string line = r.ReadLine ();  		while (!r.EndOfStream) {  			line = r.ReadLine ();  			string[] values = line.Split (''');  			double x = Double.Parse (values [0]' culture);  			double y1 = Double.Parse (values [1]' culture);  			double y2 = Double.Parse (values [2]' culture);  			double y3 = Double.Parse (values [3]' culture);  			Point p1 = new Point (x' y1);  			Point p2 = new Point (x' y2);  			Point p3 = new Point (x' y3);  			source1.AppendAsync (Dispatcher' p1);  			source2.AppendAsync (Dispatcher' p2);  			source3.AppendAsync (Dispatcher' p3);  			Thread.Sleep (10);  			// Long-long time for computations...  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (Stream spimStream = executingAssembly.GetManifestResourceStream (spimDataName)) {  	using (StreamReader r = new StreamReader (spimStream)) {  		string line = r.ReadLine ();  		while (!r.EndOfStream) {  			line = r.ReadLine ();  			string[] values = line.Split (''');  			double x = Double.Parse (values [0]' culture);  			double y1 = Double.Parse (values [1]' culture);  			double y2 = Double.Parse (values [2]' culture);  			double y3 = Double.Parse (values [3]' culture);  			Point p1 = new Point (x' y1);  			Point p2 = new Point (x' y2);  			Point p3 = new Point (x' y3);  			source1.AppendAsync (Dispatcher' p1);  			source2.AppendAsync (Dispatcher' p2);  			source3.AppendAsync (Dispatcher' p3);  			Thread.Sleep (10);  			// Long-long time for computations...  		}  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (StreamReader r = new StreamReader (spimStream)) {  	string line = r.ReadLine ();  	while (!r.EndOfStream) {  		line = r.ReadLine ();  		string[] values = line.Split (''');  		double x = Double.Parse (values [0]' culture);  		double y1 = Double.Parse (values [1]' culture);  		double y2 = Double.Parse (values [2]' culture);  		double y3 = Double.Parse (values [3]' culture);  		Point p1 = new Point (x' y1);  		Point p2 = new Point (x' y2);  		Point p3 = new Point (x' y3);  		source1.AppendAsync (Dispatcher' p1);  		source2.AppendAsync (Dispatcher' p2);  		source3.AppendAsync (Dispatcher' p3);  		Thread.Sleep (10);  		// Long-long time for computations...  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (StreamReader r = new StreamReader (spimStream)) {  	string line = r.ReadLine ();  	while (!r.EndOfStream) {  		line = r.ReadLine ();  		string[] values = line.Split (''');  		double x = Double.Parse (values [0]' culture);  		double y1 = Double.Parse (values [1]' culture);  		double y2 = Double.Parse (values [2]' culture);  		double y3 = Double.Parse (values [3]' culture);  		Point p1 = new Point (x' y1);  		Point p2 = new Point (x' y2);  		Point p3 = new Point (x' y3);  		source1.AppendAsync (Dispatcher' p1);  		source2.AppendAsync (Dispatcher' p2);  		source3.AppendAsync (Dispatcher' p3);  		Thread.Sleep (10);  		// Long-long time for computations...  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: using (StreamReader r = new StreamReader (spimStream)) {  	string line = r.ReadLine ();  	while (!r.EndOfStream) {  		line = r.ReadLine ();  		string[] values = line.Split (''');  		double x = Double.Parse (values [0]' culture);  		double y1 = Double.Parse (values [1]' culture);  		double y2 = Double.Parse (values [2]' culture);  		double y3 = Double.Parse (values [3]' culture);  		Point p1 = new Point (x' y1);  		Point p2 = new Point (x' y2);  		Point p3 = new Point (x' y3);  		source1.AppendAsync (Dispatcher' p1);  		source2.AppendAsync (Dispatcher' p2);  		source3.AppendAsync (Dispatcher' p3);  		Thread.Sleep (10);  		// Long-long time for computations...  	}  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: while (!r.EndOfStream) {  	line = r.ReadLine ();  	string[] values = line.Split (''');  	double x = Double.Parse (values [0]' culture);  	double y1 = Double.Parse (values [1]' culture);  	double y2 = Double.Parse (values [2]' culture);  	double y3 = Double.Parse (values [3]' culture);  	Point p1 = new Point (x' y1);  	Point p2 = new Point (x' y2);  	Point p3 = new Point (x' y3);  	source1.AppendAsync (Dispatcher' p1);  	source2.AppendAsync (Dispatcher' p2);  	source3.AppendAsync (Dispatcher' p3);  	Thread.Sleep (10);  	// Long-long time for computations...  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: while (!r.EndOfStream) {  	line = r.ReadLine ();  	string[] values = line.Split (''');  	double x = Double.Parse (values [0]' culture);  	double y1 = Double.Parse (values [1]' culture);  	double y2 = Double.Parse (values [2]' culture);  	double y3 = Double.Parse (values [3]' culture);  	Point p1 = new Point (x' y1);  	Point p2 = new Point (x' y2);  	Point p3 = new Point (x' y3);  	source1.AppendAsync (Dispatcher' p1);  	source2.AppendAsync (Dispatcher' p2);  	source3.AppendAsync (Dispatcher' p3);  	Thread.Sleep (10);  	// Long-long time for computations...  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: while (!r.EndOfStream) {  	line = r.ReadLine ();  	string[] values = line.Split (''');  	double x = Double.Parse (values [0]' culture);  	double y1 = Double.Parse (values [1]' culture);  	double y2 = Double.Parse (values [2]' culture);  	double y3 = Double.Parse (values [3]' culture);  	Point p1 = new Point (x' y1);  	Point p2 = new Point (x' y2);  	Point p3 = new Point (x' y3);  	source1.AppendAsync (Dispatcher' p1);  	source2.AppendAsync (Dispatcher' p2);  	source3.AppendAsync (Dispatcher' p3);  	Thread.Sleep (10);  	// Long-long time for computations...  }  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Simulation,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: plotter.AddLineGraph (source1' 2' "Data row 1");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: plotter.AddLineGraph (source2' 2' "Data row 2");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03,SimulationSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\SimulationSample.xaml.cs,Window_Loaded,The following statement contains a magic number: plotter.AddLineGraph (source3' 2' "Data row 3");  
Magic Number,Microsoft.Research.DynamicDataDisplay.Samples.Demos.v03.Isolines,Isolines,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v03\Isolines\Isolines.xaml.cs,ParseGridString,The following statement contains a magic number: return str.TrimEnd (' ').Substring (0' str.Length - 3).TrimStart ('{').Split (new string[] {  	" } {"  }' StringSplitOptions.None);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: for (int i = 0; i < segments.Length; i++) {  	var segment = segments [i];  	segment.X = i + 0.2 * Math.Sin (i + speed * dt);  	segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  }  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: for (int i = 0; i < segments.Length; i++) {  	var segment = segments [i];  	segment.X = i + 0.2 * Math.Sin (i + speed * dt);  	segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  }  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: for (int i = 0; i < segments.Length; i++) {  	var segment = segments [i];  	segment.X = i + 0.2 * Math.Sin (i + speed * dt);  	segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  }  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: for (int i = 0; i < segments.Length; i++) {  	var segment = segments [i];  	segment.X = i + 0.2 * Math.Sin (i + speed * dt);  	segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  }  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: for (int i = 0; i < segments.Length; i++) {  	var segment = segments [i];  	segment.X = i + 0.2 * Math.Sin (i + speed * dt);  	segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  }  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: segment.X = i + 0.2 * Math.Sin (i + speed * dt);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,timer_Tick,The following statement contains a magic number: segment.YMax = 3 + 0.5 + 0.5 * Math.Sin (i + 0.32 * speed * dt);  
Magic Number,NewMarkersSample.Pages,BarChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\BarChartPage.xaml.cs,Page_Loaded,The following statement contains a magic number: segments = Segment.LoadSegments (10);  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.75)  	return Brushes.Brown;  else if (d > 3.5)  	return Brushes.IndianRed;  else if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.75)  	return Brushes.Brown;  else if (d > 3.5)  	return Brushes.IndianRed;  else if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.75)  	return Brushes.Brown;  else if (d > 3.5)  	return Brushes.IndianRed;  else if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.5)  	return Brushes.IndianRed;  else if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.5)  	return Brushes.IndianRed;  else if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,HeightToFillConverter,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BarChart page\HeightToFillConverter.cs,Convert,The following statement contains a magic number: if (d > 3.25)  	return Brushes.BurlyWood;  else  	return Brushes.CadetBlue;  
Magic Number,NewMarkersSample.Pages,BigPointArrayPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BigPointArrayPage.xaml.cs,Page_Loaded,The following statement contains a magic number: markerChart.AddPropertyBinding<Point> (Shape.FillProperty' p =>  {  	double length = Math.Sqrt (p.X * p.X + p.Y * p.Y) / Math.Sqrt (2);  	return new SolidColorBrush (palette.GetColor (length));  });  
Magic Number,NewMarkersSample.Pages,BigPointArrayPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BigPointArrayPage.xaml.cs,Page_Loaded,The following statement contains a magic number: markerChart.Filters.Add (new ParallelClusteringFilter {  	MarkerSize = 8  });  
Magic Number,NewMarkersSample.Pages,BigPointArrayPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\BigPointArrayPage.xaml.cs,Page_Loaded,The following statement contains a magic number: markerChart.Filters.Add (new UnitingPointGroupFilter {  	MarkerSize = 6  });  
Magic Number,NewMarkersSample.Pages,ColumnChartSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\ColumnChartSample.xaml.cs,addBtn_Click,The following statement contains a magic number: values.Add (rnd.NextDouble () + 0.2);  
Magic Number,NewMarkersSample.Pages,ColumnChartSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\ColumnChartSample.xaml.cs,insertBtn_Click,The following statement contains a magic number: values.Insert (values.Count - 3' rnd.NextDouble () + 0.2);  
Magic Number,NewMarkersSample.Pages,ColumnChartSample,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\ColumnChartSample.xaml.cs,insertBtn_Click,The following statement contains a magic number: values.Insert (values.Count - 3' rnd.NextDouble () + 0.2);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart2.ItemsSource = BuildData (2);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart3.ItemsSource = BuildData (3);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart4.ItemsSource = BuildData (4);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart5.ItemsSource = BuildData (5);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart6.ItemsSource = BuildData (6);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart7.ItemsSource = BuildData (7);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,OnLoaded,The following statement contains a magic number: chart8.ItemsSource = BuildData (8);  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = i / (double)count;  	collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  }  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = i / (double)count;  	collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  }  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = i / (double)count;  	collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  }  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = i / (double)count;  	collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  }  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  
Magic Number,NewMarkersSample.Pages,DifferentBuildInMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\DifferentBuildInMarkersPage.xaml.cs,FillCollection,The following statement contains a magic number: collection.Add (new Point (x' 0.1 * dataSourceNumber + 0.06 * Math.Sin (10 * x + Math.Sqrt (dataSourceNumber + 1) * 0.0005 * (time - startTime))));  
Magic Number,NewMarkersSample.Pages,PieChartPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\PieChart page\PieChartPage.xaml.cs,AddRandomSellInfo,The following statement contains a magic number: sells.Add (new SellInfo {  	CityName = CreateRandomString ()'  	Income = rnd.NextDouble (1' 3)  });  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis2.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis2.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: dateAxis2.SetConversion (1000' now' 1010' now.AddDays (10));  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: genericPlotter.ViewportRect = new GenericRect<DateTime' double> (DateTime.Now.AddDays (-2)' -2.5' DateTime.Now.AddDays (60)' 2.5);  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: genericPlotter.ViewportRect = new GenericRect<DateTime' double> (DateTime.Now.AddDays (-2)' -2.5' DateTime.Now.AddDays (60)' 2.5);  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: genericPlotter.ViewportRect = new GenericRect<DateTime' double> (DateTime.Now.AddDays (-2)' -2.5' DateTime.Now.AddDays (60)' 2.5);  
Magic Number,NewMarkersSample.Pages,StockMarkersPage,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\StockMarkersPage.xaml.cs,Page_Loaded,The following statement contains a magic number: genericPlotter.ViewportRect = new GenericRect<DateTime' double> (DateTime.Now.AddDays (-2)' -2.5' DateTime.Now.AddDays (60)' 2.5);  
Magic Number,NewMarkersSample,Segment,C:\repos\dotnetprojects_DynamicDataDisplay\src\DynamicDataDisplay.Samples\Demos\v04\Markers\Segment.cs,LoadSegments,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	Segment seg = new Segment {  		X = i'  		YMin = Math.Sin (i * coeff)'  		YMax = Math.Sin (i * coeff) + 3  	};  	segments [i] = seg;  }  
