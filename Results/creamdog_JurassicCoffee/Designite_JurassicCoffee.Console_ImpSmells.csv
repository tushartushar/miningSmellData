Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JurassicCoffee.Console,Option,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,JurassicCoffee.Console,Option,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 9
Complex Method,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,JurassicCoffee.Console,Program,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\Program.cs,CompileFile,The method has 7 parameters. Parameters: workingDirectory' compress' require' externalCompilationScriptPath' outputDirectory' fileExtension' inputFile
Long Statement,JurassicCoffee.Console,Program,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\Program.cs,Main,The length of the statement  "					CompileFile(workingDirectory' compress' require' externalCompilationScriptPath' outputDirectory' fileExtension' inputFile); " is 123.
Long Statement,JurassicCoffee.Console,Program,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\Program.cs,Main,The length of the statement  "				CompileFile(workingDirectory' compress' require' externalCompilationScriptPath' outputDirectory' fileExtension' inputFile); " is 123.
Long Statement,JurassicCoffee.Console,Program,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\Program.cs,CompileFile,The length of the statement  "			var outputFile = Path.Combine(outputDirectory.FullName' Regex.Replace(inputFile.Name' inputFile.Extension + "$"' fileExtension' RegexOptions.IgnoreCase)); " is 154.
Complex Conditional,JurassicCoffee.Console,Option,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Magic Number,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                      delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this)              {                  int written = 0;                    Category c = p as Category;                  if (c != null)                  {                      WriteDescription(o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype(o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write(new string(' '' OptionWidth - written));                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    WriteDescription(o' p.Description' new string(' '' OptionWidth + 2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this)              {                  int written = 0;                    Category c = p as Category;                  if (c != null)                  {                      WriteDescription(o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype(o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write(new string(' '' OptionWidth - written));                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    WriteDescription(o' p.Description' new string(' '' OptionWidth + 2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this)              {                  int written = 0;                    Category c = p as Category;                  if (c != null)                  {                      WriteDescription(o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype(o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write(new string(' '' OptionWidth - written));                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    WriteDescription(o' p.Description' new string(' '' OptionWidth + 2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources)              {                  string[] names = s.GetNames();                  if (names == null || names.Length == 0)                      continue;                    int written = 0;                    Write(o' ref written' "  ");                  Write(o' ref written' names[0]);                  for (int i = 1; i < names.Length; ++i)                  {                      Write(o' ref written' "' ");                      Write(o' ref written' names[i]);                  }                    if (written < OptionWidth)                      o.Write(new string(' '' OptionWidth - written));                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    WriteDescription(o' s.Description' new string(' '' OptionWidth + 2)'                          Description_FirstWidth' Description_RemWidth);              }
Missing Default,JurassicCoffee.Console,OptionSet,C:\repos\creamdog_JurassicCoffee\Source\JurassicCoffee.Console\MonoOptions.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
