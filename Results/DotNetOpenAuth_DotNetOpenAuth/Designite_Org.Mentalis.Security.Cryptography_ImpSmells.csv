Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,Initialize,The method has 5 parameters.
Complex Conditional,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,Initialize,The conditional expression  "!p.isProbablePrime () || g <= 0 || g >= p || (x != null && (x <= 0 || x > p - 2))"  is complex.
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,DiffieHellmanManaged,The following statement contains a magic number: if (bitlen < 256 || l < 0)  	throw new ArgumentException ();  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,Initialize,The following statement contains a magic number: if (!p.isProbablePrime () || g <= 0 || g >= p || (x != null && (x <= 0 || x > p - 2)))  	throw new CryptographicException ();  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (keygen == DHKeyGeneration.Static) {  	if (bitlen == 768)  		p = new BigInteger (m_OAKLEY768);  	else if (bitlen == 1024)  		p = new BigInteger (m_OAKLEY1024);  	else if (bitlen == 1536)  		p = new BigInteger (m_OAKLEY1536);  	else  		throw new ArgumentException ("Invalid bit size.");  	g = new BigInteger (22);  	// all OAKLEY keys use 22 as generator  	//} else if (keygen == DHKeyGeneration.SophieGermain) {  	//	throw new NotSupportedException(); //TODO  	//} else if (keygen == DHKeyGeneration.DSA) {  	// 1. Let j = (p - 1)/q.  	// 2. Set h = any integer' where 1 < h < p - 1  	// 3. Set g = h^j mod p  	// 4. If g = 1 go to step 2  	//	BigInteger j = (p - 1) / q;  } else {  	// random  	p = BigInteger.genPseudoPrime (bitlen);  	g = new BigInteger (3);  	// always use 3 as a generator  }  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (keygen == DHKeyGeneration.Static) {  	if (bitlen == 768)  		p = new BigInteger (m_OAKLEY768);  	else if (bitlen == 1024)  		p = new BigInteger (m_OAKLEY1024);  	else if (bitlen == 1536)  		p = new BigInteger (m_OAKLEY1536);  	else  		throw new ArgumentException ("Invalid bit size.");  	g = new BigInteger (22);  	// all OAKLEY keys use 22 as generator  	//} else if (keygen == DHKeyGeneration.SophieGermain) {  	//	throw new NotSupportedException(); //TODO  	//} else if (keygen == DHKeyGeneration.DSA) {  	// 1. Let j = (p - 1)/q.  	// 2. Set h = any integer' where 1 < h < p - 1  	// 3. Set g = h^j mod p  	// 4. If g = 1 go to step 2  	//	BigInteger j = (p - 1) / q;  } else {  	// random  	p = BigInteger.genPseudoPrime (bitlen);  	g = new BigInteger (3);  	// always use 3 as a generator  }  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (keygen == DHKeyGeneration.Static) {  	if (bitlen == 768)  		p = new BigInteger (m_OAKLEY768);  	else if (bitlen == 1024)  		p = new BigInteger (m_OAKLEY1024);  	else if (bitlen == 1536)  		p = new BigInteger (m_OAKLEY1536);  	else  		throw new ArgumentException ("Invalid bit size.");  	g = new BigInteger (22);  	// all OAKLEY keys use 22 as generator  	//} else if (keygen == DHKeyGeneration.SophieGermain) {  	//	throw new NotSupportedException(); //TODO  	//} else if (keygen == DHKeyGeneration.DSA) {  	// 1. Let j = (p - 1)/q.  	// 2. Set h = any integer' where 1 < h < p - 1  	// 3. Set g = h^j mod p  	// 4. If g = 1 go to step 2  	//	BigInteger j = (p - 1) / q;  } else {  	// random  	p = BigInteger.genPseudoPrime (bitlen);  	g = new BigInteger (3);  	// always use 3 as a generator  }  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (keygen == DHKeyGeneration.Static) {  	if (bitlen == 768)  		p = new BigInteger (m_OAKLEY768);  	else if (bitlen == 1024)  		p = new BigInteger (m_OAKLEY1024);  	else if (bitlen == 1536)  		p = new BigInteger (m_OAKLEY1536);  	else  		throw new ArgumentException ("Invalid bit size.");  	g = new BigInteger (22);  	// all OAKLEY keys use 22 as generator  	//} else if (keygen == DHKeyGeneration.SophieGermain) {  	//	throw new NotSupportedException(); //TODO  	//} else if (keygen == DHKeyGeneration.DSA) {  	// 1. Let j = (p - 1)/q.  	// 2. Set h = any integer' where 1 < h < p - 1  	// 3. Set g = h^j mod p  	// 4. If g = 1 go to step 2  	//	BigInteger j = (p - 1) / q;  } else {  	// random  	p = BigInteger.genPseudoPrime (bitlen);  	g = new BigInteger (3);  	// always use 3 as a generator  }  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (keygen == DHKeyGeneration.Static) {  	if (bitlen == 768)  		p = new BigInteger (m_OAKLEY768);  	else if (bitlen == 1024)  		p = new BigInteger (m_OAKLEY1024);  	else if (bitlen == 1536)  		p = new BigInteger (m_OAKLEY1536);  	else  		throw new ArgumentException ("Invalid bit size.");  	g = new BigInteger (22);  	// all OAKLEY keys use 22 as generator  	//} else if (keygen == DHKeyGeneration.SophieGermain) {  	//	throw new NotSupportedException(); //TODO  	//} else if (keygen == DHKeyGeneration.DSA) {  	// 1. Let j = (p - 1)/q.  	// 2. Set h = any integer' where 1 < h < p - 1  	// 3. Set g = h^j mod p  	// 4. If g = 1 go to step 2  	//	BigInteger j = (p - 1) / q;  } else {  	// random  	p = BigInteger.genPseudoPrime (bitlen);  	g = new BigInteger (3);  	// always use 3 as a generator  }  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 768)  	p = new BigInteger (m_OAKLEY768);  else if (bitlen == 1024)  	p = new BigInteger (m_OAKLEY1024);  else if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 768)  	p = new BigInteger (m_OAKLEY768);  else if (bitlen == 1024)  	p = new BigInteger (m_OAKLEY1024);  else if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 768)  	p = new BigInteger (m_OAKLEY768);  else if (bitlen == 1024)  	p = new BigInteger (m_OAKLEY1024);  else if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 1024)  	p = new BigInteger (m_OAKLEY1024);  else if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 1024)  	p = new BigInteger (m_OAKLEY1024);  else if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: if (bitlen == 1536)  	p = new BigInteger (m_OAKLEY1536);  else  	throw new ArgumentException ("Invalid bit size.");  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: g = new BigInteger (22);  
Magic Number,Org.Mentalis.Security.Cryptography,DiffieHellmanManaged,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Org.Mentalis.Security.Cryptography\DiffieHellmanManaged.cs,GenerateKey,The following statement contains a magic number: g = new BigInteger (3);  
