Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,OpenIdWebRingSsoProvider.Code,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\Util.cs,ProcessAuthenticationChallengeAsync,Cyclomatic complexity of the method is 12
Long Parameter List,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,CreateUser,The method has 8 parameters.
Long Statement,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,Initialize,The length of the statement  "	string fullyQualifiedPath = VirtualPathUtility.Combine (VirtualPathUtility.AppendTrailingSlash (HttpRuntime.AppDomainAppVirtualPath)' path); " is 140.
Long Statement,OpenIdWebRingSsoProvider.Code,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\Util.cs,BuildIdentityUrl,The length of the statement  "	return new Uri (HttpContext.Current.Request.Url' HttpContext.Current.Response.ApplyAppPathModifier ("~/user.aspx/" + username)); " is 128.
Long Statement,OpenIdWebRingSsoProvider.Code,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\Util.cs,ProcessAuthenticationChallengeAsync,The length of the statement  "	if (await idrequest.IsReturnUrlDiscoverableAsync (providerEndpoint.Provider.Channel.HostFactories' cancellationToken) != RelyingPartyDiscoveryResult.Success) { " is 159.
Long Statement,OpenIdWebRingSsoProvider,_Default,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Default.aspx.cs,Page_Load,The length of the statement  "			await Util.ProcessAuthenticationChallengeAsync (ProviderEndpoint.PendingAuthenticationRequest' Response.ClientDisconnectedToken); " is 129.
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  	if (this.users == null) {  		this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  		XmlDocument doc = new XmlDocument ();  		doc.Load (this.xmlFileName);  		XmlNodeList nodes = doc.GetElementsByTagName ("User");  		foreach (XmlNode node in nodes) {  			MembershipUser user = new MembershipUser (Name' // Provider name  			node ["UserName"].InnerText' // Username  			null' // providerUserKey  			null' // Email  			string.Empty' // passwordQuestion  			node ["Password"].InnerText' // Comment  			true' // isApproved  			false' // isLockedOut  			DateTime.Now' // creationDate  			DateTime.Now' // lastLoginDate  			DateTime.Now' // lastActivityDate  			DateTime.Now' // lastPasswordChangedDate  			new DateTime (1980' 1' 1));  			// lastLockoutDate  			this.users.Add (user.UserName' user);  		}  	}  }  
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  	if (this.users == null) {  		this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  		XmlDocument doc = new XmlDocument ();  		doc.Load (this.xmlFileName);  		XmlNodeList nodes = doc.GetElementsByTagName ("User");  		foreach (XmlNode node in nodes) {  			MembershipUser user = new MembershipUser (Name' // Provider name  			node ["UserName"].InnerText' // Username  			null' // providerUserKey  			null' // Email  			string.Empty' // passwordQuestion  			node ["Password"].InnerText' // Comment  			true' // isApproved  			false' // isLockedOut  			DateTime.Now' // creationDate  			DateTime.Now' // lastLoginDate  			DateTime.Now' // lastActivityDate  			DateTime.Now' // lastPasswordChangedDate  			new DateTime (1980' 1' 1));  			// lastLockoutDate  			this.users.Add (user.UserName' user);  		}  	}  }  
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: if (this.users == null) {  	this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  	XmlDocument doc = new XmlDocument ();  	doc.Load (this.xmlFileName);  	XmlNodeList nodes = doc.GetElementsByTagName ("User");  	foreach (XmlNode node in nodes) {  		MembershipUser user = new MembershipUser (Name' // Provider name  		node ["UserName"].InnerText' // Username  		null' // providerUserKey  		null' // Email  		string.Empty' // passwordQuestion  		node ["Password"].InnerText' // Comment  		true' // isApproved  		false' // isLockedOut  		DateTime.Now' // creationDate  		DateTime.Now' // lastLoginDate  		DateTime.Now' // lastActivityDate  		DateTime.Now' // lastPasswordChangedDate  		new DateTime (1980' 1' 1));  		// lastLockoutDate  		this.users.Add (user.UserName' user);  	}  }  
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: if (this.users == null) {  	this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  	XmlDocument doc = new XmlDocument ();  	doc.Load (this.xmlFileName);  	XmlNodeList nodes = doc.GetElementsByTagName ("User");  	foreach (XmlNode node in nodes) {  		MembershipUser user = new MembershipUser (Name' // Provider name  		node ["UserName"].InnerText' // Username  		null' // providerUserKey  		null' // Email  		string.Empty' // passwordQuestion  		node ["Password"].InnerText' // Comment  		true' // isApproved  		false' // isLockedOut  		DateTime.Now' // creationDate  		DateTime.Now' // lastLoginDate  		DateTime.Now' // lastActivityDate  		DateTime.Now' // lastPasswordChangedDate  		new DateTime (1980' 1' 1));  		// lastLockoutDate  		this.users.Add (user.UserName' user);  	}  }  
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  
Magic Number,OpenIdWebRingSsoProvider.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdWebRingSsoProvider\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	MembershipUser user = new MembershipUser (Name' // Provider name  	node ["UserName"].InnerText' // Username  	null' // providerUserKey  	null' // Email  	string.Empty' // passwordQuestion  	node ["Password"].InnerText' // Comment  	true' // isApproved  	false' // isLockedOut  	DateTime.Now' // creationDate  	DateTime.Now' // lastLoginDate  	DateTime.Now' // lastActivityDate  	DateTime.Now' // lastPasswordChangedDate  	new DateTime (1980' 1' 1));  	// lastLockoutDate  	this.users.Add (user.UserName' user);  }  
