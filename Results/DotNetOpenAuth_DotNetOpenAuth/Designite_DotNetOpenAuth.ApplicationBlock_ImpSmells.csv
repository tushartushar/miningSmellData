Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,PostBlogEntryAsync,The method has 5 parameters. Parameters: accessToken' blogUrl' title' body' cancellationToken
Long Identifier,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,,The length of the parameter SignInWithTwitterServiceDescription is 35.
Long Identifier,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,,The length of the parameter GetFriendTimelineStatusEndpoint is 31.
Long Identifier,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,,The length of the parameter UpdateProfileBackgroundImageEndpoint is 36.
Long Identifier,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,,The length of the parameter DefaultYubicoAuthorizationServer is 32.
Long Statement,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,GetContactsAsync,The length of the statement  "				request.Headers.UserAgent.Add(ProductInfoHeaderValue.Parse("Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML' like Gecko) Chrome/10.0.648.151 Safari/534.16")); " is 184.
Long Statement,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,PostBlogEntryAsync,The length of the statement  "				new XElement(XName.Get("category"' Atom)' new XAttribute("scheme"' "http://www.blogger.com/atom/ns#")' new XAttribute("term"' "oauthdemo"))); " is 141.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,CreateConsumer,The length of the statement  "				ITemporaryCredentialStorage storage = forWeb ? (ITemporaryCredentialStorage)new CookieTemporaryCredentialStorage() : new MemoryTemporaryCredentialStorage(); " is 156.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,CreateConsumer,The length of the statement  "				throw new InvalidOperationException("No Twitter OAuth consumer key and secret could be found in web.config AppSettings."); " is 122.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,TryFinishSignInWithTwitterAsync,The length of the statement  "			var response = await consumer.ProcessUserAuthorizationAsync(completeUrl ?? HttpContext.Current.Request.Url' cancellationToken: cancellationToken); " is 146.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,UpdateProfileBackgroundImageAsync,The length of the statement  "			imageAttachment.Headers.ContentType = new MediaTypeHeaderValue("image/" + Path.GetExtension(image).Substring(1).ToLowerInvariant()); " is 132.
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: try  			{  				// This is the encoded JWT token split into the 3 parts  				string[] strparts = token.Split('.');    				// Decparts has the header and claims section decoded from JWT  				string jwtHeader' jwtClaims;  				string jwtb64Header' jwtb64Claims' jwtb64Sig;  				byte[] jwtSig;  				if (strparts.Length != 3)  				{  					return null;  				}  				jwtb64Header = strparts[0];  				jwtb64Claims = strparts[1];  				jwtb64Sig = strparts[2];  				jwtHeader = Base64URLdecode(jwtb64Header);  				jwtClaims = Base64URLdecode(jwtb64Claims);  				jwtSig = Base64URLdecodebyte(jwtb64Sig);    				JavaScriptSerializer s1 = new JavaScriptSerializer();    				AzureADClaims claimsAD = s1.Deserialize<AzureADClaims>(jwtClaims);  				AzureADHeader headerAD = s1.Deserialize<AzureADHeader>(jwtHeader);    				return claimsAD;  			}  			catch (Exception)  			{  				return null;  			}
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: try  			{  				// This is the encoded JWT token split into the 3 parts  				string[] strparts = token.Split('.');    				// Decparts has the header and claims section decoded from JWT  				string jwtHeader' jwtClaims;  				string jwtb64Header' jwtb64Claims' jwtb64Sig;  				byte[] jwtSig;  				if (strparts.Length != 3)  				{  					return null;  				}  				jwtb64Header = strparts[0];  				jwtb64Claims = strparts[1];  				jwtb64Sig = strparts[2];  				jwtHeader = Base64URLdecode(jwtb64Header);  				jwtClaims = Base64URLdecode(jwtb64Claims);  				jwtSig = Base64URLdecodebyte(jwtb64Sig);    				JavaScriptSerializer s1 = new JavaScriptSerializer();    				AzureADClaims claimsAD = s1.Deserialize<AzureADClaims>(jwtClaims);  				AzureADHeader headerAD = s1.Deserialize<AzureADHeader>(jwtHeader);    				return claimsAD;  			}  			catch (Exception)  			{  				return null;  			}
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight(str.Length + ((4 - (str.Length % 4)) % 4)' '=');
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight(str.Length + ((4 - (str.Length % 4)) % 4)' '=');
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight(str.Length + ((4 - (str.Length % 4)) % 4)' '=');
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,GetIndividualFlags,The following statement contains a magic number: for (int i = 0; i < sizeof(long) * 8; i++) { // long is the type behind the largest enum  				// Select an individual application from the scopes.  				long individualFlagPosition = (long)Math.Pow(2' i);  				long individualFlag = flagsLong & individualFlagPosition;  				if (individualFlag == individualFlagPosition) {  					yield return individualFlag;  				}  			}
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,GetIndividualFlags,The following statement contains a magic number: for (int i = 0; i < sizeof(long) * 8; i++) { // long is the type behind the largest enum  				// Select an individual application from the scopes.  				long individualFlagPosition = (long)Math.Pow(2' i);  				long individualFlag = flagsLong & individualFlagPosition;  				if (individualFlag == individualFlagPosition) {  					yield return individualFlag;  				}  			}
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,CopyTo,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,CopyTo,The following statement contains a magic number: while ((readBytes = copyFrom.Read(buffer' 0' Math.Min(1024' maximumBytesToCopy))) > 0) {  				int writeBytes = Math.Min(maximumBytesToCopy' readBytes);  				copyTo.Write(buffer' 0' writeBytes);  				totalCopiedBytes += writeBytes;  				maximumBytesToCopy -= writeBytes;  			}
Magic Number,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,ExtractUsername,The following statement contains a magic number: return yubikeyToken.Substring(0' 12);
Magic Number,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,EnsureWellFormedToken,The following statement contains a magic number: if (yubikeyToken.Length <= 12) {  				throw new ArgumentException("Yubikey token has unexpected length.");  			}
