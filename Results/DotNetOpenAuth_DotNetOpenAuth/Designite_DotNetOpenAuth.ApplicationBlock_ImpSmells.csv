Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,PostBlogEntryAsync,Cyclomatic complexity of the method is 10
Complex Method,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,ParseResult,Cyclomatic complexity of the method is 10
Long Parameter List,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,PostBlogEntryAsync,The method has 5 parameters.
Long Statement,DotNetOpenAuth.ApplicationBlock,FacebookClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth2\Facebook\FacebookClient.cs,GetGraphAsync,The length of the statement  "		string fieldsStr = (fields == null) || (fields.Length == 0) ? FacebookGraph.Fields.Defaults : string.Join ("'"' fields); " is 120.
Long Statement,DotNetOpenAuth.ApplicationBlock,FacebookClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth2\Facebook\FacebookClient.cs,GetGraphAsync,The length of the statement  "		using (var response = await httpClient.GetAsync ("https://graph.Facebook.com/me?fields=" + fieldsStr' cancellationToken)) { " is 123.
Long Statement,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,GetContactsAsync,The length of the statement  "		request.Headers.UserAgent.Add (ProductInfoHeaderValue.Parse ("Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML' like Gecko) Chrome/10.0.648.151 Safari/534.16")); " is 186.
Long Statement,DotNetOpenAuth.ApplicationBlock,GoogleConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\GoogleConsumer.cs,PostBlogEntryAsync,The length of the statement  "	XElement entry = new XElement (XName.Get ("entry"' Atom)' new XElement (XName.Get ("title"' Atom)' new XAttribute ("type"' "text")' title)' new XElement (XName.Get ("content"' Atom)' new XAttribute ("type"' "xhtml")' body)' new XElement (XName.Get ("category"' Atom)' new XAttribute ("scheme"' "http://www.blogger.com/atom/ns#")' new XAttribute ("term"' "oauthdemo"))); " is 369.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,CreateConsumer,The length of the statement  "		ITemporaryCredentialStorage storage = forWeb ? (ITemporaryCredentialStorage)new CookieTemporaryCredentialStorage () : new MemoryTemporaryCredentialStorage (); " is 158.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,CreateConsumer,The length of the statement  "		throw new InvalidOperationException ("No Twitter OAuth consumer key and secret could be found in web.config AppSettings."); " is 123.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,TryFinishSignInWithTwitterAsync,The length of the statement  "	var response = await consumer.ProcessUserAuthorizationAsync (completeUrl ?? HttpContext.Current.Request.Url' cancellationToken: cancellationToken); " is 147.
Long Statement,DotNetOpenAuth.ApplicationBlock,TwitterConsumer,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth1\TwitterConsumer.cs,UpdateProfileBackgroundImageAsync,The length of the statement  "	imageAttachment.Headers.ContentType = new MediaTypeHeaderValue ("image/" + Path.GetExtension (image).Substring (1).ToLowerInvariant ()); " is 136.
Long Statement,DotNetOpenAuth.ApplicationBlock,WindowsLiveClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\OAuth2\WindowsLive\WindowsLiveClient.cs,GetGraphAsync,The length of the statement  "				windowsLiveGraph.AvatarUrl = new Uri ("https://apis.live.net/v5.0/me/picture?access_token=" + Uri.EscapeDataString (authState.AccessToken)); " is 140.
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: try {  	// This is the encoded JWT token split into the 3 parts  	string[] strparts = token.Split ('.');  	// Decparts has the header and claims section decoded from JWT  	string jwtHeader' jwtClaims;  	string jwtb64Header' jwtb64Claims' jwtb64Sig;  	byte[] jwtSig;  	if (strparts.Length != 3) {  		return null;  	}  	jwtb64Header = strparts [0];  	jwtb64Claims = strparts [1];  	jwtb64Sig = strparts [2];  	jwtHeader = Base64URLdecode (jwtb64Header);  	jwtClaims = Base64URLdecode (jwtb64Claims);  	jwtSig = Base64URLdecodebyte (jwtb64Sig);  	JavaScriptSerializer s1 = new JavaScriptSerializer ();  	AzureADClaims claimsAD = s1.Deserialize<AzureADClaims> (jwtClaims);  	AzureADHeader headerAD = s1.Deserialize<AzureADHeader> (jwtHeader);  	return claimsAD;  } catch (Exception) {  	return null;  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: try {  	// This is the encoded JWT token split into the 3 parts  	string[] strparts = token.Split ('.');  	// Decparts has the header and claims section decoded from JWT  	string jwtHeader' jwtClaims;  	string jwtb64Header' jwtb64Claims' jwtb64Sig;  	byte[] jwtSig;  	if (strparts.Length != 3) {  		return null;  	}  	jwtb64Header = strparts [0];  	jwtb64Claims = strparts [1];  	jwtb64Sig = strparts [2];  	jwtHeader = Base64URLdecode (jwtb64Header);  	jwtClaims = Base64URLdecode (jwtb64Claims);  	jwtSig = Base64URLdecodebyte (jwtb64Sig);  	JavaScriptSerializer s1 = new JavaScriptSerializer ();  	AzureADClaims claimsAD = s1.Deserialize<AzureADClaims> (jwtClaims);  	AzureADHeader headerAD = s1.Deserialize<AzureADHeader> (jwtHeader);  	return claimsAD;  } catch (Exception) {  	return null;  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: if (strparts.Length != 3) {  	return null;  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,ParseAccessToken,The following statement contains a magic number: jwtb64Sig = strparts [2];  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight (str.Length + ((4 - (str.Length % 4)) % 4)' '=');  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight (str.Length + ((4 - (str.Length % 4)) % 4)' '=');  
Magic Number,DotNetOpenAuth.ApplicationBlock,AzureADClient,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\azureadclient.cs,Base64URLdecodebyte,The following statement contains a magic number: str = str.PadRight (str.Length + ((4 - (str.Length % 4)) % 4)' '=');  
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,GetIndividualFlags,The following statement contains a magic number: for (int i = 0; i < sizeof(long) * 8; i++) {  	// long is the type behind the largest enum  	// Select an individual application from the scopes.  	long individualFlagPosition = (long)Math.Pow (2' i);  	long individualFlag = flagsLong & individualFlagPosition;  	if (individualFlag == individualFlagPosition) {  		yield return individualFlag;  	}  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,GetIndividualFlags,The following statement contains a magic number: for (int i = 0; i < sizeof(long) * 8; i++) {  	// long is the type behind the largest enum  	// Select an individual application from the scopes.  	long individualFlagPosition = (long)Math.Pow (2' i);  	long individualFlag = flagsLong & individualFlagPosition;  	if (individualFlag == individualFlagPosition) {  		yield return individualFlag;  	}  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,Util,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\Util.cs,CopyTo,The following statement contains a magic number: while ((readBytes = copyFrom.Read (buffer' 0' Math.Min (1024' maximumBytesToCopy))) > 0) {  	int writeBytes = Math.Min (maximumBytesToCopy' readBytes);  	copyTo.Write (buffer' 0' writeBytes);  	totalCopiedBytes += writeBytes;  	maximumBytesToCopy -= writeBytes;  }  
Magic Number,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,ExtractUsername,The following statement contains a magic number: return yubikeyToken.Substring (0' 12);  
Magic Number,DotNetOpenAuth.ApplicationBlock,YubikeyRelyingParty,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\DotNetOpenAuth.ApplicationBlock\YubikeyRelyingParty.cs,EnsureWellFormedToken,The following statement contains a magic number: if (yubikeyToken.Length <= 12) {  	throw new ArgumentException ("Yubikey token has unexpected length.");  }  
