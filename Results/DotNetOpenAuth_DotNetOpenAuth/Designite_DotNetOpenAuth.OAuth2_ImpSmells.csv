Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DotNetOpenAuth.OAuth2,AccessToken,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\AccessToken.cs,CreateFormatter,The length of the statement  "	return new UriStyleMessageFormatter<AccessToken> (symmetricKeyStore' bucket: "AccessTokens"' signed: true' encrypted: true); " is 124.
Long Statement,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,SplitScopes,The length of the statement  "	var set = new HashSet<string> (scope.Split (scopeDelimiter' StringSplitOptions.RemoveEmptyEntries)' ScopeStringComparer); " is 121.
Long Statement,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,AuthorizeWithBearerToken,The length of the statement  "	ErrorUtilities.VerifyProtocol (accessToken.All (ch => accessTokenAuthorizationHeaderAllowedCharacters.IndexOf (ch) >= 0)' OAuthStrings.AccessTokenInvalidForHttpAuthorizationHeader); " is 181.
Long Statement,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,AuthorizeWithBearerToken,The length of the statement  "	ErrorUtilities.VerifyProtocol (accessToken.All (ch => accessTokenAuthorizationHeaderAllowedCharacters.IndexOf (ch) >= 0)' OAuthStrings.AccessTokenInvalidForHttpAuthorizationHeader); " is 181.
Long Statement,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,AuthorizeWithBearerToken,The length of the statement  "	requestHeaders [HttpRequestHeader.Authorization] = string.Format (CultureInfo.InvariantCulture' Protocol.BearerHttpAuthorizationHeaderFormat' accessToken); " is 155.
Long Statement,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,ParseHttpBasicAuth,The length of the statement  "	if (authorizationHeader != null && string.Equals (authorizationHeader.Scheme' HttpBasicAuthScheme' StringComparison.Ordinal)) { " is 127.
Long Statement,DotNetOpenAuth.OAuth2.Messages,UnauthorizedResponse,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\Messages\UnauthorizedResponse.cs,EnsureValidMessage,The length of the statement  "	VerifyErrorCodeOrDescription (this.ErrorDescription' Protocol.BearerTokenUnauthorizedResponseParameters.ErrorDescription); " is 122.
Long Statement,DotNetOpenAuth.OAuth2.Messages,UnauthorizedResponse,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\Messages\UnauthorizedResponse.cs,EnsureValidMessage,The length of the statement  "	ErrorUtilities.VerifyProtocol (this.ErrorCode != null || this.ErrorDescription != null || this.ErrorUri != null || this.Realm != null || this.Scope != null' OAuthStrings.BearerTokenUnauthorizedAtLeastOneParameterRequired); " is 222.
Long Statement,DotNetOpenAuth.OAuth2.Messages,UnauthorizedResponse,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\Messages\UnauthorizedResponse.cs,VerifyErrorUri,The length of the statement  "				ErrorUtilities.ThrowProtocol (OAuthStrings.ParameterContainsIllegalCharacters' Protocol.BearerTokenUnauthorizedResponseParameters.ErrorUri' ch); " is 144.
Complex Conditional,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,VerifyValidScopeToken,The conditional expression  "!(ch == '\x21' || (ch >= '\x23' && ch <= '\x5B') || (ch >= '\x5D' && ch <= '\x7E'))"  is complex.
Complex Conditional,DotNetOpenAuth.OAuth2.Messages,UnauthorizedResponse,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\Messages\UnauthorizedResponse.cs,VerifyErrorCodeOrDescription,The conditional expression  "!((ch >= '\x20' && ch <= '\x21') || (ch >= '\x23' && ch <= '\x5B') || (ch >= '\x5D' && ch <= '\x7E'))"  is complex.
Complex Conditional,DotNetOpenAuth.OAuth2.Messages,UnauthorizedResponse,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\Messages\UnauthorizedResponse.cs,VerifyErrorUri,The conditional expression  "!(ch == '\x21' || (ch >= '\x23' && ch <= '\x5B') || (ch >= '\x5D' && ch <= '\x7E'))"  is complex.
Magic Number,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,ParseHttpBasicAuth,The following statement contains a magic number: if (authorizationHeader != null && string.Equals (authorizationHeader.Scheme' HttpBasicAuthScheme' StringComparison.Ordinal)) {  	string base64 = authorizationHeader.Parameter;  	byte[] bits = Convert.FromBase64String (base64);  	string usernameColonPassword = HttpBasicEncoding.GetString (bits);  	string[] usernameAndPassword = usernameColonPassword.Split (ColonSeparator' 2);  	if (usernameAndPassword.Length == 2) {  		return new NetworkCredential (usernameAndPassword [0]' usernameAndPassword [1]);  	}  }  
Magic Number,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,ParseHttpBasicAuth,The following statement contains a magic number: if (authorizationHeader != null && string.Equals (authorizationHeader.Scheme' HttpBasicAuthScheme' StringComparison.Ordinal)) {  	string base64 = authorizationHeader.Parameter;  	byte[] bits = Convert.FromBase64String (base64);  	string usernameColonPassword = HttpBasicEncoding.GetString (bits);  	string[] usernameAndPassword = usernameColonPassword.Split (ColonSeparator' 2);  	if (usernameAndPassword.Length == 2) {  		return new NetworkCredential (usernameAndPassword [0]' usernameAndPassword [1]);  	}  }  
Magic Number,DotNetOpenAuth.OAuth2,OAuthUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.OAuth2\OAuth2\OAuthUtilities.cs,ParseHttpBasicAuth,The following statement contains a magic number: if (usernameAndPassword.Length == 2) {  	return new NetworkCredential (usernameAndPassword [0]' usernameAndPassword [1]);  }  
