Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,Cyclomatic complexity of the method is 18
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,DeleteNode,The length of the statement  "	ConsoleApplication.WriteMessage (LogLevel.Info' string.Format (CultureInfo.InvariantCulture' "Comments are not found for topic:{0}"' key)); " is 139.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "	foreach (XPathNavigator inheritDocNodeNavigator in this.sourceDocument.CreateNavigator ().Select (inheritDocExpression)) { " is 122.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "				// no <inheritdoc /> nodes were found' so continue with next iteration. Otherwise inherit from interface implementation types. " is 126.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "				XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationExpression); " is 130.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "				// constructors do not have override member information in reflection files' so search all the base types for a matching signature. " is 131.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "						string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#')); " is 146.
Long Statement,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The length of the statement  "					XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression); " is 136.
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: foreach (XPathNavigator inheritDocNodeNavigator in this.sourceDocument.CreateNavigator ().Select (inheritDocExpression)) {  	inheritDocNodeNavigator.MoveToParent ();  	XPathNodeIterator iterator = (XPathNodeIterator)inheritDocNodeNavigator.CreateNavigator ().Evaluate (tagsExpression);  	// do not inherit the comments if the tags specified in tagsExpression are already present.  	if (iterator.Count != 0) {  		inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  		inheritDocNodeNavigator.DeleteSelf ();  		continue;  	}  	inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  	// Inherit from the specified API [id=cref].  	string cref = inheritDocNodeNavigator.GetAttribute ("cref"' string.Empty);  	if (!string.IsNullOrEmpty (cref)) {  		XPathNavigator contentNodeNavigator = this.index.GetContent (cref);  		// if no comments were found for the specified api' delete the <inheritdoc /> node'  		// otherwise update the <inheritdoc /> node with the comments from the specified api.  		if (contentNodeNavigator == null) {  			DeleteNode (inheritDocNodeNavigator' cref);  		} else {  			this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  			if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count != 0) {  				this.InheritDocumentation (cref);  			}  		}  	} else {  		XPathNavigator reflectionNodeNavigator = this.reflectionIndex.GetContent (key);  		// no reflection information was found for the api' so delete <inheritdoc /> node.  		if (reflectionNodeNavigator == null) {  			DeleteNode (inheritDocNodeNavigator' key);  			continue;  		}  		string group = (string)reflectionNodeNavigator.Evaluate (apiGroupExpression);  		string subgroup = (string)reflectionNodeNavigator.Evaluate (apiSubgroupExpression);  		if (group == "type") {  			// Inherit from base types  			XPathNodeIterator typeNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (typeExpression);  			this.GetComments (typeNodeIterator' inheritDocNodeNavigator);  			// no <inheritdoc /> nodes were found' so continue with next iteration. Otherwise inherit from interface implementation types.  			if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  				continue;  			}  			// Inherit from interface implementation types  			XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationExpression);  			this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  		} else if (group == "member") {  			// constructors do not have override member information in reflection files' so search all the base types for a matching signature.  			if (subgroup == "constructor") {  				string name = (string)reflectionNodeNavigator.Evaluate (apiNameExpression);  				string typeApi = (string)reflectionNodeNavigator.Evaluate (containerTypeExpression);  				// no container type api was found' so delete <inheritdoc /> node.  				if (string.IsNullOrEmpty (typeApi)) {  					DeleteNode (inheritDocNodeNavigator' key);  					continue;  				}  				reflectionNodeNavigator = this.reflectionIndex.GetContent (typeApi);  				// no reflection information for container type api was found' so delete <inheritdoc /> node.  				if (reflectionNodeNavigator == null) {  					DeleteNode (inheritDocNodeNavigator' key);  					continue;  				}  				XPathNodeIterator containerIterator = reflectionNodeNavigator.Select (typeExpression);  				foreach (XPathNavigator containerNavigator in containerIterator) {  					string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  					XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  					if (contentNodeNavigator == null) {  						continue;  					}  					this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  					if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  						break;  					} else {  						inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  					}  				}  			} else {  				// Inherit from override members.  				XPathNodeIterator memberNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (overrideMemberExpression);  				this.GetComments (memberNodeIterator' inheritDocNodeNavigator);  				if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  					continue;  				}  				// Inherit from interface implementations members.  				XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression);  				this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  			}  		}  		// no comments were found' so delete <iheritdoc /> node.  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count != 0) {  			DeleteNode (inheritDocNodeNavigator' key);  		}  	}  }  
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: if (!string.IsNullOrEmpty (cref)) {  	XPathNavigator contentNodeNavigator = this.index.GetContent (cref);  	// if no comments were found for the specified api' delete the <inheritdoc /> node'  	// otherwise update the <inheritdoc /> node with the comments from the specified api.  	if (contentNodeNavigator == null) {  		DeleteNode (inheritDocNodeNavigator' cref);  	} else {  		this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count != 0) {  			this.InheritDocumentation (cref);  		}  	}  } else {  	XPathNavigator reflectionNodeNavigator = this.reflectionIndex.GetContent (key);  	// no reflection information was found for the api' so delete <inheritdoc /> node.  	if (reflectionNodeNavigator == null) {  		DeleteNode (inheritDocNodeNavigator' key);  		continue;  	}  	string group = (string)reflectionNodeNavigator.Evaluate (apiGroupExpression);  	string subgroup = (string)reflectionNodeNavigator.Evaluate (apiSubgroupExpression);  	if (group == "type") {  		// Inherit from base types  		XPathNodeIterator typeNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (typeExpression);  		this.GetComments (typeNodeIterator' inheritDocNodeNavigator);  		// no <inheritdoc /> nodes were found' so continue with next iteration. Otherwise inherit from interface implementation types.  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  			continue;  		}  		// Inherit from interface implementation types  		XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationExpression);  		this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  	} else if (group == "member") {  		// constructors do not have override member information in reflection files' so search all the base types for a matching signature.  		if (subgroup == "constructor") {  			string name = (string)reflectionNodeNavigator.Evaluate (apiNameExpression);  			string typeApi = (string)reflectionNodeNavigator.Evaluate (containerTypeExpression);  			// no container type api was found' so delete <inheritdoc /> node.  			if (string.IsNullOrEmpty (typeApi)) {  				DeleteNode (inheritDocNodeNavigator' key);  				continue;  			}  			reflectionNodeNavigator = this.reflectionIndex.GetContent (typeApi);  			// no reflection information for container type api was found' so delete <inheritdoc /> node.  			if (reflectionNodeNavigator == null) {  				DeleteNode (inheritDocNodeNavigator' key);  				continue;  			}  			XPathNodeIterator containerIterator = reflectionNodeNavigator.Select (typeExpression);  			foreach (XPathNavigator containerNavigator in containerIterator) {  				string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  				XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  				if (contentNodeNavigator == null) {  					continue;  				}  				this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  				if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  					break;  				} else {  					inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  				}  			}  		} else {  			// Inherit from override members.  			XPathNodeIterator memberNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (overrideMemberExpression);  			this.GetComments (memberNodeIterator' inheritDocNodeNavigator);  			if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  				continue;  			}  			// Inherit from interface implementations members.  			XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression);  			this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  		}  	}  	// no comments were found' so delete <iheritdoc /> node.  	if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count != 0) {  		DeleteNode (inheritDocNodeNavigator' key);  	}  }  
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: if (group == "type") {  	// Inherit from base types  	XPathNodeIterator typeNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (typeExpression);  	this.GetComments (typeNodeIterator' inheritDocNodeNavigator);  	// no <inheritdoc /> nodes were found' so continue with next iteration. Otherwise inherit from interface implementation types.  	if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  		continue;  	}  	// Inherit from interface implementation types  	XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationExpression);  	this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  } else if (group == "member") {  	// constructors do not have override member information in reflection files' so search all the base types for a matching signature.  	if (subgroup == "constructor") {  		string name = (string)reflectionNodeNavigator.Evaluate (apiNameExpression);  		string typeApi = (string)reflectionNodeNavigator.Evaluate (containerTypeExpression);  		// no container type api was found' so delete <inheritdoc /> node.  		if (string.IsNullOrEmpty (typeApi)) {  			DeleteNode (inheritDocNodeNavigator' key);  			continue;  		}  		reflectionNodeNavigator = this.reflectionIndex.GetContent (typeApi);  		// no reflection information for container type api was found' so delete <inheritdoc /> node.  		if (reflectionNodeNavigator == null) {  			DeleteNode (inheritDocNodeNavigator' key);  			continue;  		}  		XPathNodeIterator containerIterator = reflectionNodeNavigator.Select (typeExpression);  		foreach (XPathNavigator containerNavigator in containerIterator) {  			string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  			XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  			if (contentNodeNavigator == null) {  				continue;  			}  			this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  			if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  				break;  			} else {  				inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  			}  		}  	} else {  		// Inherit from override members.  		XPathNodeIterator memberNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (overrideMemberExpression);  		this.GetComments (memberNodeIterator' inheritDocNodeNavigator);  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  			continue;  		}  		// Inherit from interface implementations members.  		XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression);  		this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  	}  }  
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: if (group == "member") {  	// constructors do not have override member information in reflection files' so search all the base types for a matching signature.  	if (subgroup == "constructor") {  		string name = (string)reflectionNodeNavigator.Evaluate (apiNameExpression);  		string typeApi = (string)reflectionNodeNavigator.Evaluate (containerTypeExpression);  		// no container type api was found' so delete <inheritdoc /> node.  		if (string.IsNullOrEmpty (typeApi)) {  			DeleteNode (inheritDocNodeNavigator' key);  			continue;  		}  		reflectionNodeNavigator = this.reflectionIndex.GetContent (typeApi);  		// no reflection information for container type api was found' so delete <inheritdoc /> node.  		if (reflectionNodeNavigator == null) {  			DeleteNode (inheritDocNodeNavigator' key);  			continue;  		}  		XPathNodeIterator containerIterator = reflectionNodeNavigator.Select (typeExpression);  		foreach (XPathNavigator containerNavigator in containerIterator) {  			string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  			XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  			if (contentNodeNavigator == null) {  				continue;  			}  			this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  			if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  				break;  			} else {  				inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  			}  		}  	} else {  		// Inherit from override members.  		XPathNodeIterator memberNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (overrideMemberExpression);  		this.GetComments (memberNodeIterator' inheritDocNodeNavigator);  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  			continue;  		}  		// Inherit from interface implementations members.  		XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression);  		this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  	}  }  
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: if (subgroup == "constructor") {  	string name = (string)reflectionNodeNavigator.Evaluate (apiNameExpression);  	string typeApi = (string)reflectionNodeNavigator.Evaluate (containerTypeExpression);  	// no container type api was found' so delete <inheritdoc /> node.  	if (string.IsNullOrEmpty (typeApi)) {  		DeleteNode (inheritDocNodeNavigator' key);  		continue;  	}  	reflectionNodeNavigator = this.reflectionIndex.GetContent (typeApi);  	// no reflection information for container type api was found' so delete <inheritdoc /> node.  	if (reflectionNodeNavigator == null) {  		DeleteNode (inheritDocNodeNavigator' key);  		continue;  	}  	XPathNodeIterator containerIterator = reflectionNodeNavigator.Select (typeExpression);  	foreach (XPathNavigator containerNavigator in containerIterator) {  		string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  		XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  		if (contentNodeNavigator == null) {  			continue;  		}  		this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  		if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  			break;  		} else {  			inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  		}  	}  } else {  	// Inherit from override members.  	XPathNodeIterator memberNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (overrideMemberExpression);  	this.GetComments (memberNodeIterator' inheritDocNodeNavigator);  	if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  		continue;  	}  	// Inherit from interface implementations members.  	XPathNodeIterator interfaceNodeIterator = (XPathNodeIterator)reflectionNodeNavigator.Evaluate (interfaceImplementationMemberExpression);  	this.GetComments (interfaceNodeIterator' inheritDocNodeNavigator);  }  
Magic Number,Microsoft.Ddue.Tools,InheritDocumentationComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\CopyComponents\InheritDocumentationComponent.cs,InheritDocumentation,The following statement contains a magic number: foreach (XPathNavigator containerNavigator in containerIterator) {  	string constructorId = string.Format (CultureInfo.InvariantCulture' "M:{0}.{1}"' containerNavigator.Value.Substring (2)' name.Replace ('.'' '#'));  	XPathNavigator contentNodeNavigator = this.index.GetContent (constructorId);  	if (contentNodeNavigator == null) {  		continue;  	}  	this.UpdateNode (inheritDocNodeNavigator' contentNodeNavigator);  	if (this.sourceDocument.CreateNavigator ().Select (inheritDocExpression).Count == 0) {  		break;  	} else {  		inheritDocNodeNavigator.MoveTo (this.sourceDocument.CreateNavigator ().SelectSingleNode (inheritDocExpression));  	}  }  
