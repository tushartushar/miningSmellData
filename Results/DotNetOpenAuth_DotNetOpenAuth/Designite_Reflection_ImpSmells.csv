Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Ddue.Tools.Reflection,AllDocumentedFilter,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\AllDocumentedFilter.cs,IsExposedMember,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Ddue.Tools.Reflection,ExternalDocumentedFilter,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ExternalDocumentedFilter.cs,IsExposedMember,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Ddue.Tools.Reflection,OrcasNamer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\OrcasNamer.cs,WriteMethod,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateMember,Cyclomatic complexity of the method is 9
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAccessoryAssembly,The length of the statement  "            AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' null' false' false' false' false); // this causes non-classes to register as classes " is 143.
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAssembly,The length of the statement  "            //AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' cache); // this causes compact framework non-classes to register as classes " is 136.
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAssembly,The length of the statement  "            //AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' cache' false' false' true' false); // this causes missing mscorlib members " is 135.
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAssembly,The length of the statement  "            //AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' cache' false' false' false' false); // this causes non-classes to register as classes " is 146.
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAssembly,The length of the statement  "            //AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' null' false' false' true' false); // this causes missing mscorlib members " is 134.
Long Statement,Microsoft.Ddue.Tools.Reflection,ApiVisitor,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ApiVisitor.cs,LoadAssembly,The length of the statement  "            AssemblyNode assembly = AssemblyNode.GetAssembly(filePath' null' false' false' false' false); // this causes non-classes to register as classes " is 143.
Long Statement,Microsoft.Ddue.Tools.Reflection,AssemblyResolver,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\AssemblyResolver.cs,OnUnresolvedAssemblyReference,The length of the statement  "            if (UnresolvedAssemblyReference != null) UnresolvedAssemblyReference(this' new AssemblyReferenceEventArgs(reference' module)); " is 126.
Long Statement,Microsoft.Ddue.Tools.Reflection,ExternalDocumentedFilter,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ExternalDocumentedFilter.cs,IsExposedMember,The length of the statement  "            if (!member.IsVisibleOutsideAssembly && !(protectedSealedVisible && type.IsSealed && (member.IsFamily || member.IsFamilyOrAssembly))) " is 133.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateMember,The length of the statement  "            if (candidates.Count == 0) throw new InvalidOperationException("No members in the template had the name found in the specialization. This is not possible' but apparently it happened."); " is 185.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateMember,The length of the statement  "            throw new InvalidOperationException("No members in the template matched the parameters of the specialization. This is not possible."); " is 134.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateType,The length of the statement  "                Identifier name = new Identifier(String.Format("{0}`{1}"' type.GetUnmangledNameWithoutTypeParameters()' type.TemplateArguments.Count)); " is 135.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateType,The length of the statement  "                    if ((current.TemplateArguments != null) && (current.TemplateArguments.Count > count)) count = current.TemplateArguments.Count; " is 126.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,GetTemplateType,The length of the statement  "                    if ((current.TemplateParameters != null) && (current.TemplateParameters.Count > count)) count = current.TemplateParameters.Count; " is 129.
Long Statement,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,ParametersMatch,The length of the statement  "                if ((type1.NodeType == NodeType.Class) || (type1.NodeType == NodeType.Struct) || (type1.NodeType == NodeType.Interface) || " is 122.
Complex Conditional,Microsoft.Ddue.Tools.Reflection,ExternalDocumentedFilter,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\ExternalDocumentedFilter.cs,IsExposedMember,The conditional expression  "!member.IsVisibleOutsideAssembly && !(protectedSealedVisible && type.IsSealed && (member.IsFamily || member.IsFamilyOrAssembly))"  is complex.
Complex Conditional,Microsoft.Ddue.Tools.Reflection,ReflectionUtilities,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\Reflection.cs,ParametersMatch,The conditional expression  "(type1.NodeType == NodeType.Class) || (type1.NodeType == NodeType.Struct) || (type1.NodeType == NodeType.Interface) ||                      (type1.NodeType == NodeType.EnumNode) || (type1.NodeType == NodeType.DelegateNode)"  is complex.
Missing Default,Microsoft.Ddue.Tools.Reflection,OrcasNamer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\OrcasNamer.cs,GetMemberName,The following switch statement is missing a default case: switch (member.NodeType) {                      case NodeType.Field:                          writer.Write("F:");                          WriteField((Field)member' writer);                          break;                      case NodeType.Property:                          writer.Write("P:");                          WriteProperty((Property)member' writer);                          break;                      case NodeType.Method:                          writer.Write("M:");                          WriteMethod((Method)member' writer);                          break;                      case NodeType.InstanceInitializer:                          writer.Write("M:");                          WriteConstructor((InstanceInitializer)member' writer);                          break;                      case NodeType.StaticInitializer:                          writer.Write("M:");                          WriteStaticConstructor((StaticInitializer)member' writer);                          break;                      case NodeType.Event:                          writer.Write("E:");                          WriteEvent((Event)member' writer);                          break;                  }
Missing Default,Microsoft.Ddue.Tools.Reflection,OrcasNamer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\OrcasNamer.cs,GetName,The following switch statement is missing a default case: switch (entity.NodeType) {                      case NodeType.Namespace:                          writer.Write("N:");                          WriteNamespace(entity as Namespace' writer);                          break;                      case NodeType.Field:                          writer.Write("F:");                          WriteField(entity as Field' writer);                          break;                      case NodeType.Property:                          writer.Write("P:");                          WriteProperty(entity as Property' writer);                          break;                      case NodeType.Method:                          writer.Write("M:");                          WriteMethod(entity as Method' writer);                          break;                      case NodeType.InstanceInitializer:                          writer.Write("M:");                          WriteConstructor(entity as InstanceInitializer' writer);                          break;                      case NodeType.StaticInitializer:                          writer.Write("M:");                          WriteStaticConstructor(entity as StaticInitializer' writer);                          break;                      case NodeType.Event:                          writer.Write("E:");                          WriteEvent(entity as Event' writer);                          break;                  }
Missing Default,Microsoft.Ddue.Tools.Reflection,WhidbeyNamer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\WhidbeyNamer.cs,GetMemberName,The following switch statement is missing a default case: switch (member.NodeType) {                      case NodeType.Field:                          writer.Write("F:");                          WriteField((Field)member' writer);                          break;                      case NodeType.Property:                          writer.Write("P:");                          WriteProperty((Property)member' writer);                          break;                      case NodeType.Method:                          writer.Write("M:");                          WriteMethod((Method)member' writer);                          break;                      case NodeType.InstanceInitializer:                          writer.Write("M:");                          WriteConstructor((InstanceInitializer)member' writer);                          break;                      case NodeType.StaticInitializer:                          writer.Write("M:");                          WriteStaticConstructor((StaticInitializer)member' writer);                          break;                      case NodeType.Event:                          writer.Write("E:");                          WriteEvent((Event)member' writer);                          break;                  }
Missing Default,Microsoft.Ddue.Tools.Reflection,WhidbeyNamer,C:\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\Reflection\WhidbeyNamer.cs,GetName,The following switch statement is missing a default case: switch (entity.NodeType) {                      case NodeType.Namespace:                          writer.Write("N:");                          WriteNamespace(entity as Namespace' writer);                          break;                      case NodeType.Field:                          writer.Write("F:");                          WriteField(entity as Field' writer);                          break;                      case NodeType.Property:                          writer.Write("P:");                          WriteProperty(entity as Property' writer);                          break;                      case NodeType.Method:                          writer.Write("M:");                          WriteMethod(entity as Method' writer);                          break;                      case NodeType.InstanceInitializer:                          writer.Write("M:");                          WriteConstructor(entity as InstanceInitializer' writer);                          break;                      case NodeType.StaticInitializer:                          writer.Write("M:");                          WriteStaticConstructor(entity as StaticInitializer' writer);                          break;                      case NodeType.Event:                          writer.Write("E:");                          WriteEvent(entity as Event' writer);                          break;                  }
