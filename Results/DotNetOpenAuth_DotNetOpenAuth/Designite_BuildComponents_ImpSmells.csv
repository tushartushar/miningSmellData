Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,IntellisenseComponent2,The method has 101 lines of code.
Long Method,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The method has 124 lines of code.
Long Method,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Apply,The method has 187 lines of code.
Long Method,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyFromIndexComponent,The method has 134 lines of code.
Long Method,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The method has 122 lines of code.
Long Method,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The method has 129 lines of code.
Complex Method,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,IntellisenseComponent2,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,CopyContent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,MSHCComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\MSHCComponent.cs,MSHCComponent,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,MSHCComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\MSHCComponent.cs,Apply,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,ResolveReferenceLinksComponent2,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Apply,Cyclomatic complexity of the method is 55
Complex Method,Microsoft.Ddue.Tools,ReferenceLinkInfo2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Create,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Ddue.Tools,CopyFromFileComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromFileComponent.cs,CopyFromFileComponent,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyFromIndexComponent,Cyclomatic complexity of the method is 31
Complex Method,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,Apply,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Ddue.Tools,IndexedDocument,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,IndexedDocument,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,LoadContent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,Apply,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,ColorizeSnippet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,StripLeadingSpaces,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,CopyContent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,LiveExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\LiveExampleComponent.cs,Apply,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Ddue.Tools,LiveExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\LiveExampleComponent.cs,LoadApprovedFile,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,WriteApiPlatforms,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,ResolveArtLinksComponent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Ddue.Tools,ResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveConceptualLinksComponent.cs,ResolveConceptualLinksComponent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,ResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveConceptualLinksComponent.cs,ResolveConceptualLinks,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Ddue.Tools,SaveComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SaveComponent.cs,SaveComponent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,SaveComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SaveComponent.cs,Apply,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,SharedContentComponent,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,ResolveContent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,SnippetComponent,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,parseApprovalLogFiles,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,colorizeSnippet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,StripLeadingSpaces,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Ddue.Tools,SyntaxComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SyntaxComponent.cs,SyntaxComponent,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Ddue.Tools,XmlTargetCollectionUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,SeperateTypes,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteMemberTarget,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteReference,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteTemplateType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Ddue.Tools,TaskGrabberComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TaskGrabberComponent.cs,TaskGrabberComponent,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Ddue.Tools,TaskGrabberComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TaskGrabberComponent.cs,Apply,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Ddue.Tools,TransformComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TransformComponent.cs,TransformComponent,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,WdxResolveConceptualLinksComponent,Cyclomatic complexity of the method is 8
Complex Method,BuildComponents,TypeReference,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\References.cs,Create,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Ddue.Tools,IndexedDocumentCache,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,IndexedDocumentCache,The method has 5 parameters.
Long Parameter List,Microsoft.Ddue.Tools,CopyCommand,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyCommand,The method has 6 parameters.
Long Parameter List,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,WriteApiPlatforms,The method has 5 parameters.
Long Parameter List,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,AddTargets,The method has 7 parameters.
Long Parameter List,Microsoft.Ddue.Tools,SharedContentElement,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,SharedContentElement,The method has 5 parameters.
Long Parameter List,Microsoft.Ddue.Tools,SnippetCache,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,SnippetCache,The method has 5 parameters.
Long Parameter List,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,IndexedExample,The method has 5 parameters.
Long Identifier,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,TextReferenceUtilities,The length of the parameter simpleConstructorOverloadPattern is 32.
Long Statement,Microsoft.Ddue.Tools,HxfGeneratorComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\HxfGeneratorComponent.cs,WriteFile,The length of the statement  "			WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to copy the input HxF data. The error message is:"' ex.Message)); " is 156.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,ReadInputFile,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The input file '{0}' is not a well-formed XML file. The error message is: {1}"' file' e.Message)); " is 148.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,ReadInputFile,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An error occured while attempting to access the fileThe input file '{0}'. The error message is: {1}"' file' e.Message)); " is 170.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to create the intellisense output file '{0}'. The error message is: {1}"' name' e.Message)); " is 183.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to write intellisense data. The error message is: {0}"' e.Message)); " is 159.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("Intellisense data was not valid XML. The error message is: {0}"' e.Message)); " is 127.
Long Statement,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,AddTargets,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The reference targets file '{0}' is not valid. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 181.
Long Statement,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,AddTargets,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The reference targets file '{0}' is not well-formed XML. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 191.
Long Statement,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,AddTargets,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An access error occured while opening the reference targets file '{0}'. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 206.
Long Statement,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Apply,The length of the statement  "					href = BuildComponentUtilities.GetRelativePath (href' BuildComponentUtilities.EvalXPathExpr (document' baseUrl' "key"' key)); " is 125.
Long Statement,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,Apply,The length of the statement  "			WriteMessage (copy_command.MissingTarget' String.Format ("Target node '{0}' not found."' target_expression.Expression)); " is 120.
Long Statement,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,Apply,The length of the statement  "			WriteMessage (copy_command.MissingSource' String.Format ("Source node '{0}' not found."' source_expression.Expression)); " is 120.
Long Statement,Microsoft.Ddue.Tools,IndexedDocumentCache,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,AddDocument,The length of the statement  "			component.WriteHelperMessage (MessageLevel.Warn' String.Format ("Entries for the key '{0}' occur in both '{1}' and '{2}'. The last entry will be used."' key' index [key]' file)); " is 178.
Long Statement,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,LoadContent,The length of the statement  "			WriteMessage (MessageLevel.Warn' String.Format ("The contents of the snippet file '{0}' are not well-formed XML. The error message is: {1}. Some snippets may be lost."' file' e.Message)); " is 187.
Long Statement,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,LoadContent,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to read the snippet file '{0}'. The error message is: {1}"' file' e.Message)); " is 169.
Long Statement,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,ColorizeSnippet,The length of the statement  "					//Console.WriteLine("uncolored: {0} '{1}' -> {2} '{3}'"' index' regionText[index]' match.Index - 1' regionText[match.Index - 1]);  " is 129.
Long Statement,Microsoft.Ddue.Tools,ExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ExampleComponent.cs,ColorizeSnippet,The length of the statement  "				//Console.WriteLine("colored: {0} '{1}' -> {2} '{3}'"' match.Index' regionText[match.Index]' match.Index + match.Length - 1' regionText[match.Index + match.Length - 1]); " is 169.
Long Statement,Microsoft.Ddue.Tools,IndexedFileCache,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IndexedFileCache.cs,ParseDocument,The length of the statement  "				// WriteMessage(MessageLevel.Warn' String.Format("Entries for the key '{0}' occur in both '{1}' and '{2}'. The first entry will be used."' key' idToFileMap[key]' file)); " is 169.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,ReadInputFile,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The input file '{0}' is not a well-formed XML file. The error message is: {1}"' file' e.Message)); " is 148.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,ReadInputFile,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An error occured while attempting to access the fileThe input file '{0}'. The error message is: {1}"' file' e.Message)); " is 170.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to create the intellisense output file '{0}'. The error message is: {1}"' name' e.Message)); " is 183.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to write intellisense data. The error message is: {0}"' e.Message)); " is 159.
Long Statement,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("Intellisense data was not valid XML. The error message is: {0}"' e.Message)); " is 127.
Long Statement,Microsoft.Ddue.Tools,LiveExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\LiveExampleComponent.cs,Apply,The length of the statement  "		WriteMessage (MessageLevel.Info' string.Format ("*** codeReference={0}; approved={1}; type={2}"' node.Value' (si == null) ? false : si.IsApproved ("CS")' cref.Type)); " is 166.
Long Statement,Microsoft.Ddue.Tools,LiveExampleComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\LiveExampleComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Info' string.Format ("+ LiveCode: Kind={0}' SampleName={1}"' cref.Type.ToString ()' cref.ExamplePath)); " is 130.
Long Statement,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The length of the statement  "	// get the namespace and typename of the current type to locate the filter information that applies to the current topic " is 120.
Long Statement,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The length of the statement  "	// For filtering inherited members' the platform filters use the namespace and typename of the inheriting type' not the declaring type' " is 135.
Long Statement,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The length of the statement  "	if (topicdataGroup != "list" && topicdataSubgroup != "DerivedTypeList" && (apiGroup == "type" || apiGroup == "member") && versionFilters.Count > 0) { " is 149.
Long Statement,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The length of the statement  "	if ((topicdataGroup == "list" && topicdataSubgroup != "DerivedTypeList") && apiGroup != "root" && versionFilters.Count > 0) { " is 125.
Long Statement,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Warn' String.Format ("The file '{0}' for the art target '{1}' was not found."' target.InputPath' name)); " is 131.
Long Statement,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,Apply,The length of the statement  "				string src = BuildComponentUtilities.EvalXPathExpr (document' target.FormatXPath' "key"' Path.GetFileName (outputPath)); " is 120.
Long Statement,Microsoft.Ddue.Tools,ResolveArtLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveArtLinksComponent.cs,Apply,The length of the statement  "					src = BuildComponentUtilities.GetRelativePath (src' BuildComponentUtilities.EvalXPathExpr (document' target.RelativeToXPath' "key"' id)); " is 137.
Long Statement,Microsoft.Ddue.Tools,ResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveConceptualLinksComponent.cs,CompileXPathExpression,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("'{0}' is not a valid XPath expression. The error message is: {1}"' xpath' e.Message)); " is 136.
Long Statement,Microsoft.Ddue.Tools,ResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveConceptualLinksComponent.cs,CompileXPathExpression,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("'{0}' is not a valid XPath expression. The error message is: {1}"' xpath' e.Message)); " is 136.
Long Statement,Microsoft.Ddue.Tools,SaveComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SaveComponent.cs,Apply,The length of the statement  "			WriteMessage (MessageLevel.Error' String.Format ("An access error occured while attempting to save to the file '{0}'. The error message is: {1}"' path' BuildComponentUtilities.GetExceptionMessage (e))); " is 202.
Long Statement,Microsoft.Ddue.Tools,SaveComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SaveComponent.cs,Apply,The length of the statement  "			WriteMessage (MessageLevel.Error' String.Format ("Invalid XML was written to the output file '{0}'. The error message is: '{1}'"' path' BuildComponentUtilities.GetExceptionMessage (e))); " is 186.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,LoadContent,The length of the statement  "						WriteMessage (MessageLevel.Info' String.Format ("Overriding shared content item '{0}' with value in file '{1}'."' key' file)); " is 126.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,LoadContent,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The shared content file '{0}' could not be opened. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 185.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,LoadContent,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The shared content file '{0}' is not well-formed. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 184.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,LoadContent,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The shared content file '{0}' is not valid. The error message is: {1}"' file' BuildComponentUtilities.GetExceptionMessage (e))); " is 178.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,ResolveContent,The length of the statement  "					WriteMessage (MessageLevel.Warn' String.Format ("Missing shared content item. Tag:'{0}'; Id:'{1}'."' node.LocalName' item)); " is 124.
Long Statement,Microsoft.Ddue.Tools,SharedContentComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SharedContentComponent.cs,GetContent,The length of the statement  "			WriteMessage (MessageLevel.Error' String.Format ("The shared content item '{0}' could not be formatted with {1} parameters."' key' parameters.Length)); " is 151.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Warn' String.Format ("Snippet with identifier '{0}' was not found. The '{1}' example was not found in the examples directory."' identifier.ToString ()' identifier.Example)); " is 200.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The length of the statement  "					WriteMessage (MessageLevel.Warn' string.Format ("No Snippet with identifier '{0}' was found."' identifier.ToString ())); " is 120.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The length of the statement  "						WriteMessage (MessageLevel.Warn' string.Format ("The snippet with identifier '{0}' was omitted because it is not present in parsnip approval logs."' identifier.ToString ())); " is 174.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The length of the statement  "						WriteMessage (MessageLevel.Warn' string.Format ("No Snippet with identifier '{0}' was found."' identifier.ToString ())); " is 120.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,Apply,The length of the statement  "					WriteMessage (MessageLevel.Warn' string.Format ("The '{0}' snippet with identifier '{1}' was omitted because the {2}\\{0} unit did not pass Parsnip testing."' rejectedUnit' identifier.ToString ()' identifier.Example)); " is 218.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,loadExamples,The length of the statement  "					WriteMessage (MessageLevel.Warn' string.Format ("The example '{0}' under folder '{1}' already exists under '{2}'"' example.Name' example.FullName' path)); " is 154.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,loadExamples,The length of the statement  "		WriteMessage (MessageLevel.Error' string.Format (System.Threading.Thread.CurrentThread.CurrentCulture' "The loading of examples failed:{0}"' e.Message)); " is 153.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,parseApprovalLogFiles,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("The specified approval log file is not well-formed. The error message is: {0}"' e.Message)); " is 142.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,colorizeSnippet,The length of the statement  "					//Console.WriteLine("uncolored: {0} '{1}' -> {2} '{3}'"' index' regionText[index]' match.Index - 1' regionText[match.Index - 1]);  " is 129.
Long Statement,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,colorizeSnippet,The length of the statement  "				//Console.WriteLine("colored: {0} '{1}' -> {2} '{3}'"' match.Index' regionText[match.Index]' match.Index + match.Length - 1' regionText[match.Index + match.Length - 1]); " is 169.
Long Statement,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,ParseFile,The length of the statement  "	// NOTE: this is just preserving the way ExampleBuilder handled it (which we can change when we're confident there are no unwanted side-effects) " is 144.
Long Statement,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,parseSnippetContent,The length of the statement  "			// WriteMessage(MessageLevel.Warn' String.Format("Snippet '{0}' language '{1}' contains illegal characters."' identifier.ToString()' snippetLanguage.LanguageId)); " is 162.
Long Statement,Microsoft.Ddue.Tools,Test,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,Main,The length of the statement  "			resolver.WriteReference (reference' DisplayOptions.ShowContainer | DisplayOptions.ShowTemplates | DisplayOptions.ShowParameters' writer); " is 137.
Long Statement,Microsoft.Ddue.Tools,SpecializedTypeReference,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,GetSpecializationDictionary,The length of the statement  "	Dictionary<IndexedTemplateTypeReference' TypeReference> dictionary = new Dictionary<IndexedTemplateTypeReference' TypeReference> (); " is 132.
Long Statement,Microsoft.Ddue.Tools,XmlTargetCollectionUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateMethodTarget,The length of the statement  "	// this selects templates/template or templates/type' because extension methods can have a mix of generic and specialization " is 124.
Long Statement,Microsoft.Ddue.Tools,XmlTargetCollectionUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateExtensionMethodReference,The length of the statement  "	// this selects templates/template or templates/type' because extension methods can have a mix of generic and specialization " is 124.
Long Statement,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,FindMatchingEndBracket,The length of the statement  "		throw new ArgumentOutOfRangeException ("position"' String.Format ("The position {0} is not within the given text string."' position)); " is 134.
Long Statement,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,FindMatchingEndBracket,The length of the statement  "		throw new InvalidOperationException (String.Format ("Position {0} of the string '{1}' does not contain and ending curly bracket."' position' text)); " is 148.
Long Statement,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteTemplateType,The length of the statement  "                    Console.WriteLine("index = {0}' api = {1} ({3}) -> {2}"' it.Index' it.TemplateId' dictionary[it].GetType().FullName' it.GetHashCode());" is 135.
Long Statement,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteTemplateType,The length of the statement  "		//Console.WriteLine("index = {0}' api = {1} ({2})"' indexedTemplate.Index' indexedTemplate.TemplateId' indexedTemplate.GetHashCode()); " is 134.
Long Statement,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteTemplateType,The length of the statement  "			IndexedTemplateTypeReference key = new IndexedTemplateTypeReference (typeTemplate.TemplateType.Id' typeTemplate.Position); " is 122.
Long Statement,Microsoft.Ddue.Tools,LinkTextResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteSpecializedMember,The length of the statement  "	Dictionary<IndexedTemplateTypeReference' TypeReference> dictionary = member.SpecializedType.GetSpecializationDictionary (); " is 123.
Long Statement,Microsoft.Ddue.Tools,TaskGrabberComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TaskGrabberComponent.cs,Apply,The length of the statement  "					WriteMessage (MessageLevel.Warn' string.Format ("No file found for topicId '{0}' for B-keyword '{1}'. Source topic: '{2}'."' topicId' bkeyword' currentKey)); " is 157.
Long Statement,Microsoft.Ddue.Tools,TaskGrabberComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TaskGrabberComponent.cs,ParseDocument,The length of the statement  "				WriteMessage (MessageLevel.Warn' String.Format ("Entries for the key '{0}' occur in both '{1}' and '{2}'. The first entry will be used."' key' index [key]' file)); " is 163.
Long Statement,Microsoft.Ddue.Tools,TransformComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TransformComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Error' String.Format ("A error ocurred while executing the transform '{0}'' on line {1}' at position {2}. The error message was: {3}"' e.SourceUri' e.LineNumber' e.LinePosition' (e.InnerException == null) ? e.Message : e.InnerException.Message)); " is 273.
Long Statement,Microsoft.Ddue.Tools,TransformComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TransformComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Error' String.Format ("A error ocurred while executing the transform '{0}'' on line {1}' at position {2}. The error message was: {3}"' e.SourceUri' e.LineNumber' e.LinePosition' (e.InnerException == null) ? e.Message : e.InnerException.Message)); " is 273.
Long Statement,Microsoft.Ddue.Tools,TransformComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TransformComponent.cs,Apply,The length of the statement  "				WriteMessage (MessageLevel.Error' String.Format ("A error ocurred while executing the transform '{0}'' on line {1}' at position {2}. The error message was: {3}"' e.SourceUri' e.LineNumber' e.LinePosition' (e.InnerException == null) ? e.Message : e.InnerException.Message)); " is 273.
Long Statement,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,Apply,The length of the statement  "	XPathNavigator[] linkNodes = BuildComponentUtilities.ConvertNodeIteratorToArray (document.CreateNavigator ().Select (conceptualLinks)); " is 135.
Long Statement,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,Apply,The length of the statement  "					url = (docBaseUrl != null && t.TargetSet.RelativeUrl) ? BuildComponentUtilities.GetRelativePath (t.Url' docBaseUrl) : t.Url; " is 124.
Long Statement,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,Apply,The length of the statement  "					WriteMessage (MessageLevel.Warn' String.Format ("Conceptual link found in target set' but meta data does not specify a url; target={0}"' targetGuid)); " is 150.
Long Statement,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,CompileXPathExpression,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("'{0}' is not a valid XPath expression. The error message is: {1}"' xpath' e.Message)); " is 136.
Long Statement,Microsoft.Ddue.Tools,WdxResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\WdxResolveConceptualLinksComponent.cs,CompileXPathExpression,The length of the statement  "		WriteMessage (MessageLevel.Error' String.Format ("'{0}' is not a valid XPath expression. The error message is: {1}"' xpath' e.Message)); " is 136.
Complex Conditional,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The conditional expression  "!((id [0] == 'T') || (id [0] == 'M') || (id [0] == 'P') || (id [0] == 'F') || (id [0] == 'E') || (id [0] == 'N'))"  is complex.
Complex Conditional,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Apply,The conditional expression  "(target != null) && (key != null) && targets.Contains (key) && (target.File == targets [key].File)"  is complex.
Complex Conditional,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The conditional expression  "!((id [0] == 'T') || (id [0] == 'M') || (id [0] == 'P') || (id [0] == 'F') || (id [0] == 'E') || (id [0] == 'N'))"  is complex.
Complex Conditional,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The conditional expression  "topicdataGroup != "list" && topicdataSubgroup != "DerivedTypeList" && (apiGroup == "type" || apiGroup == "member") && versionFilters.Count > 0"  is complex.
Complex Conditional,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,Apply,The conditional expression  "(topicdataGroup == "list" && topicdataSubgroup != "DerivedTypeList") && apiGroup != "root" && versionFilters.Count > 0"  is complex.
Empty Catch Block,Microsoft.Ddue.Tools,MsdnResolver,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\MsdnResolver.cs,GetMsdnUrl,The method has an empty catch block.
Empty Catch Block,Microsoft.Ddue.Tools,CodeReference,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CodeReference.cs,Parse,The method has an empty catch block.
Empty Catch Block,Microsoft.Ddue.Tools,IndexedFileCache,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IndexedFileCache.cs,ParseDocument,The method has an empty catch block.
Magic Number,Microsoft.Ddue.Tools,IntellisenseComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent2.cs,Apply,The following statement contains a magic number: if (id.Length < 2)  	return;  
Magic Number,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyFromIndexComponent,The following statement contains a magic number: foreach (XPathNavigator index_node in index_nodes) {  	// get the name of the index  	string name = index_node.GetAttribute ("name"' String.Empty);  	if (String.IsNullOrEmpty (name))  		throw new ConfigurationErrorsException ("Each index must have a unique name.");  	// get the xpath for value nodes  	string value_xpath = index_node.GetAttribute ("value"' String.Empty);  	if (String.IsNullOrEmpty (value_xpath))  		WriteMessage (MessageLevel.Error' "Each index element must have a value attribute containing an XPath that describes index entries.");  	// get the xpath for keys (relative to value nodes)  	string key_xpath = index_node.GetAttribute ("key"' String.Empty);  	if (String.IsNullOrEmpty (key_xpath))  		WriteMessage (MessageLevel.Error' "Each index element must have a key attribute containing an XPath (relative to the value XPath) that evaluates to the entry key.");  	// get the cache size  	int cache = 10;  	string cache_value = index_node.GetAttribute ("cache"' String.Empty);  	if (!String.IsNullOrEmpty (cache_value))  		cache = Convert.ToInt32 (cache_value);  	// create the index  	IndexedDocumentCache index = new IndexedDocumentCache (this' key_xpath' value_xpath' context' cache);  	// search the data directories for entries  	XPathNodeIterator data_nodes = index_node.Select ("data");  	foreach (XPathNavigator data_node in data_nodes) {  		string base_value = data_node.GetAttribute ("base"' String.Empty);  		if (!String.IsNullOrEmpty (base_value))  			base_value = Environment.ExpandEnvironmentVariables (base_value);  		bool recurse = false;  		string recurse_value = data_node.GetAttribute ("recurse"' String.Empty);  		if (!String.IsNullOrEmpty (recurse_value))  			recurse = (bool)Convert.ToBoolean (recurse_value);  		// get the files				  		string files = data_node.GetAttribute ("files"' String.Empty);  		if (String.IsNullOrEmpty (files))  			WriteMessage (MessageLevel.Error' "Each data element must have a files attribute specifying which files to index.");  		// if ((files == null) || (files.Length == 0)) throw new ConfigurationErrorsException("When instantiating a CopyFromDirectory component' you must specify a directory path using the files attribute.");  		files = Environment.ExpandEnvironmentVariables (files);  		WriteMessage (MessageLevel.Info' String.Format ("Searching for files that match '{0}'."' files));  		index.AddDocuments (base_value' files' recurse);  	}  	WriteMessage (MessageLevel.Info' String.Format ("Indexed {0} elements in {1} files."' index.Count' index.DocumentCount));  	Data.Add (name' index);  }  
Magic Number,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyFromIndexComponent,The following statement contains a magic number: foreach (XPathNavigator component_node in component_nodes) {  	// get the data to load the component  	string assembly_path = component_node.GetAttribute ("assembly"' String.Empty);  	if (String.IsNullOrEmpty (assembly_path))  		WriteMessage (MessageLevel.Error' "Each component element must have an assembly attribute.");  	string type_name = component_node.GetAttribute ("type"' String.Empty);  	if (String.IsNullOrEmpty (type_name))  		WriteMessage (MessageLevel.Error' "Each component element must have a type attribute.");  	// expand environment variables in the path  	assembly_path = Environment.ExpandEnvironmentVariables (assembly_path);  	//Console.WriteLine("loading {0} from {1}"' type_name' assembly_path);  	try {  		Assembly assembly = Assembly.LoadFrom (assembly_path);  		CopyComponent component = (CopyComponent)assembly.CreateInstance (type_name' false' BindingFlags.Public | BindingFlags.Instance' null' new Object[2] {  			component_node.Clone ()'  			Data  		}' null' null);  		if (component == null) {  			WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' does not exist in the assembly '{1}'."' type_name' assembly_path));  		} else {  			components.Add (component);  		}  	} catch (IOException e) {  		WriteMessage (MessageLevel.Error' String.Format ("A file access error occured while attempting to load the build component '{0}'. The error message is: {1}"' assembly_path' e.Message));  	} catch (BadImageFormatException e) {  		WriteMessage (MessageLevel.Error' String.Format ("A syntax generator assembly '{0}' is invalid. The error message is: {1}."' assembly_path' e.Message));  	} catch (TypeLoadException e) {  		WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' does not exist in the assembly '{1}'. The error message is: {2}"' type_name' assembly_path' e.Message));  	} catch (MissingMethodException e) {  		WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' in the assembly '{1}' does not have an appropriate constructor. The error message is: {2}"' type_name' assembly_path' e.Message));  	} catch (TargetInvocationException e) {  		WriteMessage (MessageLevel.Error' String.Format ("An error occured while attempting to instantiate the type '{0}' in the assembly '{1}'. The error message is: {2}"' type_name' assembly_path' e.InnerException.Message));  	} catch (InvalidCastException) {  		WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' in the assembly '{1}' is not a SyntaxGenerator."' type_name' assembly_path));  	}  }  
Magic Number,Microsoft.Ddue.Tools,CopyFromIndexComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\CopyFromIndexComponent.cs,CopyFromIndexComponent,The following statement contains a magic number: try {  	Assembly assembly = Assembly.LoadFrom (assembly_path);  	CopyComponent component = (CopyComponent)assembly.CreateInstance (type_name' false' BindingFlags.Public | BindingFlags.Instance' null' new Object[2] {  		component_node.Clone ()'  		Data  	}' null' null);  	if (component == null) {  		WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' does not exist in the assembly '{1}'."' type_name' assembly_path));  	} else {  		components.Add (component);  	}  } catch (IOException e) {  	WriteMessage (MessageLevel.Error' String.Format ("A file access error occured while attempting to load the build component '{0}'. The error message is: {1}"' assembly_path' e.Message));  } catch (BadImageFormatException e) {  	WriteMessage (MessageLevel.Error' String.Format ("A syntax generator assembly '{0}' is invalid. The error message is: {1}."' assembly_path' e.Message));  } catch (TypeLoadException e) {  	WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' does not exist in the assembly '{1}'. The error message is: {2}"' type_name' assembly_path' e.Message));  } catch (MissingMethodException e) {  	WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' in the assembly '{1}' does not have an appropriate constructor. The error message is: {2}"' type_name' assembly_path' e.Message));  } catch (TargetInvocationException e) {  	WriteMessage (MessageLevel.Error' String.Format ("An error occured while attempting to instantiate the type '{0}' in the assembly '{1}'. The error message is: {2}"' type_name' assembly_path' e.InnerException.Message));  } catch (InvalidCastException) {  	WriteMessage (MessageLevel.Error' String.Format ("The type '{0}' in the assembly '{1}' is not a SyntaxGenerator."' type_name' assembly_path));  }  
Magic Number,Microsoft.Ddue.Tools,IntellisenseComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\IntellisenseComponent.cs,Apply,The following statement contains a magic number: if (id.Length < 2)  	return;  
Magic Number,Microsoft.Ddue.Tools,SnippetComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,SnippetComponent,The following statement contains a magic number: snippetCache = new SnippetCache (100' approvedSnippetIndex' languageMap' languages' excludedUnits);  
Magic Number,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,parseSnippetContent,The following statement contains a magic number: for (Match match = find.Match (text); match.Success; match = find.Match (text' match.Index + 10)) {  	string snippetIdentifier = match.Groups ["id"].Value;  	string snippetContent = match.Groups ["tx"].Value;  	snippetContent = clean.Replace (snippetContent' "\n");  	//if necessary' clean one more time to catch snippet comments on consecutive lines  	if (clean.Match (snippetContent).Success) {  		snippetContent = clean.Replace (snippetContent' "\n");  	}  	snippetContent = cleanAtStart.Replace (snippetContent' "");  	snippetContent = cleanAtEnd.Replace (snippetContent' "");  	// get the language/extension from our languages List' which may contain colorization rules for the language  	Language snippetLanguage = new Language (language' extension' null);  	foreach (Language lang in _languages) {  		if (!lang.IsMatch (language' extension))  			continue;  		snippetLanguage = lang;  		break;  	}  	SnippetIdentifier identifier = new SnippetIdentifier (example' snippetIdentifier);  	// BUGBUG: i don't think this ever happens' but if it did we should write an error  	if (!IsLegalXmlText (snippetContent)) {  		// WriteMessage(MessageLevel.Warn' String.Format("Snippet '{0}' language '{1}' contains illegal characters."' identifier.ToString()' snippetLanguage.LanguageId));  		continue;  	}  	snippetContent = StripLeadingSpaces (snippetContent);  	// Add the snippet information to dictionary  	Snippet snippet = new Snippet (snippetContent' snippetLanguage);  	List<Snippet> values;  	if (!this.exampleSnippets.TryGetValue (identifier' out values)) {  		values = new List<Snippet> ();  		this.exampleSnippets.Add (identifier' values);  	}  	values.Add (snippet);  }  
Magic Number,Microsoft.Ddue.Tools,IndexedExample,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SnippetComponent.cs,parseSnippetContent,The following statement contains a magic number: match = find.Match (text' match.Index + 10)
Magic Number,Microsoft.Ddue.Tools,ManagedSyntaxWriter,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\SyntaxComponent.cs,WriteReferenceLink,The following statement contains a magic number: position += 10;  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidSimpleType.IsMatch (api)) {  	// this is a reference to a "normal" simple type  	return (CreateSimpleTypeReference (api));  } else if (ValidSpecializedType.IsMatch (api)) {  	// this is a reference to a specialized type  	return (CreateSpecializedTypeReference (api));  } else if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidSimpleType.IsMatch (api)) {  	// this is a reference to a "normal" simple type  	return (CreateSimpleTypeReference (api));  } else if (ValidSpecializedType.IsMatch (api)) {  	// this is a reference to a specialized type  	return (CreateSpecializedTypeReference (api));  } else if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidSpecializedType.IsMatch (api)) {  	// this is a reference to a specialized type  	return (CreateSpecializedTypeReference (api));  } else if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidSpecializedType.IsMatch (api)) {  	// this is a reference to a specialized type  	return (CreateSpecializedTypeReference (api));  } else if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (ValidDecoratedType.IsMatch (api)) {  	// this is a reference to a type that is decorated or is a template  	// process array' reference' and pointer decorations  	char lastCharacter = api [api.Length - 1];  	if (lastCharacter == ']') {  		// arrays  		int lastBracketPosition = api.LastIndexOf ('[');  		int rank = api.Length - lastBracketPosition - 1;  		string elementApi = api.Substring (0' lastBracketPosition);  		TypeReference elementReference = CreateTypeReference (elementApi);  		return (new ArrayTypeReference (elementReference' rank));  	} else if (lastCharacter == '@') {  		// references  		string referedApi = api.Substring (0' api.Length - 1);  		TypeReference referedReference = CreateTypeReference (referedApi);  		return (new ReferenceTypeReference (referedReference));  	} else if (lastCharacter == '*') {  		// pointers  		string pointedApi = api.Substring (0' api.Length - 1);  		TypeReference pointedReference = CreateTypeReference (pointedApi);  		return (new PointerTypeReference (pointedReference));  	}  	// process templates  	if (api.StartsWith ("T:``")) {  		int position = Convert.ToInt32 (api.Substring (4));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UMP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	} else if (api.StartsWith ("T:`")) {  		int position = Convert.ToInt32 (api.Substring (3));  		if (genericTypeContext == null) {  			return (new NamedTemplateTypeReference ("UTP"));  		} else {  			return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  		}  	}  	// we shouldn't get here' because one of those test should have been satisfied if the regex matched  	throw new InvalidOperationException ("Could not parse valid type expression");  } else {  	return (null);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (api.StartsWith ("T:``")) {  	int position = Convert.ToInt32 (api.Substring (4));  	if (genericTypeContext == null) {  		return (new NamedTemplateTypeReference ("UMP"));  	} else {  		return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  	}  } else if (api.StartsWith ("T:`")) {  	int position = Convert.ToInt32 (api.Substring (3));  	if (genericTypeContext == null) {  		return (new NamedTemplateTypeReference ("UTP"));  	} else {  		return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  	}  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (api.StartsWith ("T:``")) {  	int position = Convert.ToInt32 (api.Substring (4));  	if (genericTypeContext == null) {  		return (new NamedTemplateTypeReference ("UMP"));  	} else {  		return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  	}  } else if (api.StartsWith ("T:`")) {  	int position = Convert.ToInt32 (api.Substring (3));  	if (genericTypeContext == null) {  		return (new NamedTemplateTypeReference ("UTP"));  	} else {  		return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  	}  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateTypeReference,The following statement contains a magic number: if (api.StartsWith ("T:`")) {  	int position = Convert.ToInt32 (api.Substring (3));  	if (genericTypeContext == null) {  		return (new NamedTemplateTypeReference ("UTP"));  	} else {  		return (new IndexedTemplateTypeReference (genericTypeContext.Id' position));  	}  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateMemberReference,The following statement contains a magic number: if (ValidSimpleMember.IsMatch (api)) {  	//Console.WriteLine("Is valid simple member");  	// this is just a normal member of a simple type  	return (new SimpleMemberReference (api));  } else if (ValidSpecializedMember.IsMatch (api)) {  	//Console.WriteLine("Is valid specialized member");  	//Console.WriteLine("cer = {0}"' api);  	// this is a member of a specialized type; we need to extract:  	// (1) the underlying specialized type' (2) the member name' (3) the arguments  	//Console.WriteLine("Extracting data");  	// seperate the member prefix  	int colonPosition = api.IndexOf (':');  	string prefix = api.Substring (0' colonPosition);  	string text = api.Substring (colonPosition + 1);  	// get the arguments  	string arguments = String.Empty;  	int startParenthesisPosition = text.IndexOf ('(');  	if (startParenthesisPosition > 0) {  		int endParenthesisPosition = text.LastIndexOf (')');  		arguments = text.Substring (startParenthesisPosition + 1' endParenthesisPosition - startParenthesisPosition - 1);  		text = text.Substring (0' startParenthesisPosition);  	}  	// seperate the type and member name  	int lastDotPosition;  	int firstHashPosition = text.IndexOf ('#');  	if (firstHashPosition > 0) {  		// if this is an EII' the boundry is at the last dot before the hash  		lastDotPosition = text.LastIndexOf ('.'' firstHashPosition);  	} else {  		// otherwise' the boundry is at the last dot  		lastDotPosition = text.LastIndexOf ('.');  	}  	string name = text.Substring (lastDotPosition + 1);  	text = text.Substring (0' lastDotPosition);  	//Console.WriteLine("type = {0}"' "T:" + text);  	// text now contains a specialized generic type; use it to create a reference  	SpecializedTypeReference type = CreateSpecializedTypeReference ("T:" + text);  	// If there are no arguments...  	// we simply create a reference to a member whoose identifier we construct in the specialized type  	if (String.IsNullOrEmpty (arguments)) {  		string typeId = type.Specializations [type.Specializations.Length - 1].TemplateType.Id;  		string memberId = String.Format ("{0}:{1}.{2}"' prefix' typeId.Substring (2)' name);  		SimpleMemberReference member = new SimpleMemberReference (memberId);  		return (new SpecializedMemberReference (member' type));  	}  	// If there are arguments... life is not so simple. We can't be sure we can identify the  	// corresponding member of the template type because any particular type that appears in  	// the argument might have come from the template or it might have come from the specialization.  	// We need to create a special kind of reference to handle this situation.  	//Console.WriteLine("Specialized member with arguments '{0}'"' api);  	string[] parameterTypeCers = SeperateTypes (arguments);  	TypeReference[] parameterTypes = new TypeReference[parameterTypeCers.Length];  	for (int i = 0; i < parameterTypeCers.Length; i++) {  		parameterTypes [i] = CreateTypeReference (parameterTypeCers [i]);  	}  	return (new SpecializedMemberWithParametersReference (prefix' type' name' parameterTypes));  } else {  	//Console.WriteLine("No match");  	return (null);  	//throw new InvalidOperationException(String.Format("Invalid member '{0}'"' api));  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateMemberReference,The following statement contains a magic number: if (ValidSpecializedMember.IsMatch (api)) {  	//Console.WriteLine("Is valid specialized member");  	//Console.WriteLine("cer = {0}"' api);  	// this is a member of a specialized type; we need to extract:  	// (1) the underlying specialized type' (2) the member name' (3) the arguments  	//Console.WriteLine("Extracting data");  	// seperate the member prefix  	int colonPosition = api.IndexOf (':');  	string prefix = api.Substring (0' colonPosition);  	string text = api.Substring (colonPosition + 1);  	// get the arguments  	string arguments = String.Empty;  	int startParenthesisPosition = text.IndexOf ('(');  	if (startParenthesisPosition > 0) {  		int endParenthesisPosition = text.LastIndexOf (')');  		arguments = text.Substring (startParenthesisPosition + 1' endParenthesisPosition - startParenthesisPosition - 1);  		text = text.Substring (0' startParenthesisPosition);  	}  	// seperate the type and member name  	int lastDotPosition;  	int firstHashPosition = text.IndexOf ('#');  	if (firstHashPosition > 0) {  		// if this is an EII' the boundry is at the last dot before the hash  		lastDotPosition = text.LastIndexOf ('.'' firstHashPosition);  	} else {  		// otherwise' the boundry is at the last dot  		lastDotPosition = text.LastIndexOf ('.');  	}  	string name = text.Substring (lastDotPosition + 1);  	text = text.Substring (0' lastDotPosition);  	//Console.WriteLine("type = {0}"' "T:" + text);  	// text now contains a specialized generic type; use it to create a reference  	SpecializedTypeReference type = CreateSpecializedTypeReference ("T:" + text);  	// If there are no arguments...  	// we simply create a reference to a member whoose identifier we construct in the specialized type  	if (String.IsNullOrEmpty (arguments)) {  		string typeId = type.Specializations [type.Specializations.Length - 1].TemplateType.Id;  		string memberId = String.Format ("{0}:{1}.{2}"' prefix' typeId.Substring (2)' name);  		SimpleMemberReference member = new SimpleMemberReference (memberId);  		return (new SpecializedMemberReference (member' type));  	}  	// If there are arguments... life is not so simple. We can't be sure we can identify the  	// corresponding member of the template type because any particular type that appears in  	// the argument might have come from the template or it might have come from the specialization.  	// We need to create a special kind of reference to handle this situation.  	//Console.WriteLine("Specialized member with arguments '{0}'"' api);  	string[] parameterTypeCers = SeperateTypes (arguments);  	TypeReference[] parameterTypes = new TypeReference[parameterTypeCers.Length];  	for (int i = 0; i < parameterTypeCers.Length; i++) {  		parameterTypes [i] = CreateTypeReference (parameterTypeCers [i]);  	}  	return (new SpecializedMemberWithParametersReference (prefix' type' name' parameterTypes));  } else {  	//Console.WriteLine("No match");  	return (null);  	//throw new InvalidOperationException(String.Format("Invalid member '{0}'"' api));  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,CreateMemberReference,The following statement contains a magic number: if (String.IsNullOrEmpty (arguments)) {  	string typeId = type.Specializations [type.Specializations.Length - 1].TemplateType.Id;  	string memberId = String.Format ("{0}:{1}.{2}"' prefix' typeId.Substring (2)' name);  	SimpleMemberReference member = new SimpleMemberReference (memberId);  	return (new SpecializedMemberReference (member' type));  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteNamespaceReference,The following statement contains a magic number: writer.WriteString (space.Id.Substring (2));  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteSimpleTypeReference,The following statement contains a magic number: if (lastDotPosition > 0) {  	// usually' the name will start after the last dot  	name = cer.Substring (lastDotPosition + 1);  } else {  	// but if there is no dot' this is a type in the default namespace and the name is everything after the colon  	name = cer.Substring (2);  }  
Magic Number,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,WriteSimpleTypeReference,The following statement contains a magic number: name = cer.Substring (2);  
Missing Default,Microsoft.Ddue.Tools,ResolveReferenceLinksComponent2,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveReferenceLinksComponent2.cs,Apply,The following switch statement is missing a default case: switch (type) {  case LinkType2.None:  	writer.WriteStartElement ("span");  	writer.WriteAttributeString ("class"' "nolink");  	break;  case LinkType2.Self:  	writer.WriteStartElement ("span");  	writer.WriteAttributeString ("class"' "selflink");  	break;  case LinkType2.Local:  	// format link with prefix and/or postfix  	string href = String.Format (hrefFormat' target.File);  	// make link relative' if we have a baseUrl  	if (baseUrl != null)  		href = BuildComponentUtilities.GetRelativePath (href' BuildComponentUtilities.EvalXPathExpr (document' baseUrl' "key"' key));  	writer.WriteStartElement ("a");  	writer.WriteAttributeString ("href"' href);  	break;  case LinkType2.Index:  	writer.WriteStartElement ("mshelp"' "link"' "http://msdn.microsoft.com/mshelp");  	writer.WriteAttributeString ("keywords"' targetId);  	writer.WriteAttributeString ("tabindex"' "0");  	break;  case LinkType2.Msdn:  	writer.WriteStartElement ("a");  	writer.WriteAttributeString ("href"' msdnUrl);  	writer.WriteAttributeString ("target"' linkTarget);  	break;  case LinkType2.Id:  	string xhelp = String.Format ("ms-xhelp://?Id={0}"' targetId);  	xhelp = xhelp.Replace ("#"' "%23");  	writer.WriteStartElement ("a");  	writer.WriteAttributeString ("href"' xhelp);  	break;  }  
Missing Default,Microsoft.Ddue.Tools,PlatformsComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\PlatformsComponent.cs,WriteApiPlatforms,The following switch statement is missing a default case: switch (apiGroup) {  case "type":  	included = filter.IsIncludedType (referenceNode' key' topicNamespaceName);  	break;  case "member":  	included = filter.IsIncludedMember (referenceNode' key' topicTypeName' topicNamespaceName);  	break;  }  
Missing Default,Microsoft.Ddue.Tools,ResolveConceptualLinksComponent,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\ResolveConceptualLinksComponent.cs,ResolveConceptualLinks,The following switch statement is missing a default case: switch (type) {  case LinkType.None:  	writer.WriteStartElement ("span");  	writer.WriteAttributeString ("class"' "nolink");  	break;  case LinkType.Local:  	writer.WriteStartElement ("a");  	writer.WriteAttributeString ("href"' url);  	break;  case LinkType.Index:  	writer.WriteStartElement ("mshelp"' "link"' "http://msdn.microsoft.com/mshelp");  	writer.WriteAttributeString ("keywords"' link.Target.ToLower ());  	writer.WriteAttributeString ("tabindex"' "0");  	break;  case LinkType.Id:  	string xhelp = String.Format ("ms-xhelp://?Id={0}"' link.Target);  	writer.WriteStartElement ("a");  	writer.WriteAttributeString ("href"' xhelp);  	break;  }  
Missing Default,Microsoft.Ddue.Tools,TextReferenceUtilities,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\TargetCollection.cs,SeperateTypes,The following switch statement is missing a default case: switch (typelist [index]) {  case '{':  case '[':  	specializationCount++;  	break;  case '}':  case ']':  	specializationCount--;  	break;  case ''':  	if (specializationCount == 0) {  		types.Add ("T:" + typelist.Substring (start' index - start).Trim ());  		start = index + 1;  	}  	break;  }  
Missing Default,BuildComponents,TypeReference,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\References.cs,Create,The following switch statement is missing a default case: switch (element.LocalName) {  case "type":  	// also handle specialization!  	return (SimpleTypeReference.Create (element));  case "referenceTo":  	return (ReferenceTypeReference.Create (element));  case "pointerTo":  	return (PointerTypeReference.Create (element));  case "arrayOf":  	return (ArrayTypeReference.Create (element));  }  
Missing Default,BuildComponents,Target,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\BuildAssembler\BuildComponents\Targets.cs,Create,The following switch statement is missing a default case: switch (group) {  case "namespace":  	target = NamespaceTarget.Create (api);  	break;  }  
