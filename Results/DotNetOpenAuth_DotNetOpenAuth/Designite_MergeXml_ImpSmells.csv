Implementation smell,Namespace,Class,File,Method,Description
Long Method,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The method has 137 lines of code.
Complex Method,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,Cyclomatic complexity of the method is 21
Long Statement,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The length of the statement  "            programOptions.Add(new StringOption("out"' "(String) Path to the file that the input files should be merged in to. Required.")); " is 128.
Long Statement,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The length of the statement  "            programOptions.Add(new StringOption("position"' "(String) The name of the element or elements to which the input elements will be appended. Required.")); " is 153.
Long Statement,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The length of the statement  "            programOptions.Add(new StringOption("include"' @"(String) An xpath expression indicating which elements from the source files should be introduced in to the output file. The default is '/'")); " is 192.
Long Statement,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The length of the statement  "                ConsoleApplication.WriteMessage(LogLevel.Error' "The specified output file' which the input files are to be merged in to' doesn't exist."); " is 139.
Long Statement,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The length of the statement  "                ConsoleApplication.WriteMessage(LogLevel.Error' "The xpath expression provided by the include switch' '" + xpath + "'' is invalid."); " is 133.
Missing Default,MergeXml,Program,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\tools\Sandcastle\Source\XmlCat\Program.cs,Main,The following switch statement is missing a default case: switch (source.NodeType)                          {                              case XmlNodeType.Element:                                  output.WriteStartElement(source.Prefix' source.LocalName' source.NamespaceURI);                                  output.WriteAttributes(source' true);                                  if (source.IsEmptyElement)                                  {                                      output.WriteEndElement();                                  }                                  if (String.Equals(source.Name' positionName' StringComparison.OrdinalIgnoreCase))                                  {                                      // start introducing the elements from the input files                                      foreach (string path in inputFiles)                                      {                                          XPathDocument inputDoc = new XPathDocument(path);                                          XPathNavigator inputNav = inputDoc.CreateNavigator();                                          XPathNodeIterator inputNodesIterator = inputNav.Select(includeExpression);                                          while (inputNodesIterator.MoveNext())                                          {                                              output.WriteNode(inputNodesIterator.Current' true);                                          }                                      }                                  }                                  break;                              case XmlNodeType.Text:                                  output.WriteString(source.Value);                                  break;                              case XmlNodeType.Whitespace:                              case XmlNodeType.SignificantWhitespace:                                  output.WriteWhitespace(source.Value);                                  break;                              case XmlNodeType.CDATA:                                  output.WriteCData(source.Value);                                  break;                              case XmlNodeType.EntityReference:                                  output.WriteEntityRef(source.Name);                                  break;                              case XmlNodeType.XmlDeclaration:                              case XmlNodeType.ProcessingInstruction:                                  output.WriteProcessingInstruction(source.Name' source.Value);                                  break;                              case XmlNodeType.DocumentType:                                  output.WriteDocType(source.Name' source.GetAttribute("PUBLIC")' source.GetAttribute("SYSTEM")' source.Value);                                  break;                              case XmlNodeType.Comment:                                  output.WriteComment(source.Value);                                  break;                              case XmlNodeType.EndElement:                                  output.WriteFullEndElement();                                  break;                          }
