Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,Cyclomatic complexity of the method is 11
Complex Method,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,Cyclomatic complexity of the method is 22
Complex Method,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,Cyclomatic complexity of the method is 15
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Parse,The following statement contains a magic number: for (; i < len; i++) {  	c = number [i];  	if (c == '\0') {  		i = len;  		continue;  	}  	if (c >= '0' && c <= '9') {  		val = val * 10 + (c - '0');  		digits_seen = true;  	} else {  		if (Char.IsWhiteSpace (c)) {  			for (i++; i < len; i++) {  				if (!Char.IsWhiteSpace (number [i]))  					throw new FormatException ();  			}  			break;  		} else  			throw new FormatException ();  	}  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Parse,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	val = val * 10 + (c - '0');  	digits_seen = true;  } else {  	if (Char.IsWhiteSpace (c)) {  		for (i++; i < len; i++) {  			if (!Char.IsWhiteSpace (number [i]))  				throw new FormatException ();  		}  		break;  	} else  		throw new FormatException ();  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Parse,The following statement contains a magic number: val = val * 10 + (c - '0');  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: length = (uint)inData.Length >> 2;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: for (int i = inData.Length - 1' j = 0; i >= 3; i -= 4' j++) {  	data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: i -= 4
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)((inData [i - 3] << (3 * 8)) | (inData [i - 2] << (2 * 8)) | (inData [i - 1] << (1 * 8)) | (inData [i - 0] << (0 * 8)));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint[2] {  	(uint)ul'  	(uint)(ul >> 32)  };  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint[2] {  	(uint)ul'  	(uint)(ul >> 32)  };  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following statement contains a magic number: length = 2;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,genRandom,The following statement contains a magic number: Buffer.BlockCopy (random' 0' ret.data' 0' (int)dwords << 2);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,genRandom,The following statement contains a magic number: if (remBits != 0) {  	uint mask = (uint)(0x01 << (remBits - 1));  	ret.data [dwords - 1] |= mask;  	mask = (uint)(0xFFFFFFFF >> (32 - remBits));  	ret.data [dwords - 1] &= mask;  } else  	ret.data [dwords - 1] |= 0x80000000;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,genRandom,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,randomize,The following statement contains a magic number: Buffer.BlockCopy (random' 0' data' 0' (int)dwords << 2);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,randomize,The following statement contains a magic number: if (remBits != 0) {  	uint mask = (uint)(0x01 << (remBits - 1));  	data [dwords - 1] |= mask;  	mask = (uint)(0xFFFFFFFF >> (32 - remBits));  	data [dwords - 1] &= mask;  } else  	data [dwords - 1] |= 0x80000000;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,randomize,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,bitCount,The following statement contains a magic number: bits += ((length - 1) << 5);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: if (numBytesInWord == 0)  	numBytesInWord = 4;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: numBytesInWord = 4;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: for (int i = (int)length - 1; i >= 0; i--) {  	uint val = data [i];  	for (int j = numBytesInWord - 1; j >= 0; j--) {  		result [pos + j] = (byte)(val & 0xFF);  		val >>= 8;  	}  	pos += numBytesInWord;  	numBytesInWord = 4;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: for (int i = (int)length - 1; i >= 0; i--) {  	uint val = data [i];  	for (int j = numBytesInWord - 1; j >= 0; j--) {  		result [pos + j] = (byte)(val & 0xFF);  		val >>= 8;  	}  	pos += numBytesInWord;  	numBytesInWord = 4;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: for (int j = numBytesInWord - 1; j >= 0; j--) {  	result [pos + j] = (byte)(val & 0xFF);  	val >>= 8;  }  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: val >>= 8;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,getBytes,The following statement contains a magic number: numBytesInWord = 4;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,ToString,The following statement contains a magic number: return ToString (10);  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Incr2,The following statement contains a magic number: data [0] += 2;  
Magic Number,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,Incr2,The following statement contains a magic number: if (data [0] < 2) {  	// Account for the first carry  	data [++i]++;  	// Keep adding until no carry  	while (data [i++] == 0x0)  		data [i]++;  	// See if we increased the data length  	if (length == (uint)i)  		length++;  }  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 100)  	Rounds = 27;  else if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 27;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 150)  	Rounds = 18;  else if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 18;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 200)  	Rounds = 15;  else if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 15;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 250)  	Rounds = 12;  else if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 12;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 300)  	Rounds = 9;  else if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 9;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 350)  	Rounds = 8;  else if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 8;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 400)  	Rounds = 7;  else if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 7;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 500)  	Rounds = 6;  else if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 6;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 600)  	Rounds = 5;  else if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 5;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 800)  	Rounds = 4;  else if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 4;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: if (bc <= 1250)  	Rounds = 3;  else  	Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 3;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) {  case ConfidenceFactor.ExtraLow:  	Rounds >>= 2;  	return Rounds != 0 ? Rounds : 1;  case ConfidenceFactor.Low:  	Rounds >>= 1;  	return Rounds != 0 ? Rounds : 1;  case ConfidenceFactor.Medium:  	return Rounds;  case ConfidenceFactor.High:  	return Rounds <<= 1;  case ConfidenceFactor.ExtraHigh:  	return Rounds <<= 2;  case ConfidenceFactor.Provable:  	throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable");  default:  	throw new ArgumentOutOfRangeException ("confidence");  }  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) {  case ConfidenceFactor.ExtraLow:  	Rounds >>= 2;  	return Rounds != 0 ? Rounds : 1;  case ConfidenceFactor.Low:  	Rounds >>= 1;  	return Rounds != 0 ? Rounds : 1;  case ConfidenceFactor.Medium:  	return Rounds;  case ConfidenceFactor.High:  	return Rounds <<= 1;  case ConfidenceFactor.ExtraHigh:  	return Rounds <<= 2;  case ConfidenceFactor.Provable:  	throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable");  default:  	throw new ArgumentOutOfRangeException ("confidence");  }  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds >>= 2;  
Magic Number,Mono.Math.Prime,PrimalityTests,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: return Rounds <<= 2;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: while (true) {  	//  	// STEP 2.1 Sieve out numbers divisible by the first 9 primes  	//  	if (pMod1 % 3 == 0)  		goto biNotPrime;  	if (pMod1 % 5 == 0)  		goto biNotPrime;  	if (pMod1 % 7 == 0)  		goto biNotPrime;  	if (pMod1 % 11 == 0)  		goto biNotPrime;  	if (pMod1 % 13 == 0)  		goto biNotPrime;  	if (pMod1 % 17 == 0)  		goto biNotPrime;  	if (pMod1 % 19 == 0)  		goto biNotPrime;  	if (pMod1 % 23 == 0)  		goto biNotPrime;  	if (pMod1 % 29 == 0)  		goto biNotPrime;  	//  	// STEP 2.2 Sieve out all numbers divisible by the primes <= DivisionBound  	//  	for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  		if (curVal % SmallPrimes [p] == 0)  			goto biNotPrime;  	}  	//  	// STEP 2.3 Is the potential prime acceptable?  	//  	if (!IsPrimeAcceptable (curVal' Context))  		goto biNotPrime;  	//  	// STEP 2.4 Filter out all primes that pass this step with a primality test  	//  	if (PrimalityTest (curVal' Confidence))  		return curVal;  	//  	// STEP 2.4  	//  	biNotPrime:  	pMod1 += 2;  	if (pMod1 >= primeProd1)  		pMod1 -= primeProd1;  	curVal.Incr2 ();  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 3 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 5 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 7 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 11 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 13 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 17 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 19 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 23 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: if (pMod1 % 29 == 0)  	goto biNotPrime;  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: for (int p = 9; p < SmallPrimes.Length && SmallPrimes [p] <= DivisionBound; p++) {  	if (curVal % SmallPrimes [p] == 0)  		goto biNotPrime;  }  
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 += 2;  
Missing Default,Mono.Math,BigInteger,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\src\Mono.Math\BigInteger.cs,BigInteger,The following switch statement is missing a default case: switch (leftOver) {  case 1:  	data [length - 1] = (uint)inData [0];  	break;  case 2:  	data [length - 1] = (uint)((inData [0] << 8) | inData [1]);  	break;  case 3:  	data [length - 1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]);  	break;  }  
