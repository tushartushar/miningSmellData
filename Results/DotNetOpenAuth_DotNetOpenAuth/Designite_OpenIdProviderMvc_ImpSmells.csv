Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ErrorCodeToString,Cyclomatic complexity of the method is 10
Complex Method,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,SendAssertion,Cyclomatic complexity of the method is 12
Long Parameter List,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,CreateUser,The method has 8 parameters.
Long Statement,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,Initialize,The length of the statement  "	string fullyQualifiedPath = VirtualPathUtility.Combine (VirtualPathUtility.AppendTrailingSlash (HttpRuntime.AppDomainAppVirtualPath)' path); " is 140.
Long Statement,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 163.
Long Statement,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 161.
Long Statement,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ErrorCodeToString,The length of the statement  "		return "An unknown error occurred. Please verify your entry and try again. If the problem persists' please contact your system administrator."; " is 143.
Long Statement,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ValidateChangePassword,The length of the statement  "		ModelState.AddModelError ("newPassword"' string.Format (CultureInfo.CurrentCulture' "You must specify a new password of {0} or more characters."' this.MembershipService.MinPasswordLength)); " is 189.
Long Statement,OpenIdProviderMvc.Controllers,AccountController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\AccountController.cs,ValidateRegistration,The length of the statement  "		ModelState.AddModelError ("password"' string.Format (CultureInfo.CurrentCulture' "You must specify a password of {0} or more characters."' this.MembershipService.MinPasswordLength)); " is 182.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,AskUser,The length of the statement  "	if (!ProviderEndpoint.PendingAuthenticationRequest.IsDirectedIdentity && !this.UserControlsIdentifier (ProviderEndpoint.PendingAuthenticationRequest)) { " is 152.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,AskUserResponse,The length of the statement  "	if (!ProviderEndpoint.PendingAuthenticationRequest.IsDirectedIdentity && !this.UserControlsIdentifier (ProviderEndpoint.PendingAuthenticationRequest)) { " is 152.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,AutoRespondIfPossibleAsync,The length of the statement  "	if (await ProviderEndpoint.PendingRequest.IsReturnUrlDiscoverableAsync (OpenIdProvider.Channel.HostFactories' this.Response.ClientDisconnectedToken) == RelyingPartyDiscoveryResult.Success && User.Identity.IsAuthenticated && this.HasUserAuthorizedAutoLogin (ProviderEndpoint.PendingRequest)) { " is 292.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,AutoRespondIfPossibleAsync,The length of the statement  "			if (ProviderEndpoint.PendingAuthenticationRequest.IsDirectedIdentity || this.UserControlsIdentifier (ProviderEndpoint.PendingAuthenticationRequest)) { " is 150.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,UserControlsIdentifier,The length of the statement  "	return string.Equals (authReq.LocalIdentifier.ToString ()' userLocalIdentifier.ToString ()' StringComparison.OrdinalIgnoreCase) || authReq.LocalIdentifier == PpidGeneration.PpidIdentifierProvider.GetIdentifier (userLocalIdentifier' authReq.Realm); " is 247.
Long Statement,OpenIdProviderMvc,MvcApplication,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Global.asax.cs,InitializeBehaviors,The length of the statement  "				DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.PpidIdentifierProvider = new Code.AnonymousIdentifierProvider (); " is 121.
Long Statement,OpenIdProviderMvc,MvcApplication,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Global.asax.cs,InitializeBehaviors,The length of the statement  "				DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.PpidIdentifierProvider = new Code.AnonymousIdentifierProvider (); " is 121.
Complex Conditional,OpenIdProviderMvc.Controllers,OpenIdController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Controllers\OpenIdController.cs,SendAssertion,The conditional expression  "(authReq != null && authReq.IsAuthenticated.Value) || (anonReq != null && anonReq.IsApproved.Value)"  is complex.
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  	if (this.users == null) {  		this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  		XmlDocument doc = new XmlDocument ();  		doc.Load (this.xmlFileName);  		XmlNodeList nodes = doc.GetElementsByTagName ("User");  		foreach (XmlNode node in nodes) {  			// Yes' we're misusing some of these fields.  A real app would  			// have the right fields from a database to use.  			MembershipUser user = new MembershipUser (Name' // Provider name  			node ["UserName"].InnerText' // Username  			null' // providerUserKey  			node ["Salt"].InnerText' // Email  			string.Empty' // passwordQuestion  			node ["Password"].InnerText' // Comment  			true' // isApproved  			false' // isLockedOut  			DateTime.Now' // creationDate  			DateTime.Now' // lastLoginDate  			DateTime.Now' // lastActivityDate  			DateTime.Now' // lastPasswordChangedDate  			new DateTime (1980' 1' 1));  			// lastLockoutDate  			this.users.Add (user.UserName' user);  		}  	}  }  
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  	if (this.users == null) {  		this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  		XmlDocument doc = new XmlDocument ();  		doc.Load (this.xmlFileName);  		XmlNodeList nodes = doc.GetElementsByTagName ("User");  		foreach (XmlNode node in nodes) {  			// Yes' we're misusing some of these fields.  A real app would  			// have the right fields from a database to use.  			MembershipUser user = new MembershipUser (Name' // Provider name  			node ["UserName"].InnerText' // Username  			null' // providerUserKey  			node ["Salt"].InnerText' // Email  			string.Empty' // passwordQuestion  			node ["Password"].InnerText' // Comment  			true' // isApproved  			false' // isLockedOut  			DateTime.Now' // creationDate  			DateTime.Now' // lastLoginDate  			DateTime.Now' // lastActivityDate  			DateTime.Now' // lastPasswordChangedDate  			new DateTime (1980' 1' 1));  			// lastLockoutDate  			this.users.Add (user.UserName' user);  		}  	}  }  
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: if (this.users == null) {  	this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  	XmlDocument doc = new XmlDocument ();  	doc.Load (this.xmlFileName);  	XmlNodeList nodes = doc.GetElementsByTagName ("User");  	foreach (XmlNode node in nodes) {  		// Yes' we're misusing some of these fields.  A real app would  		// have the right fields from a database to use.  		MembershipUser user = new MembershipUser (Name' // Provider name  		node ["UserName"].InnerText' // Username  		null' // providerUserKey  		node ["Salt"].InnerText' // Email  		string.Empty' // passwordQuestion  		node ["Password"].InnerText' // Comment  		true' // isApproved  		false' // isLockedOut  		DateTime.Now' // creationDate  		DateTime.Now' // lastLoginDate  		DateTime.Now' // lastActivityDate  		DateTime.Now' // lastPasswordChangedDate  		new DateTime (1980' 1' 1));  		// lastLockoutDate  		this.users.Add (user.UserName' user);  	}  }  
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: if (this.users == null) {  	this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  	XmlDocument doc = new XmlDocument ();  	doc.Load (this.xmlFileName);  	XmlNodeList nodes = doc.GetElementsByTagName ("User");  	foreach (XmlNode node in nodes) {  		// Yes' we're misusing some of these fields.  A real app would  		// have the right fields from a database to use.  		MembershipUser user = new MembershipUser (Name' // Provider name  		node ["UserName"].InnerText' // Username  		null' // providerUserKey  		node ["Salt"].InnerText' // Email  		string.Empty' // passwordQuestion  		node ["Password"].InnerText' // Comment  		true' // isApproved  		false' // isLockedOut  		DateTime.Now' // creationDate  		DateTime.Now' // lastLoginDate  		DateTime.Now' // lastActivityDate  		DateTime.Now' // lastPasswordChangedDate  		new DateTime (1980' 1' 1));  		// lastLockoutDate  		this.users.Add (user.UserName' user);  	}  }  
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: this.users = new Dictionary<string' MembershipUser> (16' StringComparer.InvariantCultureIgnoreCase);  
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	// Yes' we're misusing some of these fields.  A real app would  	// have the right fields from a database to use.  	MembershipUser user = new MembershipUser (Name' // Provider name  	node ["UserName"].InnerText' // Username  	null' // providerUserKey  	node ["Salt"].InnerText' // Email  	string.Empty' // passwordQuestion  	node ["Password"].InnerText' // Comment  	true' // isApproved  	false' // isLockedOut  	DateTime.Now' // creationDate  	DateTime.Now' // lastLoginDate  	DateTime.Now' // lastActivityDate  	DateTime.Now' // lastPasswordChangedDate  	new DateTime (1980' 1' 1));  	// lastLockoutDate  	this.users.Add (user.UserName' user);  }  
