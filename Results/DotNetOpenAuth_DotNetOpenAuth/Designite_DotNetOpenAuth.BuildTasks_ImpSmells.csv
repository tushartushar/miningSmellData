Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetOpenAuth.BuildTasks,CopyWithTokenSubstitution,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CopyWithTokenSubstitution.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,Cyclomatic complexity of the method is 16
Complex Method,DotNetOpenAuth.BuildTasks,FixupReferenceHintPaths,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupReferenceHintPaths.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,Cyclomatic complexity of the method is 8
Complex Method,DotNetOpenAuth.BuildTasks,Purge,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Purge.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,bootStrap,Cyclomatic complexity of the method is 15
Long Statement,DotNetOpenAuth.BuildTasks,ChangeProjectReferenceToAssemblyReference,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ChangeProjectReferenceToAssemblyReference.cs,Execute,The length of the statement  "				this.Log.LogError("ProjectReferences contents ({0} elements): {1}"' this.ProjectReferences.Length' String.Join<ITaskItem>(";"' this.ProjectReferences)); " is 152.
Long Statement,DotNetOpenAuth.BuildTasks,ChangeProjectReferenceToAssemblyReference,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ChangeProjectReferenceToAssemblyReference.cs,Execute,The length of the statement  "				this.Log.LogError("References contents ({0} elements): {1}"' this.References.Length' String.Join<ITaskItem>(";"' this.References)); " is 131.
Long Statement,DotNetOpenAuth.BuildTasks,ChangeProjectReferenceToAssemblyReference,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ChangeProjectReferenceToAssemblyReference.cs,Execute,The length of the statement  "					this.Log.LogMessage("Removing project reference to \"{0}\" from \"{1}\"."' matchingReference.Remove.Include' project.ItemSpec); " is 127.
Long Statement,DotNetOpenAuth.BuildTasks,ChangeProjectReferenceToAssemblyReference,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ChangeProjectReferenceToAssemblyReference.cs,Execute,The length of the statement  "						this.Log.LogMessage("Adding assembly reference to \"{0}\" to \"{1}\"."' matchingReference.Add.ItemSpec' project.ItemSpec); " is 122.
Long Statement,DotNetOpenAuth.BuildTasks,ChangeProjectReferenceToAssemblyReference,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ChangeProjectReferenceToAssemblyReference.cs,Execute,The length of the statement  "						if (!doc.GetEvaluatedItemsByName("Reference").OfType<BuildItem>().Any(bi => String.Equals(bi.Include' newItemSpec' StringComparison.OrdinalIgnoreCase))) { " is 154.
Long Statement,DotNetOpenAuth.BuildTasks,CopyWithTokenSubstitution,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CopyWithTokenSubstitution.cs,Execute,The length of the statement  "						Log.LogMessage(MessageImportance.Low' "Skipping \"{0}\" -> \"{1}\" because the destination is up to date."' sourcePath' destPath); " is 130.
Long Statement,DotNetOpenAuth.BuildTasks,CopyWithTokenSubstitution,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CopyWithTokenSubstitution.cs,Execute,The length of the statement  "						Log.LogMessage(MessageImportance.Low' "Skipping \"{0}\" -> \"{1}\" because the destination is up to date."' sourcePath' destPath); " is 130.
Long Statement,DotNetOpenAuth.BuildTasks,CreateWebApplication,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CreateWebApplication.cs,Execute,The length of the statement  "			var site = serverManager.Sites.FirstOrDefault(s => string.Equals(s.Name' this.WebSiteName' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,DotNetOpenAuth.BuildTasks,CreateWebApplication,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CreateWebApplication.cs,Execute,The length of the statement  "				var app = site.Applications.FirstOrDefault(a => string.Equals(a.Path' virtualPath' StringComparison.OrdinalIgnoreCase)); " is 120.
Long Statement,DotNetOpenAuth.BuildTasks,DeleteWebApplication,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DeleteWebApplication.cs,Execute,The length of the statement  "			var site = serverManager.Sites.FirstOrDefault(s => string.Equals(s.Name' this.WebSiteName' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,DotNetOpenAuth.BuildTasks,DeleteWebApplication,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DeleteWebApplication.cs,Execute,The length of the statement  "				var app = site.Applications.FirstOrDefault(a => string.Equals(a.Path' path.ItemSpec' StringComparison.OrdinalIgnoreCase)); " is 122.
Long Statement,DotNetOpenAuth.BuildTasks,DiscoverProjectTemplates,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DiscoverProjectTemplates.cs,Execute,The length of the statement  "				var projectCollection = templateContent.Element(XName.Get("ProjectCollection"' MergeProjectWithVSTemplate.VSTemplateNamespace)); " is 128.
Long Statement,DotNetOpenAuth.BuildTasks,DiscoverProjectTemplates,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DiscoverProjectTemplates.cs,Execute,The length of the statement  "				var links = projectCollection.Elements(XName.Get("ProjectTemplateLink"' MergeProjectWithVSTemplate.VSTemplateNamespace)); " is 121.
Long Statement,DotNetOpenAuth.BuildTasks,DiscoverProjectTemplates,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DiscoverProjectTemplates.cs,Execute,The length of the statement  "					string[] files = Directory.GetFiles(Path.Combine(Path.GetDirectoryName(topLevelTemplate.ItemSpec)' Path.GetDirectoryName(link))' "*.*"' SearchOption.AllDirectories); " is 165.
Long Statement,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The length of the statement  "								projectTypeGuids = projectTypeGuids.Replace("{F85E285D-A4E0-4152-9332-AB1D724D3325}"' "{603c0e0b-db56-11dc-be95-000d561079b0}"); " is 128.
Long Statement,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The length of the statement  "						var enlistmentInfoImports = project.Imports.Cast<Import>().Where(i => i.ProjectPath.IndexOf("[MSBuild]::GetDirectoryNameOfFileAbove"' StringComparison.OrdinalIgnoreCase) >= 0); " is 176.
Long Statement,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The length of the statement  "						if (!references.Cast<BuildItem>().Any(item => item.FinalItemSpec.StartsWith("System.Core"' StringComparison.OrdinalIgnoreCase))) { " is 130.
Long Statement,DotNetOpenAuth.BuildTasks,FilterItems,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FilterItems.cs,Execute,The length of the statement  "			FilteredItems = InputItems.Where(item => StartsWithAny.Any(filter => item.ItemSpec.StartsWith(filter.ItemSpec' StringComparison.OrdinalIgnoreCase))).ToArray(); " is 159.
Long Statement,DotNetOpenAuth.BuildTasks,FixupReferenceHintPaths,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupReferenceHintPaths.cs,Execute,The length of the statement  "				this.Log.LogMessage(MessageImportance.Low' "Skipping reference hintpath fixup because no projects or no references were supplied."); " is 132.
Long Statement,DotNetOpenAuth.BuildTasks,FixupReferenceHintPaths,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupReferenceHintPaths.cs,Execute,The length of the statement  "					var matchingReference = availableReferences.FirstOrDefault(r => string.Equals(r.Name' referenceAssemblyName.Name' StringComparison.OrdinalIgnoreCase)); " is 151.
Long Statement,DotNetOpenAuth.BuildTasks,FixupReferenceHintPaths,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupReferenceHintPaths.cs,Execute,The length of the statement  "							hintPath = projectUri.MakeRelativeUri(new Uri(matchingReference.CodeBase)).OriginalString.Replace(Path.AltDirectorySeparatorChar' Path.DirectorySeparatorChar); " is 159.
Long Statement,DotNetOpenAuth.BuildTasks,FixupReferenceHintPaths,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupReferenceHintPaths.cs,Execute,The length of the statement  "						this.Log.LogMessage("Fixing up HintPath to \"{0}\" in project \"{1}\"."' referenceAssemblyName.Name' projectTaskItem.ItemSpec); " is 127.
Long Statement,DotNetOpenAuth.BuildTasks,FixupShippingToolSamples,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupShippingToolSamples.cs,Execute,The length of the statement  "				this.Log.LogMessage("Fixing up the {0} sample for shipping as source code."' Path.GetFileNameWithoutExtension(projectTaskItem.ItemSpec)); " is 137.
Long Statement,DotNetOpenAuth.BuildTasks,FixupShippingToolSamples,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\FixupShippingToolSamples.cs,Execute,The length of the statement  "						.Where(import => this.RemoveImportsStartingWith.Any(start => import.ProjectPath.StartsWith(start' StringComparison.OrdinalIgnoreCase))) " is 135.
Long Statement,DotNetOpenAuth.BuildTasks,HardLinkCopy,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\HardLinkCopy.cs,Execute,The length of the statement  "				this.Log.LogError("SourceFiles has {0} elements and DestinationFiles has {1} elements."' this.SourceFiles.Length' this.DestinationFiles.Length); " is 144.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "				this.Log.LogError("SourceTemplates array has length {0} while DestinationTemplates array has length {1}' but must equal."' this.SourceTemplates.Length' this.DestinationTemplates.Length); " is 186.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "				this.Log.LogError("SourceTemplates array has length {0} while SourceProjects array has length {1}' but must equal."' this.SourceTemplates.Length' this.SourceProjects.Length); " is 174.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "					Log.LogMessage("Skipping merge of \"{0}\" with a project because no project was referenced from the template."' sourceTemplateTaskItem.ItemSpec); " is 145.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "				var projectDirectory = Path.GetDirectoryName(Path.Combine(Path.GetDirectoryName(sourceTemplateTaskItem.GetMetadata("FullPath"))' projectElement.Attribute("File").Value)); " is 170.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "				var projectItems = sourceProject.EvaluatedItems.Cast<BuildItem>().Where(item => this.ProjectItemTypes.Contains(item.Name)); " is 123.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "						var projectItem = parentNode.Elements(itemName).FirstOrDefault(el => string.Equals(el.Value' Path.GetFileName(item.OriginalName)' StringComparison.OrdinalIgnoreCase)); " is 167.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "					TaskItem item = new TaskItem(Path.Combine(Path.GetDirectoryName(this.SourceTemplates[iTemplate].ItemSpec)' pair.OriginalPath)); " is 127.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "					string apparentSource = Path.Combine(Path.GetDirectoryName(this.SourceTemplates[iTemplate].ItemSpec)' pair.OriginalPath); " is 121.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "					item.SetMetadata("DestinationFullPath"' Path.GetFullPath(Path.Combine(Path.GetDirectoryName(this.DestinationTemplates[iTemplate].ItemSpec)' pair.CurrentPath))); " is 160.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,Execute,The length of the statement  "					item.SetMetadata("Transform"' this.ReplaceParametersExtensions.Contains(Path.GetExtension(pair.OriginalName)) ? "true" : "false"); " is 130.
Long Statement,DotNetOpenAuth.BuildTasks,MergeProjectWithVSTemplate,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\MergeProjectWithVSTemplate.cs,FindOrCreateParent,The length of the statement  "				var candidate = parent.Elements(XName.Get("Folder"' VSTemplateNamespace)).FirstOrDefault(n => n.Attribute("Name").Value == segments[i]); " is 136.
Long Statement,DotNetOpenAuth.BuildTasks,JsPack,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\JsPack.cs,Execute,The length of the statement  "				if (!File.Exists(this.Outputs[i].ItemSpec) || File.GetLastWriteTime(this.Outputs[i].ItemSpec) < File.GetLastWriteTime(this.Inputs[i].ItemSpec)) { " is 145.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "			Contract.Requires<ArgumentOutOfRangeException>(this.Parent == null || maxLength > this.Parent.FullLength + 1' "A child path cannot possibly be made shorter than its parent."); " is 175.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "			var longPaths = this.SelfAndDescendents.Where(path => path.FullLength > maxLength).OrderByDescending(path => path.FullLength); " is 126.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "					var longSegments = longPath.SelfAndAncestors.Where(segment => !segment.minimized).OrderByDescending(segment => segment.CurrentName.Length); " is 139.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "						shortenByUpTo = Math.Min(tooLongBy' Math.Max(1' longestSegment.CurrentName.Length - secondLongestSegment.CurrentName.Length)); " is 126.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "					int allowableSegmentLength = Math.Max(minimumGuaranteedUniqueLength' longestSegment.CurrentName.Length - shortenByUpTo); " is 120.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The length of the statement  "					longestSegment.currentName = longestSegment.CreateUniqueShortFileName(longestSegment.CurrentName' allowableSegmentLength); " is 122.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,GetUniqueShortName,The length of the statement  "			for (i = -1; candidateName.Length == 0 || ReservedFileNames.Contains(candidateName' StringComparer.OrdinalIgnoreCase) || this.Siblings.Any(child => string.Equals(child.CurrentName' candidateName' StringComparison.OrdinalIgnoreCase)); i++) { " is 240.
Long Statement,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,GetUniqueShortName,The length of the statement  "				candidateName = preferredPrefix.Substring(0' Math.Min(allowableLength - candidateName.Length' preferredPrefix.Length)) + candidateName; " is 135.
Long Statement,DotNetOpenAuth.BuildTasks,PrepareOhlohRelease,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PrepareOhlohRelease.cs,WriteInstructFile,The length of the statement  "						   let file = new { Path = redist.ItemSpec' Package = redist.GetMetadata("Package")' Platform = redist.GetMetadata("Platform")' Icon = redist.GetMetadata("Icon") } " is 160.
Long Statement,DotNetOpenAuth.BuildTasks,PrepareOhlohRelease,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PrepareOhlohRelease.cs,WriteUploadScript,The length of the statement  "					writer.WriteLine("scp {0'-" + longestPath + "} {1}@upload.ohloh.net:{2}/files"' GetLinuxPath(file.GetMetadata("FullPath"))' this.OhlohUser' this.OhlohProject); " is 159.
Long Statement,DotNetOpenAuth.BuildTasks,PrepareOhlohRelease,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PrepareOhlohRelease.cs,WriteUploadScript,The length of the statement  "				writer.WriteLine("scp {0'-" + longestPath + "} {1}@upload.ohloh.net:{2}/instructs"' GetLinuxPath(Path.GetFullPath(this.InstructFile))' this.OhlohUser' this.OhlohProject); " is 170.
Long Statement,DotNetOpenAuth.BuildTasks,Publicize,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Publicize.cs,Execute,The length of the statement  "				Path.GetFileNameWithoutExtension(this.AccessorAssembly.ItemSpec) + "_Accessor") + Path.GetExtension(this.AccessorAssembly.ItemSpec); " is 132.
Long Statement,DotNetOpenAuth.BuildTasks,Publicize,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Publicize.cs,Execute,The length of the statement  "			if (this.SkipUnchangedFiles && File.GetLastWriteTimeUtc(this.Assembly.ItemSpec) < File.GetLastWriteTimeUtc(this.AccessorAssembly.ItemSpec)) { " is 141.
Long Statement,DotNetOpenAuth.BuildTasks,Publicize,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Publicize.cs,Execute,The length of the statement  "				Log.LogMessage(MessageImportance.Low' "Skipping public accessor generation for {0} because {1} is up to date."' this.Assembly.ItemSpec' this.AccessorAssembly.ItemSpec); " is 168.
Long Statement,DotNetOpenAuth.BuildTasks,Purge,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Purge.cs,Execute,The length of the statement  "			HashSet<string> intendedFiles = new HashSet<string>(this.IntendedFiles.Select(file => file.GetMetadata("FullPath"))' StringComparer.OrdinalIgnoreCase); " is 151.
Long Statement,DotNetOpenAuth.BuildTasks,SnToolTask,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\SnToolTask.cs,GenerateFullPathToTool,The length of the statement  "				fullPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)' @"Microsoft SDKs\Windows\" + version + @"\bin\" + this.ToolName); " is 156.
Long Statement,DotNetOpenAuth.BuildTasks,Trim,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\Trim.cs,Execute,The length of the statement  "				string value = string.IsNullOrEmpty(this.MetadataName) ? this.Outputs[i].ItemSpec : this.Outputs[i].GetMetadata(this.MetadataName); " is 131.
Long Statement,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,bootStrap,The length of the statement  "                decode = "if(!''.replace(/^/'String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return'\\\\w+'};c=1;}"; " is 132.
Long Statement,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,bootStrap,The length of the statement  "            string unpack = "function(p'a'c'k'e'd){while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b'''g')'k[c]);return p;}"; " is 124.
Empty Catch Block,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The method has an empty catch block.
Empty Catch Block,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The method has an empty catch block.
Empty Catch Block,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The method has an empty catch block.
Empty Catch Block,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The method has an empty catch block.
Magic Number,DotNetOpenAuth.BuildTasks,CompareFiles,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\CompareFiles.cs,IsContentOfFilesTheSame,The following statement contains a magic number: byte[] buffer1 = new byte[4096];
Magic Number,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The following statement contains a magic number: switch (GetClassification(taskItem)) {  					case ProjectClassification.VS2010Project:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading project \"{0}\"."' taskItem.ItemSpec);  						var project = new Project();  						project.Load(taskItem.ItemSpec' ProjectLoadSettings.IgnoreMissingImports);  						project.DefaultToolsVersion = "3.5";    						if (this.DowngradeMvc2ToMvc1) {  							string projectTypeGuids = project.GetEvaluatedProperty("ProjectTypeGuids");  							if (!string.IsNullOrEmpty(projectTypeGuids)) {  								projectTypeGuids = projectTypeGuids.Replace("{F85E285D-A4E0-4152-9332-AB1D724D3325}"' "{603c0e0b-db56-11dc-be95-000d561079b0}");  								project.SetProperty("ProjectTypeGuids"' projectTypeGuids);  							}  						}    						// MSBuild v3.5 doesn't support the GetDirectoryNameOfFileAbove function  						var enlistmentInfoImports = project.Imports.Cast<Import>().Where(i => i.ProjectPath.IndexOf("[MSBuild]::GetDirectoryNameOfFileAbove"' StringComparison.OrdinalIgnoreCase) >= 0);  						enlistmentInfoImports.ToList().ForEach(i => project.Imports.RemoveImport(i));    						// Web projects usually have an import that includes these substrings));)  						foreach (Import import in project.Imports) {  							import.ProjectPath = import.ProjectPath  								.Replace("$(MSBuildExtensionsPath32)"' "$(MSBuildExtensionsPath)")  								.Replace("VisualStudio\\v10.0"' "VisualStudio\\v9.0");  						}    						// VS2010 won't let you have a System.Core reference' but VS2008 requires it.  						BuildItemGroup references = project.GetEvaluatedItemsByName("Reference");  						if (!references.Cast<BuildItem>().Any(item => item.FinalItemSpec.StartsWith("System.Core"' StringComparison.OrdinalIgnoreCase))) {  							project.AddNewItem("Reference"' "System.Core");  						}    						// Rewrite ProjectReferences to other renamed projects.  						BuildItemGroup projectReferences = project.GetEvaluatedItemsByName("ProjectReference");  						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							foreach (BuildItem projectReference in projectReferences) {  								projectReference.Include = Regex.Replace(projectReference.Include' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						project.Save(newProjectToOldProjectMapping[taskItem.ItemSpec]);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					case ProjectClassification.VS2010Solution:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading solution \"{0}\"."' taskItem.ItemSpec);  						string[] contents = File.ReadAllLines(taskItem.ItemSpec);  						if (contents[1] != "Microsoft Visual Studio Solution File' Format Version 11.00" ||  							contents[2] != "# Visual Studio 2010") {  							this.Log.LogError("Unrecognized solution file header in \"{0}\"."' taskItem.ItemSpec);  							break;  						}    						contents[1] = "Microsoft Visual Studio Solution File' Format Version 10.00";  						contents[2] = "# Visual Studio 2008";    						for (int i = 3; i < contents.Length; i++) {  							contents[i] = contents[i].Replace("TargetFrameworkMoniker = \".NETFramework'Version%3Dv"' "TargetFramework = \"");  						}    						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							for (int i = 0; i < contents.Length; i++) {  								contents[i] = Regex.Replace(contents[i]' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						File.WriteAllLines(newProjectToOldProjectMapping[taskItem.ItemSpec]' contents);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					default:  						this.Log.LogWarning("Unrecognized project type for \"{0}\"."' taskItem.ItemSpec);  						break;  				}
Magic Number,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The following statement contains a magic number: switch (GetClassification(taskItem)) {  					case ProjectClassification.VS2010Project:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading project \"{0}\"."' taskItem.ItemSpec);  						var project = new Project();  						project.Load(taskItem.ItemSpec' ProjectLoadSettings.IgnoreMissingImports);  						project.DefaultToolsVersion = "3.5";    						if (this.DowngradeMvc2ToMvc1) {  							string projectTypeGuids = project.GetEvaluatedProperty("ProjectTypeGuids");  							if (!string.IsNullOrEmpty(projectTypeGuids)) {  								projectTypeGuids = projectTypeGuids.Replace("{F85E285D-A4E0-4152-9332-AB1D724D3325}"' "{603c0e0b-db56-11dc-be95-000d561079b0}");  								project.SetProperty("ProjectTypeGuids"' projectTypeGuids);  							}  						}    						// MSBuild v3.5 doesn't support the GetDirectoryNameOfFileAbove function  						var enlistmentInfoImports = project.Imports.Cast<Import>().Where(i => i.ProjectPath.IndexOf("[MSBuild]::GetDirectoryNameOfFileAbove"' StringComparison.OrdinalIgnoreCase) >= 0);  						enlistmentInfoImports.ToList().ForEach(i => project.Imports.RemoveImport(i));    						// Web projects usually have an import that includes these substrings));)  						foreach (Import import in project.Imports) {  							import.ProjectPath = import.ProjectPath  								.Replace("$(MSBuildExtensionsPath32)"' "$(MSBuildExtensionsPath)")  								.Replace("VisualStudio\\v10.0"' "VisualStudio\\v9.0");  						}    						// VS2010 won't let you have a System.Core reference' but VS2008 requires it.  						BuildItemGroup references = project.GetEvaluatedItemsByName("Reference");  						if (!references.Cast<BuildItem>().Any(item => item.FinalItemSpec.StartsWith("System.Core"' StringComparison.OrdinalIgnoreCase))) {  							project.AddNewItem("Reference"' "System.Core");  						}    						// Rewrite ProjectReferences to other renamed projects.  						BuildItemGroup projectReferences = project.GetEvaluatedItemsByName("ProjectReference");  						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							foreach (BuildItem projectReference in projectReferences) {  								projectReference.Include = Regex.Replace(projectReference.Include' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						project.Save(newProjectToOldProjectMapping[taskItem.ItemSpec]);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					case ProjectClassification.VS2010Solution:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading solution \"{0}\"."' taskItem.ItemSpec);  						string[] contents = File.ReadAllLines(taskItem.ItemSpec);  						if (contents[1] != "Microsoft Visual Studio Solution File' Format Version 11.00" ||  							contents[2] != "# Visual Studio 2010") {  							this.Log.LogError("Unrecognized solution file header in \"{0}\"."' taskItem.ItemSpec);  							break;  						}    						contents[1] = "Microsoft Visual Studio Solution File' Format Version 10.00";  						contents[2] = "# Visual Studio 2008";    						for (int i = 3; i < contents.Length; i++) {  							contents[i] = contents[i].Replace("TargetFrameworkMoniker = \".NETFramework'Version%3Dv"' "TargetFramework = \"");  						}    						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							for (int i = 0; i < contents.Length; i++) {  								contents[i] = Regex.Replace(contents[i]' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						File.WriteAllLines(newProjectToOldProjectMapping[taskItem.ItemSpec]' contents);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					default:  						this.Log.LogWarning("Unrecognized project type for \"{0}\"."' taskItem.ItemSpec);  						break;  				}
Magic Number,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The following statement contains a magic number: switch (GetClassification(taskItem)) {  					case ProjectClassification.VS2010Project:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading project \"{0}\"."' taskItem.ItemSpec);  						var project = new Project();  						project.Load(taskItem.ItemSpec' ProjectLoadSettings.IgnoreMissingImports);  						project.DefaultToolsVersion = "3.5";    						if (this.DowngradeMvc2ToMvc1) {  							string projectTypeGuids = project.GetEvaluatedProperty("ProjectTypeGuids");  							if (!string.IsNullOrEmpty(projectTypeGuids)) {  								projectTypeGuids = projectTypeGuids.Replace("{F85E285D-A4E0-4152-9332-AB1D724D3325}"' "{603c0e0b-db56-11dc-be95-000d561079b0}");  								project.SetProperty("ProjectTypeGuids"' projectTypeGuids);  							}  						}    						// MSBuild v3.5 doesn't support the GetDirectoryNameOfFileAbove function  						var enlistmentInfoImports = project.Imports.Cast<Import>().Where(i => i.ProjectPath.IndexOf("[MSBuild]::GetDirectoryNameOfFileAbove"' StringComparison.OrdinalIgnoreCase) >= 0);  						enlistmentInfoImports.ToList().ForEach(i => project.Imports.RemoveImport(i));    						// Web projects usually have an import that includes these substrings));)  						foreach (Import import in project.Imports) {  							import.ProjectPath = import.ProjectPath  								.Replace("$(MSBuildExtensionsPath32)"' "$(MSBuildExtensionsPath)")  								.Replace("VisualStudio\\v10.0"' "VisualStudio\\v9.0");  						}    						// VS2010 won't let you have a System.Core reference' but VS2008 requires it.  						BuildItemGroup references = project.GetEvaluatedItemsByName("Reference");  						if (!references.Cast<BuildItem>().Any(item => item.FinalItemSpec.StartsWith("System.Core"' StringComparison.OrdinalIgnoreCase))) {  							project.AddNewItem("Reference"' "System.Core");  						}    						// Rewrite ProjectReferences to other renamed projects.  						BuildItemGroup projectReferences = project.GetEvaluatedItemsByName("ProjectReference");  						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							foreach (BuildItem projectReference in projectReferences) {  								projectReference.Include = Regex.Replace(projectReference.Include' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						project.Save(newProjectToOldProjectMapping[taskItem.ItemSpec]);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					case ProjectClassification.VS2010Solution:  						this.Log.LogMessage(MessageImportance.Low' "Downgrading solution \"{0}\"."' taskItem.ItemSpec);  						string[] contents = File.ReadAllLines(taskItem.ItemSpec);  						if (contents[1] != "Microsoft Visual Studio Solution File' Format Version 11.00" ||  							contents[2] != "# Visual Studio 2010") {  							this.Log.LogError("Unrecognized solution file header in \"{0}\"."' taskItem.ItemSpec);  							break;  						}    						contents[1] = "Microsoft Visual Studio Solution File' Format Version 10.00";  						contents[2] = "# Visual Studio 2008";    						for (int i = 3; i < contents.Length; i++) {  							contents[i] = contents[i].Replace("TargetFrameworkMoniker = \".NETFramework'Version%3Dv"' "TargetFramework = \"");  						}    						foreach (var mapping in newProjectToOldProjectMapping) {  							string oldName = Path.GetFileName(mapping.Key);  							string newName = Path.GetFileName(mapping.Value);  							for (int i = 0; i < contents.Length; i++) {  								contents[i] = Regex.Replace(contents[i]' oldName' newName' RegexOptions.IgnoreCase);  							}  						}    						File.WriteAllLines(newProjectToOldProjectMapping[taskItem.ItemSpec]' contents);  						createdProjectFiles.Add(new TaskItem(taskItem) { ItemSpec = newProjectToOldProjectMapping[taskItem.ItemSpec] });  						break;  					default:  						this.Log.LogWarning("Unrecognized project type for \"{0}\"."' taskItem.ItemSpec);  						break;  				}
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The following statement contains a magic number: commitId.Length == 40
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,GetGitHeadCommitId,The following statement contains a magic number: string refName = headContent.Substring(5).Trim();
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,ReadVersionFromFile,The following statement contains a magic number: prereleaseVersion = lines.Length >= 2 ? lines[1] : null;
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,ReadVersionFromFile,The following statement contains a magic number: oauth2PackagesVersion = lines.Length >= 3 ? lines[2] : null;
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,ReadVersionFromFile,The following statement contains a magic number: oauth2PackagesVersion = lines.Length >= 3 ? lines[2] : null;
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,CalculateJDate,The following statement contains a magic number: int yearLastDigit = date.Year - 2000;
Magic Number,DotNetOpenAuth.BuildTasks,GetBuildVersion,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\GetBuildVersion.cs,CalculateJDate,The following statement contains a magic number: int jdate = yearLastDigit * 1000 + dayOfYear;
Magic Number,DotNetOpenAuth.BuildTasks,PathSegment,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\PathSegment.cs,EnsureSelfAndChildrenNoLongerThan,The following statement contains a magic number: const int uniqueBase = 16;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode36,The following statement contains a magic number: int digit = (code / (int) Math.Pow(36' i)) % 36;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode36,The following statement contains a magic number: int digit = (code / (int) Math.Pow(36' i)) % 36;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode36,The following statement contains a magic number: code -= digit * (int) Math.Pow(36' i++);
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode62,The following statement contains a magic number: int digit = (code / (int) Math.Pow(62' i)) % 62;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode62,The following statement contains a magic number: int digit = (code / (int) Math.Pow(62' i)) % 62;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode62,The following statement contains a magic number: code -= digit * (int) Math.Pow(62' i++);
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode95,The following statement contains a magic number: int digit = (code / (int) Math.Pow(95' i)) % 95;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode95,The following statement contains a magic number: int digit = (code / (int) Math.Pow(95' i)) % 95;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encode95,The following statement contains a magic number: code -= digit * (int) Math.Pow(95' i++);
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encodeLocalVars,The following statement contains a magic number: int length = match.Groups[offset + 2].Length;
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encodeLocalVars,The following statement contains a magic number: int start = length - Math.Max(length - match.Groups[offset + 3].Length' 0);
Magic Number,Dean.Edwards,ECMAScriptPacker,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\ECMAScriptPacker.cs,encodeLocalVars,The following statement contains a magic number: return match.Groups[offset + 1].Value.Substring(start' length) +                   match.Groups[offset + 4].Value;
Missing Default,DotNetOpenAuth.BuildTasks,DowngradeProjects,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\src\DotNetOpenAuth.BuildTasks\DowngradeProjects.cs,Execute,The following switch statement is missing a default case: switch (GetClassification(taskItem)) {  					case ProjectClassification.VS2010Project:  					case ProjectClassification.VS2010Solution:  						string projectNameForVS2008 = InPlaceDowngrade  														? taskItem.ItemSpec  														: Path.Combine(  															Path.GetDirectoryName(taskItem.ItemSpec)'  															Path.GetFileNameWithoutExtension(taskItem.ItemSpec) + "-vs2008" +  															Path.GetExtension(taskItem.ItemSpec));  						newProjectToOldProjectMapping[taskItem.ItemSpec] = projectNameForVS2008;  						break;  				}
