Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OAuthServiceProvider.Code,DatabaseTokenManager,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Code\DatabaseTokenManager.cs,ExpireRequestTokenAndStoreNewAccessToken,The length of the statement  "			Debug.Assert(tokenRow.State == TokenAuthorizationState.AuthorizedRequestToken' "The token should be authorized already!"); " is 122.
Long Statement,OAuthServiceProvider.Code,Global,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Code\Global.cs,Application_Error,The length of the statement  "			Logger.ErrorException("An unhandled exception occurred in ASP.NET processing: " + Server.GetLastError()' Server.GetLastError()); " is 128.
Long Statement,OAuthServiceProvider.Code,Global,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Code\Global.cs,Application_Error,The length of the statement  "			// In the event of an unhandled exception' reverse any changes that were made to the database to avoid any partial database updates. " is 132.
Long Statement,OAuthServiceProvider.Code,OAuthAuthorizationManager,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Code\OAuthAuthorizationManager.cs,CheckAccessCore,The length of the statement  "			HttpRequestMessageProperty httpDetails = operationContext.RequestContext.RequestMessage.Properties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty; " is 162.
Long Statement,OAuthServiceProvider.Code,OAuthAuthorizationManager,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Code\OAuthAuthorizationManager.cs,CheckAccessCore,The length of the statement  "			((DatabaseTokenManager)sp.TokenManager).OperationContext = operationContext; // artificially preserve this across thread changes. " is 129.
Long Statement,OAuthServiceProvider,_Default,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Default.aspx.designer.cs,createDatabaseButton_Click,The length of the statement  "			string connectionString = ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString.Replace("|DataDirectory|"' databasePath); " is 151.
Magic Number,OAuthServiceProvider,_Default,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Default.aspx.designer.cs,createDatabaseButton_Click,The following statement contains a magic number: try {  				dc.CreateDatabase();    				// Fill with sample data.  				dc.OAuthConsumers.InsertOnSubmit(new OAuthConsumer {  					ConsumerKey = "sampleconsumer"'  					ConsumerSecret = "samplesecret"'  				});  				dc.Users.InsertOnSubmit(new User {  					OpenIDFriendlyIdentifier = "http://blog.nerdbank.net/"'  					OpenIDClaimedIdentifier = "http://blog.nerdbank.net/"'  					Age = 27'  					FullName = "Andrew Arnott"'  					FavoriteSites = new System.Data.Linq.EntitySet<FavoriteSite> {  					new FavoriteSite { SiteUrl = "http://www.microsoft.com" }'  					new FavoriteSite { SiteUrl = "http://www.google.com" }'  				}'  				});    				dc.SubmitChanges();  				this.databaseStatus.Visible = true;  			} catch (System.Data.SqlClient.SqlException ex) {  				foreach (System.Data.SqlClient.SqlError error in ex.Errors) {  					Response.Write(error.Message);  				}  			}
Magic Number,OAuthServiceProvider,Authorize,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Members\Authorize.aspx.designer.cs,Page_Load,The following statement contains a magic number: if (!IsPostBack) {  				if (Global.PendingOAuthAuthorization == null) {  					Response.Redirect("~/Members/AuthorizedConsumers.aspx");  				} else {  					ITokenContainingMessage pendingToken = Global.PendingOAuthAuthorization;  					var token = Global.DataContext.OAuthTokens.Single(t => t.Token == pendingToken.Token);  					this.desiredAccessLabel.Text = token.Scope;  					this.consumerLabel.Text = Global.TokenManager.GetConsumerForToken(token.Token).ConsumerKey;    					// Generate an unpredictable secret that goes to the user agent and must come back  					// with authorization to guarantee the user interacted with this page rather than  					// being scripted by an evil Consumer.  					byte[] randomData = new byte[8];  					CryptoRandomDataGenerator.GetBytes(randomData);  					this.AuthorizationSecret = Convert.ToBase64String(randomData);  					this.OAuthAuthorizationSecToken.Value = this.AuthorizationSecret;    					this.OAuth10ConsumerWarning.Visible = Global.PendingOAuthAuthorization.IsUnsafeRequest;  				}  			}
Magic Number,OAuthServiceProvider,Authorize,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Members\Authorize.aspx.designer.cs,allowAccessButton_Click,The following statement contains a magic number: this.RegisterAsyncTask(  				new PageAsyncTask(  					async ct => {  						if (this.AuthorizationSecret != this.OAuthAuthorizationSecToken.Value) {  							throw new ArgumentException(); // probably someone trying to hack in.  						}  						this.AuthorizationSecret = null; // clear one time use secret  						var pending = Global.PendingOAuthAuthorization;  						Global.AuthorizePendingRequestToken();  						this.multiView.ActiveViewIndex = 1;    						ServiceProvider sp = new ServiceProvider(Constants.SelfDescription' Global.TokenManager);  						var response = sp.PrepareAuthorizationResponse(pending);  						if (response != null) {  							var responseMessage = await sp.Channel.PrepareResponseAsync(response' Response.ClientDisconnectedToken);  							await responseMessage.SendAsync();  						} else {  							if (pending.IsUnsafeRequest) {  								this.verifierMultiView.ActiveViewIndex = 1;  							} else {  								string verifier = ServiceProvider.CreateVerificationCode(VerificationCodeFormat.AlphaNumericNoLookAlikes' 10);  								this.verificationCodeLabel.Text = verifier;  								ITokenContainingMessage requestTokenMessage = pending;  								var requestToken = Global.TokenManager.GetRequestToken(requestTokenMessage.Token);  								requestToken.VerificationCode = verifier;  								Global.TokenManager.UpdateToken(requestToken);  							}  						}  					}));
Magic Number,OAuthServiceProvider,Authorize,C:\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OAuthServiceProvider\Members\Authorize.aspx.designer.cs,denyAccessButton_Click,The following statement contains a magic number: this.multiView.ActiveViewIndex = 2;
