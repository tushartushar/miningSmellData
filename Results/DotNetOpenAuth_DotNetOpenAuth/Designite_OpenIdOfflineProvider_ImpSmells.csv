Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,UserController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\UserController.cs,GenerateHtmlDiscoveryDocument,The length of the parameter NonDelegatedHtmlDiscoveryFormat is 31.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,HomeController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\HomeController.cs,Get,The length of the statement  "		Content = new StringContent (GenerateXrdsOPIdentifierDocument (opEndpointUri' Enumerable.Empty<string> ())' Encoding.UTF8' "application/xrds+xml")' " is 147.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,HomeController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\HomeController.cs,GenerateXrdsOPIdentifierDocument,The length of the statement  "	string extensions = string.Join ("\n\t\t\t"' supportedExtensions.Select (ext => "<Type>" + ext + "</Type>").ToArray ()); " is 120.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The length of the statement  "			Content = new StringContent ("<html><body>This is an OpenID Provider endpoint.</body></html>"' Encoding.UTF8' "text/html")' " is 123.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The length of the statement  "							userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery; " is 173.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,UserController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\UserController.cs,GenerateHtmlDiscoveryDocument,The length of the statement  "	return string.Format (localId != null ? DelegatedHtmlDiscoveryFormat : NonDelegatedHtmlDiscoveryFormat' providerEndpoint.AbsoluteUri' localId); " is 143.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,opIdentifierLabel_MouseDown,The length of the statement  "		MessageBox.Show (this' ex.Message' "Error while copying OP Identifier to the clipboard"' MessageBoxButton.OK' MessageBoxImage.Error); " is 133.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,StartProviderAsync,The length of the statement  "			string message = string.Format (CultureInfo.CurrentCulture' "Use an elevated command prompt and execute: \nnetsh http add urlacl url=http://+:{0}/ user={1}\\{2}"' port' Environment.UserDomainName' Environment.UserName); " is 219.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,StartProviderAsync,The length of the statement  "		if (MessageBox.Show (exception.Message' "Configuration error"' MessageBoxButton.OKCancel' MessageBoxImage.Error) == MessageBoxResult.OK) { " is 138.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,ProcessAuthenticationAsync,The length of the statement  "	bool isRPDiscoverable = await request.IsReturnUrlDiscoverableAsync (hostFactories' cancellationToken) == RelyingPartyDiscoveryResult.Success; " is 141.
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following statement contains a magic number: return await await this.MainWindow.Dispatcher.InvokeAsync (async delegate {  	if (!request.IsResponseReady) {  		var authRequest = request as IAuthenticationRequest;  		if (authRequest != null) {  			string userIdentityPageBase = this.Url.Link ("default"' new {  				controller = "user"  			}) + "/";  			var userIdentityPageBaseUri = new Uri (userIdentityPageBase);  			switch (this.MainWindow.checkidRequestList.SelectedIndex) {  			case 0:  				if (authRequest.IsDirectedIdentity) {  					if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  						userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery;  					}  					string leafPath = "directedidentity";  					if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  						leafPath += ".";  					}  					authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  					authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  				}  				authRequest.IsAuthenticated = true;  				break;  			case 1:  				authRequest.IsAuthenticated = false;  				break;  			case 2:  				IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  				bool stoleFocus = NativeMethods.SetForegroundWindow (this.MainWindow);  				await CheckIdWindow.ProcessAuthenticationAsync (userIdentityPageBaseUri' authRequest' CancellationToken.None);  				if (stoleFocus) {  					NativeMethods.SetForegroundWindow (oldForegroundWindow);  				}  				break;  			}  		}  	}  	var responseMessage = await provider.PrepareResponseAsync (request);  	return responseMessage;  });  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following statement contains a magic number: if (!request.IsResponseReady) {  	var authRequest = request as IAuthenticationRequest;  	if (authRequest != null) {  		string userIdentityPageBase = this.Url.Link ("default"' new {  			controller = "user"  		}) + "/";  		var userIdentityPageBaseUri = new Uri (userIdentityPageBase);  		switch (this.MainWindow.checkidRequestList.SelectedIndex) {  		case 0:  			if (authRequest.IsDirectedIdentity) {  				if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  					userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery;  				}  				string leafPath = "directedidentity";  				if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  					leafPath += ".";  				}  				authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  				authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  			}  			authRequest.IsAuthenticated = true;  			break;  		case 1:  			authRequest.IsAuthenticated = false;  			break;  		case 2:  			IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  			bool stoleFocus = NativeMethods.SetForegroundWindow (this.MainWindow);  			await CheckIdWindow.ProcessAuthenticationAsync (userIdentityPageBaseUri' authRequest' CancellationToken.None);  			if (stoleFocus) {  				NativeMethods.SetForegroundWindow (oldForegroundWindow);  			}  			break;  		}  	}  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following statement contains a magic number: if (authRequest != null) {  	string userIdentityPageBase = this.Url.Link ("default"' new {  		controller = "user"  	}) + "/";  	var userIdentityPageBaseUri = new Uri (userIdentityPageBase);  	switch (this.MainWindow.checkidRequestList.SelectedIndex) {  	case 0:  		if (authRequest.IsDirectedIdentity) {  			if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  				userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery;  			}  			string leafPath = "directedidentity";  			if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  				leafPath += ".";  			}  			authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  			authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  		}  		authRequest.IsAuthenticated = true;  		break;  	case 1:  		authRequest.IsAuthenticated = false;  		break;  	case 2:  		IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  		bool stoleFocus = NativeMethods.SetForegroundWindow (this.MainWindow);  		await CheckIdWindow.ProcessAuthenticationAsync (userIdentityPageBaseUri' authRequest' CancellationToken.None);  		if (stoleFocus) {  			NativeMethods.SetForegroundWindow (oldForegroundWindow);  		}  		break;  	}  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following statement contains a magic number: switch (this.MainWindow.checkidRequestList.SelectedIndex) {  case 0:  	if (authRequest.IsDirectedIdentity) {  		if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  			userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery;  		}  		string leafPath = "directedidentity";  		if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  			leafPath += ".";  		}  		authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  		authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  	}  	authRequest.IsAuthenticated = true;  	break;  case 1:  	authRequest.IsAuthenticated = false;  	break;  case 2:  	IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  	bool stoleFocus = NativeMethods.SetForegroundWindow (this.MainWindow);  	await CheckIdWindow.ProcessAuthenticationAsync (userIdentityPageBaseUri' authRequest' CancellationToken.None);  	if (stoleFocus) {  		NativeMethods.SetForegroundWindow (oldForegroundWindow);  	}  	break;  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,StartProviderAsync,The following statement contains a magic number: try {  	Verify.Operation (this.hostServer == null' "Server already started.");  	int port = 45235;  	try {  		this.hostServer = WebApp.Start<Startup> (url: string.Format ("http://localhost:{0}"' port));  		this._logger.Info ("Server Started");  	} catch (AddressAccessDeniedException ex) {  		// If this throws an exception' use an elevated command prompt and execute:  		// netsh http add urlacl url=http://+:45235/ user=YOUR_USERNAME_HERE  		string message = string.Format (CultureInfo.CurrentCulture' "Use an elevated command prompt and execute: \nnetsh http add urlacl url=http://+:{0}/ user={1}\\{2}"' port' Environment.UserDomainName' Environment.UserName);  		throw new InvalidOperationException (message' ex);  	}  	this.opIdentifierLabel.Content = string.Format ("http://localhost:{0}"' port);  } catch (InvalidOperationException ex) {  	exception = ex;  }  
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following switch statement is missing a default case: switch (this.MainWindow.checkidRequestList.SelectedIndex) {  case 0:  	if (authRequest.IsDirectedIdentity) {  		if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  			userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant () + userIdentityPageBaseUri.PathAndQuery;  		}  		string leafPath = "directedidentity";  		if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  			leafPath += ".";  		}  		authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  		authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  	}  	authRequest.IsAuthenticated = true;  	break;  case 1:  	authRequest.IsAuthenticated = false;  	break;  case 2:  	IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  	bool stoleFocus = NativeMethods.SetForegroundWindow (this.MainWindow);  	await CheckIdWindow.ProcessAuthenticationAsync (userIdentityPageBaseUri' authRequest' CancellationToken.None);  	if (stoleFocus) {  		NativeMethods.SetForegroundWindow (oldForegroundWindow);  	}  	break;  }  
