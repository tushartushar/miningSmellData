Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,Cyclomatic complexity of the method is 12
Long Identifier,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,UserController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\UserController.cs,GenerateHtmlDiscoveryDocument,The length of the parameter NonDelegatedHtmlDiscoveryFormat is 31.
Long Identifier,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,,The length of the parameter directedIdentityTrailingPeriodsCheckbox is 39.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,HomeController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\HomeController.cs,Get,The length of the statement  "				Content = new StringContent(GenerateXrdsOPIdentifierDocument(opEndpointUri' Enumerable.Empty<string>())' Encoding.UTF8' "application/xrds+xml")' " is 144.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The length of the statement  "					Content = new StringContent("<html><body>This is an OpenID Provider endpoint.</body></html>"' Encoding.UTF8' "text/html")' " is 122.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The length of the statement  "										userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant() + userIdentityPageBaseUri.PathAndQuery; " is 172.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,opIdentifierLabel_MouseDown,The length of the statement  "				MessageBox.Show(this' ex.Message' "Error while copying OP Identifier to the clipboard"' MessageBoxButton.OK' MessageBoxImage.Error); " is 132.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OpenIdOfflineProvider;component/mainwindow.xaml"' System.UriKind.Relative); " is 121.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,ProcessAuthenticationAsync,The length of the statement  "			bool isRPDiscoverable = await request.IsReturnUrlDiscoverableAsync(hostFactories' cancellationToken) == RelyingPartyDiscoveryResult.Success; " is 140.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OpenIdOfflineProvider;component/checkidwindow.xaml"' System.UriKind.Relative); " is 124.
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following statement contains a magic number: return await await this.MainWindow.Dispatcher.InvokeAsync(async delegate {  				if (!request.IsResponseReady) {  					var authRequest = request as IAuthenticationRequest;  					if (authRequest != null) {  						string userIdentityPageBase = this.Url.Link("default"' new { controller = "user" }) + "/";  						var userIdentityPageBaseUri = new Uri(userIdentityPageBase);  						switch (this.MainWindow.checkidRequestList.SelectedIndex) {  							case 0:  								if (authRequest.IsDirectedIdentity) {  									if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  										userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant() + userIdentityPageBaseUri.PathAndQuery;  									}  									string leafPath = "directedidentity";  									if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  										leafPath += ".";  									}  									authRequest.ClaimedIdentifier = Identifier.Parse(userIdentityPageBase + leafPath' true);  									authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  								}  								authRequest.IsAuthenticated = true;  								break;  							case 1:  								authRequest.IsAuthenticated = false;  								break;  							case 2:  								IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow();  								bool stoleFocus = NativeMethods.SetForegroundWindow(this.MainWindow);  								await CheckIdWindow.ProcessAuthenticationAsync(userIdentityPageBaseUri' authRequest' CancellationToken.None);  								if (stoleFocus) {  									NativeMethods.SetForegroundWindow(oldForegroundWindow);  								}  								break;  						}  					}  				}    				var responseMessage = await provider.PrepareResponseAsync(request);  				return responseMessage;  			});
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,StartProviderAsync,The following statement contains a magic number: int port = 45235;
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider.Controllers,ProviderController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\Controllers\ProviderController.cs,HandleAsync,The following switch statement is missing a default case: switch (this.MainWindow.checkidRequestList.SelectedIndex) {  							case 0:  								if (authRequest.IsDirectedIdentity) {  									if (this.MainWindow.capitalizedHostName.IsChecked.Value) {  										userIdentityPageBase = (userIdentityPageBaseUri.Scheme + Uri.SchemeDelimiter + userIdentityPageBaseUri.Authority).ToUpperInvariant() + userIdentityPageBaseUri.PathAndQuery;  									}  									string leafPath = "directedidentity";  									if (this.MainWindow.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  										leafPath += ".";  									}  									authRequest.ClaimedIdentifier = Identifier.Parse(userIdentityPageBase + leafPath' true);  									authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  								}  								authRequest.IsAuthenticated = true;  								break;  							case 1:  								authRequest.IsAuthenticated = false;  								break;  							case 2:  								IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow();  								bool stoleFocus = NativeMethods.SetForegroundWindow(this.MainWindow);  								await CheckIdWindow.ProcessAuthenticationAsync(userIdentityPageBaseUri' authRequest' CancellationToken.None);  								if (stoleFocus) {  									NativeMethods.SetForegroundWindow(oldForegroundWindow);  								}  								break;  						}
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.opIdentifierLabel = ((System.Windows.Controls.Label)(target));                            #line 18 "..\..\..\MainWindow.xaml"              this.opIdentifierLabel.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.opIdentifierLabel_MouseDown);                            #line default              #line hidden              return;              case 2:              this.checkidRequestList = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.directedIdentityTrailingPeriodsCheckbox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.capitalizedHostName = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.logBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.clearLogButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\MainWindow.xaml"              this.clearLogButton.Click += new System.Windows.RoutedEventHandler(this.ClearLogButton_Click);                            #line default              #line hidden              return;              }
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider,CheckIdWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth\samples\OpenIdOfflineProvider\CheckIdWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.immediateModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.setupModeLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.realmLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.discoverableYesLabel = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.discoverableNoLabel = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.sendResponseButton = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\CheckIdWindow.xaml"              this.sendResponseButton.Click += new System.Windows.RoutedEventHandler(this.sendResponseButton_Click);                            #line default              #line hidden              return;              case 7:              this.cancelButton = ((System.Windows.Controls.Button)(target));              return;              case 8:              this.tabControl1 = ((System.Windows.Controls.TabControl)(target));              return;              case 9:              this.positiveTab = ((System.Windows.Controls.TabItem)(target));              return;              case 10:              this.claimedIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.localIdentifierBox = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.negativeTab = ((System.Windows.Controls.TabItem)(target));              return;              }
