Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,Cyclomatic complexity of the method is 10
Complex Method,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,parseOutput,Cyclomatic complexity of the method is 8
Complex Method,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,WindowProc,Cyclomatic complexity of the method is 8
Complex Method,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,Cyclomatic complexity of the method is 15
Long Parameter List,Fracktory,GHelper,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,Move,The method has 5 parameters.
Long Parameter List,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,MainViewModel,The method has 7 parameters.
Long Parameter List,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,WindowProc,The method has 5 parameters.
Long Statement,Fracktory,AdmeshAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\AdmeshAdapter.cs,Rotate,The length of the statement  "	//PS C:\Users\Amit Sengupta\Documents\GitHub\Fracktory\Fracktory\Slic3r> .\admesh.exe --z-rotate=10 --x-rotate=50 'C:\Users\Amit Sengupta\Downloads\Extra_Printable_Companion_Cube.STL' -c --write-ascii-stl 'C:\Users\Amit Sengupta\Downloads\oct " is 242.
Long Statement,Fracktory,AdmeshAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\AdmeshAdapter.cs,Rotate,The length of the statement  "	p.StartInfo.Arguments = "--x-rotate " + AngleX + " --y-rotate " + AngleY + " --z-rotate " + AngleZ + " \"" + FileName + "\"  -c --write-ascii-stl \"" + FileName.Substring (0' FileName.IndexOf ('.')) + "_rotated.stl\""; " is 218.
Long Statement,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The length of the statement  "		if (Token.Count () > 0 && G1Flag >= 0 && (CommentFlag < 0 || TokenList.IndexOf (Token) < CommentFlag) && (ParanthesisFlag < 0 || TokenList.IndexOf (Token) < ParanthesisFlag)) { " is 176.
Long Statement,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewRotate,The length of the statement  "		double diameter = (currentModel.Bounds.SizeX > currentModel.Bounds.SizeY) ? currentModel.Bounds.SizeX : currentModel.Bounds.SizeY; " is 130.
Long Statement,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,AllowUIToUpdate,The length of the statement  "	Dispatcher.CurrentDispatcher.BeginInvoke (DispatcherPriority.Render' new DispatcherOperationCallback (delegate (object parameter) { " is 131.
Long Statement,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The length of the statement  "		p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\""; " is 172.
Long Statement,Fracktory,PrintConfiguration,C:\repos\FracktalWorks_Fracktory\Fracktory\PrintConfiguration.cs,generateExtraConfigurationString,The length of the statement  "		if (" spiral-vase infill-only-where-needed support-material only-retract-when-crossing-perimeters infill-first ".IndexOf (" " + item.Key + " ") == -1) { " is 152.
Complex Conditional,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The conditional expression  "Token.Count () > 0 && G1Flag >= 0 && (CommentFlag < 0 || TokenList.IndexOf (Token) < CommentFlag) && (ParanthesisFlag < 0 || TokenList.IndexOf (Token) < ParanthesisFlag)"  is complex.
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: if (G1Flag >= 0) {  	if (X != -1)  		X = X - 100;  	if (Y != -1)  		Y = Y - 100;  	return new Point3D (X' Y' Z);  }  
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: if (G1Flag >= 0) {  	if (X != -1)  		X = X - 100;  	if (Y != -1)  		Y = Y - 100;  	return new Point3D (X' Y' Z);  }  
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: if (X != -1)  	X = X - 100;  
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: X = X - 100;  
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: if (Y != -1)  	Y = Y - 100;  
Magic Number,Fracktory,GParser,C:\repos\FracktalWorks_Fracktory\Fracktory\GHelper.cs,getPoint,The following statement contains a magic number: Y = Y - 100;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,MainViewModel,The following statement contains a magic number: ScaleFactor = 100;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewZoomExtents,The following statement contains a magic number: this.viewport.Camera.Position = new Point3D {  	X = 0'  	Y = -(currentModel.Bounds.SizeY / 2) - currentModel.Bounds.SizeY'  	Z = (currentModel.Bounds.SizeZ) + currentModel.Bounds.SizeZ  };  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewZoomExtents,The following statement contains a magic number: this.viewport.Camera.LookDirection = new Vector3D {  	X = 0'  	Y = (currentModel.Bounds.SizeY / 2) + currentModel.Bounds.SizeY'  	Z = -(currentModel.Bounds.SizeZ) - currentModel.Bounds.SizeZ  };  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewZoomExtents,The following statement contains a magic number: viewport.Camera.NearPlaneDistance = 0.001;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewRotate,The following statement contains a magic number: if (rotatorManipulatorX.Visibility == Visibility.Visible || currentModel == null) {  	rotatorManipulatorX.Visibility = Visibility.Collapsed;  	rotatorManipulatorY.Visibility = Visibility.Collapsed;  	rotatorManipulatorZ.Visibility = Visibility.Collapsed;  }  else {  	ScaleXYZ.Visibility = Visibility.Collapsed;  	rotatorManipulatorX.Visibility = Visibility.Visible;  	rotatorManipulatorY.Visibility = Visibility.Visible;  	rotatorManipulatorZ.Visibility = Visibility.Visible;  	double diameter = (currentModel.Bounds.SizeX > currentModel.Bounds.SizeY) ? currentModel.Bounds.SizeX : currentModel.Bounds.SizeY;  	diameter = (diameter > currentModel.Bounds.SizeZ) ? diameter : currentModel.Bounds.SizeZ;  	diameter += 50;  	rotatorManipulatorX.Diameter = diameter;  	rotatorManipulatorY.Diameter = diameter;  	rotatorManipulatorZ.Diameter = diameter;  	//inner diameter  	diameter -= 10;  	rotatorManipulatorX.InnerDiameter = diameter;  	rotatorManipulatorY.InnerDiameter = diameter;  	rotatorManipulatorZ.InnerDiameter = diameter;  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewRotate,The following statement contains a magic number: if (rotatorManipulatorX.Visibility == Visibility.Visible || currentModel == null) {  	rotatorManipulatorX.Visibility = Visibility.Collapsed;  	rotatorManipulatorY.Visibility = Visibility.Collapsed;  	rotatorManipulatorZ.Visibility = Visibility.Collapsed;  }  else {  	ScaleXYZ.Visibility = Visibility.Collapsed;  	rotatorManipulatorX.Visibility = Visibility.Visible;  	rotatorManipulatorY.Visibility = Visibility.Visible;  	rotatorManipulatorZ.Visibility = Visibility.Visible;  	double diameter = (currentModel.Bounds.SizeX > currentModel.Bounds.SizeY) ? currentModel.Bounds.SizeX : currentModel.Bounds.SizeY;  	diameter = (diameter > currentModel.Bounds.SizeZ) ? diameter : currentModel.Bounds.SizeZ;  	diameter += 50;  	rotatorManipulatorX.Diameter = diameter;  	rotatorManipulatorY.Diameter = diameter;  	rotatorManipulatorZ.Diameter = diameter;  	//inner diameter  	diameter -= 10;  	rotatorManipulatorX.InnerDiameter = diameter;  	rotatorManipulatorY.InnerDiameter = diameter;  	rotatorManipulatorZ.InnerDiameter = diameter;  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewRotate,The following statement contains a magic number: diameter += 50;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewRotate,The following statement contains a magic number: diameter -= 10;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewScale,The following statement contains a magic number: if (ScaleXYZ.Visibility == Visibility.Collapsed && currentModel != null) {  	rotatorManipulatorX.Visibility = Visibility.Collapsed;  	rotatorManipulatorY.Visibility = Visibility.Collapsed;  	rotatorManipulatorZ.Visibility = Visibility.Collapsed;  	ScaleXYZ.Visibility = Visibility.Visible;  	ScaleXYZ.Length = currentModel.Bounds.SizeZ + 20;  	ScaleXYZ.Value = ScaleFactor;  }  else {  	ScaleXYZ.Visibility = Visibility.Collapsed;  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,ViewScale,The following statement contains a magic number: ScaleXYZ.Length = currentModel.Bounds.SizeZ + 20;  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,GenerateGCODE,The following statement contains a magic number: PrintConfig.ExtraConfiguration ["scale"] = (ScaleFactor / 100).ToString ();  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,GenerateGCODE,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	Thread.Sleep (200);  	while (adp.HasFinished == false) {  		ProgressString = adp.ProgressOutput;  		ProgressValue = adp.ProgressValue;  		AllowUIToUpdate ();  	}  	ProgressString = adp.ProgressOutput;  	ProgressValue = adp.ProgressValue;  	AllowUIToUpdate ();  });  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,GenerateGCODE,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: for (int i = 0; i < vrt.Count - 1; i++) {  	builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: for (int i = 0; i < vrt.Count - 1; i++) {  	builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: for (int i = 0; i < vrt.Count - 1; i++) {  	builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  }  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,Prontercae,The following statement contains a magic number: builder.AddPipe (vrt [i]' vrt [i + 1]' 0.25' 0.25' 18);  
Magic Number,Fracktory,MainViewModel,C:\repos\FracktalWorks_Fracktory\Fracktory\MainViewModel.cs,FileOpen,The following statement contains a magic number: ScaleFactor = adp.ScaleFactor * 100;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: while (output == "" || output.IndexOf ("parts won't fit in your print") != -1) {  	if (ScaleFactor < 0.01) {  		ScaleFactor -= 0.001;  	}  	else if (ScaleFactor < 0.1) {  		ScaleFactor -= 0.01;  	}  	else {  		ScaleFactor -= 0.1;  	}  	p.StartInfo.Arguments = "--scale " + ScaleFactor + " --info \"" + FileName + "\"";  	p.Start ();  	output = p.StandardOutput.ReadToEnd ();  	p.WaitForExit ();  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: while (output == "" || output.IndexOf ("parts won't fit in your print") != -1) {  	if (ScaleFactor < 0.01) {  		ScaleFactor -= 0.001;  	}  	else if (ScaleFactor < 0.1) {  		ScaleFactor -= 0.01;  	}  	else {  		ScaleFactor -= 0.1;  	}  	p.StartInfo.Arguments = "--scale " + ScaleFactor + " --info \"" + FileName + "\"";  	p.Start ();  	output = p.StandardOutput.ReadToEnd ();  	p.WaitForExit ();  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: while (output == "" || output.IndexOf ("parts won't fit in your print") != -1) {  	if (ScaleFactor < 0.01) {  		ScaleFactor -= 0.001;  	}  	else if (ScaleFactor < 0.1) {  		ScaleFactor -= 0.01;  	}  	else {  		ScaleFactor -= 0.1;  	}  	p.StartInfo.Arguments = "--scale " + ScaleFactor + " --info \"" + FileName + "\"";  	p.Start ();  	output = p.StandardOutput.ReadToEnd ();  	p.WaitForExit ();  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: while (output == "" || output.IndexOf ("parts won't fit in your print") != -1) {  	if (ScaleFactor < 0.01) {  		ScaleFactor -= 0.001;  	}  	else if (ScaleFactor < 0.1) {  		ScaleFactor -= 0.01;  	}  	else {  		ScaleFactor -= 0.1;  	}  	p.StartInfo.Arguments = "--scale " + ScaleFactor + " --info \"" + FileName + "\"";  	p.Start ();  	output = p.StandardOutput.ReadToEnd ();  	p.WaitForExit ();  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: while (output == "" || output.IndexOf ("parts won't fit in your print") != -1) {  	if (ScaleFactor < 0.01) {  		ScaleFactor -= 0.001;  	}  	else if (ScaleFactor < 0.1) {  		ScaleFactor -= 0.01;  	}  	else {  		ScaleFactor -= 0.1;  	}  	p.StartInfo.Arguments = "--scale " + ScaleFactor + " --info \"" + FileName + "\"";  	p.Start ();  	output = p.StandardOutput.ReadToEnd ();  	p.WaitForExit ();  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.01) {  	ScaleFactor -= 0.001;  }  else if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.01) {  	ScaleFactor -= 0.001;  }  else if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.01) {  	ScaleFactor -= 0.001;  }  else if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.01) {  	ScaleFactor -= 0.001;  }  else if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.01) {  	ScaleFactor -= 0.001;  }  else if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: ScaleFactor -= 0.001;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: if (ScaleFactor < 0.1) {  	ScaleFactor -= 0.01;  }  else {  	ScaleFactor -= 0.1;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: ScaleFactor -= 0.01;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,SlicerAdapter,The following statement contains a magic number: ScaleFactor -= 0.1;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (FileName == "" || Config == null) {  	return;  }  else {  	Process p = new Process ();  	p.StartInfo.CreateNoWindow = true;  	p.StartInfo.WorkingDirectory = @"";  	p.StartInfo.FileName = AssemblyDirectory + @"\Slic3r\slic3r-console.exe";  	p.StartInfo.Arguments = "--load \"" + AssemblyDirectory + @"\Configuration\default.ini" + "\"" + " " + Config.generateExtraConfigurationString () + " \"" + FileName + "\"";  	p.StartInfo.UseShellExecute = false;  	p.StartInfo.RedirectStandardOutput = true;  	p.Start ();  	//string output = p.StandardOutput.ReadToEnd();  	//Console.WriteLine(output);  	string outputOld = "";  	string outputNew = "";  	String allOutput = "";  	ThreadPool.QueueUserWorkItem (state =>  {  		while (p.HasExited == false) {  			Thread.Sleep (300);  			if (p.StandardOutput.ReadLine () == null) {  				continue;  			}  			outputNew = p.StandardOutput.ReadLine ();  			if (outputNew != outputOld) {  				Console.WriteLine (outputNew);  				outputOld = outputNew;  				allOutput += outputOld;  				if (outputOld.IndexOf ("Exporting G-code") > -1) {  					ProgressOutput = "Exporing G-Code";  				}  				else if (outputOld.IndexOf ("=>") > -1) {  					ProgressOutput = outputOld.Substring (3);  				}  				else {  					ProgressOutput = outputOld;  				}  				if (allOutput.IndexOf ("Filament required") != -1) {  					ProgressValue = 100;  				}  				else if (allOutput.IndexOf ("Exporting G-code") != -1) {  					ProgressValue = 60;  				}  				else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  					ProgressValue = 40;  				}  				else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  					ProgressValue = 30;  				}  				else if (allOutput.IndexOf ("Generating perimeters") != -1) {  					ProgressValue = 20;  				}  				else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  					ProgressValue = 20;  				}  			}  		}  	});  	p.WaitForExit ();  	HasFinished = true;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (state =>  {  	while (p.HasExited == false) {  		Thread.Sleep (300);  		if (p.StandardOutput.ReadLine () == null) {  			continue;  		}  		outputNew = p.StandardOutput.ReadLine ();  		if (outputNew != outputOld) {  			Console.WriteLine (outputNew);  			outputOld = outputNew;  			allOutput += outputOld;  			if (outputOld.IndexOf ("Exporting G-code") > -1) {  				ProgressOutput = "Exporing G-Code";  			}  			else if (outputOld.IndexOf ("=>") > -1) {  				ProgressOutput = outputOld.Substring (3);  			}  			else {  				ProgressOutput = outputOld;  			}  			if (allOutput.IndexOf ("Filament required") != -1) {  				ProgressValue = 100;  			}  			else if (allOutput.IndexOf ("Exporting G-code") != -1) {  				ProgressValue = 60;  			}  			else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  				ProgressValue = 40;  			}  			else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  				ProgressValue = 30;  			}  			else if (allOutput.IndexOf ("Generating perimeters") != -1) {  				ProgressValue = 20;  			}  			else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  				ProgressValue = 20;  			}  		}  	}  });  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: while (p.HasExited == false) {  	Thread.Sleep (300);  	if (p.StandardOutput.ReadLine () == null) {  		continue;  	}  	outputNew = p.StandardOutput.ReadLine ();  	if (outputNew != outputOld) {  		Console.WriteLine (outputNew);  		outputOld = outputNew;  		allOutput += outputOld;  		if (outputOld.IndexOf ("Exporting G-code") > -1) {  			ProgressOutput = "Exporing G-Code";  		}  		else if (outputOld.IndexOf ("=>") > -1) {  			ProgressOutput = outputOld.Substring (3);  		}  		else {  			ProgressOutput = outputOld;  		}  		if (allOutput.IndexOf ("Filament required") != -1) {  			ProgressValue = 100;  		}  		else if (allOutput.IndexOf ("Exporting G-code") != -1) {  			ProgressValue = 60;  		}  		else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  			ProgressValue = 40;  		}  		else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  			ProgressValue = 30;  		}  		else if (allOutput.IndexOf ("Generating perimeters") != -1) {  			ProgressValue = 20;  		}  		else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  			ProgressValue = 20;  		}  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputNew != outputOld) {  	Console.WriteLine (outputNew);  	outputOld = outputNew;  	allOutput += outputOld;  	if (outputOld.IndexOf ("Exporting G-code") > -1) {  		ProgressOutput = "Exporing G-Code";  	}  	else if (outputOld.IndexOf ("=>") > -1) {  		ProgressOutput = outputOld.Substring (3);  	}  	else {  		ProgressOutput = outputOld;  	}  	if (allOutput.IndexOf ("Filament required") != -1) {  		ProgressValue = 100;  	}  	else if (allOutput.IndexOf ("Exporting G-code") != -1) {  		ProgressValue = 60;  	}  	else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  		ProgressValue = 40;  	}  	else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  		ProgressValue = 30;  	}  	else if (allOutput.IndexOf ("Generating perimeters") != -1) {  		ProgressValue = 20;  	}  	else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  		ProgressValue = 20;  	}  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputOld.IndexOf ("Exporting G-code") > -1) {  	ProgressOutput = "Exporing G-Code";  }  else if (outputOld.IndexOf ("=>") > -1) {  	ProgressOutput = outputOld.Substring (3);  }  else {  	ProgressOutput = outputOld;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (outputOld.IndexOf ("=>") > -1) {  	ProgressOutput = outputOld.Substring (3);  }  else {  	ProgressOutput = outputOld;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressOutput = outputOld.Substring (3);  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Filament required") != -1) {  	ProgressValue = 100;  }  else if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 100;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Exporting G-code") != -1) {  	ProgressValue = 60;  }  else if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 60;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating horizontal shells") != -1) {  	ProgressValue = 40;  }  else if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 40;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Preparing infill surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 30;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf (" Detecting solid surfaces") != -1) {  	ProgressValue = 30;  }  else if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 30;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Generating perimeters") != -1) {  	ProgressValue = 20;  }  else if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 20;  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: if (allOutput.IndexOf ("Processing triangulated mesh") != -1) {  	ProgressValue = 20;  }  
Magic Number,Fracktory,SlicerAdapter,C:\repos\FracktalWorks_Fracktory\Fracktory\SlicerAdapter.cs,GenerateGcode,The following statement contains a magic number: ProgressValue = 20;  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (HeightResolution.SelectedIndex == 0) {  	config.ExtraConfiguration ["layer-height"] = "0.1";  	//low  }  else if (HeightResolution.SelectedIndex == 1) {  	config.ExtraConfiguration ["layer-height"] = "0.2";  	//med  }  else if (HeightResolution.SelectedIndex == 2) {  	config.ExtraConfiguration ["layer-height"] = "0.3";  	//high  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (HeightResolution.SelectedIndex == 1) {  	config.ExtraConfiguration ["layer-height"] = "0.2";  	//med  }  else if (HeightResolution.SelectedIndex == 2) {  	config.ExtraConfiguration ["layer-height"] = "0.3";  	//high  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (HeightResolution.SelectedIndex == 2) {  	config.ExtraConfiguration ["layer-height"] = "0.3";  	//high  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 0) {  	config.ExtraConfiguration ["fill-density"] = "0";  	//hollow  }  else if (FillDensity.SelectedIndex == 1) {  	config.ExtraConfiguration ["fill-density"] = "0.06";  	//low  }  else if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 0) {  	config.ExtraConfiguration ["fill-density"] = "0";  	//hollow  }  else if (FillDensity.SelectedIndex == 1) {  	config.ExtraConfiguration ["fill-density"] = "0.06";  	//low  }  else if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 1) {  	config.ExtraConfiguration ["fill-density"] = "0.06";  	//low  }  else if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 1) {  	config.ExtraConfiguration ["fill-density"] = "0.06";  	//low  }  else if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 2) {  	config.ExtraConfiguration ["fill-density"] = "0.15";  	//medium  }  else if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,btnPrint_Click,The following statement contains a magic number: if (FillDensity.SelectedIndex == 3) {  	config.ExtraConfiguration ["fill-density"] = "0.4";  	//medium  }  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,canvas_MouseMove,The following statement contains a magic number: l.Y2 = 200;  
Magic Number,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,canvas_MouseMove,The following statement contains a magic number: l1.X2 = 200;  
Missing Default,Fracktory,MainWindow,C:\repos\FracktalWorks_Fracktory\Fracktory\MainWindow.xaml.cs,WindowProc,The following switch statement is missing a default case: switch (msg) {  case 0x0024:  	WinInterop.HwndSource _win = WinInterop.HwndSource.FromHwnd (hwnd);  	Window _root = (Window)_win.RootVisual;  	//only   	if (_root.WindowState != WindowState.Maximized) {  		break;  	}  	WmGetMinMaxInfo (hwnd' lParam);  	handled = true;  	break;  }  
