Implementation smell,Namespace,Class,File,Method,Description
Long Method,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The method has 164 lines of code.
Long Method,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnPrivMsg,The method has 127 lines of code.
Complex Method,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,Cyclomatic complexity of the method is 36
Complex Method,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnChanMessage,Cyclomatic complexity of the method is 14
Complex Method,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnPrivMsg,Cyclomatic complexity of the method is 63
Complex Method,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnNickChange,Cyclomatic complexity of the method is 11
Complex Method,MCLawl,Scripting,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Scripting\Scripting.cs,Compile,Cyclomatic complexity of the method is 29
Long Statement,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Init,The length of the statement  "	staticVars = "port=" + Server.port + "&max=" + Server.players + "&name=" + UrlEncode (Server.name) + "&public=" + Server.pub + "&version=" + Server.version; " is 156.
Long Statement,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The length of the statement  "			postVars += "&motd=" + UrlEncode (Server.motd) + "&hash=" + hash + "&data=" + Server.Version + "'" + System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version.ToString () + "&server=MCSong" + "&details=Running MCSong version " + Server.Version; " is 256.
Long Statement,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,UrlEncode,The length of the statement  "		if ((input [i] >= '0' && input [i] <= '9') || (input [i] >= 'a' && input [i] <= 'z') || (input [i] >= 'A' && input [i] <= 'Z') || input [i] == '-' || input [i] == '_' || input [i] == '.' || input [i] == '~') { " is 209.
Long Statement,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnJoin,The length of the statement  "		Player.GlobalChat (null' Server.IRCColour + e.Data.Nick + Server.DefaultColor + " has joined the operator channel"' false); " is 123.
Long Statement,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnPart,The length of the statement  "		Player.GlobalChat (null' Server.IRCColour + e.Data.Nick + Server.DefaultColor + " has left the operator channel"' false); " is 121.
Long Statement,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnNickChange,The length of the statement  "		Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is now known as " + e.NewNickname); " is 127.
Long Statement,MCLawl,Scripting,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Scripting\Scripting.cs,CreateNew,The length of the statement  "	sw.Write ("/*" + Environment.NewLine + "\tAuto-generated command skeleton class." + Environment.NewLine + Environment.NewLine + "\tUse this as a basis for custom commands implemented via the MCForge scripting framework." + Environment.NewLine + "\tFile and class should be named a specific way.  For example' /update is named 'CmdUpdate.cs' for the file' and 'CmdUpdate' for the class." + Environment.NewLine + "*/" + Environment.NewLine + Environment.NewLine + "// Add any other using statements you need up here' of course." + Environment.NewLine + "// As a note' MCForge is designed for .NET 3.5." + Environment.NewLine + "using System;" + Environment.NewLine + Environment.NewLine + "namespace MCLawl" + Environment.NewLine + "{" + Environment.NewLine + "\tpublic class " + ClassName (CmdName) + " : Command" + Environment.NewLine + "\t{" + Environment.NewLine + "\t\t// The command's name' in all lowercase.  What you'll be putting behind the slash when using it." + Environment.NewLine + "\t\tpublic override string name { get { return \"" + CmdName.ToLower () + "\"; } }" + Environment.NewLine + Environment.NewLine + "\t\t// Command's shortcut (please take care not to use an existing one' or you may have issues." + Environment.NewLine + "\t\tpublic override string shortcut { get { return \"\"; } }" + Environment.NewLine + Environment.NewLine + "\t\t// Determines which submenu the command displays in under /help." + Environment.NewLine + "\t\tpublic override string type { get { return \"other\"; } }" + Environment.NewLine + Environment.NewLine + "\t\t// Determines whether or not this command can be used in a museum.  Block/map altering commands should be made false to avoid errors." + Environment.NewLine + "\t\tpublic override bool museumUsable { get { return false; } }" + Environment.NewLine + Environment.NewLine + "\t\t// Determines the command's default rank.  Valid values are:" + Environment.NewLine + "\t\t// LevelPermission.Nobody' LevelPermission.Banned' LevelPermission.Guest" + Environment.NewLine + "\t\t// LevelPermission.Builder' LevelPermission.AdvBuilder' LevelPermission.Operator' LevelPermission.Admin" + Environment.NewLine + "\t\tpublic override LevelPermission defaultRank { get { return LevelPermission.Banned; } }" + Environment.NewLine + Environment.NewLine + "\t\t// This is where the magic happens' naturally." + Environment.NewLine + "\t\t// p is the player object for the player executing the command.  message is everything after the command invocation itself." + Environment.NewLine + "\t\tpublic override void Use(Player p' string message)" + Environment.NewLine + "\t\t{" + Environment.NewLine + "\t\t\tPlayer.SendMessage(p' \"Hello World!\");" + Environment.NewLine + "\t\t}" + Environment.NewLine + Environment.NewLine + "\t\t// This one controls what happens when you use /help [commandname]." + Environment.NewLine + "\t\tpublic override void Help(Player p)" + Environment.NewLine + "\t\t{" + Environment.NewLine + "\t\t\tPlayer.SendMessage(p' \"/" + CmdName.ToLower () + " - Does stuff.  Example command.\");" + Environment.NewLine + "\t\t}" + Environment.NewLine + "\t}" + Environment.NewLine + "}"); " is 3158.
Complex Conditional,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,UrlEncode,The conditional expression  "(input [i] >= '0' && input [i] <= '9') || (input [i] >= 'a' && input [i] <= 'z') || (input [i] >= 'A' && input [i] <= 'Z') || input [i] == '-' || input [i] == '_' || input [i] == '.' || input [i] == '~'"  is complex.
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Init,The following statement contains a magic number: heartbeatTimer.Elapsed += delegate {  	heartbeatTimer.Interval = 55000;  	try {  		Pump (Beat.Minecraft);  		// Pump(Beat.TChalo);  	}  	catch (Exception e) {  		Server.ErrorLog (e);  	}  };  
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Init,The following statement contains a magic number: heartbeatTimer.Interval = 55000;  
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The following statement contains a magic number: try {  	int hidden = 0;  	totalTries++;  	// append additional information as needed  	switch (type) {  	case Beat.Minecraft:  		if (Server.logbeat) {  			beatlogger = new StreamWriter ("heartbeat.log"' true);  		}  		postVars += "&salt=" + Server.salt;  		goto default;  	/* case Beat.MCSong:                         if (hash == null)                         {                             throw new Exception("Hash not set");                         }                          url = "http://www.mcsong.tk/hbannounce.php";                          if (Player.number > 0)                         {                             players = "";                             foreach (Player p in Player.players)                             {                                 if (p.hidden)                                 {                                     hidden++;                                     continue;                                 }                                 players += p.name + " (" + p.group.name + ")" + "'";                             }                             if (Player.number - hidden > 0)                                 postVars += "&players=" + players.Substring(0' players.Length - 1);                         }                          worlds = "";                         foreach (Level l in Server.levels)                         {                             worlds += l.name + "'";                             postVars += "&worlds=" + worlds.Substring(0' worlds.Length - 1);                         }                          postVars += "&motd=" + UrlEncode(Server.motd) +                                 "&lvlcount=" + (byte)Server.levels.Count +                                 "&lawlversion=" + Server.Version.Replace(".0"' "") +                                 "&hash=" + hash;                          goto default; */case Beat.TChalo:  		if (hash == null)  			throw new Exception ("Hash not set");  		url = "http://minecraft.tchalo.com/announce.php";  		// build list of current players in server  		if (Player.number > 0) {  			players = "";  			foreach (Player p in Player.players) {  				if (p.hidden) {  					hidden++;  					continue;  				}  				players += p.name + "'";  			}  			if (Player.number - hidden > 0)  				postVars += "&players=" + players.Substring (0' players.Length - 1);  		}  		worlds = "";  		foreach (Level l in Server.levels) {  			worlds += l.name + "'";  			postVars += "&worlds=" + worlds.Substring (0' worlds.Length - 1);  		}  		postVars += "&motd=" + UrlEncode (Server.motd) + "&hash=" + hash + "&data=" + Server.Version + "'" + System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version.ToString () + "&server=MCSong" + "&details=Running MCSong version " + Server.Version;  		goto default;  	default:  		postVars += "&users=" + (Player.number - hidden);  		break;  	}  	request = (HttpWebRequest)WebRequest.Create (new Uri (url));  	request.Method = "POST";  	request.ContentType = "application/x-www-form-urlencoded";  	request.CachePolicy = new System.Net.Cache.RequestCachePolicy (System.Net.Cache.RequestCacheLevel.NoCacheNoStore);  	byte[] formData = Encoding.ASCII.GetBytes (postVars);  	request.ContentLength = formData.Length;  	request.Timeout = 15000;  	retryStream:  	try {  		using (Stream requestStream = request.GetRequestStream ()) {  			requestStream.Write (formData' 0' formData.Length);  			if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Request sent at " + DateTime.Now.ToString ());  			}  			requestStream.Close ();  		}  	}  	catch (WebException e) {  		//Server.ErrorLog(e);  		if (e.Status == WebExceptionStatus.Timeout) {  			if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Timeout detected at " + DateTime.Now.ToString ());  			}  			goto retryStream;  			//throw new WebException("Failed during request.GetRequestStream()"' e.InnerException' e.Status' e.Response);  		}  		else if (type == Beat.Minecraft && Server.logbeat) {  			beatlogger.WriteLine ("Non-timeout exception detected: " + e.Message);  			beatlogger.Write ("Stack Trace: " + e.StackTrace);  		}  	}  	//if (hash == null)  	//{  	using (WebResponse response = request.GetResponse ()) {  		using (StreamReader responseReader = new StreamReader (response.GetResponseStream ())) {  			if (hash == null) {  				string line = responseReader.ReadLine ();  				if (type == Beat.Minecraft && Server.logbeat) {  					beatlogger.WriteLine ("Response received at " + DateTime.Now.ToString ());  					beatlogger.WriteLine ("Received: " + line);  				}  				hash = line.Substring (line.LastIndexOf ('=') + 1);  				serverURL = line;  				//serverURL = "http://" + serverURL.Substring(serverURL.IndexOf('.') + 1);  				Server.s.UpdateUrl (serverURL);  				File.WriteAllText ("text/externalurl.txt"' serverURL);  				Server.s.Log ("URL found: " + serverURL);  			}  			else if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Response received at " + DateTime.Now.ToString ());  			}  		}  	}  	//}  	//Server.s.Log(string.Format("Heartbeat: {0}"' type));  }  catch (WebException e) {  	if (e.Status == WebExceptionStatus.Timeout) {  		if (type == Beat.Minecraft && Server.logbeat) {  			beatlogger.WriteLine ("Timeout detected at " + DateTime.Now.ToString ());  		}  		Pump (type);  	}  }  catch {  	if (type == Beat.Minecraft && Server.logbeat) {  		beatlogger.WriteLine ("Heartbeat failure #" + totalTries + " at " + DateTime.Now.ToString ());  	}  	if (totalTries < 3)  		goto retry;  	if (type == Beat.Minecraft && Server.logbeat) {  		beatlogger.WriteLine ("Failed three times.  Stopping.");  		beatlogger.Close ();  	}  	return false;  }  finally {  	request.Abort ();  }  
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The following statement contains a magic number: try {  	int hidden = 0;  	totalTries++;  	// append additional information as needed  	switch (type) {  	case Beat.Minecraft:  		if (Server.logbeat) {  			beatlogger = new StreamWriter ("heartbeat.log"' true);  		}  		postVars += "&salt=" + Server.salt;  		goto default;  	/* case Beat.MCSong:                         if (hash == null)                         {                             throw new Exception("Hash not set");                         }                          url = "http://www.mcsong.tk/hbannounce.php";                          if (Player.number > 0)                         {                             players = "";                             foreach (Player p in Player.players)                             {                                 if (p.hidden)                                 {                                     hidden++;                                     continue;                                 }                                 players += p.name + " (" + p.group.name + ")" + "'";                             }                             if (Player.number - hidden > 0)                                 postVars += "&players=" + players.Substring(0' players.Length - 1);                         }                          worlds = "";                         foreach (Level l in Server.levels)                         {                             worlds += l.name + "'";                             postVars += "&worlds=" + worlds.Substring(0' worlds.Length - 1);                         }                          postVars += "&motd=" + UrlEncode(Server.motd) +                                 "&lvlcount=" + (byte)Server.levels.Count +                                 "&lawlversion=" + Server.Version.Replace(".0"' "") +                                 "&hash=" + hash;                          goto default; */case Beat.TChalo:  		if (hash == null)  			throw new Exception ("Hash not set");  		url = "http://minecraft.tchalo.com/announce.php";  		// build list of current players in server  		if (Player.number > 0) {  			players = "";  			foreach (Player p in Player.players) {  				if (p.hidden) {  					hidden++;  					continue;  				}  				players += p.name + "'";  			}  			if (Player.number - hidden > 0)  				postVars += "&players=" + players.Substring (0' players.Length - 1);  		}  		worlds = "";  		foreach (Level l in Server.levels) {  			worlds += l.name + "'";  			postVars += "&worlds=" + worlds.Substring (0' worlds.Length - 1);  		}  		postVars += "&motd=" + UrlEncode (Server.motd) + "&hash=" + hash + "&data=" + Server.Version + "'" + System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version.ToString () + "&server=MCSong" + "&details=Running MCSong version " + Server.Version;  		goto default;  	default:  		postVars += "&users=" + (Player.number - hidden);  		break;  	}  	request = (HttpWebRequest)WebRequest.Create (new Uri (url));  	request.Method = "POST";  	request.ContentType = "application/x-www-form-urlencoded";  	request.CachePolicy = new System.Net.Cache.RequestCachePolicy (System.Net.Cache.RequestCacheLevel.NoCacheNoStore);  	byte[] formData = Encoding.ASCII.GetBytes (postVars);  	request.ContentLength = formData.Length;  	request.Timeout = 15000;  	retryStream:  	try {  		using (Stream requestStream = request.GetRequestStream ()) {  			requestStream.Write (formData' 0' formData.Length);  			if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Request sent at " + DateTime.Now.ToString ());  			}  			requestStream.Close ();  		}  	}  	catch (WebException e) {  		//Server.ErrorLog(e);  		if (e.Status == WebExceptionStatus.Timeout) {  			if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Timeout detected at " + DateTime.Now.ToString ());  			}  			goto retryStream;  			//throw new WebException("Failed during request.GetRequestStream()"' e.InnerException' e.Status' e.Response);  		}  		else if (type == Beat.Minecraft && Server.logbeat) {  			beatlogger.WriteLine ("Non-timeout exception detected: " + e.Message);  			beatlogger.Write ("Stack Trace: " + e.StackTrace);  		}  	}  	//if (hash == null)  	//{  	using (WebResponse response = request.GetResponse ()) {  		using (StreamReader responseReader = new StreamReader (response.GetResponseStream ())) {  			if (hash == null) {  				string line = responseReader.ReadLine ();  				if (type == Beat.Minecraft && Server.logbeat) {  					beatlogger.WriteLine ("Response received at " + DateTime.Now.ToString ());  					beatlogger.WriteLine ("Received: " + line);  				}  				hash = line.Substring (line.LastIndexOf ('=') + 1);  				serverURL = line;  				//serverURL = "http://" + serverURL.Substring(serverURL.IndexOf('.') + 1);  				Server.s.UpdateUrl (serverURL);  				File.WriteAllText ("text/externalurl.txt"' serverURL);  				Server.s.Log ("URL found: " + serverURL);  			}  			else if (type == Beat.Minecraft && Server.logbeat) {  				beatlogger.WriteLine ("Response received at " + DateTime.Now.ToString ());  			}  		}  	}  	//}  	//Server.s.Log(string.Format("Heartbeat: {0}"' type));  }  catch (WebException e) {  	if (e.Status == WebExceptionStatus.Timeout) {  		if (type == Beat.Minecraft && Server.logbeat) {  			beatlogger.WriteLine ("Timeout detected at " + DateTime.Now.ToString ());  		}  		Pump (type);  	}  }  catch {  	if (type == Beat.Minecraft && Server.logbeat) {  		beatlogger.WriteLine ("Heartbeat failure #" + totalTries + " at " + DateTime.Now.ToString ());  	}  	if (totalTries < 3)  		goto retry;  	if (type == Beat.Minecraft && Server.logbeat) {  		beatlogger.WriteLine ("Failed three times.  Stopping.");  		beatlogger.Close ();  	}  	return false;  }  finally {  	request.Abort ();  }  
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The following statement contains a magic number: request.Timeout = 15000;  
Magic Number,MCSong,Heartbeat,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Heartbeat.cs,Pump,The following statement contains a magic number: if (totalTries < 3)  	goto retry;  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnDisconnected,The following statement contains a magic number: try {  	irc.Connect (server' 6667);  }  catch {  	Console.WriteLine ("Failed to reconnect to IRC");  }  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnDisconnected,The following statement contains a magic number: irc.Connect (server' 6667);  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnChanMessage,The following statement contains a magic number: if (temp [0] == '!')// IRC Commands [BETA]   {  	string msg = temp.Remove (0' 1);  	switch (msg.ToLower ()) {  	case "players":  		Say ("There are " + Player.players.Count.ToString () + " players online:");  		string playernames = "";  		foreach (Player p in Player.players) {  			playernames += "' " + p.name;  		}  		Say (playernames.Remove (0' 2));  		break;  	case "url":  		Say ("Server URL: " + System.IO.File.ReadAllLines ("text/externalurl.txt"));  		break;  	}  }  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnChanMessage,The following statement contains a magic number: switch (msg.ToLower ()) {  case "players":  	Say ("There are " + Player.players.Count.ToString () + " players online:");  	string playernames = "";  	foreach (Player p in Player.players) {  		playernames += "' " + p.name;  	}  	Say (playernames.Remove (0' 2));  	break;  case "url":  	Say ("Server URL: " + System.IO.File.ReadAllLines ("text/externalurl.txt"));  	break;  }  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnChanMessage,The following statement contains a magic number: Say (playernames.Remove (0' 2));  
Magic Number,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnNickChange,The following statement contains a magic number: if (e.NewNickname.Split ('|').Length == 2) {  	key = e.NewNickname.Split ('|') [1];  	if (key != null && key != "") {  		switch (key) {  		case "AFK":  			Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is AFK");  			Server.afkset.Add (e.OldNickname);  			break;  		case "Away":  			Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is Away");  			Server.afkset.Add (e.OldNickname);  			break;  		}  	}  }  else if (Server.afkset.Contains (e.NewNickname)) {  	Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.NewNickname + Server.DefaultColor + " is no longer away");  	Server.afkset.Remove (e.NewNickname);  }  else  	Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is now known as " + e.NewNickname);  
Magic Number,MCLawl,Scripting,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Scripting\Scripting.cs,Load,The following statement contains a magic number: if (command.Length < 3 || command.Substring (0' 3).ToLower () != "cmd") {  	return "Invalid command name specified.";  }  
Magic Number,MCLawl,Scripting,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\Scripting\Scripting.cs,Load,The following statement contains a magic number: if (command.Length < 3 || command.Substring (0' 3).ToLower () != "cmd") {  	return "Invalid command name specified.";  }  
Missing Default,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnChanMessage,The following switch statement is missing a default case: switch (msg.ToLower ()) {  case "players":  	Say ("There are " + Player.players.Count.ToString () + " players online:");  	string playernames = "";  	foreach (Player p in Player.players) {  		playernames += "' " + p.name;  	}  	Say (playernames.Remove (0' 2));  	break;  case "url":  	Say ("Server URL: " + System.IO.File.ReadAllLines ("text/externalurl.txt"));  	break;  }  
Missing Default,MCSong,IRCBot,C:\repos\MCSDFDBSWADZDSBL_MCSDFDBSWADZBSBL\IRCBot.cs,OnNickChange,The following switch statement is missing a default case: switch (key) {  case "AFK":  	Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is AFK");  	Server.afkset.Add (e.OldNickname);  	break;  case "Away":  	Player.GlobalMessage ("[IRC] " + Server.IRCColour + e.OldNickname + Server.DefaultColor + " is Away");  	Server.afkset.Add (e.OldNickname);  	break;  }  
