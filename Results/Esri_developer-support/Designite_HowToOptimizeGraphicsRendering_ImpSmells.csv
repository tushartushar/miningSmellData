Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HowToOptimizeGraphicsRendering,App,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\App.xaml.cs,Application_Startup,The length of the statement  "                // 1. Allow the app user to authenticate with ArcGIS Online or Portal for ArcGIS then call the set license method with their license info. " is 138.
Long Statement,HowToOptimizeGraphicsRendering,App,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\App.xaml.cs,Application_Startup,The length of the statement  "                // 2. Call the set license method with a license string obtained from Esri Customer Service or your local Esri distributor. " is 123.
Magic Number,HowToOptimizeGraphicsRendering,MainWindow,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\MainWindow.xaml.cs,AddGraphicsToDisplay,The following statement contains a magic number: if (_mapPoints == null)                  _mapPoints = GenerateRandomPoints(25000);
Magic Number,HowToOptimizeGraphicsRendering,MainWindow,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\MainWindow.xaml.cs,AddGraphicsToDisplay,The following statement contains a magic number: SymbolFont font = new SymbolFont              {                  FontFamily = "Tahoma"'                  FontSize = 8'                  FontStyle = SymbolFontStyle.Italic'                  FontWeight = SymbolFontWeight.Bold'                  TextDecoration = SymbolTextDecoration.Underline              };
Magic Number,HowToOptimizeGraphicsRendering,MainWindow,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\MainWindow.xaml.cs,ToggleButton_OnChecked,The following statement contains a magic number: _mapPoints = GenerateRandomPoints(int.Parse((sender as RadioButton).Content.ToString().Replace("K"' "")) * 1000);
Missing Default,HowToOptimizeGraphicsRendering,MainWindow,C:\repos\Esri_developer-support\runtime-net\how-to-optimize-graphics-rendering\HowToOptimizeGraphicsRendering\MainWindow.xaml.cs,AddGraphicsToDisplay,The following switch statement is missing a default case: switch (button.Name)              {                  case "Button1":                      for (int i = 0; i < _mapPoints.Length; i++)                      {                          MyGraphicsLayer.Graphics.Add(new Graphic                          {                              Geometry = _mapPoints[i]'                               Symbol = new TextSymbol                              {                                  Text = i.ToString(CultureInfo.InvariantCulture)                              }                          });                      }                      break;                  case "Button2":                      graphics.AddRange(_mapPoints.Select((t' i) => new Graphic                      {                          Geometry = t'                          Symbol = new TextSymbol {Text = i.ToString(CultureInfo.InvariantCulture)}                      }));                        MyGraphicsLayer.GraphicsSource = graphics;                      break;                  case "Button3":                      ClearGraphics();                      return;                  case "Button4":                      for (int i = 0; i < _mapPoints.Length; i++)                      {                          MyGraphicsLayer.Graphics.Add(new Graphic                          {                              Geometry = _mapPoints[i]'                              Symbol = new TextSymbol                              {                                  Text = i.ToString(CultureInfo.InvariantCulture)'                                  Font = font'                                  Color = Colors.DarkGreen'                                  BorderLineColor = Colors.White'                                  BorderLineSize = 1'                                  BackgroundColor = Colors.Red                              }                          });                      }                      break;                  case "Button5":                      graphics.AddRange(_mapPoints.Select((t' i) => new Graphic                      {                          Geometry = t'                          Symbol = new TextSymbol                          {                              Text = i.ToString(CultureInfo.InvariantCulture)'                              Font = font'                              Color = Colors.DarkGreen'                              BorderLineColor = Colors.White'                              BorderLineSize = 1'                              BackgroundColor = Colors.Red                          }                      }));                      MyGraphicsLayer.GraphicsSource = graphics;                      break;              }
