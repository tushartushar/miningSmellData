Implementation smell,Namespace,Class,File,Method,Description
Long Method,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 108 lines of code.
Long Method,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 108 lines of code.
Long Method,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 108 lines of code.
Long Method,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 109 lines of code.
Long Parameter List,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 6 parameters. Parameters: maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario
Long Parameter List,Polly.Specs.Bulkhead,BulkheadScenario,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenario.cs,BulkheadScenario,The method has 6 parameters. Parameters: maxParallelization' maxQueuingActions' totalTestLoad' cancelQueuing' cancelExecuting' scenario
Long Parameter List,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 6 parameters. Parameters: maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario
Long Parameter List,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 6 parameters. Parameters: maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario
Long Parameter List,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The method has 6 parameters. Parameters: maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario
Long Parameter List,Polly.Specs.Helpers.Caching,StubCacheProvider,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\Caching\StubCacheProvider.cs,PutAsync,The method has 5 parameters. Parameters: key' value' ttl' cancellationToken' continueOnCapturedContext
Long Parameter List,Polly.Specs.Helpers.Caching,StubErroringCacheProvider,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\Caching\StubErroringCacheProvider.cs,PutAsync,The method has 5 parameters. Parameters: key' value' ttl' cancellationToken' continueOnCapturedContext
Long Parameter List,Polly.Specs.Helpers,ContextualPolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\ContextualPolicyExtensionsAsync.cs,RaiseExceptionAsync,The method has 5 parameters. Parameters: policy' numberOfTimesToRaiseException' contextData' configureException' cancellationToken
Long Parameter List,Polly.Specs.Helpers,PolicyExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensions.cs,RaiseExceptionAndOrCancellation,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' successResult
Long Parameter List,Polly.Specs.Helpers,PolicyExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensions.cs,RaiseExceptionAndOrCancellation,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' exceptionFactory
Long Parameter List,Polly.Specs.Helpers,PolicyExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensions.cs,RaiseExceptionAndOrCancellation,The method has 6 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' exceptionFactory' successResult
Long Parameter List,Polly.Specs.Helpers,PolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensionsAsync.cs,RaiseExceptionAndOrCancellationAsync,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' successResult
Long Parameter List,Polly.Specs.Helpers,PolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensionsAsync.cs,RaiseExceptionAndOrCancellationAsync,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' exceptionFactory
Long Parameter List,Polly.Specs.Helpers,PolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensionsAsync.cs,RaiseExceptionAndOrCancellationAsync,The method has 6 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' exceptionFactory' successResult
Long Parameter List,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultSequenceAndOrCancellation,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' resultsToRaise
Long Parameter List,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultSequenceAndOrCancellation,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' resultsToRaise
Long Parameter List,Polly.Specs.Helpers,PolicyTResultExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensionsAsync.cs,RaiseResultSequenceAndOrCancellationAsync,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' resultsToRaise
Long Parameter List,Polly.Specs.Helpers,PolicyTResultExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensionsAsync.cs,RaiseResultSequenceAndOrCancellationAsync,The method has 5 parameters. Parameters: policy' scenario' cancellationTokenSource' onExecute' resultsToRaise
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The length of the parameter numberOfWindowsDefinedInCircuitBreaker is 38.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The length of the parameter numberOfWindowsDefinedInCircuitBreaker is 38.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter firstDelegateExecutedInHalfOpenState is 36.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateExecutedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the parameter secondDelegateRejectedInHalfOpenState is 37.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the parameter permitLongRunningExecutionToReturnItsFailure is 44.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationTokenSource is 47.
Long Identifier,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the parameter implicitlyCapturedActionCancellationToken is 41.
Long Identifier,Polly.Specs,PolicyKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_be_able_fluently_to_configure_the_policy_key_via_interface,The length of the parameter policyAsInterfaceAfterWithPolicyKey is 35.
Long Identifier,Polly.Specs,PolicyKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_not_be_able_to_configure_the_policy_key_explicitly_after_retrieving_default_value,The length of the parameter retrieveKeyWhenNotExplicitlyConfigured is 38.
Long Identifier,Polly.Specs,PolicyKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs,PolicyKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_pass_PolicyKey_to_execution_context_in_generic_execution_on_non_generic_policy,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs,PolicyTResultKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_be_able_fluently_to_configure_the_policy_key_via_interface,The length of the parameter policyAsInterfaceAfterWithPolicyKey is 35.
Long Identifier,Polly.Specs,PolicyTResultKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_not_be_able_to_configure_the_policy_key_explicitly_after_retrieving_default_value,The length of the parameter retrieveKeyWhenNotExplicitlyConfigured is 38.
Long Identifier,Polly.Specs,PolicyTResultKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs,PolicyKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_be_able_fluently_to_configure_the_policy_key_via_interface,The length of the parameter policyAsInterfaceAfterWithPolicyKey is 35.
Long Identifier,Polly.Specs,PolicyKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_not_be_able_to_configure_the_policy_key_explicitly_after_retrieving_default_value,The length of the parameter retrieveKeyWhenNotExplicitlyConfigured is 38.
Long Identifier,Polly.Specs,PolicyKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs,PolicyKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_in_generic_execution_on_non_generic_policy,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs,PolicyTResultKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_be_able_fluently_to_configure_the_policy_key_via_interface,The length of the parameter policyAsInterfaceAfterWithPolicyKey is 35.
Long Identifier,Polly.Specs,PolicyTResultKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_not_be_able_to_configure_the_policy_key_explicitly_after_retrieving_default_value,The length of the parameter retrieveKeyWhenNotExplicitlyConfigured is 38.
Long Identifier,Polly.Specs,PolicyTResultKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the parameter policyKeySetOnExecutionContext is 30.
Long Identifier,Polly.Specs.Helpers,Constants,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\Constants.cs,,The length of the parameter SystemClockDependentTestCollection is 34.
Long Identifier,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the parameter executeDelegateInvocationsWhenOnRetryExits is 42.
Long Identifier,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the parameter executeDelegateInvocationsWhenOnRetryExits is 42.
Long Identifier,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the parameter executeDelegateInvocationsWhenOnRetryExits is 42.
Long Identifier,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the parameter executeDelegateInvocationsWhenOnRetryExits is 42.
Long Identifier,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the parameter executeDelegateInvocationsWhenOnRetryExits is 42.
Long Identifier,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the parameter exceptionObservedFromTaskPassedToOnTimeout is 42.
Long Identifier,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the parameter exceptionObservedFromTaskPassedToOnTimeout is 42.
Long Identifier,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the parameter exceptionObservedFromTaskPassedToOnTimeout is 42.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the parameter exceptionObservedFromTaskPassedToOnTimeout is 42.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The length of the parameter programaticallyControlledDelay is 30.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_handling_result_should_report_as_PolicyWrap_handled_result,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_not_handling_result_even_if_inner_policies_do_should_not_report_as_handled,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_of_outer_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_wrap,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_to_innermost_Policy_when_execute_method_generic,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_of_outer_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_wrap,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_outer_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_WrapAsync,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_to_innermost_Policy_when_execute_method_generic,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_outer_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_WrapAsync,The length of the parameter policyWrapKeySetOnExecutionContext is 34.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_handling_result_should_report_as_PolicyWrap_handled_result,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Identifier,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_not_handling_result_even_if_inner_policies_do_should_not_report_as_handled,The length of the parameter executeAndCaptureResultOnPolicyWrap is 35.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "            Func<Context' Task> onRejectedAsync = async ctx => { contextPassedToOnRejected = ctx; await TaskHelper.EmptyTask.ConfigureAwait(false); }; " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(0)); // Time for the other thread to kick up and take the bulkhead. " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                bulkhead.Awaiting(async b => await b.ExecuteAsync(() => TaskHelper.EmptyTask' contextPassedToExecute)).ShouldThrow<BulkheadRejectedException>(); " is 144.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            scenario = String.Format("MaxParallelization {0}; MaxQueuing {1}; TotalActions {2}; CancelQueuing {3}; CancelExecuting {4}: {5}"' maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario); " is 225.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Set up delegates which we can track whether they've started; and control when we allow them to complete (to release their semaphore slot). " is 141.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Assert the expected distributions of executing' queuing' rejected and completed - when all delegates thrown at bulkhead. " is 123.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects")); " is 166.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted"); " is 143.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled"); " is 142.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Complete or cancel delegates one by one' and expect others to take their place (if a slot released and others remain queueing); until all work is done. " is 154.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects"); " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled")); " is 170.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenario,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenario.cs,ToTheoryData,The length of the statement  "            return new object[] {_maxParallelization' _maxQueuingActions' _totalTestLoad' _cancelQueuing' _cancelExecuting' _scenario }; " is 124.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(0)); // Time for the other thread to kick up and take the bulkhead. " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            scenario = String.Format("MaxParallelization {0}; MaxQueuing {1}; TotalActions {2}; CancelQueuing {3}; CancelExecuting {4}: {5}"' maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario); " is 225.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Set up delegates which we can track whether they've started; and control when we allow them to complete (to release their semaphore slot). " is 141.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Assert the expected distributions of executing' queuing' rejected and completed - when all delegates thrown at bulkhead. " is 123.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects")); " is 166.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted"); " is 143.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled"); " is 142.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Complete or cancel delegates one by one' and expect others to take their place (if a slot released and others remain queueing); until all work is done. " is 154.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled")); " is 170.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects"); " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 5' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' not even oversubscribed.").ToTheoryData(); " is 223.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 20' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: true' scenario: "A high capacity bulkhead' with no queue' not even oversubscribed; cancel some executing.").ToTheoryData(); " is 260.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 0' totalTestLoad: 4' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' oversubscribed.").ToTheoryData(); " is 214.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 1' totalTestLoad: 5' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed.").ToTheoryData(); " is 242.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData(); " is 281.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(5' 3' 8' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed.").ToTheoryData(); " is 184.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData(); " is 277.
Long Statement,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The length of the statement  "            yield return new BulkheadScenario(maxParallelization: 1' maxQueuingActions: 6' totalTestLoad: 5' cancelQueuing: true' cancelExecuting: true' scenario: "A very tight capacity bulkhead' but which allows a huge queue; enough for all actions to be gradually processed; cancel some queuing' and some executing.").ToTheoryData(); " is 323.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "            Func<Context' Task> onRejectedAsync = async ctx => { contextPassedToOnRejected = ctx; await TaskHelper.EmptyTask.ConfigureAwait(false); }; " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(0)); // Time for the other thread to kick up and take the bulkhead. " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                bulkhead.Awaiting(async b => await b.ExecuteAsync(() => Task.FromResult(1)' contextPassedToExecute)).ShouldThrow<BulkheadRejectedException>(); " is 142.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            scenario = String.Format("MaxParallelization {0}; MaxQueuing {1}; TotalActions {2}; CancelQueuing {3}; CancelExecuting {4}: {5}"' maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario); " is 225.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            BulkheadPolicy<ResultPrimitive> bulkhead = Policy.BulkheadAsync<ResultPrimitive>(maxParallelization' maxQueuingActions); " is 120.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Set up delegates which we can track whether they've started; and control when we allow them to complete (to release their semaphore slot). " is 141.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Assert the expected distributions of executing' queuing' rejected and completed - when all delegates thrown at bulkhead. " is 123.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects")); " is 166.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted"); " is 143.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled"); " is 142.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Complete or cancel delegates one by one' and expect others to take their place (if a slot released and others remain queueing); until all work is done. " is 154.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled")); " is 170.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects"); " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultAsyncSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                    testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_call_onBulkheadRejected_with_passed_context,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(0)); // Time for the other thread to kick up and take the bulkhead. " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            scenario = String.Format("MaxParallelization {0}; MaxQueuing {1}; TotalActions {2}; CancelQueuing {3}; CancelExecuting {4}: {5}"' maxParallelization' maxQueuingActions' totalActions' cancelQueuing' cancelExecuting' scenario); " is 225.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Set up delegates which we can track whether they've started; and control when we allow them to complete (to release their semaphore slot). " is 141.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Assert the expected distributions of executing' queuing' rejected and completed - when all delegates thrown at bulkhead. " is 123.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects")); " is 166.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted"); " is 143.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled"); " is 142.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "            // Complete or cancel delegates one by one' and expect others to take their place (if a slot released and others remain queueing); until all work is done. " is 154.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Executing).Should().Be(expectedExecuting' scenario + "' when checking expectedExecuting")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.QueueingForSemaphore).Should().Be(expectedQueuing' scenario + "' when checking expectedQueuing")); " is 178.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Completed).Should().Be(expectedCompleted' scenario + "' when checking expectedCompleted")); " is 171.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => actions.Count(a => a.Status == TraceableActionStatus.Canceled).Should().Be(expectedCancelled' scenario + "' when checking expectedCancelled")); " is 170.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        actions.Count(a => a.Status == TraceableActionStatus.Rejected).Should().Be(expectedRejects' scenario + "' when checking expectedRejects"); " is 138.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => bulkhead.BulkheadAvailableCount.Should().Be(expectedBulkheadFree' scenario + "' when checking expectedBulkheadFree")); " is 145.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        Within(shimTimeSpan' () => bulkhead.QueueAvailableCount.Should().Be(expectedQueueFree' scenario + "' when checking expectedQueueFree")); " is 136.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        testOutputHelper.WriteLine("Bulkhead: {0} slots out of {1} available."' bulkhead.BulkheadAvailableCount' maxParallelization); " is 125.
Long Statement,Polly.Specs.Bulkhead,BulkheadTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadTResultSpecs.cs,Should_control_executions_queuing_and_rejections_per_specification_with_cancellations,The length of the statement  "                        testOutputHelper.WriteLine("Bulkhead queue: {0} slots out of {1} available."' bulkhead.QueueAvailableCount' maxQueuingActions); " is 127.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            ((string) await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 129.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' new Context(executionKey)).ConfigureAwait(false)).Should().Be(valueToReturn); " is 192.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(valueToReturn); " is 137.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The length of the statement  "            ((string) await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 129.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(valueToReturn); " is 137.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(null); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' new Context(executionKey)).ConfigureAwait(false)).Should().Be(valueToReturn); " is 192.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(null); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            CachePolicy cache = Policy.CacheAsync(stubCacheProvider' TimeSpan.MaxValue' context => context.ExecutionKey + context["id"]); " is 125.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person1"' person1' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person2"' person2' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            Func<Task<object>> func = async () => { funcExecuted = true; await TaskHelper.EmptyTask.ConfigureAwait(false); return new object(); }; " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "1" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person1); " is 138.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "2" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person2); " is 138.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            CachePolicy cache = Policy.CacheAsync(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' cacheKeyStrategy' emptyDelegate' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 190.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person1"' person1' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person2"' person2' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            Func<Task<object>> func = async () => { funcExecuted = true; await TaskHelper.EmptyTask.ConfigureAwait(false); return new object(); }; " is 134.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "1" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person1); " is 138.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "2" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person2); " is 138.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_outermost_in_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_innermost_in_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_mid_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_honour_cancellation_even_if_prior_execution_has_cached,The length of the statement  "            (await cache.ExecuteAsync(func' new Context(executionKey)' tokenSource.Token).ConfigureAwait(false)).Should().Be(valueToReturn); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_honour_cancellation_during_delegate_execution_and_not_put_to_cache,The length of the statement  "           ((string) await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 129.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_call_onError_delegate_if_cache_get_errors,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_call_onError_delegate_if_cache_put_errors,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_call_onError_delegate_if_cache_put_errors,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' new Context(executionKey)).ConfigureAwait(false)).Should().Be(valueToReturn); " is 192.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_call_onError_delegate_if_cache_put_errors,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncacheget_after_got_from_cache,The length of the statement  "            CachePolicy cache = Policy.CacheAsync(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' onCacheAction' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 206.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncacheget_after_got_from_cache,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            Action<Context' string> onCacheMiss = (ctx' key) => { contextPassedToOnCacheMiss = ctx; keyPassedToOnCacheMiss = key; }; " is 120.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            CachePolicy cache = Policy.CacheAsync(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' emptyDelegate' onCacheMiss' onCachePut' noErrorHandling' noErrorHandling); " is 201.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' contextToExecute).ConfigureAwait(false)).Should().Be(valueToReturn); " is 183.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(valueToReturn); " is 137.
Long Statement,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_not_execute_oncachemiss_if_dont_query_cache_because_cache_key_not_set,The length of the statement  "            CachePolicy cache = Policy.CacheAsync(new StubCacheProvider()' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' emptyDelegate' onCacheMiss' emptyDelegate' noErrorHandling' noErrorHandling); " is 210.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            CachePolicy cache = Policy.Cache(stubCacheProvider' TimeSpan.MaxValue' context => context.ExecutionKey + context["id"]); " is 120.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            CachePolicy cache = Policy.Cache(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' cacheKeyStrategy' emptyDelegate' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 185.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_execute_oncacheget_after_got_from_cache,The length of the statement  "            CachePolicy cache = Policy.Cache(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' onCacheAction' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 201.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            Action<Context' string> onCacheMiss = (ctx' key) => { contextPassedToOnCacheMiss = ctx; keyPassedToOnCacheMiss = key; }; " is 120.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_execute_oncachemiss_and_oncacheput_if_cache_does_not_hold_value_and_put,The length of the statement  "            CachePolicy cache = Policy.Cache(stubCacheProvider' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' emptyDelegate' onCacheMiss' onCachePut' noErrorHandling' noErrorHandling); " is 196.
Long Statement,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_not_execute_oncachemiss_if_dont_query_cache_because_cache_key_not_set,The length of the statement  "            CachePolicy cache = Policy.Cache(new StubCacheProvider()' new RelativeTtl(TimeSpan.MaxValue)' DefaultCacheKeyStrategy.Instance' emptyDelegate' onCacheMiss' emptyDelegate' noErrorHandling' noErrorHandling); " is 205.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' new Context(executionKey)).ConfigureAwait(false)).Should().Be(valueToReturn); " is 192.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_if_cache_does_not_hold_value,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(valueToReturn); " is 137.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(valueToReturn); " is 137.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(null); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            (await cache.ExecuteAsync(async () => { await TaskHelper.EmptyTask.ConfigureAwait(false); return valueToReturn; }' new Context(executionKey)).ConfigureAwait(false)).Should().Be(valueToReturn); " is 192.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_but_not_put_value_in_cache_if_cache_does_not_hold_value_but_ttl_indicates_not_worth_caching,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().Be(null); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            CachePolicy<ResultClass> cache = Policy.CacheAsync<ResultClass>(stubCacheProvider' TimeSpan.MaxValue' context => context.ExecutionKey + context["id"]); " is 151.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person1"' person1' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person2"' person2' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            Func<Task<ResultClass>> func = async () => { funcExecuted = true; await TaskHelper.EmptyTask.ConfigureAwait(false); return new ResultClass(ResultPrimitive.Fault' "should never return this one"); }; " is 197.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "1" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person1); " is 138.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_FuncCacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "2" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person2); " is 138.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            //CachePolicy<ResultClass> cache = Policy.CacheAsync<ResultClass>(stubCacheProvider' TimeSpan.MaxValue' cacheKeyStrategy); " is 122.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            CachePolicy<ResultClass> cache = Policy.CacheAsync<ResultClass>(stubCacheProvider.AsyncFor<ResultClass>()' new RelativeTtl(TimeSpan.MaxValue)' cacheKeyStrategy' emptyDelegate' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 240.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person1"' person1' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            await stubCacheProvider.PutAsync("person2"' person2' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 134.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            Func<Task<ResultClass>> func = async () => { funcExecuted = true; await TaskHelper.EmptyTask.ConfigureAwait(false); return new ResultClass(ResultPrimitive.Fault' "should never return this one"); }; " is 197.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "1" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person1); " is 138.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            (await cache.ExecuteAsync(func' new Context("person"' new { id = "2" }.AsDictionary())).ConfigureAwait(false)).Should().BeSameAs(person2); " is 138.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_outermost_in_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_innermost_in_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_return_value_from_cache_and_not_execute_delegate_if_cache_holds_value_when_mid_policywrap,The length of the statement  "            await stubCacheProvider.PutAsync(executionKey' valueToReturnFromCache' new Ttl(TimeSpan.MaxValue)' CancellationToken.None' false).ConfigureAwait(false); " is 152.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_honour_cancellation_even_if_prior_execution_has_cached,The length of the statement  "            (await cache.ExecuteAsync(func' new Context(executionKey)' tokenSource.Token).ConfigureAwait(false)).Should().Be(valueToReturn); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_honour_cancellation_during_delegate_execution_and_not_put_to_cache,The length of the statement  "            ((string)await stubCacheProvider.GetAsync(executionKey' CancellationToken.None' false).ConfigureAwait(false)).Should().BeNull(); " is 128.
Long Statement,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_allow_custom_FuncICacheKeyStrategy,The length of the statement  "            CachePolicy<ResultClass> cache = Policy.Cache<ResultClass>(stubCacheProvider' TimeSpan.MaxValue' context => context.ExecutionKey + context["id"]); " is 146.
Long Statement,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_allow_custom_FuncICacheKeyStrategy,The length of the statement  "            Func<ResultClass> func = () => { funcExecuted = true; return new ResultClass(ResultPrimitive.Fault' "should never return this one"); }; " is 135.
Long Statement,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            CachePolicy<ResultClass> cache = Policy.Cache<ResultClass>(stubCacheProvider.For<ResultClass>()' new RelativeTtl(TimeSpan.MaxValue)' cacheKeyStrategy' emptyDelegate' emptyDelegate' emptyDelegate' noErrorHandling' noErrorHandling); " is 230.
Long Statement,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_allow_custom_ICacheKeyStrategy,The length of the statement  "            Func<ResultClass> func = () => { funcExecuted = true; return new ResultClass(ResultPrimitive.Fault' "should never return this one"); }; " is 135.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            SerializingCacheProviderAsync<StubSerialized> serializingCacheProvider = new SerializingCacheProviderAsync<StubSerialized>(stubCacheProvider.AsyncFor<StubSerialized>()' stubSerializer); " is 185.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            await serializingCacheProvider.PutAsync(key' objectToCache' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 125.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            await stubCacheProvider.PutAsync(key' new StubSerialized(objectToCache)' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 138.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            SerializingCacheProviderAsync<StubSerialized> serializingCacheProvider = new SerializingCacheProviderAsync<StubSerialized>(stubCacheProvider.AsyncFor<StubSerialized>()' stubSerializer); " is 185.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            SerializingCacheProviderAsync<StubSerialized> serializingCacheProvider = stubCacheProvider.AsyncFor<StubSerialized>().WithSerializer(stubSerializer); " is 149.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            await serializingCacheProvider.PutAsync(key' objectToCache' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 125.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            await stubCacheProvider.PutAsync(key' new StubSerialized(objectToCache)' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 138.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            SerializingCacheProviderAsync<StubSerialized> serializingCacheProvider = stubCacheProvider.AsyncFor<StubSerialized>().WithSerializer(stubSerializer); " is 149.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_constructor_should_throw_on_no_wrapped_cache_provider,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_constructor_should_throw_on_no_wrapped_cache_provider,The length of the statement  "            Action configure = () => new SerializingCacheProviderAsync<ResultPrimitive' StubSerialized<ResultPrimitive>>(null' stubTResultSerializer); " is 138.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_constructor_should_throw_on_no_serializer,The length of the statement  "            Action configure = () => new SerializingCacheProviderAsync<object' object>(new StubCacheProvider().AsyncFor<object>()' null); " is 125.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            SerializingCacheProviderAsync<ResultPrimitive' StubSerialized<ResultPrimitive>> serializingCacheProvider = new SerializingCacheProviderAsync<ResultPrimitive' StubSerialized<ResultPrimitive>>(stubCacheProvider.AsyncFor<StubSerialized<ResultPrimitive>>()' stubTResultSerializer); " is 277.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            await serializingCacheProvider.PutAsync(key' objectToCache' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 125.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            (await stubCacheProvider.GetAsync(key' CancellationToken.None' false)).Should().BeOfType<StubSerialized<ResultPrimitive>>() " is 123.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            SerializingCacheProviderAsync<ResultPrimitive' StubSerialized<ResultPrimitive>> serializingCacheProvider = new SerializingCacheProviderAsync<ResultPrimitive' StubSerialized<ResultPrimitive>>(stubCacheProvider.AsyncFor<StubSerialized<ResultPrimitive>>()' stubTResultSerializer); " is 277.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            await stubCacheProvider.PutAsync(key' new StubSerialized<ResultPrimitive>(objectToCache)' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 155.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            await serializingCacheProvider.PutAsync(key' objectToCache' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 125.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            (await stubCacheProvider.GetAsync(key' CancellationToken.None' false)).Should().BeOfType<StubSerialized<ResultPrimitive>>() " is 123.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderAsyncSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            await stubCacheProvider.PutAsync(key' new StubSerialized<ResultPrimitive>(objectToCache)' new Ttl(TimeSpan.FromMinutes(1))' CancellationToken.None' false); " is 155.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Single_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            SerializingCacheProvider<StubSerialized> serializingCacheProvider = new SerializingCacheProvider<StubSerialized>(stubCacheProvider.For<StubSerialized>()' stubSerializer); " is 170.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Single_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            SerializingCacheProvider<StubSerialized> serializingCacheProvider = new SerializingCacheProvider<StubSerialized>(stubCacheProvider.For<StubSerialized>()' stubSerializer); " is 170.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            SerializingCacheProvider<StubSerialized> serializingCacheProvider = stubCacheProvider.For<StubSerialized>().WithSerializer(stubSerializer); " is 139.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Single_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            SerializingCacheProvider<StubSerialized> serializingCacheProvider = stubCacheProvider.For<StubSerialized>().WithSerializer(stubSerializer); " is 139.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_constructor_should_throw_on_no_wrapped_cache_provider,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_constructor_should_throw_on_no_wrapped_cache_provider,The length of the statement  "        Action configure = () => new SerializingCacheProvider<ResultPrimitive' StubSerialized<ResultPrimitive>>(null' stubTResultSerializer); " is 133.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_should_serialize_on_put,The length of the statement  "            SerializingCacheProvider<ResultPrimitive' StubSerialized<ResultPrimitive>> serializingCacheProvider = new SerializingCacheProvider<ResultPrimitive' StubSerialized<ResultPrimitive>>(stubCacheProvider.For<StubSerialized<ResultPrimitive>>()' stubTResultSerializer); " is 262.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_should_deserialize_on_get,The length of the statement  "            SerializingCacheProvider<ResultPrimitive' StubSerialized<ResultPrimitive>> serializingCacheProvider = new SerializingCacheProvider<ResultPrimitive' StubSerialized<ResultPrimitive>>(stubCacheProvider.For<StubSerialized<ResultPrimitive>>()' stubTResultSerializer); " is 262.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_serialize_on_put,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.Caching,SerializingCacheProviderSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SerializingCacheProviderSpecs.cs,Double_generic_SerializingCacheProvider_from_extension_syntax_should_deserialize_on_get,The length of the statement  "            StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>> stubTResultSerializer = new StubSerializer<ResultPrimitive' StubSerialized<ResultPrimitive>>( " is 158.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The length of the statement  "            // Throughput threshold will be exceeded by the below successful call' but we never break on a successful call; hence don't break on this. " is 138.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The length of the statement  "            // Adjust SystemClock so that timeslice (just) expires; fourth exception thrown in following timeslice.  If timeslice/window rollover is precisely defined' this should cause first two actions to be forgotten from statistics (rolled out of the window of relevance)' and thus the circuit not to break. " is 299.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            // circuit manually broken: execution should be blocked; even non-exception-throwing executions should not reset circuit " is 120.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                })).ShouldThrow<DivideByZeroException>(); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original exception will still be thrown. " is 206.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish OperationCanceledExceptions thrown with different CancellationTokens. " is 344.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 146.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            breaker.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 146.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The length of the statement  "            // Throughput threshold will be exceeded by the below successful call' but we never break on a successful call; hence don't break on this. " is 138.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The length of the statement  "            // Adjust SystemClock so that timeslice (just) expires; fourth exception thrown in following timeslice.  If timeslice/window rollover is precisely defined' this should cause first two actions to be forgotten from statistics (rolled out of the window of relevance)' and thus the circuit not to break. " is 299.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            // circuit manually broken: execution should be blocked; even non-exception-throwing executions should not reset circuit " is 120.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                })).ShouldThrow<DivideByZeroException>(); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original exception will still be thrown. " is 206.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(new { key = "original_value" }.AsDictionary())) " is 126.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish TaskCanceledExceptions thrown with different CancellationTokens. " is 339.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 185.
Long Statement,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            breaker.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            // circuit manually broken: execution should be blocked; even non-exception-throwing executions should not reset circuit " is 120.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                })).ShouldThrow<DivideByZeroException>(); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original exception will still be thrown. " is 206.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            Action<Exception' TimeSpan' Context> onBreak = (_' __' context) => { contextValue = context.ContainsKey("key") ? context["key"].ToString() : null; }; " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The length of the statement  "            breaker.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish OperationCanceledExceptions thrown with different CancellationTokens. " is 344.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 146.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            breaker.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 146.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_specified_exception_have_been_raised,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_one_of_the_specified_exceptions_have_been_raised,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            // circuit manually broken: execution should be blocked; even non-exception-throwing executions should not reset circuit " is 120.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return TaskHelper.EmptyTask; })) " is 124.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                })).ShouldThrow<DivideByZeroException>(); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original exception will still be thrown. " is 206.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            Action<Exception' TimeSpan' Context> onBreak = (_' __' context) => { contextValue = context.ContainsKey("key") ? context["key"].ToString() : null; }; " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(new { key = "original_value" }.AsDictionary())) " is 126.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish TaskCanceledExceptions thrown with different CancellationTokens. " is 339.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            breaker.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            breaker.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async b => await b.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return Task.FromResult(ResultPrimitive.Good); }).ConfigureAwait(false)) " is 163.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The length of the statement  "            breaker.Awaiting(async x => await x.ExecuteAsync(() => { delegateExecutedWhenBroken = true; return Task.FromResult(ResultPrimitive.Good); })) " is 141.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                })).Should().Be(ResultPrimitive.Fault); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original fault should still be returned. " is 204.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (outcome' _' __) => { handledResult = outcome.Result; }; " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' timespan' __) => { passedBreakTimespan = timespan; }; " is 126.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' timespan' __) => { passedBreakTimespan = timespan; }; " is 126.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The length of the statement  "            await breaker.ExecuteAsync(() => Task.FromResult(ResultPrimitive.Good)' new { key1 = "value1"' key2 = "value2" }.AsDictionary()).ConfigureAwait(false); " is 151.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' __' context) => { contextValue = context.ContainsKey("key") ? context["key"].ToString() : null; }; " is 171.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            (await breaker.RaiseResultSequenceAsync(new { key = "original_value" }.AsDictionary()' ResultPrimitive.Fault).ConfigureAwait(false)) " is 132.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            await breaker.ExecuteAsync(() => Task.FromResult(ResultPrimitive.Good)' new { key = "new_value" }.AsDictionary()).ConfigureAwait(false); " is 136.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The length of the statement  "            (await breaker.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Fault).ConfigureAwait(false)) " is 148.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The length of the statement  "            breaker.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish TaskCanceledExceptions thrown with different CancellationTokens. " is 339.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (outcome' _' __) => { handledResult = outcome.Result; }; " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (outcome' _' __) => { lastException = outcome.Exception; }; " is 128.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Start one execution during the HalfOpen state' and request a second execution before the first has completed (ie still during the HalfOpen state). " is 149.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap: we should be able to verify it doesn't execute' and is rejected by a breaker in a HalfOpen state. " is 185.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Request a second execution while the first is still in flight (not completed)' while still during the HalfOpen state' but after one breakDuration later. " is 155.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    firstDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 196.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Attempt a second execution' signalled by the first execution to ensure they overlap; start it one breakDuration later.  We should be able to verify it does execute' though the breaker is still in a HalfOpen state. " is 216.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                // Validation of correct sequencing and overlapping of tasks in test (guard against erroneous test refactorings/operation). " is 123.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                        secondDelegateExecutedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested in Task and breaker here. " is 197.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "                    secondDelegateRejectedInHalfOpenState = breaker.CircuitState == CircuitState.HalfOpen; // For readability of test results' we assert on this at test end rather than nested here. " is 177.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; signal them to end if not; timeout any deadlocks; expose any execution faults. This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 249.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Start an execution when the breaker is in the closed state' but hold it from returning (its failure) until the breaker has opened.  This call' a failure hitting an already open breaker' should indicate its fail' but should not cause onBreak() to be called a second time. " is 273.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "                }).Should().Be(ResultPrimitive.Fault); // However' since execution started when circuit was closed' BrokenCircuitException will not have been thrown on entry; the original fault should still be returned. " is 203.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The length of the statement  "            // Graceful cleanup: allow executions time to end naturally; timeout if any deadlocks; expose any execution faults.  This validates the test ran as expected (and background delegates are complete) before we assert on outcomes. " is 226.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (outcome' _' __) => { handledResult = outcome.Result; }; " is 125.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' timespan' __) => { passedBreakTimespan = timespan; }; " is 126.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' timespan' __) => { passedBreakTimespan = timespan; }; " is 126.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_create_new_context_for_each_call_to_execute,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' TimeSpan' Context> onBreak = (_' __' context) => { contextValue = context.ContainsKey("key") ? context["key"].ToString() : null; }; " is 171.
Long Statement,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The length of the statement  "            // Before CancellationToken support was built in to Polly' users of the library may have implicitly captured a CancellationToken and used it to cancel actions.  For backwards compatibility' Polly should not confuse these with its own CancellationToken; it should distinguish OperationCanceledExceptions thrown with different CancellationTokens. " is 344.
Long Statement,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Execute_and_capturing_the_policy_action_should_throw_when_context_data_is_null,The length of the statement  "            policy.Awaiting(async p => await p.ExecuteAndCaptureAsync(() => TaskHelper.EmptyTask' (IDictionary<string' object>)null)) " is 121.
Long Statement,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Execute_and_capturing_the_policy_function_should_pass_context_to_executed_delegate,The length of the statement  "            await policy.ExecuteAndCaptureAsync((context) => { capturedContext = context; return TaskHelper.EmptyTask; }' executionContext); " is 128.
Long Statement,Polly.Specs,PolicyTResultKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' int' Context> onRetry = (outcome' i' context) => { policyKeySetOnExecutionContext = context.PolicyKey; }; " is 145.
Long Statement,Polly.Specs,PolicyTResultKeyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeyAsyncSpecs.cs,Should_pass_ExecutionKey_to_execution_context,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' int' Context> onRetry = (outcome' i' context) => { executionKeySetOnContext = context.ExecutionKey; }; " is 142.
Long Statement,Polly.Specs,PolicyTResultKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' int' Context> onRetry = (outcome' i' context) => { policyKeySetOnExecutionContext = context.PolicyKey; }; " is 145.
Long Statement,Polly.Specs,PolicyTResultKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyContextAndKeySpecs.cs,Should_pass_ExecutionKey_to_execution_context,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' int' Context> onRetry = (outcome' i' context) => { executionKeySetOnContext = context.ExecutionKey; }; " is 142.
Long Statement,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_asynchronous_policies_using_the_synchronous_execute_should_throw_an_invalid_operation_exception,The length of the statement  "                .WithMessage("Please use the synchronous-defined policies when calling the synchronous Execute (and similar) methods."); " is 120.
Long Statement,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_asynchronous_policies_using_the_synchronous_execute_and_capture_should_throw_an_invalid_operation_exception,The length of the statement  "                .WithMessage("Please use the synchronous-defined policies when calling the synchronous Execute (and similar) methods."); " is 120.
Long Statement,Polly.Specs,PolicyTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultAsyncSpecs.cs,Executing_the_policy_function_should_throw_when_context_data_is_null,The length of the statement  "            policy.Awaiting(async p => await p.ExecuteAsync(() => Task.FromResult(ResultPrimitive.Good)' (IDictionary<string' object>)null)) " is 128.
Long Statement,Polly.Specs,PolicyTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultAsyncSpecs.cs,Executing_the_policy_function_should_pass_context_to_executed_delegate,The length of the statement  "            await policy.ExecuteAsync((context) => { capturedContext = context; return Task.FromResult(ResultPrimitive.Good); }' executionContext); " is 135.
Long Statement,Polly.Specs,PolicyTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultAsyncSpecs.cs,Execute_and_capturing_the_policy_function_should_pass_context_to_executed_delegate,The length of the statement  "            await policy.ExecuteAndCaptureAsync((context) => { capturedContext = context; return Task.FromResult(ResultPrimitive.Good); }' executionContext); " is 145.
Long Statement,Polly.Specs,PolicyTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultSpecs.cs,Executing_the_asynchronous_policies_using_the_synchronous_execute_should_throw_an_invalid_operation_exception,The length of the statement  "                .WithMessage("Please use the synchronous-defined policies when calling the synchronous Execute (and similar) methods."); " is 120.
Long Statement,Polly.Specs,PolicyTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultSpecs.cs,Executing_the_asynchronous_policies_using_the_synchronous_execute_and_capture_should_throw_an_invalid_operation_exception,The length of the statement  "                .WithMessage("Please use the synchronous-defined policies when calling the synchronous Execute (and similar) methods."); " is 120.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_does_not_throw,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_exception_not_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_exception_not_handled_by_policy,The length of the statement  "            fallbackPolicy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentNullException>()).ShouldThrow<ArgumentNullException>(); " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_executed_delegate_throws_exception_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_executed_delegate_throws_one_of_exceptions_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_exception_not_one_of_exceptions_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_exception_not_one_of_exceptions_handled_by_policy,The length of the statement  "            fallbackPolicy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentNullException>()).ShouldThrow<ArgumentNullException>(); " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_exception_thrown_does_not_match_handling_predicates,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_exception_thrown_does_not_match_handling_predicates,The length of the statement  "            fallbackPolicy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>()).ShouldThrow<DivideByZeroException>(); " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_exception_thrown_does_not_match_any_of_handling_predicates,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_fallback_when_exception_thrown_does_not_match_any_of_handling_predicates,The length of the statement  "            fallbackPolicy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>()).ShouldThrow<DivideByZeroException>(); " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_exception_thrown_matches_handling_predicates,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_exception_thrown_matches_one_of_handling_predicates,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync  = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 122.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_handle_exception_thrown_by_fallback_delegate_even_if_is_exception_handled_by_policy,The length of the statement  "            fallbackPolicy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>((e' i) => e.HelpLink = "FromExecuteDelegate")) " is 132.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_throw_for_generic_method_execution_on_non_generic_policy,The length of the statement  "            fallbackPolicy.Awaiting(p => p.ExecuteAsync<int>(() => TaskHelper.FromResult(0))).ShouldThrow<InvalidOperationException>(); " is 123.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_onFallback_passing_exception_triggering_fallback,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The length of the statement  "            Func<Exception' Context' Task> onFallbackAsync = (ex' ctx) => { contextData[ex.GetType()] = ctx["key"]; return TaskHelper.EmptyTask; }; " is 135.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<Exception' Context' Task> onFallbackAsync = (ex' ctx) => { onFallbackExecuted = true; capturedContext = ctx; return TaskHelper.EmptyTask; }; " is 145.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_passed_context,The length of the statement  "            Func<Context' CancellationToken' Task> fallbackActionAsync = (ctx' ct) => { contextData = ctx; return TaskHelper.EmptyTask; }; " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_passed_context_when_execute_and_capture,The length of the statement  "            Func<Context' CancellationToken' Task> fallbackActionAsync = (ctx' ct) => { contextData = ctx; return TaskHelper.EmptyTask; }; " is 126.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Context_should_be_empty_at_fallbackAction_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<Context' CancellationToken' Task> fallbackActionAsync = (ctx' ct) => { fallbackExecuted = true; capturedContext = ctx; return TaskHelper.EmptyTask; }; " is 155.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_exception,The length of the statement  "            Func<Exception' Context' CancellationToken' Task> fallbackFunc = (ex' ctx' ct) => { fallbackException = ex; return TaskHelper.EmptyTask; }; " is 139.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_exception_when_execute_and_capture,The length of the statement  "            Func<Exception' Context' CancellationToken' Task> fallbackFunc = (ex' ctx' ct) => { fallbackException = ex; return TaskHelper.EmptyTask; }; " is 139.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_matched_inner_exception_unwrapped,The length of the statement  "            Func<Exception' Context' CancellationToken' Task> fallbackFunc = (ex' ctx' ct) => { fallbackException = ex; return TaskHelper.EmptyTask; }; " is 139.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_fallbackAction_with_the_matched_inner_of_aggregate_exception_unwrapped,The length of the statement  "            Func<Exception' Context' CancellationToken' Task> fallbackFunc = (ex' ctx' ct) => { fallbackException = ex; return TaskHelper.EmptyTask; }; " is 139.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_call_fallbackAction_with_the_exception_if_exception_unhandled,The length of the statement  "            Func<Exception' Context' CancellationToken' Task> fallbackFunc = (ex' ctx' ct) => { fallbackException = ex; return TaskHelper.EmptyTask; }; " is 139.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_execute_fallback_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_handle_cancellation_and_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_handles_cancellations,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_handle_cancellation_and_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_handles_cancellations,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_report_cancellation_and_not_execute_fallback_if_non_faulting_action_execution_completes_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_not_report_cancellation_and_not_execute_fallback_if_non_faulting_action_execution_completes_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<NullReferenceException>(scenario' cancellationTokenSource' onExecute)) " is 142.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_handle_handled_fault_and_execute_fallback_following_faulting_action_execution_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task> fallbackActionAsync = _ => { fallbackActionExecuted = true; return TaskHelper.EmptyTask; }; " is 121.
Long Statement,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_handle_handled_fault_and_execute_fallback_following_faulting_action_execution_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_inner_exception_where_policy_doesnt_handle_inner,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<Exception>().And.InnerException.Should().BeOfType<DivideByZeroException>(); " is 145.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_execute_fallback_when_executed_delegate_throws_nested_inner_exception_handled_by_policy,The length of the statement  "            Exception withInner = new Exception(String.Empty' new Exception(String.Empty' new Exception(String.Empty' new DivideByZeroException()))); " is 137.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_inner_exception_not_handled_by_policy,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<Exception>().And.InnerException.Should().BeOfType<ArgumentException>(); " is 141.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_execute_fallback_when_inner_nested_exception_thrown_matches_handling_predicates,The length of the statement  "            Exception withInner = new Exception(String.Empty' new Exception(String.Empty' new Exception(String.Empty' new DivideByZeroException()))); " is 137.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_inner_exception_thrown_does_not_match_handling_predicates,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<Exception>().And.InnerException.Should().BeOfType<DivideByZeroException>(); " is 145.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_inner_exception_thrown_does_not_match_any_of_handling_predicates,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<Exception>().And.InnerException.Should().BeOfType<ArgumentNullException>(); " is 145.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_inner_of_aggregate_exception_where_policy_doesnt_handle_inner,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<AggregateException>().And.InnerExceptions.Should().ContainSingle(e => e is DivideByZeroException); " is 168.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_execute_fallback_when_executed_delegate_throws_aggregate_exception_with_inner_handled_by_policy_amongst_other_inners,The length of the statement  "            Exception withInner = new AggregateException(new ArgumentException()' new DivideByZeroException()' new ArgumentNullException()); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_executed_delegate_throws_inner_of_aggregate_exception_not_handled_by_policy,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<AggregateException>().And.InnerExceptions.Should().ContainSingle(e => e is ArgumentException); " is 164.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_inner_of_aggregate_exception_thrown_does_not_match_handling_predicates,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<AggregateException>().And.InnerExceptions.Should().ContainSingle(e => e is DivideByZeroException); " is 168.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_fallback_when_inner_of_aggregate_exception_thrown_does_not_match_any_of_handling_predicates,The length of the statement  "            fallbackPolicy.Invoking(x => x.RaiseException(withInner)).ShouldThrow<AggregateException>().And.InnerExceptions.Should().ContainSingle(e => e is ArgumentNullException); " is 168.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_execute_fallback_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_handle_cancellation_and_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_handles_cancellations,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_not_report_cancellation_and_not_execute_fallback_if_non_faulting_action_execution_completes_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<NullReferenceException>(scenario' cancellationTokenSource' onExecute)) " is 125.
Long Statement,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_handle_handled_fault_and_execute_fallback_following_faulting_action_execution_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_throw_when_onFallback_delegate_is_null_with_context,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_throw_when_onFallback_delegate_is_null_with_context_with_action_with_cancellation,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_does_not_raise_fault,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_raises_fault_not_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_executed_delegate_raises_fault_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_executed_delegate_raises_one_of_results_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_raises_fault_not_one_of_faults_handled_by_policy,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_fallback_when_result_raised_does_not_match_handling_predicates,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_fallback_when_executed_delegate_raises_fault_not_handled_by_any_of_predicates,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_result_raised_matches_handling_predicates,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_result_raised_matches_one_of_handling_predicates,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_handle_result_raised_by_fallback_delegate_even_if_is_result_handled_by_policy,The length of the statement  "            (await fallbackPolicy.RaiseResultSequenceAsync(new ResultClass(ResultPrimitive.Fault' "FromExecuteDelegate")).ConfigureAwait(false)) " is 132.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_passing_result_triggering_fallback,The length of the statement  "            Func<CancellationToken' Task<ResultClass>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(new ResultClass(ResultPrimitive.Substitute)); }; " is 170.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_passing_result_triggering_fallback,The length of the statement  "            Func<DelegateResult<ResultClass>' Task> onFallbackAsync = r => { resultPassedToOnFallback = r.Result; return TaskHelper.EmptyTask; }; " is 133.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_call_onFallback_when_executed_delegate_does_not_raise_fault,The length of the statement  "            Func<DelegateResult<ResultPrimitive>' Task> onFallbackAsync = ct => { onFallbackExecuted = true; return TaskHelper.EmptyTask; }; " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_the_passed_context,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_the_passed_context,The length of the statement  "            Func<DelegateResult<ResultPrimitive>' Context' Task> onFallbackAsync = (dr' ctx) => { contextData = ctx; return TaskHelper.EmptyTask; }; " is 136.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_the_passed_context_when_execute_and_capture,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_the_passed_context_when_execute_and_capture,The length of the statement  "            Func<DelegateResult<ResultPrimitive>' Context' Task> onFallbackAsync = (ex' ctx) => { contextData = ctx; return TaskHelper.EmptyTask; }; " is 136.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The length of the statement  "            Func<DelegateResult<ResultPrimitive>' Context' Task> onFallbackAsync = (dr' ctx) => { contextData[dr.Result] = ctx["key"]; return TaskHelper.EmptyTask; }; " is 154.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The length of the statement  "            fallbackPolicy.ExecuteAsync(() => { return Task.FromResult(ResultPrimitive.Fault); }' new { key = "value1" }.AsDictionary()) " is 124.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The length of the statement  "            fallbackPolicy.ExecuteAsync(() => { return Task.FromResult(ResultPrimitive.FaultAgain); }' new { key = "value2" }.AsDictionary()) " is 129.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackAction = (_' __) => Task.FromResult(ResultPrimitive.Substitute); " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<DelegateResult<ResultPrimitive>' Context' Task> onFallbackAsync = (ex' ctx) => { onFallbackExecuted = true; capturedContext = ctx; return TaskHelper.EmptyTask; }; " is 167.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_fallbackAction_with_the_passed_context,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackActionAsync = (ctx' ct) => { contextData = ctx; return Task.FromResult(ResultPrimitive.Substitute); }; " is 166.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_fallbackAction_with_the_passed_context_when_execute_and_capture,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackActionAsync = (ctx' ct) => { contextData = ctx; return Task.FromResult(ResultPrimitive.Substitute); }; " is 166.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Context_should_be_empty_at_fallbackAction_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<Context' CancellationToken' Task<ResultPrimitive>> fallbackActionAsync = (ctx' ct) => { fallbackExecuted = true; capturedContext = ctx; return Task.FromResult(ResultPrimitive.Substitute); " is 192.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Good).ConfigureAwait(false)) " is 146.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_execute_fallback_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Fault).ConfigureAwait(false)) " is 147.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(x => x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Fault)) " is 134.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            policy.Awaiting(x => x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Good)) " is 133.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_handle_cancellation_and_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_handles_cancellations,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_handle_cancellation_and_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_handles_cancellations,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Good).ConfigureAwait(false)) " is 146.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_report_cancellation_and_not_execute_fallback_if_non_faulting_action_execution_completes_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_not_report_cancellation_and_not_execute_fallback_if_non_faulting_action_execution_completes_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Good).ConfigureAwait(false)) " is 146.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.FaultYetAgain).ConfigureAwait(false)) " is 155.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_handle_handled_fault_and_execute_fallback_following_faulting_action_execution_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            Func<CancellationToken' Task<ResultPrimitive>> fallbackAction = ct => { fallbackActionExecuted = true; return Task.FromResult(ResultPrimitive.Substitute); }; " is 157.
Long Statement,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_handle_handled_fault_and_execute_fallback_following_faulting_action_execution_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            (await policy.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Fault).ConfigureAwait(false)) " is 147.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_call_onFallback_passing_result_triggering_fallback,The length of the statement  "            Func<ResultClass> fallbackAction = () => { fallbackActionExecuted = true; return new ResultClass(ResultPrimitive.Substitute); }; " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The length of the statement  "            Action<DelegateResult<ResultPrimitive>' Context> onFallback = (ex' ctx) => { onFallbackExecuted = true; capturedContext = ctx; }; " is 129.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_call_fallbackAction_with_the_passed_context,The length of the statement  "            Func<Context' CancellationToken' ResultPrimitive> fallbackAction = (ctx' ct) => { contextData = ctx; return ResultPrimitive.Substitute; }; " is 138.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_call_fallbackAction_with_the_passed_context_when_execute_and_capture,The length of the statement  "            Func<Context' CancellationToken' ResultPrimitive> fallbackAction = (ctx' ct) => { contextData = ctx; return ResultPrimitive.Substitute; }; " is 138.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Context_should_be_empty_at_fallbackAction_if_execute_not_called_with_any_context_data,The length of the statement  "            Func<Context' CancellationToken' ResultPrimitive> fallbackAction = (ctx' ct) => { fallbackExecuted = true; capturedContext = ctx; return ResultPrimitive.Substitute; }; " is 167.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Invoking(x => x.RaiseResultSequenceAndOrCancellation(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Fault)) " is 129.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_report_cancellation_and_not_execute_fallback_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken_and_fallback_does_not_handle_cancellations,The length of the statement  "            policy.Invoking(x => x.RaiseResultSequenceAndOrCancellation(scenario' cancellationTokenSource' onExecute' ResultPrimitive.Good)) " is 128.
Long Statement,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_report_unhandled_fault_and_not_execute_fallback_if_action_execution_raises_unhandled_fault_and_user_delegate_does_not_observe_the_set_cancellationtoken,The length of the statement  "            policy.RaiseResultSequenceAndOrCancellation(scenario' cancellationTokenSource' onExecute' ResultPrimitive.FaultYetAgain) " is 120.
Long Statement,Polly.Specs.Helpers.Bulkhead,TraceableAction,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\Bulkhead\TraceableAction.cs,Cancel,The length of the statement  "            if (CancellationSource.IsCancellationRequested) { throw new InvalidOperationException(_id + "Action has already been cancelled."); } " is 132.
Long Statement,Polly.Specs.Helpers,PolicyExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensions.cs,RaiseExceptionAndOrCancellation,The length of the statement  "            policy.RaiseExceptionAndOrCancellation<TException>(scenario' cancellationTokenSource' onExecute' _ => new TException()); " is 120.
Long Statement,Polly.Specs.Helpers,PolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensionsAsync.cs,RaiseExceptionAsync,The length of the statement  "            return policy.RaiseExceptionAndOrCancellationAsync(scenario' new CancellationTokenSource()' () => { }' exceptionFactory); " is 121.
Long Statement,Polly.Specs.Helpers,PolicyExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyExtensionsAsync.cs,RaiseExceptionAndOrCancellationAsync,The length of the statement  "            return policy.RaiseExceptionAndOrCancellationAsync<TException>(scenario' cancellationTokenSource' onExecute' _ => new TException()); " is 132.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultSequence,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsToRaise)' $"Not enough {typeof(TResult).Name}  values in {nameof(resultsToRaise)}."); " is 137.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultAndOrExceptionSequence,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsOrExceptionsToRaise)' $"Not enough {typeof(TResult).Name} values in {nameof(resultsOrExceptionsToRaise)}."); " is 160.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultAndOrExceptionSequence,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsOrExceptionsToRaise)' $"Value is not either an {typeof(Exception).Name} or {typeof(TResult).Name}."); " is 153.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensions,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensions.cs,RaiseResultSequenceAndOrCancellation,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsToRaise)' $"Not enough {typeof(TResult).Name}  values in {nameof(resultsToRaise)}."); " is 137.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensionsAsync.cs,RaiseResultSequenceAsync,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsToRaise)' $"Not enough {typeof(TResult).Name}  values in {nameof(resultsToRaise)}."); " is 137.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensionsAsync.cs,RaiseResultAndOrExceptionSequenceAsync,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsOrExceptionsToRaise)' $"Not enough {typeof(TResult).Name} values in {nameof(resultsOrExceptionsToRaise)}."); " is 160.
Long Statement,Polly.Specs.Helpers,PolicyTResultExtensionsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Helpers\PolicyTResultExtensionsAsync.cs,RaiseResultSequenceAndOrCancellationAsync,The length of the statement  "                        throw new ArgumentOutOfRangeException(nameof(resultsToRaise)' $"Not enough {typeof(TResult).Name}  values in {nameof(resultsToRaise)}."); " is 137.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // An async (...) => { ... } anonymous delegate with no return type may compile to either an async void or an async Task method; which assign to an Action<...> or Func<...' Task> respectively.  However' if it compiles to async void (assigning to Action<...>)' then the delegate' when run' will return at the first await' and execution continues without waiting for the Action to complete' as described by Stephen Toub: http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx " is 483.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // If Polly were to declare only an Action<...> delegate for onRetry - but users declared async () => { } onRetry delegates - the compiler would happily assign them to the Action<...>' but the next 'try' of the retry policy would/could occur before onRetry execution had completed. " is 281.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // This test ensures the relevant retry policy does have a Func<...' Task> form for onRetry' and that it is awaited before the next try commences. " is 146.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 139.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            executeDelegateInvocationsWhenOnRetryExits.Should().Be(1); // If the async onRetry delegate is genuinely awaited' only one execution of the .Execute delegate should have occurred by the time onRetry completes.  If the async onRetry delegate were instead assigned to an Action<...>' then onRetry will return' and the second action execution will commence' before await Task.Delay() completes' leaving executeDelegateInvocationsWhenOnRetryExits == 2.   " is 448.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // An async (...) => { ... } anonymous delegate with no return type may compile to either an async void or an async Task method; which assign to an Action<...> or Func<...' Task> respectively.  However' if it compiles to async void (assigning tp Action<...>)' then the delegate' when run' will return at the first await' and execution continues without waiting for the Action to complete' as described by Stephen Toub: http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx " is 483.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // If Polly were to declare only an Action<...> delegate for onRetry - but users declared async () => { } onRetry delegates - the compiler would happily assign them to the Action<...>' but the next 'try' would/could occur before onRetry execution had completed. " is 261.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // This test ensures the relevant retry policy does have a Func<...' Task> form for onRetry' and that it is awaited before the next try commences. " is 146.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 139.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            executeDelegateInvocationsWhenOnRetryExits.Should().Be(1); // If the async onRetry delegate is genuinely awaited' only one execution of the .Execute delegate should have occurred by the time onRetry completes.  If the async onRetry delegate were instead assigned to an Action<...>' then onRetry will return' and the second action execution will commence' before await Task.Delay() completes' leaving executeDelegateInvocationsWhenOnRetryExits == 2.   " is 448.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exception_and_specified_result_if_raised_same_number_of_times_as_retry_count__when_configuring_results_before_exceptions,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' ResultPrimitive.Good); " is 140.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exception_and_specified_result_if_raised_same_number_of_times_as_retry_count__when_configuring_exception_before_result,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' ResultPrimitive.Good); " is 140.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_if_raised_same_number_of_times_as_retry_count__mixing_exceptions_and_results_specifying_exceptions_first,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' new ArgumentException()' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 193.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_if_raised_same_number_of_times_as_retry_count__mixing_exceptions_and_results_specifying_results_first,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' new ArgumentException()' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 193.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_handled_result_when_handled_result_returned_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_results_first,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' new ArgumentException()' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 193.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_when_exception_thrown_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_results_first,The length of the statement  "            policy.Invoking(p => p.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' ResultPrimitive.FaultAgain' new ArgumentException()' ResultPrimitive.Good)) " is 184.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_handled_result_when_handled_result_returned_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_exceptions_first,The length of the statement  "            ResultPrimitive result = policy.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' new ArgumentException()' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 193.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_when_exception_thrown_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_exceptions_first,The length of the statement  "            policy.Invoking(p => p.RaiseResultAndOrExceptionSequence(ResultPrimitive.Fault' new DivideByZeroException()' ResultPrimitive.FaultAgain' new ArgumentException()' ResultPrimitive.Good)) " is 184.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_with_predicates,The length of the statement  "            ResultClass result = policy.RaiseResultAndOrExceptionSequence(new ResultClass(ResultPrimitive.Fault)' new ArgumentException("message"'"key")' new ResultClass(ResultPrimitive.Good)); " is 181.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_if_exception_predicate_not_matched,The length of the statement  "            policy.Invoking(p => p.RaiseResultAndOrExceptionSequence(new ResultClass(ResultPrimitive.Fault)' new ArgumentException("message"' "value")' new ResultClass(ResultPrimitive.Good))) " is 179.
Long Statement,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_unhandled_result_if_result_predicate_not_matched,The length of the statement  "            ResultClass result = policy.RaiseResultAndOrExceptionSequence(new ArgumentException("message"' "key")' new ResultClass(ResultPrimitive.FaultAgain)' new ResultClass(ResultPrimitive.Good)); " is 187.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 145.
Long Statement,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 145.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_handled_result_raised_same_number_of_times_as_retry_count,The length of the statement  "            ResultPrimitive result = policy.RaiseResultSequence(ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Good); " is 143.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_one_of_the_handled_results_raised_same_number_of_times_as_retry_count,The length of the statement  "            ResultPrimitive result = policy.RaiseResultSequence(ResultPrimitive.Fault' ResultPrimitive.FaultAgain' ResultPrimitive.Fault' ResultPrimitive.Good); " is 148.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_all_of_the_handled_results_raised_less_number_of_times_than_retry_count,The length of the statement  "            ResultPrimitive result = policy.RaiseResultSequence(ResultPrimitive.Fault' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 125.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The length of the statement  "            ResultPrimitive result = policy.RaiseResultSequence(ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Good); " is 166.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The length of the statement  "            result.Should().Be(ResultPrimitive.Fault); // It should give up retrying after 3 retries and return the last failure' so should return Fault' not Good. " is 151.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_handled_result_when_one_of_the_handled_results_is_raised_more_times_then_retry_count,The length of the statement  "            ResultPrimitive result = policy.RaiseResultSequence(ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.Good); " is 186.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_result_when_specified_result_predicate_is_not_satisfied,The length of the statement  "            ResultClass result = policy.RaiseResultSequence(new ResultClass(ResultPrimitive.FaultAgain)' new ResultClass(ResultPrimitive.Good)); " is 132.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_result_when_none_of_the_specified_result_predicates_are_satisfied,The length of the statement  "            ResultClass result = policy.RaiseResultSequence(new ResultClass(ResultPrimitive.FaultYetAgain)' new ResultClass(ResultPrimitive.Good)); " is 135.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_specified_result_predicate_is_satisfied,The length of the statement  "            ResultClass result = policy.RaiseResultSequence(new ResultClass(ResultPrimitive.Fault)' new ResultClass(ResultPrimitive.Good)); " is 127.
Long Statement,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_one_of_the_specified_result_predicates_is_satisfied,The length of the statement  "            ResultClass result = policy.RaiseResultSequence(new ResultClass(ResultPrimitive.FaultAgain)' new ResultClass(ResultPrimitive.Good)); " is 132.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_handled_result_raised_same_number_of_times_as_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false); " is 176.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_one_of_the_handled_results_raised_same_number_of_times_as_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.FaultAgain' ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false); " is 181.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_handled_result_raised_less_number_of_times_than_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false); " is 130.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_all_of_the_handled_results_raised_less_number_of_times_than_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.FaultAgain' ResultPrimitive.Good).ConfigureAwait(false); " is 158.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false); " is 199.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The length of the statement  "            result.Should().Be(ResultPrimitive.Fault); // It should give up retrying after 3 retries and return the last failure' so should return Fault' not Good. " is 151.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_handled_result_when_one_of_the_handled_results_is_raised_more_times_then_retry_count,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.FaultAgain' ResultPrimitive.Good).ConfigureAwait(false); " is 219.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_result_when_result_is_not_the_specified_handled_result,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.FaultAgain' ResultPrimitive.Good).ConfigureAwait(false); " is 135.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_result_when_result_is_not_one_of_the_specified_handled_results,The length of the statement  "            ResultPrimitive result = await policy.RaiseResultSequenceAsync(ResultPrimitive.FaultYetAgain' ResultPrimitive.Good).ConfigureAwait(false); " is 138.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_result_when_specified_result_predicate_is_not_satisfied,The length of the statement  "            ResultClass result = await policy.RaiseResultSequenceAsync(new ResultClass(ResultPrimitive.FaultAgain)' new ResultClass(ResultPrimitive.Good)).ConfigureAwait(false); " is 165.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_result_when_none_of_the_specified_result_predicates_are_satisfied,The length of the statement  "            ResultClass result = await policy.RaiseResultSequenceAsync(new ResultClass(ResultPrimitive.FaultYetAgain)' new ResultClass(ResultPrimitive.Good)).ConfigureAwait(false); " is 168.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_specified_result_predicate_is_satisfied,The length of the statement  "            ResultClass result = await policy.RaiseResultSequenceAsync(new ResultClass(ResultPrimitive.Fault)' new ResultClass(ResultPrimitive.Good)).ConfigureAwait(false); " is 160.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_one_of_the_specified_result_predicates_is_satisfied,The length of the statement  "            ResultClass result = await policy.RaiseResultSequenceAsync(new ResultClass(ResultPrimitive.FaultAgain)' new ResultClass(ResultPrimitive.Good)).ConfigureAwait(false); " is 165.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The length of the statement  "            (await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false)) " is 152.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_create_new_state_for_each_call_to_policy,The length of the statement  "            (await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false)).Should().Be(ResultPrimitive.Good); " is 141.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_create_new_state_for_each_call_to_policy,The length of the statement  "            (await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false)).Should().Be(ResultPrimitive.Good); " is 141.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_call_onretry_when_retry_count_is_zero_without_context,The length of the statement  "            (await policy.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Good).ConfigureAwait(false)).Should().Be(ResultPrimitive.Fault); " is 142.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // An async (...) => { ... } anonymous delegate with no return type may compile to either an async void or an async Task method; which assign to an Action<...> or Func<...' Task> respectively.  However' if it compiles to async void (assigning tp Action<...>)' then the delegate' when run' will return at the first await' and execution continues without waiting for the Action to complete' as described by Stephen Toub: http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx " is 483.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // If Polly were to declare only an Action<...> delegate for onRetry - but users declared async () => { } onRetry delegates - the compiler would happily assign them to the Action<...>' but the next 'try' would/could occur before onRetry execution had completed. " is 261.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // This test ensures the relevant retry policy does have a Func<...' Task> form for onRetry' and that it is awaited before the next try commences. " is 146.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 139.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            executeDelegateInvocationsWhenOnRetryExits.Should().Be(1); // If the async onRetry delegate is genuinely awaited' only one execution of the .Execute delegate should have occurred by the time onRetry completes.  If the async onRetry delegate were instead assigned to an Action<...>' then onRetry will return' and the second action execution will commence' before await Task.Delay() completes' leaving executeDelegateInvocationsWhenOnRetryExits == 2.   " is 448.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Awaiting(async x => await x.RaiseResultSequenceAndOrCancellationAsync(scenario' cancellationTokenSource' onExecute' " is 122.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    sleepDurationProvider: (retryAttempt' context) => context.ContainsKey("RetryAfter") ? (TimeSpan)context["RetryAfter"] : defaultRetryAfter' // Set sleep duration from Context' when available. " is 190.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    onRetry: (_' timeSpan' __) => actualRetryDuration = timeSpan // Capture the actual sleep duration that was used' for test verification purposes. " is 144.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                await TaskHelper.EmptyTask; // Run some remote call; maybe it returns a RetryAfter header' which we can pass back to the sleepDurationProvider' via the context. " is 160.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                new { RetryAfter = defaultRetryAfter }.AsDictionary()' // Can also set an initial value for RetryAfter' in the Context passed into the call. " is 140.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // An async (...) => { ... } anonymous delegate with no return type may compile to either an async void or an async Task method; which assign to an Action<...> or Func<...' Task> respectively.  However' if it compiles to async void (assigning tp Action<...>)' then the delegate' when run' will return at the first await' and execution continues without waiting for the Action to complete' as described by Stephen Toub: http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx " is 483.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // If Polly were to declare only an Action<...> delegate for onRetry - but users declared async () => { } onRetry delegates - the compiler would happily assign them to the Action<...>' but the next 'try' would/could occur before onRetry execution had completed. " is 261.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // This test ensures the relevant retry policy does have a Func<...' Task> form for onRetry' and that it is awaited before the next try commences. " is 146.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 139.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            executeDelegateInvocationsWhenOnRetryExits.Should().Be(1); // If the async onRetry delegate is genuinely awaited' only one execution of the .Execute delegate should have occurred by the time onRetry completes.  If the async onRetry delegate were instead assigned to an Action<...>' then onRetry will return' and the second action execution will commence' before await Task.Delay() completes' leaving executeDelegateInvocationsWhenOnRetryExits == 2.   " is 448.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            watch.Elapsed.Should().BeCloseTo(shimTimeSpan' precision: (int)(shimTimeSpan.TotalMilliseconds) / 2);  // Consider increasing shimTimeSpan' or loosening precision' if test fails transiently in different environments. " is 216.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    sleepDurationProvider: (retryAttempt' context) => context.ContainsKey("RetryAfter") ? (TimeSpan)context["RetryAfter"] : defaultRetryAfter' // Set sleep duration from Context' when available. " is 190.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    onRetry: (_' timeSpan' __) => actualRetryDuration = timeSpan // Capture the actual sleep duration that was used' for test verification purposes. " is 144.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                await TaskHelper.EmptyTask; // Run some remote call; maybe it returns a RetryAfter header' which we can pass back to the sleepDurationProvider' via the context. " is 160.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                new { RetryAfter = defaultRetryAfter }.AsDictionary()' // Can also set an initial value for RetryAfter' in the Context passed into the call. " is 140.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // An async (...) => { ... } anonymous delegate with no return type may compile to either an async void or an async Task method; which assign to an Action<...> or Func<...' Task> respectively.  However' if it compiles to async void (assigning tp Action<...>)' then the delegate' when run' will return at the first await' and execution continues without waiting for the Action to complete' as described by Stephen Toub: http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx " is 483.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // If Polly were to declare only an Action<...> delegate for onRetry - but users declared async () => { } onRetry delegates - the compiler would happily assign them to the Action<...>' but the next 'try' would/could occur before onRetry execution had completed. " is 261.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            // This test ensures the relevant retry policy does have a Func<...' Task> form for onRetry' and that it is awaited before the next try commences. " is 146.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 139.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The length of the statement  "            executeDelegateInvocationsWhenOnRetryExits.Should().Be(1); // If the async onRetry delegate is genuinely awaited' only one execution of the .Execute delegate should have occurred by the time onRetry completes.  If the async onRetry delegate were instead assigned to an Action<...>' then onRetry will return' and the second action execution will commence' before await Task.Delay() completes' leaving executeDelegateInvocationsWhenOnRetryExits == 2.   " is 448.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Awaiting(async x => await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 141.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Awaiting(async x => result = await x.RaiseExceptionAndOrCancellationAsync<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true).ConfigureAwait(false)) " is 184.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    sleepDurationProvider: (retryAttempt' context) => context.ContainsKey("RetryAfter") ? (TimeSpan)context["RetryAfter"] : defaultRetryAfter' // Set sleep duration from Context' when available. " is 190.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    onRetry: (_' timeSpan' __) => actualRetryDuration = timeSpan // Capture the actual sleep duration that was used' for test verification purposes. " is 144.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                // Run some remote call; maybe it returns a RetryAfter header' which we can pass back to the sleepDurationProvider' via the context. " is 132.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                new { RetryAfter = defaultRetryAfter }.AsDictionary() // Can also set an initial value for RetryAfter' in the Context passed into the call. " is 139.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            TimeSpan shimTimeSpan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The length of the statement  "            watch.Elapsed.Should().BeCloseTo(shimTimeSpan' precision: (int)(shimTimeSpan.TotalMilliseconds) / 2);  // Consider increasing shimTimeSpan' or loosening precision' if test fails transiently in different environments. " is 216.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The length of the statement  "            policy.Invoking(x => x.RaiseExceptionAndOrCancellation<DivideByZeroException>(scenario' cancellationTokenSource' onExecute)) " is 124.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The length of the statement  "            policy.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 145.
Long Statement,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The length of the statement  "            policy.Invoking(x => result = x.RaiseExceptionAndOrCancellation<DivideByZeroException' bool>(scenario' cancellationTokenSource' onExecute' true)) " is 145.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    sleepDurationProvider: (retryAttempt' context) => context.ContainsKey("RetryAfter") ? (TimeSpan) context["RetryAfter"] : defaultRetryAfter' // Set sleep duration from Context' when available. " is 191.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    onRetry: (_' timeSpan' __) => actualRetryDuration = timeSpan // Capture the actual sleep duration that was used' for test verification purposes. " is 144.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                    // Run some remote call; maybe it returns a RetryAfter header' which we can pass back to the sleepDurationProvider' via the context. " is 132.
Long Statement,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The length of the statement  "                new {RetryAfter = defaultRetryAfter}.AsDictionary() // Can also set an initial value for RetryAfter' in the Context passed into the call. " is 137.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The length of the statement  "            policy.Awaiting(p => p.ExecuteAsync(() => { throw new NotImplementedException(); })).ShouldThrow<NotImplementedException>(); " is 124.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The length of the statement  "            policy.Awaiting(p => p.ExecuteAsync(() => { throw new NotImplementedException(); })).ShouldThrow<NotImplementedException>(); " is 124.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the statement  "            Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) }; " is 131.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            SystemClock.Reset(); // This is the only test which cannot work with the artificial SystemClock of TimeoutSpecsBase.  We want the invoked delegate to continue as far as: throw exceptionToThrow' to genuinely check that the walked-away-from task throws that' and that we pass it to onTimeoutAsync.   " is 295.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // That means we can't use the SystemClock.SleepAsync(...) within the executed delegate to artificially trigger the timeout cancellation (as for example the test above does). " is 174.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // In real execution' it is the .WhenAny() in the timeout implementation which throws for the timeout.  We don't want to go as far as abstracting Task.WhenAny() out into SystemClock' so we let this test run at real-world speed' not abstracted-clock speed. " is 255.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "                task.ContinueWith(t => exceptionObservedFromTaskPassedToOnTimeout = t.Exception.InnerException); // Intentionally not awaited: we want to assign the continuation' but let it run in its own time when the executed delegate eventually completes. " is 242.
Long Statement,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            TimeSpan shimTimespan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The length of the statement  "            policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' userCancellationToken)) // Delegate observes cancellation token' so permitting optimistic cancellation.  " is 188.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The length of the statement  "            policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(10)' ct)' userCancellationToken)) // Delegate observes cancellation token' so permitting optimistic cancellation.  " is 189.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The length of the statement  "                   ).ShouldThrow<OperationCanceledException>(); // Not a TimeoutRejectedException; i.e. policy can distinguish user cancellation from timeout cancellation. " is 152.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The length of the statement  "            policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)' contextPassedToExecute)) " is 129.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the statement  "            Context context = new Context("SomeExecutionKey") {["timeout"] = TimeSpan.FromMilliseconds(25* programaticallyControlledDelay) }; " is 129.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            SystemClock.Reset(); // This is the only test which cannot work with the artificial SystemClock of TimeoutSpecsBase.  We want the invoked delegate to continue as far as: throw exceptionToThrow' to genuinely check that the walked-away-from task throws that' and that we pass it to onTimeout.   " is 290.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // That means we can't use the SystemClock.Sleep(...) within the executed delegate to artificially trigger the timeout cancellation (as for example the test above does). " is 169.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // In real execution' it is the .Wait(timeoutCancellationTokenSource.Token) in the timeout implementation which throws for the timeout.  We don't want to go as far as abstracting Task.Wait() out into SystemClock' so we let this test run at real-world speed' not abstracted-clock speed. " is 285.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            TimeSpan shimTimespan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The length of the statement  "            policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' contextPassedToExecute' userCancellationToken)) " is 132.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The length of the statement  "            policy.Awaiting(p => p.ExecuteAsync(() => { throw new NotImplementedException(); })).ShouldThrow<NotImplementedException>(); " is 124.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The length of the statement  "            policy.Awaiting(p => p.ExecuteAsync(() => { throw new NotImplementedException(); })).ShouldThrow<NotImplementedException>(); " is 124.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The length of the statement  "            var policy = Policy.TimeoutAsync<ResultPrimitive>(timeoutPassedToConfiguration' TimeoutStrategy.Pessimistic' onTimeoutAsync); " is 125.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the statement  "            Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) }; " is 131.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            SystemClock.Reset(); // This is the only test which cannot work with the artificial SystemClock of TimeoutSpecsBase.  We want the invoked delegate to continue as far as: throw exceptionToThrow' to genuinely check that the walked-away-from task throws that' and that we pass it to onTimeoutAsync.   " is 295.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // That means we can't use the SystemClock.SleepAsync(...) within the executed delegate to artificially trigger the timeout cancellation (as for example the test above does). " is 174.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // In real execution' it is the .WhenAny() in the timeout implementation which throws for the timeout.  We don't want to go as far as abstracting Task.WhenAny() out into SystemClock' so we let this test run at real-world speed' not abstracted-clock speed. " is 255.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "                task.ContinueWith(t => exceptionObservedFromTaskPassedToOnTimeout = t.Exception.InnerException); // Intentionally not awaited: we want to assign the continuation' but let it run in its own time when the executed delegate eventually completes. " is 242.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            TimeSpan shimTimespan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The length of the statement  "            var policy = Policy.TimeoutAsync<ResultPrimitive>(timeoutPassedToConfiguration' TimeoutStrategy.Optimistic' onTimeoutAsync); " is 124.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_multiple_exceptions_from_inside_delegate__pessimistic,The length of the statement  "            Func<ResultPrimitive> func = () => { Helper_ThrowException(aggregateException); return ResultPrimitive.WhateverButTooLate; }; " is 125.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_multiple_exceptions_from_inside_delegate__pessimistic,The length of the statement  "            Action action = () => { ResultPrimitive throwAway = func(); }; // Helper' because .ShouldThrow<>() does not exist in FluentAssertions on Func<T>.  See https://github.com/fluentassertions/fluentassertions/issues/422 " is 214.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The length of the statement  "            Action action = () => { ResultPrimitive throwAway = func(); }; // Helper' because .ShouldThrow<>() does not exist in FluentAssertions on Func<T>.  See https://github.com/fluentassertions/fluentassertions/issues/422 " is 214.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_another_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The length of the statement  "            Action action = () => { ResultPrimitive throwAway = func(); }; // Helper' because .ShouldThrow<>() does not exist in FluentAssertions on Func<T>.  See https://github.com/fluentassertions/fluentassertions/issues/422 " is 214.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The length of the statement  "            TimeSpan tolerance = TimeSpan.FromSeconds(3); // Consider increasing tolerance' if test fails transiently in different test/build environments. " is 143.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The length of the statement  "                   ).ShouldThrow<OperationCanceledException>(); // Not a TimeoutRejectedException; i.e. policy can distinguish user cancellation from timeout cancellation. " is 152.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The length of the statement  "            Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) }; " is 131.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            SystemClock.Reset(); // This is the only test which cannot work with the artificial SystemClock of TimeoutSpecsBase.  We want the invoked delegate to continue as far as: throw exceptionToThrow' to genuinely check that the walked-away-from task throws that' and that we pass it to onTimeout.   " is 290.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // That means we can't use the SystemClock.Sleep(...) within the executed delegate to artificially trigger the timeout cancellation (as for example the test above does). " is 169.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            // In real execution' it is the .Wait(timeoutCancellationTokenSource.Token) in the timeout implementation which throws for the timeout.  We don't want to go as far as abstracting Task.Wait() out into SystemClock' so we let this test run at real-world speed' not abstracted-clock speed. " is 285.
Long Statement,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action_allowing_capture_of_otherwise_unobserved_exception__pessimistic,The length of the statement  "            TimeSpan shimTimespan = TimeSpan.FromSeconds(1); // Consider increasing shimTimeSpan if test fails transiently in different environments. " is 137.
Long Statement,Polly.Specs.Wrap,IPolicyWrapExtensionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\IPolicyWrapExtensionSpecs.cs,GetPoliciesTPolicy_should_return_multiple_policies_of_type_TPolicy,The length of the statement  "            wrap.GetPolicies<NoOpPolicy>().ShouldBeEquivalentTo(new[] { policyA' policyC }' options => options.WithStrictOrdering()); " is 121.
Long Statement,Polly.Specs.Wrap,IPolicyWrapExtensionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\IPolicyWrapExtensionSpecs.cs,GetPoliciesTPolicy_should_return_policies_of_type_TPolicy_matching_predicate,The length of the statement  "            wrap.GetPolicies<CircuitBreakerPolicy>(p => p.CircuitState == CircuitState.Closed).ShouldBeEquivalentTo(new[] { policyC }' options => options.WithStrictOrdering()); " is 164.
Long Statement,Polly.Specs.Wrap,IPolicyWrapExtensionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\IPolicyWrapExtensionSpecs.cs,GetPoliciesTPolicy_with_predicate_should_return_multiple_policies_of_type_TPolicy_if_multiple_match_predicate,The length of the statement  "            wrap.GetPolicies<NoOpPolicy>(_ => true).ShouldBeEquivalentTo(new[] { policyA' policyC }' options => options.WithStrictOrdering()); " is 130.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            RetryPolicy<ResultPrimitive> retry = Policy.HandleResult(ResultPrimitive.Fault).Retry(1); // Two tries in total: first try' plus one retry. " is 139.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(2' TimeSpan.MaxValue); " is 128.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            RetryPolicy<ResultPrimitive> retry = Policy.HandleResult(ResultPrimitive.Fault).Retry(1); // Two tries in total: first try' plus one retry. " is 139.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(2' TimeSpan.MaxValue); " is 128.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the statement  "            PolicyResult executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => { throw new ArgumentNullException(); }); " is 120.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the statement  "            PolicyResult executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => { throw new DivideByZeroException(); }); " is 120.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => { throw new ArgumentNullException(); }); " is 137.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => { throw new DivideByZeroException(); }); " is 137.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_handling_result_should_report_as_PolicyWrap_handled_result,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => ResultPrimitive.Fault); " is 120.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Outermost_generic_policy_not_handling_result_even_if_inner_policies_do_should_not_report_as_handled,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = wrap.ExecuteAndCapture(() => ResultPrimitive.FaultAgain); " is 125.
Long Statement,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_wrap,The length of the statement  "            var breaker = Policy.Handle<Exception>().CircuitBreaker(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 127.
Long Statement,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_to_innermost_Policy_when_execute_method_generic,The length of the statement  "            var breaker = Policy.Handle<Exception>().CircuitBreaker(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 127.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the statement  "            var breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(1' TimeSpan.Zero' onBreak' onReset).WithPolicyKey(breakerKey); " is 134.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_wrap,The length of the statement  "            var breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 143.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecs.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_wrap,The length of the statement  "            var fallback = Policy.HandleResult(ResultPrimitive.Fault).Fallback(ResultPrimitive.Substitute).WithPolicyKey(fallbackKey); " is 122.
Long Statement,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the statement  "            var breaker = Policy.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.Zero' onBreak' onReset).WithPolicyKey(breakerKey); " is 123.
Long Statement,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_WrapAsync,The length of the statement  "            var breaker = Policy.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 132.
Long Statement,Polly.Specs.Wrap,PolicyWrapContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_to_innermost_Policy_when_execute_method_generic,The length of the statement  "            var breaker = Policy.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 132.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_outer_policy_as_PolicyWrapKey,The length of the statement  "            var breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(1' TimeSpan.Zero).WithPolicyKey(breakerKey); " is 121.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_PolicyKey_to_execution_context_of_inner_policy_as_PolicyWrapKey,The length of the statement  "            var breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(1' TimeSpan.Zero' onBreak' onReset).WithPolicyKey(breakerKey); " is 139.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_WrapAsync,The length of the statement  "            var breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(1' TimeSpan.Zero' onBreak' doNothingOnReset).WithPolicyKey(breakerKey); " is 148.
Long Statement,Polly.Specs.Wrap,PolicyWrapTResultContextAndKeySpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapContextAndKeySpecsAsync.cs,Should_pass_outmost_PolicyWrap_Key_as_PolicyWrapKey_ignoring_inner_PolicyWrap_keys_even_when_executing_policies_in_inner_WrapAsync,The length of the statement  "            var fallback = Policy.HandleResult(ResultPrimitive.Fault).FallbackAsync(ResultPrimitive.Substitute).WithPolicyKey(fallbackKey); " is 127.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            RetryPolicy<ResultPrimitive> retry = Policy.HandleResult(ResultPrimitive.Fault).RetryAsync(1); // Two tries in total: first try' plus one retry. " is 144.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(2' TimeSpan.MaxValue); " is 133.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            (await retryWrappingBreaker.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault).ConfigureAwait(false)) " is 121.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            (await breakerWrappingRetry.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault).ConfigureAwait(false)) " is 121.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            RetryPolicy<ResultPrimitive> retry = Policy.HandleResult(ResultPrimitive.Fault).RetryAsync(1); // Two tries in total: first try' plus one retry. " is 144.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(2' TimeSpan.MaxValue); " is 133.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the retry wraps the breaker' the retry (being outer) should cause the call to be put through the breaker twice - causing the breaker to break. " is 150.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            (await retryWrappingBreaker.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault).ConfigureAwait(false)) " is 121.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            // When the breaker wraps the retry' the retry (being inner) should retry twice before throwing the exception back on the breaker - the exception only hits the breaker once - so the breaker should not break. " is 207.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The length of the statement  "            (await breakerWrappingRetry.RaiseResultSequenceAsync(ResultPrimitive.Fault' ResultPrimitive.Fault).ConfigureAwait(false)) " is 121.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_handling_exception_should_report_as_PolicyWrap_handled_exception,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = await  wrap.ExecuteAndCaptureAsync(() => { throw new ArgumentNullException(); }); " is 149.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_not_handling_exception_even_if_inner_policies_do_should_report_as_unhandled_exception,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = await wrap.ExecuteAndCaptureAsync(() => { throw new DivideByZeroException(); }); " is 148.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_handling_result_should_report_as_PolicyWrap_handled_result,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = await wrap.ExecuteAndCaptureAsync(() => TaskHelper.FromResult(ResultPrimitive.Fault)); " is 154.
Long Statement,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Outermost_generic_policy_not_handling_result_even_if_inner_policies_do_should_not_report_as_handled,The length of the statement  "            PolicyResult<ResultPrimitive> executeAndCaptureResultOnPolicyWrap = await wrap.ExecuteAndCaptureAsync(() => TaskHelper.FromResult(ResultPrimitive.FaultAgain)); " is 159.
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 5' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' not even oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 5' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' not even oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 20' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: true' scenario: "A high capacity bulkhead' with no queue' not even oversubscribed; cancel some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 20' maxQueuingActions: 0' totalTestLoad: 3' cancelQueuing: false' cancelExecuting: true' scenario: "A high capacity bulkhead' with no queue' not even oversubscribed; cancel some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 0' totalTestLoad: 4' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 0' totalTestLoad: 4' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with no queue' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 1' totalTestLoad: 5' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 3' maxQueuingActions: 1' totalTestLoad: 5' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with not enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(5' 3' 8' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(5' 3' 8' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(5' 3' 8' cancelQueuing: false' cancelExecuting: false' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 6' maxQueuingActions: 3' totalTestLoad: 9' cancelQueuing: true' cancelExecuting: true' scenario: "A bulkhead' with enough queue to avoid rejections' oversubscribed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 1' maxQueuingActions: 6' totalTestLoad: 5' cancelQueuing: true' cancelExecuting: true' scenario: "A very tight capacity bulkhead' but which allows a huge queue; enough for all actions to be gradually processed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,BulkheadScenarios,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\BulkheadScenarios.cs,GetEnumerator,The following statement contains a magic number: yield return new BulkheadScenario(maxParallelization: 1' maxQueuingActions: 6' totalTestLoad: 5' cancelQueuing: true' cancelExecuting: true' scenario: "A very tight capacity bulkhead' but which allows a huge queue; enough for all actions to be gradually processed; cancel some queuing' and some executing.").ToTheoryData();
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_BulkheadAvailableCount_via_interface,The following statement contains a magic number: IBulkheadPolicy bulkhead = Policy.Bulkhead(20' 10);
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_BulkheadAvailableCount_via_interface,The following statement contains a magic number: IBulkheadPolicy bulkhead = Policy.Bulkhead(20' 10);
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_BulkheadAvailableCount_via_interface,The following statement contains a magic number: bulkhead.BulkheadAvailableCount.Should().Be(20);
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_QueueAvailableCount_via_interface,The following statement contains a magic number: IBulkheadPolicy bulkhead = Policy.Bulkhead(20' 10);
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_QueueAvailableCount_via_interface,The following statement contains a magic number: IBulkheadPolicy bulkhead = Policy.Bulkhead(20' 10);
Magic Number,Polly.Specs.Bulkhead,IBulkheadPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Bulkhead\IBulkheadPolicySpecs.cs,Should_be_able_to_use_QueueAvailableCount_via_interface,The following statement contains a magic number: bulkhead.QueueAvailableCount.Should().Be(10);
Magic Number,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromMinutes(30);
Magic Number,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_always_execute_delegate_if_execution_key_not_set,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheAsyncSpecs.cs,Should_always_execute_delegate_if_execution_is_void_returning,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromMinutes(30);
Magic Number,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_always_execute_delegate_if_execution_key_not_set,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheSpecs.cs,Should_always_execute_delegate_if_execution_is_void_returning,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromMinutes(30);
Magic Number,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultAsyncSpecs.cs,Should_always_execute_delegate_if_execution_key_not_set,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromMinutes(30);
Magic Number,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_execute_delegate_and_put_value_in_cache_but_when_it_expires_execute_delegate_again,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,CacheTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\CacheTResultSpecs.cs,Should_always_execute_delegate_if_execution_key_not_set,The following statement contains a magic number: delegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Caching,ContextualTtlSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\ContextualTtlSpecs.cs,Should_return_value_set_on_context,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.Caching,RelativeTtllSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\RelativeTtlSpecs.cs,Should_return_configured_timespan,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.Caching,SlidingTtlSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Caching\SlidingTtlSpecs.cs,Should_return_configured_timespan,The following statement contains a magic number: TimeSpan ttl = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var numberOfWindowsDefinedInCircuitBreaker = 10;
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: TimeSpan durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_timespan_maxvalue,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.MaxValue);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(-0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_failure_threshold_of_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.0' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_failure_threshold_is_greater_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1.01' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_timeslice_duration_is_less_than_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      0.5'                       TimeSpan.FromMilliseconds(20).Add(TimeSpan.FromTicks(-1))'                       4'                       TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_throw_if_timeslice_duration_is_resolution_of_circuit,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromMilliseconds(20)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 1' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_minimum_throughput_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 0' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_throw_if_duration_of_break_is_less_than_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' -TimeSpan.FromSeconds(1));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_handle_a_duration_of_break_of_zero,The following statement contains a magic number: Action action = () => Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.Zero);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_and_minimum_threshold_is_equalled_but_last_call_is_success,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exceptions_raised_are_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentOutOfRangeException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_error_occurring_just_at_the_end_of_the_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_and_failures_in_beginning_of_new_timeslice_when_below_minimum_throughput_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: var numberOfWindowsDefinedInCircuitBreaker = 10;
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_if_failures_in_second_window_of_last_timeslice_and_failures_in_first_window_in_next_timeslice_exceeds_failure_threshold_and_minimum_threshold,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_exceeded_though_not_all_are_failures_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_exceeded_but_throughput_threshold_not_met_before_timeslice_expires_even_if_timeslice_expires_only_exactly_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_the_last_raised_exception_if_failure_threshold_equalled_and_throughput_threshold_equalled_even_if_only_just_within_timeslice_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_and_throughput_threshold_not_met_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failure_threshold_not_met_but_throughput_threshold_met_before_timeslice_expires_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromMilliseconds(199)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: var samplingDuration = TimeSpan.FromMilliseconds(199);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_failures_at_end_of_last_timeslice_below_failure_threshold_and_failures_in_beginning_of_new_timeslice_where_total_equals_failure_threshold_low_samping_duration,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_same_window,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: var samplingDuration = TimeSpan.FromSeconds(10);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed_with_failures_in_different_windows,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: samplingDuration'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' TimeSpan.FromSeconds(30));
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset'                      onHalfOpen: onHalfOpen                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromMinutes(1)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromMinutes(1)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromMinutes(1)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: TimeSpan.FromSeconds(30)'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var durationOfBreak = TimeSpan.FromSeconds(30);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 4'                      durationOfBreak: durationOfBreak'                      onBreak: onBreak'                      onReset: onReset                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(                      failureThreshold: 0.5'                      samplingDuration: TimeSpan.FromSeconds(10)'                      minimumThroughput: 2'                      durationOfBreak: TimeSpan.FromSeconds(30)                  );
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_report_cancellation_when_both_open_circuit_and_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,AdvancedCircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\AdvancedCircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(0.5' TimeSpan.FromSeconds(10)' 4' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_throw_if_exceptions_allowed_before_breaking_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                                      .Handle<DivideByZeroException>()                                      .CircuitBreaker(0' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_open_circuit_if_specified_number_of_specified_exception_are_not_raised_consecutively,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_specified_exception_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_one_of_the_specified_exceptions_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .Or<ArgumentOutOfRangeException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_open_circuit_if_exception_raised_is_not_the_specified_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_open_circuit_if_exception_raised_is_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .Or<ArgumentOutOfRangeException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_rethrow_and_call_onbreak_with_the_last_raised_exception_unwrapped_if_matched_as_inner,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .HandleInner<DivideByZeroException>()                  .Or<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: var breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_set_LastException_on_handling_inner_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .HandleInner<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_set_PolicyResult_on_handling_inner_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .HandleInner<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                               .Handle<DivideByZeroException>()                               .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_throw_if_exceptions_allowed_before_breaking_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                                      .Handle<DivideByZeroException>()                                      .CircuitBreakerAsync(0' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_specified_number_of_specified_exception_are_not_raised_consecutively,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_specified_exception_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_blocking_executions_and_noting_the_last_raised_exception_after_specified_number_of_one_of_the_specified_exceptions_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .Or<ArgumentOutOfRangeException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exception_raised_is_not_the_specified_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_open_circuit_if_exception_raised_is_not_one_of_the_specified_exceptions,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .Or<ArgumentOutOfRangeException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_raise_an_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_rethrow_and_call_onbreak_with_the_last_raised_exception_unwrapped_if_matched_as_inner,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .HandleInner<DivideByZeroException>()                  .Or<DivideByZeroException>()                  .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_initialise_LastException_to_null_on_creation,The following statement contains a magic number: var breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_set_LastException_on_handling_inner_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .HandleInner<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_last_raised_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_set_LastException_to_null_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                              .Handle<DivideByZeroException>()                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy                               .Handle<DivideByZeroException>()                               .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_throw_if_faults_allowed_before_breaking_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                                       .HandleResult(ResultPrimitive.Fault)                                       .CircuitBreakerAsync(0' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_open_circuit_if_specified_number_of_specified_handled_result_are_not_raised_consecutively,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_specified_handled_result_have_been_returned,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_one_of_the_specified_handled_results_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .OrResult(ResultPrimitive.FaultAgain)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_specified_handled_result_with_predicate_have_been_returned,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                              .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_open_circuit_if_result_returned_is_not_the_handled_result,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_open_circuit_if_result_returned_is_not_one_of_the_handled_results,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .OrResult(ResultPrimitive.FaultYetAgain)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_open_circuit_if_result_returned_does_not_match_result_predicate,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                              .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_open_circuit_if_result_returned_does_not_match_any_of_the_result_predicates,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                  .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .OrResult(r => r.ResultCode == ResultPrimitive.FaultYetAgain)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_return_a_fault,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_return_a_fault,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_initialise_LastHandledResult_and_LastResult_to_default_on_creation,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_set_LastHandledResult_on_handling_result_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_set_LastHandledResult_to_last_handled_result_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_set_LastHandledResult_to_default_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultAsyncSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreakerAsync(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_exception_after_specified_number_of_specified_exception_have_been_returned_when_result_policy_handling_exceptions_only,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy<ResultPrimitive>                              .Handle<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_exception_after_specified_number_of_exceptions_and_results_have_been_raised__breaking_on_result__when_configuring_result_first,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .Or<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_exceptions_and_results_have_been_raised__breaking_on_result__when_configuring_result_first,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .Or<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_exception_after_specified_number_of_exceptions_and_results_have_been_raised__breaking_on_result__when_configuring_exception_first,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_exceptions_and_results_have_been_raised__breaking_on_result__when_configuring_exception_first,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_if_results_and_exceptions_returned_match_combination_of_the_result_and_exception_predicates,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                  .Handle<ArgumentException>(e => e.ParamName == "key")                  .OrResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_not_open_circuit_if_result_returned_is_not_one_of_the_configured_results_or_exceptions,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_not_open_circuit_if_exception_thrown_is_not_one_of_the_configured_results_or_exceptions,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_not_open_circuit_if_result_returned_does_not_match_any_of_the_result_predicates,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                  .Handle<ArgumentException>(e => e.ParamName == "key")                  .OrResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_exception_after_specified_number_of_exceptions_and_results_have_been_raised__configuring_multiple_results_and_exceptions,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Or<ArgumentException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .CircuitBreaker(4' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_exceptions_and_results_have_been_raised__when_configuring_multiple_results_and_exceptions,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Or<ArgumentException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .CircuitBreaker(4' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_not_open_circuit_if_result_raised_or_exception_thrown_is_not_one_of_the_handled_results_or_exceptions,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .Or<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .Or<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_an_exception,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .Or<DivideByZeroException>()                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_call_onbreak_with_the_last_raised_exception,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_initialise_LastHandledResult_and_LastResult_to_default_on_creation,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_set_LastHandledResult_on_handling_result_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_set_LastException_on_exception_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_set_LastHandledResult_to_last_handled_result_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_set_LastException_to_last_exception_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultMixedResultExceptionSpecs.cs,Should_set_LastHandledResult_and_LastException_to_default_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_throw_if_faults_allowed_before_breaking_is_less_than_one,The following statement contains a magic number: Action action = () => Policy                                       .HandleResult(ResultPrimitive.Fault)                                       .CircuitBreaker(0' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_initialise_to_closed_state,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_open_circuit_if_specified_number_of_specified_handled_result_are_not_raised_consecutively,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_specified_handled_result_have_been_returned,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_one_of_the_specified_handled_results_have_been_raised,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .OrResult(ResultPrimitive.FaultAgain)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_the_last_handled_result_after_specified_number_of_specified_handled_result_with_predicate_have_been_returned,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                  .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_open_circuit_if_result_returned_is_not_the_handled_result,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_open_circuit_if_result_returned_is_not_one_of_the_handled_results,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .OrResult(ResultPrimitive.FaultYetAgain)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_open_circuit_if_result_returned_does_not_match_result_predicate,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                              .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_open_circuit_if_result_returned_does_not_match_any_of_the_result_predicates,The following statement contains a magic number: CircuitBreakerPolicy<ResultClass> breaker = Policy                  .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .OrResult(r => r.ResultCode == ResultPrimitive.FaultYetAgain)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_halfopen_circuit_after_the_specified_duration_has_passed,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_again_after_the_specified_duration_has_passed_if_the_next_call_raises_a_fault,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_return_a_fault,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_reset_circuit_after_the_specified_duration_has_passed_if_the_next_call_does_not_return_a_fault,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__test_execution_permit_directly,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_only_allow_single_execution_on_first_entering_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_allow_single_execution_per_break_duration_in_halfopen_state__integration_test,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_and_block_calls_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_hold_circuit_open_despite_elapsed_time_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_close_circuit_again_on_reset_after_manual_override,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_be_able_to_reset_automatically_opened_circuit_without_specified_duration_passing,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_call_onreset_on_initialise,The following statement contains a magic number: Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_automatically,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_manually,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_calls_placed_through_open_circuit,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_when_breaking_circuit_first_time_but_not_for_subsequent_call_failure_which_arrives_on_open_state_though_started_on_closed_state,The following statement contains a magic number: TimeSpan testTimeoutToExposeDeadlocks = TimeSpan.FromSeconds(5);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_when_automatically_closing_circuit_but_not_when_halfopen,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_call_onreset_on_successive_successful_calls,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_subsequent_execution,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onhalfopen_when_automatically_transitioning_to_halfopen_due_to_state_read,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset' onHalfOpen);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_when_manually_resetting_circuit,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_with_the_last_handled_result,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_with_the_correct_timespan,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_open_circuit_with_timespan_maxvalue_if_manual_override_open,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onbreak_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_call_onreset_with_the_passed_context,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_context_data,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1)' onBreak' onReset);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_create_new_context_for_each_call_to_execute,The following statement contains a magic number: var time = 1.January(2000);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_initialise_LastHandledResult_and_LastResult_to_default_on_creation,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_set_LastHandledResult_on_handling_result_even_when_not_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_set_LastHandledResult_to_last_handled_result_when_breaking,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_set_LastHandledResult_to_default_on_circuit_reset,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_report_cancellation_during_faulting_action_execution_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_report_faulting_from_faulting_action_execution_when_user_delegate_does_not_observe_cancellation,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,CircuitBreakerTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\CircuitBreakerTResultSpecs.cs,Should_honour_different_cancellationtoken_captured_implicitly_by_action,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy                              .HandleResult(ResultPrimitive.Fault)                              .CircuitBreaker(2' durationOfBreak);
Magic Number,Polly.Specs.CircuitBreaker,ICircuitBreakerPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\ICircuitBreakerPolicySpecs.cs,Should_be_able_to_use_CircuitState_via_interface,The following statement contains a magic number: ICircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,ICircuitBreakerPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\ICircuitBreakerPolicySpecs.cs,Should_be_able_to_use_Isolate_via_interface,The following statement contains a magic number: ICircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,ICircuitBreakerPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\ICircuitBreakerPolicySpecs.cs,Should_be_able_to_use_Reset_via_interface,The following statement contains a magic number: ICircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,ICircuitBreakerPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\ICircuitBreakerPolicySpecs.cs,Should_be_able_to_use_LastException_via_interface,The following statement contains a magic number: ICircuitBreakerPolicy breaker = Policy                  .Handle<DivideByZeroException>()                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs.CircuitBreaker,ICircuitBreakerTResultPolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\CircuitBreaker\ICircuitBreakerPolicyTResultSpecs.cs,Should_be_able_to_use_LastHandledResult_via_interface,The following statement contains a magic number: ICircuitBreakerPolicy<ResultPrimitive> breaker = Policy                  .HandleResult(ResultPrimitive.Fault)                  .CircuitBreaker(2' TimeSpan.FromMinutes(1));
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Executing_the_policy_function_should_execute_the_specified_async_function_and_return_the_result,The following statement contains a magic number: int result = await policy.ExecuteAsync(() => Task.FromResult(2));
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Executing_the_policy_function_should_execute_the_specified_async_function_and_return_the_result,The following statement contains a magic number: result.Should()                  .Be(2);
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,AdvancedCircuitBreakerPolicy,The following statement contains a magic number: return Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreaker(1' TimeSpan.MaxValue' 2' new TimeSpan());
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Executing_the_policy_function_should_throw_when_context_data_is_null,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(() => Task.FromResult(2)' (IDictionary<string' object>)null))                    .ShouldThrow<ArgumentNullException>();
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Executing_the_policy_function_should_throw_when_context_is_null,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(() => Task.FromResult(2)' (Context)null))                    .ShouldThrow<ArgumentNullException>().And                    .ParamName.Should().Be("context");
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Execute_and_capturing_the_policy_function_should_throw_when_context_data_is_null,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAndCaptureAsync(() => Task.FromResult(2)' (IDictionary<string' object>)null))                    .ShouldThrow<ArgumentNullException>();
Magic Number,Polly.Specs,PolicyAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyAsyncSpecs.cs,Execute_and_capturing_the_policy_function_should_throw_when_context_is_null,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAndCaptureAsync(() => Task.FromResult(2)' (Context)null))                    .ShouldThrow<ArgumentNullException>().And                    .ParamName.Should().Be("context");
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_policy_function_should_execute_the_specified_function_and_return_the_result,The following statement contains a magic number: var result = policy.Execute(() => 2);
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_policy_function_should_execute_the_specified_function_and_return_the_result,The following statement contains a magic number: result.Should()                  .Be(2);
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,AdvancedCircuitBreakerAsyncPolicy,The following statement contains a magic number: return Policy                  .Handle<DivideByZeroException>()                  .AdvancedCircuitBreakerAsync(1' TimeSpan.MaxValue' 2' new TimeSpan());
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_policy_function_should_throw_when_context_data_is_null,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => 2' (IDictionary<string' object>)null))                  .ShouldThrow<ArgumentNullException>();
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Executing_the_policy_function_should_throw_when_context_is_null,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => 2' (Context)null))                  .ShouldThrow<ArgumentNullException>().And                  .ParamName.Should().Be("context");
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Execute_and_capturing_the_policy_function_should_throw_when_context_data_is_null,The following statement contains a magic number: policy.Invoking(p => p.ExecuteAndCapture(() => 2' (IDictionary<string' object>)null))                    .ShouldThrow<ArgumentNullException>();
Magic Number,Polly.Specs,PolicySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicySpecs.cs,Execute_and_capturing_the_policy_function_should_throw_when_context_is_null,The following statement contains a magic number: policy.Invoking(p => p.ExecuteAndCapture(() => 2' (Context)null))                    .ShouldThrow<ArgumentNullException>().And                    .ParamName.Should().Be("context");
Magic Number,Polly.Specs,PolicyTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultAsyncSpecs.cs,AdvancedCircuitBreakerPolicy,The following statement contains a magic number: return Policy                  .HandleResult(ResultPrimitive.Fault)                  .AdvancedCircuitBreaker(1' TimeSpan.MaxValue' 2' new TimeSpan());
Magic Number,Polly.Specs,PolicyTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\PolicyTResultSpecs.cs,AdvancedCircuitBreakerAsyncPolicy,The following statement contains a magic number: return Policy                  .HandleResult(ResultPrimitive.Fault)                  .AdvancedCircuitBreakerAsync(1' TimeSpan.MaxValue' 2' new TimeSpan());
Magic Number,Polly.Specs.Fallback,FallbackAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The following statement contains a magic number: contextData.Count.Should().Be(2);
Magic Number,Polly.Specs.Fallback,FallbackSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The following statement contains a magic number: contextData.Count.Should().Be(2);
Magic Number,Polly.Specs.Fallback,FallbackTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultAsyncSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The following statement contains a magic number: contextData.Count.Should().Be(2);
Magic Number,Polly.Specs.Fallback,FallbackTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Fallback\FallbackTResultSpecs.cs,Should_call_onFallback_with_independent_context_for_independent_calls,The following statement contains a magic number: contextData.Count.Should().Be(2);
Magic Number,Polly.Specs.NoOp,NoOpTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultSpecs.cs,Should_execute_user_delegate,The following statement contains a magic number: policy.Invoking(x => result = x.Execute(() => 10))                  .ShouldNotThrow();
Magic Number,Polly.Specs.NoOp,NoOpTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultSpecs.cs,Should_execute_user_delegate,The following statement contains a magic number: result.Should().Be(10);
Magic Number,Polly.Specs.NoOp,NoOpTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultSpecs.cs,Should_execute_user_delegate_without_adding_extra_cancellation_behaviour,The following statement contains a magic number: using (CancellationTokenSource cts = new CancellationTokenSource())              {                  cts.Cancel();                    policy.Invoking(p => result = p.Execute(ct => 10' cts.Token))                     .ShouldNotThrow();              }
Magic Number,Polly.Specs.NoOp,NoOpTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultSpecs.cs,Should_execute_user_delegate_without_adding_extra_cancellation_behaviour,The following statement contains a magic number: result.Should().Be(10);
Magic Number,Polly.Specs.NoOp,NoOpTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultAsyncSpecs.cs,Should_execute_user_delegate,The following statement contains a magic number: policy.Awaiting(async p => result = await p.ExecuteAsync(() => Task.FromResult((int?)10)))                  .ShouldNotThrow();
Magic Number,Polly.Specs.NoOp,NoOpTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultAsyncSpecs.cs,Should_execute_user_delegate,The following statement contains a magic number: result.Should().Be(10);
Magic Number,Polly.Specs.NoOp,NoOpTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultAsyncSpecs.cs,Should_execute_user_delegate_without_adding_extra_cancellation_behaviour,The following statement contains a magic number: using (CancellationTokenSource cts = new CancellationTokenSource())              {                  cts.Cancel();                    policy.Awaiting(async p => result = await p.ExecuteAsync(ct => Task.FromResult((int?)10)' cts.Token))                      .ShouldNotThrow();              }
Magic Number,Polly.Specs.NoOp,NoOpTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\NoOp\NoOpTResultAsyncSpecs.cs,Should_execute_user_delegate_without_adding_extra_cancellation_behaviour,The following statement contains a magic number: result.Should().Be(10);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_add_Policy_using_Add,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_add_PolicyTResult_using_Add,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_add_Policy_by_interface_using_Add,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_add_Policy_using_Indexer,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_add_PolicyTResult_using_Indexer,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Registry,PolicyRegistrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Registry\PolicyRegistrySpecs.cs,Should_be_able_to_clear_registry,The following statement contains a magic number: _registry.Count.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_of_times_than_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_throw_when_specified_exception_thrown_more_times_then_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_throw_when_specified_exception_thrown_more_times_then_retry_count,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_then_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_then_retry_count,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3 + 1))                    .ShouldThrow<ArgumentException>();
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3' (_' retryCount) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_call_onretry_with_a_handled_innerexception,The following statement contains a magic number: var policy = Policy                  .HandleInner<DivideByZeroException>()                  .RetryAsync(3' (exception' _) => passedToOnRetry = exception);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: executeDelegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null'              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3' (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_not_throw_regardless_of_how_many_times_the_specified_exception_is_raised,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_not_throw_regardless_of_how_many_times_one_of_the_specified_exception_is_raised,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: executeDelegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverSpecs.cs,Should_not_throw_regardless_of_how_many_times_the_specified_exception_is_raised,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverSpecs.cs,Should_not_throw_regardless_of_how_many_times_one_of_the_specified_exception_is_raised,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryForeverSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exception_and_specified_result_if_raised_same_number_of_times_as_retry_count__when_configuring_results_before_exceptions,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Or<DivideByZeroException>()                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exception_and_specified_result_if_raised_same_number_of_times_as_retry_count__when_configuring_exception_before_result,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_if_raised_same_number_of_times_as_retry_count__mixing_exceptions_and_results_specifying_exceptions_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Or<ArgumentException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(4);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_if_raised_same_number_of_times_as_retry_count__mixing_exceptions_and_results_specifying_results_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Or<DivideByZeroException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Or<ArgumentException>()                  .Retry(4);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_handled_result_when_handled_result_returned_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_results_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Or<DivideByZeroException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Or<ArgumentException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_when_exception_thrown_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_results_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Or<DivideByZeroException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Or<ArgumentException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_handled_result_when_handled_result_returned_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_exceptions_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Or<ArgumentException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_when_exception_thrown_next_after_retries_exhaust_handling_both_exceptions_and_specified_results__mixing_exceptions_and_results_specifying_exceptions_first,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Or<ArgumentException>()                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_unhandled_result_if_not_one_of_results_or_exceptions_specified,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Or<DivideByZeroException>()                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_if_not_one_of_results_or_exceptions_handled,The following statement contains a magic number: Policy<ResultPrimitive> policy = Policy                  .Handle<DivideByZeroException>()                  .OrResult(ResultPrimitive.Fault)                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_handle_both_exceptions_and_specified_results_with_predicates,The following statement contains a magic number: Policy<ResultClass> policy = Policy                  .Handle<ArgumentException>(e => e.ParamName == "key")                  .OrResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_throw_if_exception_predicate_not_matched,The following statement contains a magic number: Policy<ResultClass> policy = Policy                  .Handle<ArgumentException>(e => e.ParamName == "key")                  .OrResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetryTResultMixedResultExceptionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultMixedResultExceptionSpecs.cs,Should_return_unhandled_result_if_result_predicate_not_matched,The following statement contains a magic number: Policy<ResultClass> policy = Policy                  .Handle<ArgumentException>(e => e.ParamName == "key")                  .OrResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .Retry(2);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_retry_count,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_of_times_than_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_throw_when_specified_exception_thrown_more_times_then_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_throw_when_specified_exception_thrown_more_times_then_retry_count,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_then_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_then_retry_count,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3 + 1))                    .ShouldThrow<ArgumentException>();
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3' (_' retryCount) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_call_onretry_with_a_handled_innerexception,The following statement contains a magic number: var policy = Policy                  .HandleInner<DivideByZeroException>()                  .Retry(3' (exception' _) => passedToOnRetry = exception);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null'              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3' (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetrySpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_handled_result_raised_same_number_of_times_as_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_one_of_the_handled_results_raised_same_number_of_times_as_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_handled_result_raised_less_number_of_times_than_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_return_handled_result_when_all_of_the_handled_results_raised_less_number_of_times_than_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_return_handled_result_when_one_of_the_handled_results_is_raised_more_times_then_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3' (_' retryCount) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_handled_result,The following statement contains a magic number: Policy<ResultClass> policy = Policy                  .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .Retry(3' (outcome' _) => retryFaults.Add(outcome.Result.SomeString));
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                 .HandleResult(ResultPrimitive.Fault)                 .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                         .HandleResult(ResultPrimitive.Fault)                         .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                         .HandleResult(ResultPrimitive.Fault)                         .Retry(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy             .HandleResult(ResultPrimitive.Fault)             .Retry(3' (_' __) =>             {                 cancellationTokenSource.Cancel();             });
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_handled_result_raised_same_number_of_times_as_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_one_of_the_handled_results_raised_same_number_of_times_as_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_handled_result_raised_less_number_of_times_than_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_return_handled_result_when_all_of_the_handled_results_raised_less_number_of_times_than_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_handled_result_when_handled_result_raised_more_times_then_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_return_handled_result_when_one_of_the_handled_results_is_raised_more_times_then_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3' (_' retryCount) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_call_onretry_on_each_retry_with_the_current_handled_result,The following statement contains a magic number: Policy<ResultClass> policy = Policy                  .HandleResult<ResultClass>(r => r.ResultCode == ResultPrimitive.Fault)                  .RetryAsync(3' (outcome' _) => retryFaults.Add(outcome.Result.SomeString));
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: executeDelegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                 .HandleResult(ResultPrimitive.Fault)                 .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                .HandleResult(ResultPrimitive.Fault)                .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                         .HandleResult(ResultPrimitive.Fault)                         .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy                         .HandleResult(ResultPrimitive.Fault)                         .RetryAsync(3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,RetryTResultSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\RetryTResultSpecsAsync.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: RetryPolicy<ResultPrimitive> policy = Policy             .HandleResult(ResultPrimitive.Fault)             .RetryAsync(3' (_' __) =>             {                 cancellationTokenSource.Cancel();             });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(2))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(2))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3 + 1))                    .ShouldThrow<ArgumentException>();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var expectedRetryWaits = new []                  {                      1.Seconds()'                       2.Seconds()'                       3.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var expectedRetryWaits = new []                  {                      1.Seconds()'                       2.Seconds()'                       3.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' timeSpan) => actualRetryWaits.Add(timeSpan));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' timeSpan) => actualRetryWaits.Add(timeSpan));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' __' retryCount' ___) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' __' retryCount' ___) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_with_the_passed_context,The following statement contains a magic number: Policy policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => contextData = context);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_call_onretry_with_the_passed_context,The following statement contains a magic number: Policy policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => contextData = context);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_data,The following statement contains a magic number: Policy policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => capturedContext = context);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Context_should_be_empty_if_execute_not_called_with_any_data,The following statement contains a magic number: Policy policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => capturedContext = context);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(5'                       retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                       (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(5'                       retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                       (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(5);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_handled_exception_to_sleepdurationprovider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(5'                      sleepDurationProvider:( retries' ex' ctx) =>                      {                          capturedExceptionInstance = ex;                          return TimeSpan.FromMilliseconds(0);                      }'                      onRetryAsync: (ts'  i'  ctx'  task) =>                      {                          return TaskHelper.EmptyTask;                      }                  );
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: var policy = Policy                  .Handle<Exception>()                  .WaitAndRetryAsync(2'                      sleepDurationProvider: (retryAttempt' exc' ctx) =>                      {                          return expectedRetryWaits[exc];                      }'                      onRetryAsync: (_' timeSpan' __' ___) =>                      {                          actualRetryWaits.Add(timeSpan);                          return TaskHelper.EmptyTask;                      });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The following statement contains a magic number: TimeSpan defaultRetryAfter = 30.Seconds();
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: executeDelegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_action_when_non_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_all_tries_when_faulting_and_cancellationtoken_not_cancelled,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The following statement contains a magic number: watch.Elapsed.Should().BeCloseTo(shimTimeSpan' precision: (int)(shimTimeSpan.TotalMilliseconds) / 2);
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() }'                  (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() }'                  (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryAsyncSpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetryAsync(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_not_throw_regardless_of_how_many_times_the_specified_exception_is_raised,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_not_throw_regardless_of_how_many_times_one_of_the_specified_exception_is_raised,The following statement contains a magic number: policy.Awaiting(async x => await x.RaiseExceptionAsync<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryForeverAsync(                      retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                      (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: await policy.RaiseExceptionAsync<DivideByZeroException>(5);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The following statement contains a magic number: TimeSpan defaultRetryAfter = 30.Seconds();
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: TimeSpan shimTimeSpan = TimeSpan.FromSeconds(0.2);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_wait_asynchronously_for_async_onretry_delegate,The following statement contains a magic number: executeDelegateInvocations.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverAsyncSpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: Scenario scenario = new Scenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverTResultAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverTResultAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverTResultSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverTResultSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(2))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_then_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_then_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_throw_when_one_of_the_specified_exceptions_thrown_less_number_then_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(2))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_specified_exception_thrown_more_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .Or<ArgumentException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_throw_when_one_of_the_specified_exceptions_are_thrown_more_times_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3 + 1))                    .ShouldThrow<ArgumentException>();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_same_number_of_times_as_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3 + 1))                    .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_more_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(2);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_sleep_for_the_specified_duration_each_retry_when_specified_exception_thrown_less_number_of_times_than_there_are_sleep_durations,The following statement contains a magic number: totalTimeSlept.Should()                            .Be(1 + 2);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var expectedRetryWaits = new []                  {                      1.Seconds()'                       2.Seconds()'                       3.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var expectedRetryWaits = new []                  {                      1.Seconds()'                       2.Seconds()'                       3.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' timeSpan) => actualRetryWaits.Add(timeSpan));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' timeSpan) => actualRetryWaits.Add(timeSpan));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_timespan,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (exception' _) => retryExceptions.Add(exception));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var expectedRetryCounts = new[] { 1' 2' 3 };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' __' retryCount' ___) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                     1.Seconds()'                     2.Seconds()'                     3.Seconds()                  }' (_' __' retryCount' ___) => retryCounts.Add(retryCount));
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_on_each_retry_with_the_current_retry_count,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_with_the_passed_context,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => contextData = context);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_call_onretry_with_the_passed_context,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[]                  {                      1.Seconds()'                      2.Seconds()'                      3.Seconds()                  }' (_' __' context) => contextData = context);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                       4.Seconds()'                       8.Seconds()'                       16.Seconds()'                       32.Seconds()                   };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(5'                       retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                       (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(5'                       retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                       (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(5);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_handled_exception_to_sleepdurationprovider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(5'                      sleepDurationProvider: (retries' ex' ctx) =>                      {                          capturedExceptionInstance = ex;                          return TimeSpan.FromMilliseconds(0);                      }'                      onRetry: (ex' ts' i' ctx) =>                      {                      }                  );
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: var policy = Policy                  .Handle<Exception>()                  .WaitAndRetry(2'                      (retryAttempt' exc' ctx) => expectedRetryWaits[exc]'                      (_' timeSpan' __' ___) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The following statement contains a magic number: TimeSpan defaultRetryAfter = 30.Seconds();
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_not_execute_action_when_cancellationtoken_cancelled_before_execute,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation token cancelled manually below - before any scenario execution.              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_otherwise_non_faulting_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_initial_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_observes_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 2'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_retried_action_execution_and_cancel_further_retries_when_user_delegate_does_not_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(2);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = true              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_during_faulting_last_retry_execution_when_user_delegate_does_observe_cancellationtoken,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = 1 + 3'                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_faulting_from_faulting_last_retry_execution_when_user_delegate_does_not_observe_cancellation_raised_during_last_retry,The following statement contains a magic number: attemptsInvoked.Should().Be(1 + 3);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_cancellation_immediately_during_wait_phase_of_waitandretry,The following statement contains a magic number: watch.Elapsed.Should().BeCloseTo(shimTimeSpan' precision: (int)(shimTimeSpan.TotalMilliseconds) / 2);
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() }'                  (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() }'                  (_' __) =>                  {                      cancellationTokenSource.Cancel();                  });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_report_cancellation_after_faulting_action_execution_and_cancel_further_retries_if_onRetry_invokes_cancellation,The following statement contains a magic number: PolicyExtensions.ExceptionAndOrCancellationScenario scenario = new PolicyExtensions.ExceptionAndOrCancellationScenario              {                  NumberOfTimesToRaiseException = 1 + 3'                  AttemptDuringWhichToCancel = null' // Cancellation during onRetry instead - see above.                  ActionObservesCancellation = false              };
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_execute_func_returning_value_when_cancellationtoken_not_cancelled,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetrySpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetrySpecs.cs,Should_honour_and_report_cancellation_during_func_execution,The following statement contains a magic number: var policy = Policy                 .Handle<DivideByZeroException>()                 .WaitAndRetry(new[] { 1.Seconds()' 2.Seconds()' 3.Seconds() });
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_not_throw_regardless_of_how_many_times_the_specified_exception_is_raised,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<DivideByZeroException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_not_throw_regardless_of_how_many_times_one_of_the_specified_exception_is_raised,The following statement contains a magic number: policy.Invoking(x => x.RaiseException<ArgumentException>(3))                    .ShouldNotThrow();
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_call_onretry_on_each_retry_with_the_current_exception,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(3' (e' i) => e.HelpLink = "Exception #" + i);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var expectedRetryWaits = new[]                  {                      2.Seconds()'                      4.Seconds()'                      8.Seconds()'                      16.Seconds()'                      32.Seconds()                  };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: var policy = Policy                  .Handle<DivideByZeroException>()                  .WaitAndRetryForever(                      retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))'                      (_' timeSpan) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_calculate_retry_timespans_from_current_retry_attempt_and_timespan_provider,The following statement contains a magic number: policy.RaiseException<DivideByZeroException>(5);
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<Exception' TimeSpan> expectedRetryWaits = new Dictionary<Exception' TimeSpan>(){                    {new DivideByZeroException()' 2.Seconds()}'                  {new ArgumentNullException()' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryForeverSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryForeverSpecs.cs,Should_be_able_to_pass_retry_duration_from_execution_to_sleepDurationProvider_via_context,The following statement contains a magic number: TimeSpan defaultRetryAfter = 30.Seconds();
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultAsyncSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: var policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .WaitAndRetryAsync(2'                      (retryAttempt' outcome' ctx) => expectedRetryWaits[outcome.Result]'                      (_' timeSpan' __' ___) =>                      {                          actualRetryWaits.Add(timeSpan);                          return TaskHelper.EmptyTask;                      });
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: Dictionary<ResultPrimitive' TimeSpan> expectedRetryWaits = new Dictionary<ResultPrimitive' TimeSpan>(){                    {ResultPrimitive.Fault' 2.Seconds()}'                  {ResultPrimitive.FaultAgain' 4.Seconds()}'              };
Magic Number,Polly.Specs.Retry,WaitAndRetryTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Retry\WaitAndRetryTResultSpecs.cs,Should_be_able_to_calculate_retry_timespans_based_on_the_handled_fault,The following statement contains a magic number: var policy = Policy                  .HandleResult(ResultPrimitive.Fault)                  .OrResult(ResultPrimitive.FaultAgain)                  .WaitAndRetry(2'                      (retryAttempt' outcome' ctx) => expectedRetryWaits[outcome.Result]'                      (_' timeSpan' __' ___) => actualRetryWaits.Add(timeSpan)                  );
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync(-10);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_not_throw_when_timeout_is_greater_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync(3);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_timespan,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync(TimeSpan.FromMinutes(0.5)' null);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync(30' null);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_timeoutprovider,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync(() => TimeSpan.FromSeconds(30)' null);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(50);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                })).ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(10)' CancellationToken.None).ConfigureAwait(false);                }))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(50);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                                }' userCancellationToken).ConfigureAwait(false))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(10)' ct).ConfigureAwait(false);                                }' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync(TimeSpan.FromSeconds(10)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: int timeout = 5;
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: using (CancellationTokenSource userTokenSource = new CancellationTokenSource())              {                  policy.Awaiting(async p => await p.ExecuteAsync(async                      _ => {                          userTokenSource.Cancel(); // User token cancels in the middle of execution ...                          await SystemClock.SleepAsync(TimeSpan.FromSeconds(timeout * 2)'                               CancellationToken.None // ... but if the executed delegate does not observe it                              ).ConfigureAwait(false);                       }' userTokenSource.Token)                     ).ShouldThrow<TimeoutRejectedException>(); // ... it's still the timeout we expect.              }
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__pessimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync(10' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The following statement contains a magic number: int timeout = 10;
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__optimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync(10' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                                }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                                    }' contextPassedToExecute))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25*programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);              }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) };
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);              }' context))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                                }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                }' userCancellationToken).ConfigureAwait(false))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                    }' contextPassedToExecute' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25* programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                    }' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey")              {                  ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay)              };
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                }' context' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutAsyncSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                }' userCancellationToken).ConfigureAwait(false))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout(-10);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_not_throw_when_timeout_is_greater_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout(3);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_onTimeout_is_null_with_timespan,The following statement contains a magic number: Action policy = () => Policy.Timeout(TimeSpan.FromMinutes(0.5)' null);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_onTimeout_is_null_with_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout(30' null);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_onTimeout_is_null_with_timeoutprovider,The following statement contains a magic number: Action policy = () => Policy.Timeout(() => TimeSpan.FromSeconds(30)' null);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromMilliseconds(50)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(10)' CancellationToken.None)))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_aggregate_exception_from_inside_delegate__pessimistic_with_full_stacktrace,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_aggregate_exception_with_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_aggregate_exception_with_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_aggregate_exception_with_another_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromMilliseconds(50)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' userCancellationToken)) // Delegate observes cancellation token' so permitting optimistic cancellation.                   .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(10)' ct)' userCancellationToken)) // Delegate observes cancellation token' so permitting optimistic cancellation.                   .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The following statement contains a magic number: var policy = Policy.Timeout(TimeSpan.FromSeconds(10)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: int timeout = 5;
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: using (CancellationTokenSource userTokenSource = new CancellationTokenSource())              {                  policy.Invoking(p => p.Execute(                      _ => {                          userTokenSource.Cancel(); // User token cancels in the middle of execution ...                          SystemClock.Sleep(TimeSpan.FromSeconds(timeout * 2)'                               CancellationToken.None // ... but if the executed delegate does not observe it                              );                      }                       ' userTokenSource.Token)                      ).ShouldThrow<TimeoutRejectedException>(); // ... it's still the timeout we expect.              }
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout(10' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The following statement contains a magic number: int timeout = 10;
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__optimistic,The following statement contains a magic number: var policy = Policy.Timeout(10' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)' contextPassedToExecute))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25* programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey") {["timeout"] = TimeSpan.FromMilliseconds(25* programaticallyControlledDelay) };
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)' context))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() => SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None)))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' contextPassedToExecute' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25*programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey")              {                  ["timeout"] = TimeSpan.FromMilliseconds(25*programaticallyControlledDelay)              };
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' context' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct => SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct)' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync<ResultPrimitive>(-10);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_not_throw_when_timeout_is_greater_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync<ResultPrimitive>(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_timespan,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync<ResultPrimitive>(TimeSpan.FromMinutes(0.5)' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_seconds,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync<ResultPrimitive>(30' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_onTimeout_is_null_with_timeoutprovider,The following statement contains a magic number: Action policy = () => Policy.TimeoutAsync<ResultPrimitive>(() => TimeSpan.FromSeconds(30)' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(50);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }).ConfigureAwait(false)).ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(10)' CancellationToken.None).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync<ResultPrimitive>(TimeSpan.FromMilliseconds(50)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken).ConfigureAwait(false)).ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(10)' ct).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: int timeout = 5;
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: using (CancellationTokenSource userTokenSource = new CancellationTokenSource())              {                  policy.Awaiting(async p => await p.ExecuteAsync(async                      _ => {                          userTokenSource.Cancel(); // User token cancels in the middle of execution ...                          await SystemClock.SleepAsync(TimeSpan.FromSeconds(timeout * 2)'                              CancellationToken.None // ... but if the executed delegate does not observe it                              ).ConfigureAwait(false);                          return ResultPrimitive.WhateverButTooLate;                      }' userTokenSource.Token)                     ).ShouldThrow<TimeoutRejectedException>(); // ... it's still the timeout we expect.              }
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__pessimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync<ResultPrimitive>(10' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The following statement contains a magic number: int timeout = 10;
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__optimistic,The following statement contains a magic number: var policy = Policy.TimeoutAsync<ResultPrimitive>(10' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                      return ResultPrimitive.WhateverButTooLate;                  }' contextPassedToExecute))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25* programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                      return ResultPrimitive.WhateverButTooLate;                  }))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) };
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' context))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async () =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' CancellationToken.None).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken).ConfigureAwait(false))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                      return ResultPrimitive.WhateverButTooLate;                  }' contextPassedToExecute' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25*programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>                  {                      await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                      return ResultPrimitive.WhateverButTooLate;                  }' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey")              {                  ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay)              };
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' context' userCancellationToken).ConfigureAwait(false))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultAsyncSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultAsyncSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: policy.Awaiting(async p => await p.ExecuteAsync(async ct =>              {                  await SystemClock.SleepAsync(TimeSpan.FromSeconds(3)' ct).ConfigureAwait(false);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken).ConfigureAwait(false))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_timeout_is_less_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout<ResultPrimitive>(-10);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_not_throw_when_timeout_is_greater_than_zero_by_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout<ResultPrimitive>(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_onTimeout_is_null_with_timespan,The following statement contains a magic number: Action policy = () => Policy.Timeout<ResultPrimitive>(TimeSpan.FromMinutes(0.5)' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_onTimeout_is_null_with_seconds,The following statement contains a magic number: Action policy = () => Policy.Timeout<ResultPrimitive>(30' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_onTimeout_is_null_with_timeoutprovider,The following statement contains a magic number: Action policy = () => Policy.Timeout<ResultPrimitive>(() => TimeSpan.FromSeconds(30)' null);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(50);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                  return ResultPrimitive.WhateverButTooLate;              })).ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(10)' CancellationToken.None);                  return ResultPrimitive.WhateverButTooLate;              }))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_exception_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_from_inside_delegate__pessimistic_with_full_stacktrace,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_aggregate_exception_with_another_example_cause_of_multiple_exceptions_from_inside_delegate__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromMilliseconds(50)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_when_timeout_is_less_than_execution_duration__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: TimeSpan tolerance = TimeSpan.FromSeconds(3);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_throw_timeout_after_correct_duration__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(10)' ct);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_rethrow_exception_from_inside_delegate__optimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(TimeSpan.FromSeconds(10)' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: int timeout = 5;
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_not_be_able_to_cancel_with_unobserved_user_cancellation_token_before_timeout__pessimistic,The following statement contains a magic number: using (CancellationTokenSource userTokenSource = new CancellationTokenSource())              {                  policy.Invoking(p => p.Execute(                      _ => {                          userTokenSource.Cancel(); // User token cancels in the middle of execution ...                          SystemClock.Sleep(TimeSpan.FromSeconds(timeout * 2)'                              CancellationToken.None // ... but if the executed delegate does not observe it                             );                          return ResultPrimitive.WhateverButTooLate;                      }' userTokenSource.Token)                      ).ShouldThrow<TimeoutRejectedException>(); // ... it's still the timeout we expect.              }
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__pessimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(10' TimeoutStrategy.Pessimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_be_able_to_cancel_with_user_cancellation_token_before_timeout__optimistic,The following statement contains a magic number: int timeout = 10;
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_not_execute_user_delegate_if_user_cancellationtoken_cancelled_before_delegate_reached__optimistic,The following statement contains a magic number: var policy = Policy.Timeout<ResultPrimitive>(10' TimeoutStrategy.Optimistic);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_configured_timeout__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                  return ResultPrimitive.WhateverButTooLate;              }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_passed_context__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                      return ResultPrimitive.WhateverButTooLate;                  }' contextPassedToExecute))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25*programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                      return ResultPrimitive.WhateverButTooLate;                  }))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey") { ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay) };
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                      return ResultPrimitive.WhateverButTooLate;                  }' context))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_task_wrapping_abandoned_action__pessimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(() =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(3)' CancellationToken.None);                  return ResultPrimitive.WhateverButTooLate;              }))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_configured_timeout__optimistic,The following statement contains a magic number: TimeSpan timeoutPassedToConfiguration = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_passed_context__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct);                      return ResultPrimitive.WhateverButTooLate;                  }' contextPassedToExecute' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: Func<TimeSpan> timeoutFunc = () => TimeSpan.FromMilliseconds(25*programaticallyControlledDelay);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct);                      return ResultPrimitive.WhateverButTooLate;                  }' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: Context context = new Context("SomeExecutionKey")              {                  ["timeout"] = TimeSpan.FromMilliseconds(25 * programaticallyControlledDelay)              };
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_with_timeout_supplied_different_for_each_execution_by_evaluating_func_influenced_by_context__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>                  {                      SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct);                      return ResultPrimitive.WhateverButTooLate;                  }' context' userCancellationToken))                  .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(250);
Magic Number,Polly.Specs.Timeout,TimeoutTResultSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Timeout\TimeoutTResultSpecs.cs,Should_call_ontimeout_but_not_with_task_wrapping_abandoned_action__optimistic,The following statement contains a magic number: policy.Invoking(p => p.Execute(ct =>              {                  SystemClock.Sleep(TimeSpan.FromSeconds(3)' ct);                  return ResultPrimitive.WhateverButTooLate;              }' userCancellationToken))              .ShouldThrow<TimeoutRejectedException>();
Magic Number,Polly.Specs.Wrap,IPolicyWrapExtensionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\IPolicyWrapExtensionSpecs.cs,Should_pass_all_nested_policies_from_PolicyWrap_in_same_order_they_were_added,The following statement contains a magic number: policies.Count.Should().Be(3);
Magic Number,Polly.Specs.Wrap,IPolicyWrapExtensionSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\IPolicyWrapExtensionSpecs.cs,Should_pass_all_nested_policies_from_PolicyWrap_in_same_order_they_were_added,The following statement contains a magic number: policies[2].Should().Be(policy2);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy breaker = Policy.Handle<Exception>().CircuitBreaker(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_more_than_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy divideByZeroRetry = Policy.Handle<DivideByZeroException>().Retry(2);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_more_than_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy breaker = Policy.Handle<Exception>().CircuitBreaker(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> breaker = Policy<int>.Handle<Exception>().CircuitBreaker(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_more_than_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> divideByZeroRetry = Policy<int>.Handle<DivideByZeroException>().Retry(2);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_more_than_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> breaker = Policy<int>.Handle<Exception>().CircuitBreaker(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy.Handle<Exception>().CircuitBreaker(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: retryWrappingBreaker.Invoking(x => x.RaiseException<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: breakerWrappingRetry.Invoking(x => x.RaiseException<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy.Handle<Exception>().CircuitBreaker(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: retryWrappingBreaker.Invoking(x => x.RaiseException<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: breakerWrappingRetry.Invoking(x => x.RaiseException<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecs,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecs.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreaker(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy breaker = Policy.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_more_than_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy divideByZeroRetry = Policy.Handle<DivideByZeroException>().RetryAsync(2);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_more_than_two_policies_using_static_wrap_syntax_should_not_throw,The following statement contains a magic number: Policy breaker = Policy.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> breaker = Policy<int>.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_more_than_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> divideByZeroRetry = Policy<int>.Handle<DivideByZeroException>().RetryAsync(2);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_more_than_two_policies_using_static_wrap_strongly_typed_syntax_should_not_throw,The following statement contains a magic number: Policy<int> breaker = Policy<int>.Handle<Exception>().CircuitBreakerAsync(1' TimeSpan.FromSeconds(10));
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy.Handle<Exception>().CircuitBreakerAsync(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: retryWrappingBreaker.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: breakerWrappingRetry.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_instance_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy breaker = Policy.Handle<Exception>().CircuitBreakerAsync(2' TimeSpan.MaxValue);
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: retryWrappingBreaker.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: breakerWrappingRetry.Awaiting(async x => await x.RaiseExceptionAsync<DivideByZeroException>(2))                  .ShouldThrow<DivideByZeroException>();
Magic Number,Polly.Specs.Wrap,PolicyWrapSpecsAsync,C:\repos\michael-wolfenden_Polly\src\Polly.SharedSpecs\Wrap\PolicyWrapSpecsAsync.cs,Wrapping_two_generic_policies_by_static_syntax_and_executing_should_wrap_outer_then_inner_around_delegate,The following statement contains a magic number: CircuitBreakerPolicy<ResultPrimitive> breaker = Policy.HandleResult(ResultPrimitive.Fault).CircuitBreakerAsync(2' TimeSpan.MaxValue);
