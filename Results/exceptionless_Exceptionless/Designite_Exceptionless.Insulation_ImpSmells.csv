Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Exceptionless.Insulation.Mail,ExtensionsProtocolLogger,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\ExtensionsProtocolLogger.cs,LogMessage,Cyclomatic complexity of the method is 8
Complex Method,Exceptionless.Insulation.Mail,MailKitMailSender,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\MailKitMailSender.cs,SendAsync,Cyclomatic complexity of the method is 10
Long Parameter List,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterHealthChecks,The method has 6 parameters. Parameters: services' cacheOptions' messageBusOptions' metricOptions' storageOptions' queueOptions
Long Parameter List,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateRedisQueue,The method has 5 parameters. Parameters: container' options' runMaintenanceTasks' retries' workItemTimeout
Long Parameter List,Exceptionless.Insulation.Configuration,YamlConfigurationExtensions,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Configuration\YamlConfigurationExtensions.cs,AddYamlFile,The method has 5 parameters. Parameters: builder' provider' path' optional' reloadOnChange
Long Statement,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "            if (!String.IsNullOrEmpty(appOptions.ExceptionlessApiKey) && !String.IsNullOrEmpty(appOptions.ExceptionlessServerUrl)) { " is 120.
Long Statement,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "            var healthCheckBuilder = RegisterHealthChecks(services' cacheOptions' messageBusOptions' metricOptions' storageOptions' queueOptions); " is 134.
Long Statement,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                    healthCheckBuilder.Add(new HealthCheckRegistration("Mail"' s => s.GetRequiredService<IMailSender>() as MailKitMailSender' null' new[] { "Mail"' "MailMessage"' "AllJobs" })); " is 173.
Long Statement,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterQueue,The length of the statement  "                container.ReplaceSingleton(s => CreateAzureStorageQueue<WorkItemData>(s' options' workItemTimeout: TimeSpan.FromHours(1))); " is 123.
Long Statement,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterQueue,The length of the statement  "                container.ReplaceSingleton(s => CreateRedisQueue<WorkItemData>(s' options' runMaintenanceTasks' workItemTimeout: TimeSpan.FromHours(1))); " is 137.
Long Statement,Exceptionless.Insulation.Mail,MailKitMailSender,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\MailKitMailSender.cs,SendAsync,The length of the statement  "                if (isTraceLogEnabled) _logger.LogTrace("Connecting to SMTP server: {SmtpHost}:{SmtpPort} using {Encryption}"' host' port' encryption); " is 135.
Magic Number,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterMetric,The following statement contains a magic number: container.ReplaceSingleton<IMetricsClient>(s => new StatsDMetricsClient(new StatsDMetricsClientOptions {                      ServerName = options.Data.GetString("server"' "127.0.0.1")'                      Port = options.Data.GetValueOrDefault("port"' 8125)'                      Prefix = "ex"'                      LoggerFactory = s.GetRequiredService<ILoggerFactory>()                  }));
Magic Number,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateAzureStorageQueue,The following statement contains a magic number: return new AzureStorageQueue<T>(new AzureStorageQueueOptions<T> {                  ConnectionString = options.ConnectionString'                  Name = GetQueueName<T>(options).ToLowerInvariant()'                  Retries = retries'                  Behaviors = container.GetServices<IQueueBehavior<T>>().ToList()'                  WorkItemTimeout = workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5.0))'                  Serializer = container.GetRequiredService<ISerializer>()'                  LoggerFactory = container.GetRequiredService<ILoggerFactory>()              });
Magic Number,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateRedisQueue,The following statement contains a magic number: return new RedisQueue<T>(new RedisQueueOptions<T> {                  ConnectionMultiplexer = container.GetRequiredService<ConnectionMultiplexer>()'                  Name = GetQueueName<T>(options)'                  Retries = retries'                  Behaviors = container.GetServices<IQueueBehavior<T>>().ToList()'                  WorkItemTimeout = workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5.0))'                  RunMaintenanceTasks = runMaintenanceTasks'                  Serializer = container.GetRequiredService<ISerializer>()'                  LoggerFactory = container.GetRequiredService<ILoggerFactory>()              });
Magic Number,Exceptionless.Insulation,Bootstrapper,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateSQSQueue,The following statement contains a magic number: return new SQSQueue<T>(new SQSQueueOptions<T> {                  Name = GetQueueName<T>(options)'                  Credentials = GetAWSCredentials(options.Data)'                  Region = GetAWSRegionEndpoint(options.Data)'                  CanCreateQueue = false'                  Retries = retries'                  Behaviors = container.GetServices<IQueueBehavior<T>>().ToList()'                  WorkItemTimeout = workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5.0))'                  Serializer = container.GetRequiredService<ISerializer>()'                  LoggerFactory = container.GetRequiredService<ILoggerFactory>()              });
Magic Number,Exceptionless.Insulation.HealthChecks,HealthCheckExtensions,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\HealthChecks\HealthCheckExtensions.cs,AddAutoNamedCheck,The following statement contains a magic number: name = name.Substring(0' name.Length - 11);
Magic Number,Exceptionless.Insulation.HealthChecks,HealthCheckExtensions,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\HealthChecks\HealthCheckExtensions.cs,AddAutoNamedCheck,The following statement contains a magic number: name = name.Substring(0' name.Length - 5);
Magic Number,Exceptionless.Insulation.HealthChecks,HealthCheckExtensions,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\HealthChecks\HealthCheckExtensions.cs,AddAutoNamedCheck,The following statement contains a magic number: name = name.Substring(0' name.Length - 3);
Magic Number,Exceptionless.Insulation.Mail,MailKitMailSender,D:\research\architectureSmells\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\MailKitMailSender.cs,CheckHealthAsync,The following statement contains a magic number: _lastSuccessfulConnection.IsAfter(SystemClock.UtcNow.Subtract(TimeSpan.FromMinutes(5)))
