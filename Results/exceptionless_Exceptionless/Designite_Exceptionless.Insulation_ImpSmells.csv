Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,Cyclomatic complexity of the method is 12
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "			container.RegisterSingleton<ICacheClient> (() => new ScopedCacheClient (CreateRedisCacheClient (container' loggerFactory)' Settings.Current.AppScope)); " is 151.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateAzureStorageQueue<EventUserDescription> (container' loggerFactory: loggerFactory)); " is 124.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateAzureStorageQueue<EventNotificationWorkItem> (container' loggerFactory: loggerFactory)); " is 129.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateAzureStorageQueue<WebHookNotification> (container' loggerFactory: loggerFactory)); " is 123.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateAzureStorageQueue<WorkItemData> (container' TimeSpan.FromHours (1)' loggerFactory)); " is 125.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<EventPost> (container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 127.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<EventUserDescription> (container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 138.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<EventNotificationWorkItem> (container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 143.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<WebHookNotification> (container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 137.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<MailMessage> (container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 129.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "		container.RegisterSingleton (() => CreateRedisQueue<WorkItemData> (container' runMaintenanceTasks' TimeSpan.FromHours (1)' loggerFactory)); " is 139.
Long Statement,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "	if (!String.IsNullOrEmpty (Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty (Settings.Current.ExceptionlessServerUrl)) { " is 134.
Long Statement,Exceptionless.Insulation.Jobs,JobBootstrappedServiceProvider,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Jobs\JobBootstrappedServiceProvider.cs,BootstrapInternal,The length of the statement  "	if (!String.IsNullOrEmpty (Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty (Settings.Current.ExceptionlessServerUrl)) { " is 134.
Long Statement,Exceptionless.Insulation.Mail,MailKitMailSender,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\MailKitMailSender.cs,SendAsync,The length of the statement  "		await client.ConnectAsync (Settings.Current.SmtpHost' Settings.Current.SmtpPort' GetSecureSocketOption (Settings.Current.SmtpEncryption)).AnyContext (); " is 152.
Magic Number,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The following statement contains a magic number: if (!String.IsNullOrEmpty (Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty (Settings.Current.ExceptionlessServerUrl)) {  	var client = ExceptionlessClient.Default;  	container.RegisterSingleton<ICoreLastReferenceIdManager' ExceptionlessClientCoreLastReferenceIdManager> ();  	container.RegisterSingleton<ExceptionlessClient> (() => client);  	client.Configuration.UseLogger (new NLogExceptionlessLog (LogLevel.Warn));  	client.Configuration.SetDefaultMinLogLevel (LogLevel.Warn);  	client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds (15);  	client.Configuration.SetVersion (Settings.Current.Version);  	if (String.IsNullOrEmpty (Settings.Current.InternalProjectId))  		client.Configuration.Enabled = false;  	client.Configuration.ServerUrl = Settings.Current.ExceptionlessServerUrl;  	client.Startup (Settings.Current.ExceptionlessApiKey);  	container.AddStartupAction (() => client.RegisterWebApi (container.GetInstance<HttpConfiguration> ()));  	client.Configuration.UseInMemoryStorage ();  	client.Configuration.UseReferenceIds ();  }  
Magic Number,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The following statement contains a magic number: client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds (15);  
Magic Number,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateAzureStorageQueue,The following statement contains a magic number: return new AzureStorageQueue<T> (new AzureStorageQueueOptions<T> {  	ConnectionString = Settings.Current.AzureStorageConnectionString'  	Name = GetQueueName<T> ().ToLowerInvariant ()'  	Behaviors = container.GetAllInstances<IQueueBehavior<T>> ()'  	WorkItemTimeout = workItemTimeout.GetValueOrDefault (TimeSpan.FromMinutes (5.0))'  	Serializer = container.GetInstance<ISerializer> ()'  	LoggerFactory = loggerFactory  });  
Magic Number,Exceptionless.Insulation,Bootstrapper,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateRedisQueue,The following statement contains a magic number: return new RedisQueue<T> (new RedisQueueOptions<T> {  	ConnectionMultiplexer = container.GetInstance<ConnectionMultiplexer> ()'  	Name = GetQueueName<T> ()'  	Behaviors = container.GetAllInstances<IQueueBehavior<T>> ()'  	WorkItemTimeout = workItemTimeout.GetValueOrDefault (TimeSpan.FromMinutes (5.0))'  	RunMaintenanceTasks = runMaintenanceTasks'  	Serializer = container.GetInstance<ISerializer> ()'  	LoggerFactory = loggerFactory  });  
Magic Number,Exceptionless.Insulation.Jobs,JobBootstrappedServiceProvider,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Jobs\JobBootstrappedServiceProvider.cs,BootstrapInternal,The following statement contains a magic number: if (!String.IsNullOrEmpty (Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty (Settings.Current.ExceptionlessServerUrl)) {  	var client = ExceptionlessClient.Default;  	client.Configuration.UseLogger (new NLogExceptionlessLog (LogLevel.Warn));  	client.Configuration.SetDefaultMinLogLevel (LogLevel.Warn);  	client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds (15);  	client.Configuration.SetVersion (Settings.Current.Version);  	client.Configuration.UseInMemoryStorage ();  	client.Configuration.ServerUrl = Settings.Current.ExceptionlessServerUrl;  	client.Startup (Settings.Current.ExceptionlessApiKey);  }  
Magic Number,Exceptionless.Insulation.Jobs,JobBootstrappedServiceProvider,F:\newReposMay17\exceptionless_Exceptionless\src\Exceptionless.Insulation\Jobs\JobBootstrappedServiceProvider.cs,BootstrapInternal,The following statement contains a magic number: client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds (15);  
