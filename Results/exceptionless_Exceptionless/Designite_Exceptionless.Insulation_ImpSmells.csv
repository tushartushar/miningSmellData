Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,Cyclomatic complexity of the method is 11
Long Parameter List,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateRedisQueue,The method has 5 parameters. Parameters: container' runMaintenanceTasks' retries' workItemTimeout' loggerFactory
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton<IMetricsClient>(() => new StatsDMetricsClient(new StatsDMetricsClientOptions { ServerName = Settings.Current.MetricsServerName' Port = Settings.Current.MetricsServerPort' Prefix = "ex"' LoggerFactory = loggerFactory })); " is 248.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                    container.RegisterSingleton<ICacheClient>(() => new ScopedCacheClient(CreateRedisCacheClient(container' loggerFactory)' Settings.Current.AppScope)); " is 148.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateAzureStorageQueue<EventPost>(container' retries: 1' loggerFactory: loggerFactory)); " is 123.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateAzureStorageQueue<EventUserDescription>(container' loggerFactory: loggerFactory)); " is 122.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateAzureStorageQueue<EventNotificationWorkItem>(container' loggerFactory: loggerFactory)); " is 127.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateAzureStorageQueue<WebHookNotification>(container' loggerFactory: loggerFactory)); " is 121.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateAzureStorageQueue<WorkItemData>(container' workItemTimeout: TimeSpan.FromHours(1)' loggerFactory: loggerFactory)); " is 154.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<EventPost>(container' runMaintenanceTasks' retries: 1' loggerFactory: loggerFactory)); " is 137.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<EventUserDescription>(container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 136.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<EventNotificationWorkItem>(container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 141.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<WebHookNotification>(container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 135.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<MailMessage>(container' runMaintenanceTasks' loggerFactory: loggerFactory)); " is 127.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton(() => CreateRedisQueue<WorkItemData>(container' runMaintenanceTasks' workItemTimeout: TimeSpan.FromHours(1)' loggerFactory: loggerFactory)); " is 168.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "                container.RegisterSingleton<IFileStorage>(() => new AzureFileStorage(Settings.Current.AzureStorageConnectionString' $"{Settings.Current.AppScopePrefix}ex-events")); " is 164.
Long Statement,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The length of the statement  "            if (!String.IsNullOrEmpty(Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty(Settings.Current.ExceptionlessServerUrl)) { " is 132.
Long Statement,Exceptionless.Insulation.Jobs,JobBootstrappedServiceProvider,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Jobs\JobBootstrappedServiceProvider.cs,BootstrapInternal,The length of the statement  "            if (!String.IsNullOrEmpty(Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty(Settings.Current.ExceptionlessServerUrl)) { " is 132.
Long Statement,Exceptionless.Insulation.Mail,MailKitMailSender,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Mail\MailKitMailSender.cs,SendAsync,The length of the statement  "                await client.ConnectAsync(Settings.Current.SmtpHost' Settings.Current.SmtpPort' GetSecureSocketOption(Settings.Current.SmtpEncryption)).AnyContext(); " is 149.
Magic Number,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,RegisterServices,The following statement contains a magic number: if (!String.IsNullOrEmpty(Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty(Settings.Current.ExceptionlessServerUrl)) {                  var client = ExceptionlessClient.Default;                  container.RegisterSingleton<ICoreLastReferenceIdManager' ExceptionlessClientCoreLastReferenceIdManager>();                  container.RegisterSingleton<ExceptionlessClient>(() => client);                    client.Configuration.UseLogger(new NLogExceptionlessLog(LogLevel.Warn));                  client.Configuration.SetDefaultMinLogLevel(LogLevel.Warn);                  client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds(15);                  client.Configuration.SetVersion(Settings.Current.Version);                  if (String.IsNullOrEmpty(Settings.Current.InternalProjectId))                      client.Configuration.Enabled = false;                    client.Configuration.ServerUrl = Settings.Current.ExceptionlessServerUrl;                  client.Startup(Settings.Current.ExceptionlessApiKey);                    container.AddStartupAction(() => client.RegisterWebApi(container.GetInstance<HttpConfiguration>()));                  client.Configuration.UseInMemoryStorage();                  client.Configuration.UseReferenceIds();              }
Magic Number,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateAzureStorageQueue,The following statement contains a magic number: return new AzureStorageQueue<T>(new AzureStorageQueueOptions<T> {                  ConnectionString = Settings.Current.AzureStorageConnectionString'                  Name = GetQueueName<T>().ToLowerInvariant()'                  Retries = retries'                  Behaviors = container.GetAllInstances<IQueueBehavior<T>>()'                  WorkItemTimeout = workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5.0))'                  Serializer = container.GetInstance<ISerializer>()'                  LoggerFactory = loggerFactory              });
Magic Number,Exceptionless.Insulation,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Bootstrapper.cs,CreateRedisQueue,The following statement contains a magic number: return new RedisQueue<T>(new RedisQueueOptions<T> {                  ConnectionMultiplexer = container.GetInstance<ConnectionMultiplexer>()'                  Name = GetQueueName<T>()'                  Retries = retries'                  Behaviors = container.GetAllInstances<IQueueBehavior<T>>()'                  WorkItemTimeout = workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5.0))'                  RunMaintenanceTasks = runMaintenanceTasks'                  Serializer = container.GetInstance<ISerializer>()'                  LoggerFactory = loggerFactory              });
Magic Number,Exceptionless.Insulation.Jobs,JobBootstrappedServiceProvider,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Insulation\Jobs\JobBootstrappedServiceProvider.cs,BootstrapInternal,The following statement contains a magic number: if (!String.IsNullOrEmpty(Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty(Settings.Current.ExceptionlessServerUrl)) {                  var client = ExceptionlessClient.Default;                  client.Configuration.UseLogger(new NLogExceptionlessLog(LogLevel.Warn));                  client.Configuration.SetDefaultMinLogLevel(LogLevel.Warn);                  client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.FromSeconds(15);                  client.Configuration.SetVersion(Settings.Current.Version);                  client.Configuration.UseInMemoryStorage();                    client.Configuration.ServerUrl = Settings.Current.ExceptionlessServerUrl;                  client.Startup(Settings.Current.ExceptionlessApiKey);              }
