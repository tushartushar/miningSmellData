Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,Cyclomatic complexity of the method is 11
Complex Method,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,Cyclomatic complexity of the method is 12
Complex Method,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,FromExternalLoginAsync,Cyclomatic complexity of the method is 10
Complex Method,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,Cyclomatic complexity of the method is 9
Complex Method,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,Cyclomatic complexity of the method is 11
Complex Method,Exceptionless.App.Controllers.API,TokenController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\TokenController.cs,CanAddAsync,Cyclomatic complexity of the method is 14
Complex Method,Exceptionless.Api.Hubs,MessageBusBroker,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Hubs\MessageBusBroker.cs,OnEntityChangedAsync,Cyclomatic complexity of the method is 10
Complex Method,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,GetBeforeAndAfterLinks,Cyclomatic complexity of the method is 8
Long Parameter List,Exceptionless.Api.Controllers,AdminController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AdminController.cs,AdminController,The method has 6 parameters. Parameters: configuration' fileStorage' messagePublisher' organizationRepository' eventPostQueue' workItemQueue
Long Parameter List,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,AuthController,The method has 7 parameters. Parameters: organizationRepository' userRepository' tokenRepository' cacheClient' mailer' logger' domainLoginProvider
Long Parameter List,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,OkWithResourceLinks,The method has 5 parameters. Parameters: content' hasMore' pagePropertyAccessor' headers' isDescending
Long Parameter List,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,OkWithResourceLinks,The method has 5 parameters. Parameters: content' hasMore' page' total' headers
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,EventController,The method has 14 parameters. Parameters: repository' organizationRepository' projectRepository' stackRepository' eventPostQueue' eventUserDescriptionQueue' userDescriptionValidator' formattingPluginManager' storage' cacheClient' jsonSerializerSettings' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetCountByOrganizationAsync,The method has 5 parameters. Parameters: organizationId' filter' aggregations' time' offset
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetCountByProjectAsync,The method has 5 parameters. Parameters: projectId' filter' aggregations' time' offset
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetAsync,The method has 7 parameters. Parameters: filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetInternalAsync,The method has 8 parameters. Parameters: sf' ti' filter' sort' mode' page' limit' usesPremiumFeatures
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByOrganizationAsync,The method has 8 parameters. Parameters: organizationId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByProjectAsync,The method has 8 parameters. Parameters: projectId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByStackAsync,The method has 8 parameters. Parameters: stackId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByReferenceIdAsync,The method has 5 parameters. Parameters: referenceId' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByReferenceIdAsync,The method has 6 parameters. Parameters: referenceId' projectId' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetBySessionIdAsync,The method has 8 parameters. Parameters: sessionId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetBySessionIdAndProjectAsync,The method has 9 parameters. Parameters: sessionId' projectId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSessionsAsync,The method has 7 parameters. Parameters: filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSessionByOrganizationAsync,The method has 8 parameters. Parameters: organizationId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSessionByProjectAsync,The method has 8 parameters. Parameters: projectId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSubmitEventAsync,The method has 5 parameters. Parameters: projectId' version' type' userAgent' parameters
Long Parameter List,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,OrganizationController,The method has 12 parameters. Parameters: organizationRepository' cacheClient' eventRepository' userRepository' projectRepository' workItemQueue' billingManager' mailer' messagePublisher' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetForAdminsAsync,The method has 7 parameters. Parameters: criteria' paid' suspended' mode' page' limit' sort
Long Parameter List,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,The method has 5 parameters. Parameters: id' planId' stripeToken' last4' couponId
Long Parameter List,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,ProjectController,The method has 9 parameters. Parameters: projectRepository' organizationRepository' eventRepository' workItemQueue' billingManager' slackService' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,StackController,The method has 14 parameters. Parameters: stackRepository' organizationRepository' projectRepository' eventRepository' workItemQueue' webHookRepository' webHookDataPluginManager' webHookNotificationQueue' cacheClient' billingManager' formattingPluginManager' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetAsync,The method has 7 parameters. Parameters: filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetInternalAsync,The method has 7 parameters. Parameters: sf' ti' filter' sort' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetByOrganizationAsync,The method has 8 parameters. Parameters: organizationId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetByProjectAsync,The method has 8 parameters. Parameters: projectId' filter' sort' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetNewAsync,The method has 6 parameters. Parameters: filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetNewByOrganizationAsync,The method has 7 parameters. Parameters: organizationId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetNewByProjectAsync,The method has 7 parameters. Parameters: projectId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentAsync,The method has 6 parameters. Parameters: filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByOrganizationAsync,The method has 7 parameters. Parameters: organizationId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByProjectAsync,The method has 7 parameters. Parameters: projectId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetFrequentAsync,The method has 6 parameters. Parameters: filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetFrequentByOrganizationAsync,The method has 7 parameters. Parameters: organizationId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetFrequentByProjectAsync,The method has 7 parameters. Parameters: projectId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUsersAsync,The method has 6 parameters. Parameters: filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUsersByOrganizationAsync,The method has 7 parameters. Parameters: organizationId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUsersByProjectAsync,The method has 7 parameters. Parameters: projectId' filter' time' offset' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetAllByTermsAsync,The method has 7 parameters. Parameters: aggregations' sf' ti' filter' mode' page' limit
Long Parameter List,Exceptionless.Api.Controllers,StatusController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StatusController.cs,StatusController,The method has 9 parameters. Parameters: cacheClient' messagePublisher' healthChecker' eventQueue' mailQueue' notificationQueue' webHooksQueue' userDescriptionQueue' metricsClient
Long Parameter List,Exceptionless.Api.Controllers,UserController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\UserController.cs,UserController,The method has 7 parameters. Parameters: userRepository' organizationRepository' cacheClient' mailer' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Utility,ThrottlingHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\ThrottlingHandler.cs,ThrottlingHandler,The method has 5 parameters. Parameters: cacheClient' metricsClient' maxRequestsForUserIdentifier' period' message
Long Parameter List,Exceptionless.App.Controllers.API,TokenController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\TokenController.cs,TokenController,The method has 5 parameters. Parameters: repository' projectRepository' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.App.Controllers.API,WebHookController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\WebHookController.cs,WebHookController,The method has 6 parameters. Parameters: repository' projectRepository' billingManager' mapper' validator' loggerFactory
Long Parameter List,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,OkWithResourceLinks,The method has 7 parameters. Parameters: content' controller' hasMore' page' pagePropertyAccessor' headers' isDescending
Long Parameter List,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,OkWithResourceLinks,The method has 8 parameters. Parameters: content' controller' hasMore' page' total' pagePropertyAccessor' headers' isDescending
Long Parameter List,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,GetBeforeAndAfterLinks,The method has 5 parameters. Parameters: url' content' isDescending' hasMore' pagePropertyAccessor
Long Identifier,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,IsEmailAddressAvailableAsync,The length of the parameter ipEmailAddressAttemptsCacheKey is 30.
Long Identifier,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,ShouldApplySystemFilter,The length of the parameter hasOrganizationOrProjectOrStackFilter is 37.
Long Identifier,Exceptionless.Api.Controllers,UserController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\UserController.cs,UpdateEmailAddressAsync,The length of the parameter updateEmailAddressAttemptsCacheKey is 34.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,Build,The length of the statement  "            container.AddStartupAction(() => container.GetInstance<EnqueueOrganizationNotificationOnPlanOverage>().RunAsync(shutdownCancellationToken)); " is 140.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,Build,The length of the statement  "            config.Services.Add(typeof(IExceptionLogger)' new FoundatioExceptionLogger(loggerFactory.CreateLogger<FoundatioExceptionLogger>())); " is 132.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,Build,The length of the statement  "            if (!String.IsNullOrEmpty(Settings.Current.ExceptionlessApiKey) && !String.IsNullOrEmpty(Settings.Current.ExceptionlessServerUrl)) " is 130.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<EventPostsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(2)).RunInBackground(token); " is 131.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<EventUserDescriptionsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(3)).RunInBackground(token); " is 142.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<EventNotificationsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token); " is 139.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<MailMessageJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token); " is 132.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<WebHooksJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token); " is 129.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<CloseInactiveSessionsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(30)' interval: TimeSpan.FromSeconds(30)).RunInBackground(token); " is 179.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<DailySummaryJob>()' loggerFactory' initialDelay: TimeSpan.FromMinutes(1)' interval: TimeSpan.FromHours(1)).RunInBackground(token); " is 166.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<DownloadGeoIPDatabaseJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)' interval: TimeSpan.FromDays(1)).RunInBackground(token); " is 174.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<RetentionLimitsJob>()' loggerFactory' initialDelay: TimeSpan.FromMinutes(15)' interval: TimeSpan.FromHours(1)).RunInBackground(token); " is 170.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<WorkItemJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(2)' instanceCount: 2).RunInBackground(token); " is 147.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The length of the statement  "            new JobRunner(container.GetInstance<MaintainIndexesJob>()' loggerFactory' initialDelay: SystemClock.UtcNow.Ceiling(TimeSpan.FromHours(1)) - SystemClock.UtcNow' interval: TimeSpan.FromHours(1)).RunInBackground(token); " is 216.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,EnableCors,The length of the statement  "            var exposedHeaders = new List<string> { "ETag"' "Link"' ExceptionlessHeaders.RateLimit' ExceptionlessHeaders.RateLimitRemaining' ExceptionlessHeaders.Client' ExceptionlessHeaders.ConfigurationVersion }; " is 202.
Long Statement,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,CreateContainer,The length of the statement  "                bootstrapperType.GetMethod("RegisterServices"' BindingFlags.Public | BindingFlags.Static).Invoke(null' new object[] { container' Settings.Current.RunJobsInProcess' loggerFactory' shutdownCancellationToken }); " is 208.
Long Statement,Exceptionless.Api,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Bootstrapper.cs,RegisterServices,The length of the statement  "            container.RegisterSingleton<ThrottlingHandler>(() => new ThrottlingHandler(container.GetInstance<ICacheClient>()' container.GetInstance<IMetricsClient>()' userIdentifier => Settings.Current.ApiThrottleLimit' TimeSpan.FromMinutes(15))); " is 235.
Long Statement,Exceptionless.Api.Controllers,AdminController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AdminController.cs,ChangePlanAsync,The length of the statement  "            organization.BillingStatus = !String.Equals(plan.Id' BillingManager.FreePlan.Id) ? BillingStatus.Active : BillingStatus.Trialing; " is 129.
Long Statement,Exceptionless.Api.Controllers,AdminController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AdminController.cs,RunJobAsync,The length of the statement  "                    await _workItemQueue.EnqueueAsync(new ProjectMaintenanceWorkItem { UpdateDefaultBotList = true' IncrementConfigurationVersion = true }); " is 136.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login failed: Email Address is required.").Tag("Login").SetActionContext(ActionContext).Write(); " is 121.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login failed for \"{0}\": Password is required."' email).Tag("Login").Identity(email).SetActionContext(ActionContext).Write(); " is 151.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "            long userLoginAttempts = await _cache.IncrementAsync(userLoginAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromMinutes(15))); " is 137.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "            long ipLoginAttempts = await _cache.IncrementAsync(ipLoginAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromMinutes(15))); " is 133.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login denied for \"{0}\" for the {1} time."' email' userLoginAttempts).Tag("Login").Identity(email).SetActionContext(ActionContext).Write(); " is 165.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login denied for \"{0}\" for the {1} time."' Request.GetClientIpAddress()' ipLoginAttempts).Tag("Login").Identity(email).SetActionContext(ActionContext).Write(); " is 186.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Login failed for \"{0}\": {1}"' email' ex.Message).Tag("Login").Identity(email).SetActionContext(ActionContext).Write(); " is 170.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login failed for \"{0}\": User not found."' email).Tag("Login").Identity(email).SetActionContext(ActionContext).Write(); " is 145.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                _logger.Error().Message("Login failed for \"{0}\": The user is inactive."' user.EmailAddress).Tag("Login").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 198.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                    _logger.Error().Message("Login failed for \"{0}\": The user has no salt defined."' user.EmailAddress).Tag("Login").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 206.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                    _logger.Error().Message("Login failed for \"{0}\": Invalid Password."' user.EmailAddress).Tag("Login").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 194.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "                    _logger.Error().Message("Domain login failed for \"{0}\": Invalid Password or Account."' user.EmailAddress).Tag("Login").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 212.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" logged in."' user.EmailAddress).Tag("Login").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 168.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LogoutAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Logout failed for \"{0}\": {1}"' CurrentUser.EmailAddress' ex.Message).Tag("Logout").Identity(CurrentUser.EmailAddress).SetActionContext(ActionContext).Write(); " is 210.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Message("Signup failed: Email Address is required.").Tag("Signup").Property("Name"' model != null ? model.Name : "<null>").SetActionContext(ActionContext).Write(); " is 179.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Message("Signup failed for \"{0}\": Name is required."' email).Tag("Signup").Identity(email).SetActionContext(ActionContext).Write(); " is 149.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Message("Signup failed for \"{0}\": Invalid Password"' email).Tag("Signup").Identity(email).Property("Password Length"' model.Password?.Length ?? 0).SetActionContext(ActionContext).Write(); " is 205.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Signup failed for \"{0}\": {1}"' email' ex.Message).Tag("Signup").Identity(email).SetActionContext(ActionContext).Write(); " is 172.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "            bool hasValidInviteToken = !String.IsNullOrWhiteSpace(model.InviteToken) && await _organizationRepository.GetByInviteTokenAsync(model.InviteToken) != null; " is 155.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                long ipSignupAttempts = await _cache.IncrementAsync(ipSignupAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromHours(1))); " is 132.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                    _logger.Error().Message("Signup denied for \"{0}\" for the {1} time."' email' ipSignupAttempts).Tag("Signup").Identity(email).SetActionContext(ActionContext).Write(); " is 166.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Message("Signup failed for \"{0}\": Active Directory authentication failed."' email).Tag("Signup").Identity(email).SetActionContext(ActionContext).Write(); " is 171.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Critical().Message("Signup failed for \"{0}\": {1}"' email' errors).Tag("Signup").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 189.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Signup failed for \"{0}\": {1}"' email' ex.Message).Tag("Signup").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 207.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" signed up."' user.EmailAddress).Tag("Signup").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 169.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,GitHubAsync,The length of the statement  "            return ExternalLoginAsync(value.ToObject<ExternalAuthInfo>()' Settings.Current.GitHubAppId' Settings.Current.GitHubAppSecret' (f' c) => new GitHubClient(f' c)); " is 160.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,GoogleAsync,The length of the statement  "            return ExternalLoginAsync(value.ToObject<ExternalAuthInfo>()' Settings.Current.GoogleAppId' Settings.Current.GoogleAppSecret' (f' c) => new GoogleClient(f' c)); " is 160.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,FacebookAsync,The length of the statement  "            return ExternalLoginAsync(value.ToObject<ExternalAuthInfo>()' Settings.Current.FacebookAppId' Settings.Current.FacebookAppSecret' (f' c) => new FacebookClient(f' c)); " is 166.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LiveAsync,The length of the statement  "            return ExternalLoginAsync(value.ToObject<ExternalAuthInfo>()' Settings.Current.MicrosoftAppId' Settings.Current.MicrosoftAppSecret' (f' c) => new WindowsLiveClient(f' c)); " is 171.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,RemoveExternalLoginAsync,The length of the statement  "                _logger.Error().Message("Remove external login failed for \"{0}\": Invalid Provider Name or Provider User Id."' CurrentUser.EmailAddress).Tag("External Login"' providerName).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).Property("Provider User Id"' providerUserId).SetActionContext(ActionContext).Write(); " is 324.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,RemoveExternalLoginAsync,The length of the statement  "                _logger.Error().Message("Remove external login failed for \"{0}\": You must set a local password before removing your external login."' CurrentUser.EmailAddress).Tag("External Login"' providerName).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).Property("Provider User Id"' providerUserId).SetActionContext(ActionContext).Write(); " is 348.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,RemoveExternalLoginAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Error removing external login for \"{0}\": {1}"' CurrentUser.EmailAddress' ex.Message).Tag("RemoveExternalLoginAsync").Identity(CurrentUser.EmailAddress).SetActionContext(ActionContext).Write(); " is 244.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,RemoveExternalLoginAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" removed an external login: \"{1}\""' CurrentUser.EmailAddress' providerName).Tag("External Login"' providerName).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 250.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "                _logger.Error().Message("Change password failed for \"{0}\": The New Password must be at least 6 characters long."' CurrentUser.EmailAddress).Tag("Change Password").Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).Property("Password Length"' model?.Password?.Length ?? 0).SetActionContext(ActionContext).Write(); " is 328.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "                    _logger.Error().Message("Change password failed for \"{0}\": The current password is incorrect."' CurrentUser.EmailAddress).Tag("Change Password").Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 252.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "                    _logger.Error().Message("Change password failed for \"{0}\": The current password is incorrect."' CurrentUser.EmailAddress).Tag("Change Password").Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 252.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" changed their password."' CurrentUser.EmailAddress).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 189.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,IsEmailAddressAvailableAsync,The length of the statement  "            long attempts = await _cache.IncrementAsync(ipEmailAddressAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromHours(1))); " is 130.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ForgotPasswordAsync,The length of the statement  "                _logger.Error().Message("Forgot password failed: Please specify a valid Email Address.").Tag("Forgot Password").SetActionContext(ActionContext).Write(); " is 152.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ForgotPasswordAsync,The length of the statement  "                _logger.Error().Message("Forgot password failed for \"{0}\": No user was found."' email).Tag("Forgot Password").Identity(email).Property("Email Address"' email).SetActionContext(ActionContext).Write(); " is 201.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ForgotPasswordAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" forgot their password."' user.EmailAddress).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 167.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetPasswordAsync,The length of the statement  "                _logger.Error().Message("Reset password failed: Invalid Password Reset Token.").Tag("Reset Password").SetActionContext(ActionContext).Write(); " is 142.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetPasswordAsync,The length of the statement  "                _logger.Error().Message("Reset password failed: Invalid Password Reset Token.").Tag("Reset Password").SetActionContext(ActionContext).Write(); " is 142.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetPasswordAsync,The length of the statement  "                _logger.Error().Message("Reset password failed for \"{0}\": Password Reset Token has expired."' user.EmailAddress).Tag("Reset Password").Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 228.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetPasswordAsync,The length of the statement  "                _logger.Error().Message("Reset password failed for \"{0}\": The New Password must be at least 6 characters long."' user.EmailAddress).Tag("Reset Password").Identity(user.EmailAddress).Property("User"' user).Property("Password Length"' model.Password?.Length ?? 0).SetActionContext(ActionContext).Write(); " is 304.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetPasswordAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" reset their password."' user.EmailAddress).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 166.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,CancelResetPasswordAsync,The length of the statement  "                _logger.Error().Message("Cancel reset password failed: Invalid Password Reset Token.").Tag("Reset Password").SetActionContext(ActionContext).Write(); " is 149.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,CancelResetPasswordAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" canceled the reset password"' user.EmailAddress).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 172.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "                _logger.Error().Message("External login failed: Unable to get auth info.").Tag("External Login").Property("Auth Info"' authInfo).SetActionContext(ActionContext).Write(); " is 169.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("External login failed: {0}"' ex.Message).Tag("External Login"' client.Name).Property("Auth Info"' authInfo).SetActionContext(ActionContext).Write(); " is 198.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("External login failed for \"{0}\": {1}"' userInfo.Email' ex.Message).Tag("External Login"' client.Name).Property("User Info"' userInfo).Property("Auth Info"' authInfo).SetActionContext(ActionContext).Write(); " is 258.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("External login failed for \"{0}\": {1}"' userInfo.Email' ex.Message).Tag("External Login"' client.Name).Property("User Info"' userInfo).Property("Auth Info"' authInfo).SetActionContext(ActionContext).Write(); " is 258.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "                _logger.Error().Critical().Message("External login failed for \"{0}\": Unable to process user info."' userInfo.Email).Tag("External Login"' client.Name).Property("User Info"' userInfo).Property("Auth Info"' authInfo).SetActionContext(ActionContext).Write(); " is 257.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ExternalLoginAsync,The length of the statement  "            _logger.Info().Message("\"{0}\" logged in."' user.EmailAddress).Tag("External Login"' client.Name).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 190.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,FromExternalLoginAsync,The length of the statement  "                            _logger.Error().Message("Unable to remove existing oauth account for existing user \"{0}\""' existingUser.EmailAddress).Tag("External Login").Identity(CurrentUser.EmailAddress).Property("User Info"' userInfo).Property("User"' CurrentUser).Property("ExistingUser"' existingUser).SetActionContext(ActionContext).Write(); " is 318.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,AddInvitedUserToOrganizationAsync,The length of the statement  "                _logger.Info().Message("Unable to add the invited user \"{0}\". Invalid invite token: {1}"' user.EmailAddress' token).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 209.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,AddInvitedUserToOrganizationAsync,The length of the statement  "            if (!user.IsEmailAddressVerified && String.Equals(user.EmailAddress' invite.EmailAddress' StringComparison.OrdinalIgnoreCase)) { " is 128.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,AddInvitedUserToOrganizationAsync,The length of the statement  "                _logger.Info().Message("Marking the invited users email address \"{0}\" as verified."' user.EmailAddress).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 197.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,AddInvitedUserToOrganizationAsync,The length of the statement  "                _logger.Info().Message("\"{0}\" joined from invite."' user.EmailAddress).Tag("Invite").Property("Organization"' organization).Identity(user.EmailAddress).Property("User"' user).SetActionContext(ActionContext).Write(); " is 217.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "                _logger.Info().Message("Changed password for \"{0}\""' user.EmailAddress).Tag(tag).Identity(user.EmailAddress).SetActionContext(ActionContext).Write(); " is 151.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ChangePasswordAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Error changing password for \"{0}\": {1}"' user.EmailAddress' ex.Message).Tag(tag).Identity(user.EmailAddress).SetActionContext(ActionContext).Write(); " is 201.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetUserTokensAsync,The length of the statement  "                _logger.Info().Message("Removed user {0} tokens for \"{1}\""' total' user.EmailAddress).Tag(tag).Identity(user.EmailAddress).SetActionContext(ActionContext).Write(); " is 165.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,ResetUserTokensAsync,The length of the statement  "                _logger.Error().Exception(ex).Critical().Message("Error removing user tokens for \"{0}\": {1}"' user.EmailAddress' ex.Message).Tag(tag).Identity(user.EmailAddress).SetActionContext(ActionContext).Write(); " is 204.
Long Statement,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,GetTokenAsync,The length of the statement  "            var validAccessToken = userTokens.Documents.FirstOrDefault(t => (!t.ExpiresUtc.HasValue || t.ExpiresUtc > SystemClock.UtcNow) && t.Type == TokenType.Access); " is 157.
Long Statement,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,ShouldApplySystemFilter,The length of the statement  "            bool hasOrganizationOrProjectOrStackFilter = filter.Contains("organization:") || filter.Contains("project:") || filter.Contains("stack:"); " is 138.
Long Statement,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,WorkInProgress,The length of the statement  "            return new NegotiatedContentResult<WorkInProgressResult>(HttpStatusCode.Accepted' new WorkInProgressResult(workers)' this); " is 123.
Long Statement,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,OkWithLinks,The length of the statement  "            return new OkWithHeadersContentResult<T>(content' this' links.Where(l => l != null).Select(l => new KeyValuePair<string' IEnumerable<string>>("Link"' new[] { l }))); " is 165.
Long Statement,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,OkWithHeaders,The length of the statement  "            return new OkWithHeadersContentResult<T>(content' this' headers.Where(h => h != null).Select(h => new KeyValuePair<string' IEnumerable<string>>(h.Item1' new[] { h.Item2 }))); " is 174.
Long Statement,Exceptionless.Api.Controllers,ExceptionlessApiController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\ExceptionlessApiController.cs,OkWithHeaders,The length of the statement  "            return new OkWithHeadersContentResult<T>(content' this' headers.Select(h => new KeyValuePair<string' IEnumerable<string>>(h.Item1' h.Item2))); " is 142.
Long Statement,Exceptionless.Api.Controllers,RepositoryApiController<TRepository;TModel;TViewModel;TNewModel;TUpdateModel>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\RepositoryApiController.cs,PostAsync,The length of the statement  "            if (!_isOrganization && orgModel != null && String.IsNullOrEmpty(orgModel.OrganizationId) && GetAssociatedOrganizationIds().Any()) " is 130.
Long Statement,Exceptionless.Api.Controllers,RepositoryApiController<TRepository;TModel;TViewModel;TNewModel;TUpdateModel>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\RepositoryApiController.cs,DeleteAsync,The length of the statement  "                _logger.Error().Exception(ex).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 135.
Long Statement,Exceptionless.Api.Controllers,TimeInfoExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\TimeInfo.cs,ApplyMinimumUtcStartDate,The length of the statement  "            var start = startTicks > DateTime.MinValue.Ticks ? new DateTimeOffset(startTicks' ti.Offset) : new DateTimeOffset(DateTime.MinValue' TimeSpan.Zero); " is 148.
Long Statement,Exceptionless.Api.Controllers,TimeInfoExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\TimeInfo.cs,ApplyMinimumUtcStartDate,The length of the statement  "            var end = ti.Range.UtcEnd < DateTime.MaxValue && endTicks < DateTime.MaxValue.Ticks ? new DateTimeOffset(endTicks' ti.Offset) : new DateTimeOffset(DateTime.MaxValue' TimeSpan.Zero); " is 181.
Long Statement,Exceptionless.Api.Controllers,TimeInfoExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\TimeInfo.cs,AdjustEndTimeIfMaxValue,The length of the statement  "            var start = startTicks > DateTime.MinValue.Ticks ? new DateTimeOffset(startTicks' ti.Offset) : new DateTimeOffset(DateTime.MinValue' TimeSpan.Zero); " is 148.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetCountAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByIdAsync,The length of the statement  "            if (organization.IsSuspended || organization.RetentionDays > 0 && model.Date.UtcDateTime < SystemClock.UtcNow.SubtractDays(organization.RetentionDays)) " is 151.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetByIdAsync,The length of the statement  "            return OkWithLinks(model' GetEntityResourceLink(result.Previous' "previous")' GetEntityResourceLink(result.Next' "next")' GetEntityResourceLink<Stack>(model.StackId' "parent")); " is 177.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetInternalAsync,The length of the statement  "                events = await _repository.GetByFilterAsync(ShouldApplySystemFilter(sf' filter) ? sf : null' filter' sort' ti.Field' ti.Range.UtcStart' ti.Range.UtcEnd' o => o.PageNumber(page).PageLimit(limit)); " is 195.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetInternalAsync,The length of the statement  "                    .Property("Search Filter"' new { SystemFilter = sf' UserFilter = filter' Sort = sort' Time = ti' Page = page' Limit = limit }) " is 126.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetInternalAsync,The length of the statement  "            return OkWithResourceLinks(events.Documents' events.HasMore && !NextPageExceedsSkipLimit(page' limit)' page' events.Total); " is 123.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetBySessionIdAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetBySessionIdAsync,The length of the statement  "            return await GetInternalAsync(sf' ti' $"(reference:{sessionId} OR ref.session:{sessionId}) {filter}"' sort' mode' page' limit' true); " is 133.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetBySessionIdAndProjectAsync,The length of the statement  "            return await GetInternalAsync(sf' ti' $"(reference:{sessionId} OR ref.session:{sessionId}) {filter}"' sort' mode' page' limit' true); " is 133.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSessionsAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,GetSubmitEventAsync,The length of the statement  "            var exclusions = project.Configuration.Settings.GetStringCollection(SettingsDictionary.KnownKeys.DataExclusions).ToList(); " is 122.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetForAdminsAsync,The length of the statement  "            var organizations = await _repository.GetByCriteriaAsync(criteria' o => o.PageNumber(page).PageLimit(limit)' sort' paid' suspended); " is 132.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetForAdminsAsync,The length of the statement  "                return OkWithResourceLinks(await PopulateOrganizationStatsAsync(viewOrganizations)' organizations.HasMore' page' organizations.Total); " is 134.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The length of the statement  "                _logger.Error().Exception(ex).Message("An error occurred while getting the invoice: " + id).Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 197.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The length of the statement  "                item.Date = $"{(line.StripePeriod.Start ?? stripeInvoice.PeriodStart).ToShortDateString()} - {(line.StripePeriod.End ?? stripeInvoice.PeriodEnd).ToShortDateString()}"; " is 167.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoicesAsync,The length of the statement  "            var invoiceOptions = new StripeInvoiceListOptions { CustomerId = organization.StripeCustomerId' Limit = limit + 1' EndingBefore = before' StartingAfter = after }; " is 162.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoicesAsync,The length of the statement  "            var invoices = (await MapCollectionAsync<InvoiceGridModel>(await invoiceService.ListAsync(invoiceOptions)' true)).ToList(); " is 123.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,The length of the statement  "                if (!String.Equals(organization.PlanId' BillingManager.FreePlan.Id) && String.Equals(plan.Id' BillingManager.FreePlan.Id)) { " is 124.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,The length of the statement  "                        var subs = await subscriptionService.ListAsync(new StripeSubscriptionListOptions { CustomerId = organization.StripeCustomerId }); " is 129.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,The length of the statement  "                    var subscriptionList = await subscriptionService.ListAsync(new StripeSubscriptionListOptions { CustomerId = organization.StripeCustomerId }); " is 141.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,ChangePlanAsync,The length of the statement  "                _logger.Error().Exception(e).Message("An error occurred while trying to update your billing plan: " + e.Message).Critical().Identity(CurrentUser.EmailAddress).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 229.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,AddUserAsync,The length of the statement  "                var invite = organization.Invites.FirstOrDefault(i => String.Equals(i.EmailAddress' email' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,RemoveUserAsync,The length of the statement  "                var invite = organization.Invites.FirstOrDefault(i => String.Equals(i.EmailAddress' email' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,RemoveUserAsync,The length of the statement  "                var projects = (await _projectRepository.GetByOrganizationIdAsync(organization.Id)).Documents.Where(p => p.NotificationSettings.ContainsKey(user.Id)).ToList(); " is 159.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,IsOrganizationNameAvailableInternalAsync,The length of the statement  "            return !results.Any(o => String.Equals(o.Name.Trim().ToLowerInvariant()' decodedName' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,AddModelAsync,The length of the statement  "            BillingManager.ApplyBillingPlan(value' Settings.Current.EnableBilling ? BillingManager.FreePlan : BillingManager.UnlimitedPlan' CurrentUser); " is 141.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,DeleteModelsAsync,The length of the statement  "                _logger.Info().Message("User {0} deleting organization {1}."' CurrentUser.Id' organization.Id).Property("User"' CurrentUser).SetActionContext(ActionContext).Write(); " is 165.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,AfterResultMapAsync,The length of the statement  "                viewOrganization.IsOverRequestLimit = await OrganizationExtensions.IsOverRequestLimitAsync(viewOrganization.Id' _cacheClient' Settings.Current.ApiThrottleLimit); " is 161.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,PopulateOrganizationStatsAsync,The length of the statement  "            var organizations = viewOrganizations.Select(o => new Organization { Id = o.Id' CreatedUtc = o.CreatedUtc' RetentionDays = o.RetentionDays }).ToList(); " is 151.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,PopulateOrganizationStatsAsync,The length of the statement  "            var systemFilter = new RepositoryQuery<PersistentEvent>().SystemFilter(sf).DateRange(organizations.GetRetentionUtcCutoff()' SystemClock.UtcNow' (PersistentEvent e) => e.Date).Index(organizations.GetRetentionUtcCutoff()' SystemClock.UtcNow); " is 240.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,PopulateOrganizationStatsAsync,The length of the statement  "            var result = await _eventRepository.CountBySearchAsync(systemFilter' null' $"terms:(organization_id~{viewOrganizations.Count} cardinality:stack_id)"); " is 150.
Long Statement,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,PopulateOrganizationStatsAsync,The length of the statement  "                var organizationStats = result.Aggregations.Terms<string>("terms_organization_id")?.Buckets.FirstOrDefault(t => t.Key == organization.Id); " is 138.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetAsync,The length of the statement  "            var projects = await _repository.GetByOrganizationIdsAsync(GetAssociatedOrganizationIds()' o => o.PageNumber(page).PageLimit(limit)); " is 133.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetAsync,The length of the statement  "                return OkWithResourceLinks(await PopulateProjectStatsAsync(viewProjects.ToList())' projects.HasMore && !NextPageExceedsSkipLimit(page' limit)' page' projects.Total); " is 165.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetAsync,The length of the statement  "            return OkWithResourceLinks(viewProjects' projects.HasMore && !NextPageExceedsSkipLimit(page' limit)' page' projects.Total); " is 123.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetByOrganizationAsync,The length of the statement  "                return OkWithResourceLinks(await PopulateProjectStatsAsync(viewProjects)' projects.HasMore && !NextPageExceedsSkipLimit(page' limit)' page' projects.Total); " is 156.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetByOrganizationAsync,The length of the statement  "            return OkWithResourceLinks(viewProjects' projects.HasMore && !NextPageExceedsSkipLimit(page' limit)' page' projects.Total); " is 123.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetNotificationSettingsAsync,The length of the statement  "            return Ok(project.NotificationSettings.TryGetValue(userId' out NotificationSettings settings) ? settings : new NotificationSettings()); " is 135.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,GetIntegrationNotificationSettingsAsync,The length of the statement  "            return Ok(project.NotificationSettings.TryGetValue(Project.NotificationIntegrations.Slack' out NotificationSettings settings) ? settings : new NotificationSettings()); " is 167.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,IsProjectNameAvailableInternalAsync,The length of the statement  "            var organizationIds = IsInOrganization(organizationId) ? new List<string> { organizationId } : GetAssociatedOrganizationIds(); " is 126.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,IsProjectNameAvailableInternalAsync,The length of the statement  "            return !projects.Documents.Any(p => String.Equals(p.Name.Trim().ToLowerInvariant()' decodedName' StringComparison.OrdinalIgnoreCase)); " is 134.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,RemoveSlackAsync,The length of the statement  "            if (project.NotificationSettings.Remove(Project.NotificationIntegrations.Slack) | project.Data.Remove(Project.KnownDataKeys.SlackToken)) " is 136.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,AfterResultMapAsync,The length of the statement  "            var organizations = await _organizationRepository.GetByIdsAsync(viewProjects.Select(p => p.OrganizationId).ToArray()' o => o.Cache()); " is 134.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,CanUpdateAsync,The length of the statement  "            if (changes.ContainsChangedProperty(p => p.Name) && !await IsProjectNameAvailableInternalAsync(original.OrganizationId' changed.Name)) " is 134.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,PopulateProjectStatsAsync,The length of the statement  "            var organizations = await _organizationRepository.GetByIdsAsync(viewProjects.Select(p => p.OrganizationId).ToArray()' o => o.Cache()); " is 134.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,PopulateProjectStatsAsync,The length of the statement  "            var projects = viewProjects.Select(p => new Project { Id = p.Id' CreatedUtc = p.CreatedUtc' OrganizationId = p.OrganizationId }).ToList(); " is 138.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,PopulateProjectStatsAsync,The length of the statement  "            var systemFilter = new RepositoryQuery<PersistentEvent>().SystemFilter(sf).DateRange(organizations.GetRetentionUtcCutoff()' SystemClock.UtcNow' (PersistentEvent e) => e.Date).Index(organizations.GetRetentionUtcCutoff()' SystemClock.UtcNow); " is 240.
Long Statement,Exceptionless.Api.Controllers,ProjectController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\ProjectController.cs,PopulateProjectStatsAsync,The length of the statement  "            var result = await _eventRepository.CountBySearchAsync(systemFilter' null' $"terms:(project_id~{viewProjects.Count} cardinality:stack_id)"); " is 140.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,PromoteAsync,The length of the statement  "                return PlanLimitReached("Promote to External is a premium feature used to promote an error stack to an external system. Please upgrade your plan to enable this feature."); " is 171.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,PromoteAsync,The length of the statement  "            var promotedProjectHooks = (await _webHookRepository.GetByProjectIdAsync(stack.ProjectId)).Documents.Where(p => p.EventTypes.Contains(WebHookRepository.EventTypes.StackPromoted)).ToList(); " is 188.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,PromoteAsync,The length of the statement  "                return NotImplemented("No promoted web hooks are configured for this project. Please add a promoted web hook to use this feature."); " is 132.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,PromoteAsync,The length of the statement  "                var context = new WebHookDataContext(hook.Version' stack' isNew: stack.TotalOccurrences == 1' isRegression: stack.IsRegressed); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetInternalAsync,The length of the statement  "                var results = await _repository.GetByFilterAsync(ShouldApplySystemFilter(sf' filter) ? sf : null' filter' sort' ti.Field' ti.Range.UtcStart' ti.Range.UtcEnd' o => o.PageNumber(page).PageLimit(limit)); " is 200.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetInternalAsync,The length of the statement  "                    return OkWithResourceLinks(await GetStackSummariesAsync(stacks' sf' ti)' results.HasMore && !NextPageExceedsSkipLimit(page' limit)' page); " is 138.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetInternalAsync,The length of the statement  "                    .Property("Search Filter"' new { SystemFilter = sf' UserFilter = filter' Sort = sort' Time = ti' Page = page' Limit = limit }) " is 126.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetNewAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentAsync,The length of the statement  "            var ti = GetTimeInfo(String.Concat(StackIndexType.Alias.LastOccurrence' "|"' time)' offset' organizations.GetRetentionUtcCutoff()); " is 131.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentAsync,The length of the statement  "            return await GetInternalAsync(sf' ti' filter' String.Concat("-"' StackIndexType.Alias.LastOccurrence)' mode' page' limit); " is 122.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByOrganizationAsync,The length of the statement  "            var ti = GetTimeInfo(String.Concat(StackIndexType.Alias.LastOccurrence' "|"' time)' offset' organization.GetRetentionUtcCutoff()); " is 130.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByOrganizationAsync,The length of the statement  "            return await GetInternalAsync(sf' ti' filter' String.Concat("-"' StackIndexType.Alias.LastOccurrence)' mode' page' limit); " is 122.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByProjectAsync,The length of the statement  "            var ti = GetTimeInfo(String.Concat(StackIndexType.Alias.LastOccurrence' "|"' time)' offset' organization.GetRetentionUtcCutoff(project)); " is 137.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetRecentByProjectAsync,The length of the statement  "            return await GetInternalAsync(sf' ti' filter' String.Concat("-"' StackIndexType.Alias.LastOccurrence)' mode' page' limit); " is 122.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetFrequentAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUsersAsync,The length of the statement  "            var organizations = await GetSelectedOrganizationsAsync(_organizationRepository' _projectRepository' _stackRepository' filter); " is 127.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetAllByTermsAsync,The length of the statement  "                var systemFilter = new RepositoryQuery<PersistentEvent>().SystemFilter(ShouldApplySystemFilter(sf' filter) ? sf : null).DateRange(ti.Range.UtcStart' ti.Range.UtcEnd' (PersistentEvent e) => e.Date).Index(ti.Range.UtcStart' ti.Range.UtcEnd); " is 239.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetAllByTermsAsync,The length of the statement  "                var stackTerms = (await _eventRepository.CountBySearchAsync(systemFilter' filter' $"terms:(stack_id~{GetSkip(page + 1' limit) + 1} {aggregations})")).Aggregations.Terms<string>("terms_stack_id"); " is 195.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetStackSummariesAsync,The length of the statement  "            var systemFilter = new RepositoryQuery<PersistentEvent>().SystemFilter(eventSystemFilter).DateRange(ti.Range.UtcStart' ti.Range.UtcEnd' (PersistentEvent e) => e.Date).Index(ti.Range.UtcStart' ti.Range.UtcEnd); " is 209.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetStackSummariesAsync,The length of the statement  "            var stackTerms = await _eventRepository.CountBySearchAsync(systemFilter' String.Join(" OR "' stacks.Select(r => $"stack:{r.Id}"))' $"terms:(stack_id~{stacks.Count} cardinality:user sum:count~1 min:date max:date)"); " is 214.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetStackSummariesAsync,The length of the statement  "            return await GetStackSummariesAsync(stacks' stackTerms.Aggregations.Terms<string>("terms_stack_id").Buckets' eventSystemFilter' ti); " is 132.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            var scopedCacheClient = new ScopedCacheClient(_cache' $"Project:user-count:{utcStart.Floor(TimeSpan.FromMinutes(15)).Ticks}-{utcEnd.Floor(TimeSpan.FromMinutes(15)).Ticks}"); " is 173.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            var systemFilter = new RepositoryQuery<PersistentEvent>().SystemFilter(sf).DateRange(utcStart' utcEnd' (PersistentEvent e) => e.Date).Index(utcStart' utcEnd); " is 158.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            var projects = cachedTotals.Where(kvp => !kvp.Value.HasValue).Select(kvp => new Project { Id = kvp.Key' OrganizationId = stacks.FirstOrDefault(s => s.ProjectId == kvp.Key)?.OrganizationId }).ToList(); " is 200.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            var countResult = await _eventRepository.CountBySearchAsync(systemFilter' projects.BuildFilter()' "terms:(project_id cardinality:user)"); " is 137.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            var aggregations = projectTerms.ToDictionary(t => t.Key' t => t.Aggregations.Cardinality("cardinality_user").Value.GetValueOrDefault()); " is 136.
Long Statement,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The length of the statement  "            await scopedCacheClient.SetAllAsync(aggregations.Where(t => t.Value >= 10).ToDictionary(k => k.Key' v => v.Value)' TimeSpan.FromMinutes(5)); " is 140.
Long Statement,Exceptionless.Api.Controllers,StatusController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StatusController.cs,IndexAsync,The length of the statement  "                return StatusCodeWithMessage(HttpStatusCode.ServiceUnavailable' _lastHealthCheckResult.Message' _lastHealthCheckResult.Message); " is 128.
Long Statement,Exceptionless.Api.Controllers,StripeController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StripeController.cs,PostAsync,The length of the statement  "                _logger.Error().Exception(ex).Message("Unable to parse incoming event.").Property("event"' json).SetActionContext(ActionContext).Write(); " is 137.
Long Statement,Exceptionless.Api.Controllers,UserController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\UserController.cs,UpdateEmailAddressAsync,The length of the statement  "            long attempts = await _cache.IncrementAsync(updateEmailAddressAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromHours(1))); " is 134.
Long Statement,Exceptionless.Api.Controllers,UserController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\UserController.cs,UpdateEmailAddressAsync,The length of the statement  "            user.IsEmailAddressVerified = user.OAuthAccounts.Count(oa => String.Equals(oa.EmailAddress()' email' StringComparison.InvariantCultureIgnoreCase)) > 0; " is 151.
Long Statement,Exceptionless.Api.Utility,ConfigurationResponseFilterAttribute,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\ConfigurationResponseFilterAttribute.cs,OnActionExecutedAsync,The length of the statement  "            // add the current configuration version to the response headers so the client will know if it should update its config. " is 120.
Long Statement,Exceptionless.Api.Utility,PerRequestParameterBinding,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Delta\PerRequestParameterBinding.cs,ExecuteBindingAsync,The length of the statement  "                MediaTypeFormatter perRequestFormatter = formatter.GetPerRequestFormatterInstance(Descriptor.ParameterType' actionContext.Request' actionContext.Request.Content.Headers.ContentType); " is 182.
Long Statement,Exceptionless.Api.Utility,ExceptionlessReferenceIdExceptionHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\ExceptionlessReferenceIdExceptionHandler.cs,HandleAsync,The length of the statement  "            context.Result = new ResponseMessageResult(CreateErrorResponse(request' exceptionContext.Exception' HttpStatusCode.InternalServerError)); " is 137.
Long Statement,Exceptionless.Api.Utility,NakedBodyParameterBinding,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Bindings\NakedParameterBinding.cs,ExecuteBindingAsync,The length of the statement  "            if (actionContext.Request.Method == HttpMethod.Get || binding.ParameterBindings.Count(b => b.Descriptor.ParameterBinderAttribute is NakedBodyAttribute) > 1) " is 156.
Long Statement,Exceptionless.Api.Utility,OverageHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\OverageHandler.cs,SendAsync,The length of the statement  "                    _logger.Warn().Message("Event submission discarded for being too large: {0} bytes"' size).Value(size).Tag(request.Content.Headers.ContentEncoding?.ToArray()).Project(request.GetDefaultProjectId()).Write(); " is 205.
Long Statement,Exceptionless.Api.Utility,OverageHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\OverageHandler.cs,SendAsync,The length of the statement  "            bool overLimit = await _usageService.IncrementUsageAsync(request.GetDefaultOrganizationId()' request.GetDefaultProjectId()' tooBig); " is 132.
Long Statement,Exceptionless.Api.Utility,OverageHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\OverageHandler.cs,SendAsync,The length of the statement  "                return CreateResponse(request' HttpStatusCode.RequestEntityTooLarge' "Event submission discarded for being too large."); " is 120.
Long Statement,Exceptionless.Api.Utility,QueryStringParametersParameterBinding,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\QueryStringParametersParameterBinding.cs,ExecuteBindingAsync,The length of the statement  "            var parameterBinding = binding.ParameterBindings.FirstOrDefault(b => b.Descriptor.ParameterBinderAttribute is QueryStringParametersAttribute); " is 142.
Long Statement,Exceptionless.Api.Utility,QueryStringParametersParameterBinding,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\QueryStringParametersParameterBinding.cs,ExecuteBindingAsync,The length of the statement  "            if (parameterBinding == null || !(typeof(IDictionary<string' string[]>).IsAssignableFrom(parameterBinding.Descriptor.ParameterType))) " is 133.
Long Statement,Exceptionless.Api.Utility,UserAgentParameterBinding,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Bindings\UserAgentParameterBinding.cs,ExecuteBindingAsync,The length of the statement  "            var parameterBinding = binding.ParameterBindings.FirstOrDefault(b => b.Descriptor.ParameterBinderAttribute is UserAgentAttribute); " is 130.
Long Statement,Exceptionless.App.Controllers.API,TokenController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\TokenController.cs,GetByOrganizationAsync,The length of the statement  "            var tokens = await _repository.GetByTypeAndOrganizationIdAsync(TokenType.Access' organizationId' o => o.PageNumber(page).PageLimit(limit)); " is 139.
Long Statement,Exceptionless.App.Controllers.API,TokenController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\TokenController.cs,GetByProjectAsync,The length of the statement  "            var tokens = await _repository.GetByTypeAndProjectIdAsync(TokenType.Access' projectId' o => o.PageNumber(page).PageLimit(limit)); " is 129.
Long Statement,Exceptionless.App.Controllers.API,TokenController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\TokenController.cs,GetDefaultTokenAsync,The length of the statement  "            var token = (await _repository.GetByTypeAndProjectIdAsync(TokenType.Access' projectId' o => o.PageLimit(1))).Documents.FirstOrDefault(); " is 136.
Long Statement,Exceptionless.Api.Extensions,DeltaExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Extensions\DeltaExtensions.cs,ContainsChangedProperty,The length of the statement  "            MemberExpression expression = action.Body as MemberExpression ?? ((UnaryExpression)action.Body).Operand as MemberExpression; " is 124.
Long Statement,Exceptionless.Api.Extensions,HttpExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Extensions\HttpExtensions.cs,GetDefaultOrganizationId,The length of the statement  "            // TODO: Try to figure out the 1st organization that the user owns instead of just selecting from associated organizations. " is 123.
Long Statement,Exceptionless.Api.Hubs,MessageBusBroker,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Hubs\MessageBusBroker.cs,OnUserMembershipChangedAsync,The length of the statement  "            _logger.Trace(() => $"Attempting to update user {userMembershipChanged.UserId} active groups for {userConnectionIds.Count} connections"); " is 137.
Long Statement,Exceptionless.Api.Hubs,MessageBusBroker,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Hubs\MessageBusBroker.cs,OnEntityChangedAsync,The length of the statement  "                _logger.Trace(() => $"Sending {UserTypeName} message to user: {entityChanged.Id} (to {userConnectionIds.Count} connections)"); " is 126.
Long Statement,Exceptionless.Api.Hubs,MessageBusBroker,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Hubs\MessageBusBroker.cs,OnEntityChangedAsync,The length of the statement  "                    _logger.Trace(() => $"Sending {TokenTypeName} message for added user: {userId} (to {userConnectionIds.Count} connections)"); " is 124.
Long Statement,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,GetBeforeAndAfterLinks,The length of the statement  "            string firstId = contentList.Any() ? pagePropertyAccessor(!isDescending ? contentList.First() : contentList.Last()) : String.Empty; " is 131.
Long Statement,Exceptionless.Api.Utility.Results,OkWithResourceLinks<TEntity>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\OkWithHeadersContentResult.cs,GetBeforeAndAfterLinks,The length of the statement  "            string lastId = contentList.Any() ? pagePropertyAccessor(!isDescending ? contentList.Last() : contentList.First()) : String.Empty; " is 130.
Long Statement,Exceptionless.Api.Utility.Results,PermissionActionResult,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Results\PermissionActionResult.cs,Execute,The length of the statement  "                Content = new ObjectContent<MessageContent>(new MessageContent(Permission.Id' Permission.Message)' new ExceptionlessJsonMediaTypeFormatter())' " is 142.
Complex Conditional,Exceptionless.Api.Controllers,RepositoryApiController<TRepository;TModel;TViewModel;TNewModel;TUpdateModel>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\Base\RepositoryApiController.cs,PostAsync,The conditional expression  "!_isOrganization && orgModel != null && String.IsNullOrEmpty(orgModel.OrganizationId) && GetAssociatedOrganizationIds().Any()"  is complex.
Complex Conditional,Exceptionless.Api.Utility,Delta<TEntityType>,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Delta\Delta.cs,TrySetPropertyValue,The conditional expression  "!cacheHit.MemberType.IsPrimitive && !isGuid && !isEnum && !cacheHit.MemberType.IsInstanceOfType(value)"  is complex.
Complex Conditional,Exceptionless.Api.Utility,EncodingDelegatingHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\EncodingDelegatingHandler.cs,SendAsync,The conditional expression  "request.Method != HttpMethod.Get && request.Content != null                  && !(request.RequestUri.AbsolutePath.EndsWith("/events") && request.Method == HttpMethod.Post)                  && !(request.RequestUri.AbsolutePath.EndsWith("/error") && request.Method == HttpMethod.Post)                  && request.Content.Headers.ContentEncoding.Any()"  is complex.
Complex Conditional,Exceptionless.App.Controllers.API,WebHookController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\WebHookController.cs,GetModelsAsync,The conditional expression  "(!String.IsNullOrEmpty(webHook.OrganizationId) && IsInOrganization(webHook.OrganizationId))                      || (!String.IsNullOrEmpty(webHook.ProjectId) && (await IsInProjectAsync(webHook.ProjectId)))"  is complex.
Empty Catch Block,Exceptionless.Api.Utility,ThrottlingHandler,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\ThrottlingHandler.cs,SendAsync,The method has an empty catch block.
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<EventPostsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(2)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<EventUserDescriptionsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(3)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<EventNotificationsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<MailMessageJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<WebHooksJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<CloseInactiveSessionsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(30)' interval: TimeSpan.FromSeconds(30)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<CloseInactiveSessionsJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(30)' interval: TimeSpan.FromSeconds(30)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<DownloadGeoIPDatabaseJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(5)' interval: TimeSpan.FromDays(1)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<RetentionLimitsJob>()' loggerFactory' initialDelay: TimeSpan.FromMinutes(15)' interval: TimeSpan.FromHours(1)).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<WorkItemJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(2)' instanceCount: 2).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,RunJobs,The following statement contains a magic number: new JobRunner(container.GetInstance<WorkItemJob>()' loggerFactory' initialDelay: TimeSpan.FromSeconds(2)' instanceCount: 2).RunInBackground(token);
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,EnableCors,The following statement contains a magic number: app.UseCors(new CorsOptions {                  PolicyProvider = new CorsPolicyProvider {                      PolicyResolver = context => {                          var policy = new CorsPolicy {                              AllowAnyHeader = true'                              AllowAnyMethod = true'                              AllowAnyOrigin = true'                              SupportsCredentials = true'                              PreflightMaxAge = 60 * 5                          };                            policy.ExposedHeaders.AddRange(exposedHeaders);                          return Task.FromResult(policy);                      }                  }              });
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,EnableCors,The following statement contains a magic number: app.UseCors(new CorsOptions {                  PolicyProvider = new CorsPolicyProvider {                      PolicyResolver = context => {                          var policy = new CorsPolicy {                              AllowAnyHeader = true'                              AllowAnyMethod = true'                              AllowAnyOrigin = true'                              SupportsCredentials = true'                              PreflightMaxAge = 60 * 5                          };                            policy.ExposedHeaders.AddRange(exposedHeaders);                          return Task.FromResult(policy);                      }                  }              });
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,EnableCors,The following statement contains a magic number: var enableCorsAttribute = new EnableCorsAttribute("*"' "*"' "*") {                  SupportsCredentials = true'                  PreflightMaxAge = 60 * 5              };
Magic Number,Exceptionless.Api,AppBuilder,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\AppBuilder.cs,EnableCors,The following statement contains a magic number: var enableCorsAttribute = new EnableCorsAttribute("*"' "*"' "*") {                  SupportsCredentials = true'                  PreflightMaxAge = 60 * 5              };
Magic Number,Exceptionless.Api,Bootstrapper,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Bootstrapper.cs,RegisterServices,The following statement contains a magic number: container.RegisterSingleton<ThrottlingHandler>(() => new ThrottlingHandler(container.GetInstance<ICacheClient>()' container.GetInstance<IMetricsClient>()' userIdentifier => Settings.Current.ApiThrottleLimit' TimeSpan.FromMinutes(15)));
Magic Number,Exceptionless.Api,ApiMappings,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Bootstrapper.cs,ApiMappings,The following statement contains a magic number: CreateMap<StripeInvoice' InvoiceGridModel>().AfterMap((si' igm) => igm.Id = igm.Id.Substring(3));
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The following statement contains a magic number: long userLoginAttempts = await _cache.IncrementAsync(userLoginAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromMinutes(15)));
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The following statement contains a magic number: long ipLoginAttempts = await _cache.IncrementAsync(ipLoginAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromMinutes(15)));
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The following statement contains a magic number: if (userLoginAttempts > 5) {                  _logger.Error().Message("Login denied for \"{0}\" for the {1} time."' email' userLoginAttempts).Tag("Login").Identity(email).SetActionContext(ActionContext).Write();                  return Unauthorized();              }
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The following statement contains a magic number: if (ipLoginAttempts > 15) {                  _logger.Error().Message("Login denied for \"{0}\" for the {1} time."' Request.GetClientIpAddress()' ipLoginAttempts).Tag("Login").Identity(email).SetActionContext(ActionContext).Write();                  return Unauthorized();              }
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,LoginAsync,The following statement contains a magic number: await _cache.IncrementAsync(ipLoginAttemptsCacheKey' -1' SystemClock.UtcNow.Ceiling(TimeSpan.FromMinutes(15)));
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The following statement contains a magic number: if (!hasValidInviteToken) {                  // Only allow 10 sign ups per hour period by a single ip.                  long ipSignupAttempts = await _cache.IncrementAsync(ipSignupAttemptsCacheKey' 1' SystemClock.UtcNow.Ceiling(TimeSpan.FromHours(1)));                  if (ipSignupAttempts > 10) {                      _logger.Error().Message("Signup denied for \"{0}\" for the {1} time."' email' ipSignupAttempts).Tag("Signup").Identity(email).SetActionContext(ActionContext).Write();                      return BadRequest();                  }              }
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,SignupAsync,The following statement contains a magic number: if (!Settings.Current.EnableActiveDirectoryAuth) {                  user.Salt = Core.Extensions.StringExtensions.GetRandomString(16);                  user.Password = model.Password.ToSaltedHash(user.Salt);              }
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,IsEmailAddressAvailableAsync,The following statement contains a magic number: if (attempts > 3 || await _userRepository.GetByEmailAddressAsync(email) == null)                  return StatusCode(HttpStatusCode.NoContent);
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,GetTokenAsync,The following statement contains a magic number: var token = await _tokenRepository.AddAsync(new Token {                  Id = Core.Extensions.StringExtensions.GetNewToken()'                  UserId = user.Id'                  CreatedUtc = SystemClock.UtcNow'                  UpdatedUtc = SystemClock.UtcNow'                  ExpiresUtc = SystemClock.UtcNow.AddMonths(3)'                  CreatedBy = user.Id'                  Type = TokenType.Access              }' o => o.Cache());
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,IsValidPassword,The following statement contains a magic number: return password.Length >= 6 && password.Length <= 100;
Magic Number,Exceptionless.Api.Controllers,AuthController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\AuthController.cs,IsValidPassword,The following statement contains a magic number: return password.Length >= 6 && password.Length <= 100;
Magic Number,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,RecordHeartbeatAsync,The following statement contains a magic number: try {                  await Task.WhenAll(                      _cache.SetAsync(heartbeatCacheKey' SystemClock.UtcNow' TimeSpan.FromHours(2))'                      close ? _cache.SetAsync(String.Concat(heartbeatCacheKey' "-close")' true' TimeSpan.FromHours(2)) : Task.CompletedTask                  );              } catch (Exception ex) {                  _logger.Error().Exception(ex)                      .Message("Error enqueuing session heartbeat.")                      .Project(projectId)                      .Identity(CurrentUser?.EmailAddress)                      .Property("User"' CurrentUser)                      .Property("Id"' id)                      .Property("Close"' close)                      .SetActionContext(ActionContext)                      .WriteIf(projectId != Settings.Current.InternalProjectId);                    return StatusCode(HttpStatusCode.InternalServerError);              }
Magic Number,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,RecordHeartbeatAsync,The following statement contains a magic number: try {                  await Task.WhenAll(                      _cache.SetAsync(heartbeatCacheKey' SystemClock.UtcNow' TimeSpan.FromHours(2))'                      close ? _cache.SetAsync(String.Concat(heartbeatCacheKey' "-close")' true' TimeSpan.FromHours(2)) : Task.CompletedTask                  );              } catch (Exception ex) {                  _logger.Error().Exception(ex)                      .Message("Error enqueuing session heartbeat.")                      .Project(projectId)                      .Identity(CurrentUser?.EmailAddress)                      .Property("User"' CurrentUser)                      .Property("Id"' id)                      .Property("Close"' close)                      .SetActionContext(ActionContext)                      .WriteIf(projectId != Settings.Current.InternalProjectId);                    return StatusCode(HttpStatusCode.InternalServerError);              }
Magic Number,Exceptionless.Api.Controllers,EventController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\EventController.cs,PostAsync,The following statement contains a magic number: if (!isCompressed && data.Length > 1000) {                  data = await data.CompressAsync();                  contentEncoding = "gzip";              }
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: var invoice = new Invoice {                  Id = stripeInvoice.Id.Substring(3)'                  OrganizationId = organization.Id'                  OrganizationName = organization.Name'                  Date = stripeInvoice.Date.GetValueOrDefault()'                  Paid = stripeInvoice.Paid'                  Total = stripeInvoice.Total / 100.0              };
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: var invoice = new Invoice {                  Id = stripeInvoice.Id.Substring(3)'                  OrganizationId = organization.Id'                  OrganizationName = organization.Name'                  Date = stripeInvoice.Date.GetValueOrDefault()'                  Paid = stripeInvoice.Paid'                  Total = stripeInvoice.Total / 100.0              };
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: foreach (var line in stripeInvoice.StripeInvoiceLineItems.Data) {                  var item = new InvoiceLineItem { Amount = line.Amount / 100.0 };                    if (line.Plan != null)                      item.Description = $"Exceptionless - {line.Plan.Name} Plan ({(line.Plan.Amount / 100.0):c}/{line.Plan.Interval})";                  else                      item.Description = line.Description;                    item.Date = $"{(line.StripePeriod.Start ?? stripeInvoice.PeriodStart).ToShortDateString()} - {(line.StripePeriod.End ?? stripeInvoice.PeriodEnd).ToShortDateString()}";                  invoice.Items.Add(item);              }
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: foreach (var line in stripeInvoice.StripeInvoiceLineItems.Data) {                  var item = new InvoiceLineItem { Amount = line.Amount / 100.0 };                    if (line.Plan != null)                      item.Description = $"Exceptionless - {line.Plan.Name} Plan ({(line.Plan.Amount / 100.0):c}/{line.Plan.Interval})";                  else                      item.Description = line.Description;                    item.Date = $"{(line.StripePeriod.Start ?? stripeInvoice.PeriodStart).ToShortDateString()} - {(line.StripePeriod.End ?? stripeInvoice.PeriodEnd).ToShortDateString()}";                  invoice.Items.Add(item);              }
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: if (coupon != null) {                  if (coupon.AmountOff.HasValue) {                      double discountAmount = coupon.AmountOff.GetValueOrDefault() / 100.0;                      string description = $"{coupon.Id} ({discountAmount.ToString("C")} off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  } else {                      double discountAmount = (stripeInvoice.Subtotal / 100.0) * (coupon.PercentOff.GetValueOrDefault() / 100.0);                      string description = $"{coupon.Id} ({coupon.PercentOff.GetValueOrDefault()}% off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  }              }
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: if (coupon != null) {                  if (coupon.AmountOff.HasValue) {                      double discountAmount = coupon.AmountOff.GetValueOrDefault() / 100.0;                      string description = $"{coupon.Id} ({discountAmount.ToString("C")} off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  } else {                      double discountAmount = (stripeInvoice.Subtotal / 100.0) * (coupon.PercentOff.GetValueOrDefault() / 100.0);                      string description = $"{coupon.Id} ({coupon.PercentOff.GetValueOrDefault()}% off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  }              }
Magic Number,Exceptionless.Api.Controllers,OrganizationController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\OrganizationController.cs,GetInvoiceAsync,The following statement contains a magic number: if (coupon != null) {                  if (coupon.AmountOff.HasValue) {                      double discountAmount = coupon.AmountOff.GetValueOrDefault() / 100.0;                      string description = $"{coupon.Id} ({discountAmount.ToString("C")} off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  } else {                      double discountAmount = (stripeInvoice.Subtotal / 100.0) * (coupon.PercentOff.GetValueOrDefault() / 100.0);                      string description = $"{coupon.Id} ({coupon.PercentOff.GetValueOrDefault()}% off)";                      invoice.Items.Add(new InvoiceLineItem { Description = description' Amount = discountAmount });                  }              }
Magic Number,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The following statement contains a magic number: var scopedCacheClient = new ScopedCacheClient(_cache' $"Project:user-count:{utcStart.Floor(TimeSpan.FromMinutes(15)).Ticks}-{utcEnd.Floor(TimeSpan.FromMinutes(15)).Ticks}");
Magic Number,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The following statement contains a magic number: var scopedCacheClient = new ScopedCacheClient(_cache' $"Project:user-count:{utcStart.Floor(TimeSpan.FromMinutes(15)).Ticks}-{utcEnd.Floor(TimeSpan.FromMinutes(15)).Ticks}");
Magic Number,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The following statement contains a magic number: await scopedCacheClient.SetAllAsync(aggregations.Where(t => t.Value >= 10).ToDictionary(k => k.Key' v => v.Value)' TimeSpan.FromMinutes(5));
Magic Number,Exceptionless.Api.Controllers,StackController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StackController.cs,GetUserCountByProjectIdsAsync,The following statement contains a magic number: await scopedCacheClient.SetAllAsync(aggregations.Where(t => t.Value >= 10).ToDictionary(k => k.Key' v => v.Value)' TimeSpan.FromMinutes(5));
Magic Number,Exceptionless.Api.Controllers,StatusController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\StatusController.cs,IndexAsync,The following statement contains a magic number: if (_lastHealthCheckResult == null || _nextHealthCheckTimeUtc < SystemClock.UtcNow) {                  _nextHealthCheckTimeUtc = SystemClock.UtcNow.AddSeconds(5);                  _lastHealthCheckResult = await _healthChecker.CheckAllAsync();              }
Magic Number,Exceptionless.Api.Controllers,UserController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\UserController.cs,UpdateEmailAddressAsync,The following statement contains a magic number: if (attempts > 3)                  return BadRequest("Update email address rate limit reached. Please try updating later.");
Magic Number,Exceptionless.App.Controllers.API,WebHookController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\WebHookController.cs,Test,The following statement contains a magic number: return Ok(new[] {                  new { id = 1' Message = "Test message 1." }'                  new { id = 2' Message = "Test message 2." }              });
Magic Number,Exceptionless.App.Controllers.API,WebHookController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\WebHookController.cs,AddModelAsync,The following statement contains a magic number: int version = IsValidWebHookVersion(value.Version) ? value.Version.Major : 2;
Magic Number,Exceptionless.App.Controllers.API,WebHookController,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Controllers\WebHookController.cs,IsValidWebHookVersion,The following statement contains a magic number: return version != null && version.Major >= 1 && version.Major <= 2;
Magic Number,Exceptionless.Api.Extensions,HttpExtensions,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Extensions\HttpExtensions.cs,GetBasicAuth,The following statement contains a magic number: if (authParts.Length != 2)                  return null;
Missing Default,Exceptionless.Api.Utility,CompressedContent,C:\repos\exceptionless_Exceptionless\src\Exceptionless.Api\Utility\Handlers\EncodingDelegatingHandler.cs,SerializeToStreamAsync,The following switch statement is missing a default case: switch (_encodingType) {                  case "gzip":                      compressedStream = new GZipStream(stream' CompressionMode.Compress' leaveOpen: true);                      break;                  case "deflate":                      compressedStream = new DeflateStream(stream' CompressionMode.Compress' leaveOpen: true);                      break;              }
