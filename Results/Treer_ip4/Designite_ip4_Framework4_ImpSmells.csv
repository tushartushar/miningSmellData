Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ip4,ExtensionMethods,C:\repos\Treer_ip4\src\ExtensionMethods.cs,IsLinkLocalAddress,Cyclomatic complexity of the method is 10
Complex Method,ip4,Program,C:\repos\Treer_ip4\src\Program.cs,ListIPs,Cyclomatic complexity of the method is 15
Complex Method,ip4,Program,C:\repos\Treer_ip4\src\Program.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,Cyclomatic complexity of the method is 17
Complex Method,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,ProgramOptions,Cyclomatic complexity of the method is 69
Long Parameter List,ip4,InterfaceInfo,C:\repos\Treer_ip4\src\InterfaceInfo.cs,InterfaceInfo,The method has 6 parameters.
Long Parameter List,indoo.tools,LookupEventArgs,C:\repos\Treer_ip4\src\indoo.tools\LookupEventArgs.cs,LookupEventArgs,The method has 5 parameters.
Long Statement,ip4,InterfaceInfo,C:\repos\Treer_ip4\src\InterfaceInfo.cs,GetAll,The length of the statement  "			if (!IPAddress.IsLoopback (address) && adapter.NetworkInterfaceType != NetworkInterfaceType.Loopback && (address.AddressFamily == desiredFamily)) { " is 147.
Long Statement,ip4,InterfaceInfo,C:\repos\Treer_ip4\src\InterfaceInfo.cs,GetAll,The length of the statement  "				result.Add (new InterfaceInfo (adapter.Name.Trim ()' adapter.Description.Trim ()' fromDhcp' adapter.OperationalStatus' address' addressInfo.IPv4MaskSafe ())); " is 158.
Long Statement,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The length of the statement  "	//  -r:<count>['<seconds>]    use -r:0 or just -r for infinite repetition. - NOTE: isn't currently actually implemented' due to running externalIP in a thread " is 158.
Long Statement,ip4.formatters,Formatter_Color,C:\repos\Treer_ip4\src\formatters\Formatter_Color.cs,WriteInterfaces,The length of the statement  "				output = String.Format (" {0} {1} "' ("[" + info.StateAsString + "]").PadRight (maxStatusLength + 2)' info.AddressAssignedByDhcp ? "via DHCP" : (dhcpAddressesFound ? "        " : "     ")// if none of the interfaces has DHCP then can afford to make the column slightly narrowed than would otherwise be needed. " is 309.
Empty Catch Block,ip4,Program,C:\repos\Treer_ip4\src\Program.cs,WriteAppConfig,The method has an empty catch block.
Magic Number,ip4,ExtensionMethods,C:\repos\Treer_ip4\src\ExtensionMethods.cs,IsLinkLocalAddress,The following statement contains a magic number: switch (address.AddressFamily) {  case AddressFamily.InterNetwork:  	// IPv4 address  	// Link-local addresses for IPv4 are defined in the address block 169.254.0.0/16  	byte[] octets = address.GetAddressBytes ();  	result = octets [0] == 169 && octets [1] == 254;  	break;  case AddressFamily.InterNetworkV6:  	// IPv6 address  	// Link-local addresses for IPv6 are defined with the address prefix fe80::/64  	result = address.IsIPv6LinkLocal;  	break;  default:  	Debug.Fail ("Unknown address type");  	break;  }  
Magic Number,ip4,ExtensionMethods,C:\repos\Treer_ip4\src\ExtensionMethods.cs,IsLinkLocalAddress,The following statement contains a magic number: switch (address.AddressFamily) {  case AddressFamily.InterNetwork:  	// IPv4 address  	// Link-local addresses for IPv4 are defined in the address block 169.254.0.0/16  	byte[] octets = address.GetAddressBytes ();  	result = octets [0] == 169 && octets [1] == 254;  	break;  case AddressFamily.InterNetworkV6:  	// IPv6 address  	// Link-local addresses for IPv6 are defined with the address prefix fe80::/64  	result = address.IsIPv6LinkLocal;  	break;  default:  	Debug.Fail ("Unknown address type");  	break;  }  
Magic Number,ip4,ExtensionMethods,C:\repos\Treer_ip4\src\ExtensionMethods.cs,IsLinkLocalAddress,The following statement contains a magic number: result = octets [0] == 169 && octets [1] == 254;  
Magic Number,ip4,ExtensionMethods,C:\repos\Treer_ip4\src\ExtensionMethods.cs,IsLinkLocalAddress,The following statement contains a magic number: result = octets [0] == 169 && octets [1] == 254;  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (!String.IsNullOrEmpty (arg) && arg.Length > 1) {  	if (arg [0] == '/' || arg [0] == '-') {  		string operation = arg.Substring (1).ToLowerInvariant ();  		if (operation.Length == 1) {  			switch (operation) {  			case "c":  			case "o":  			case "p":  			case "k":  				result = '-' + operation;  				break;  			}  		}  		else if (operation.Length > 2 && operation [1] == ':') {  			switch (operation [0]) {  			case 'e':  				// I have mapped the -s:<regularExpression> option to be -e:  				// instead' because -s is being used for "skip external ip lookup"  				result = "-s" + arg.Substring (2);  				break;  			// case 'r': -r isn't actually implemented' due to running externalIP in a thread  			case 'p':  			case 'w':  			case 't':  				result = '-' + arg.Substring (1);  				break;  			}  		}  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (!String.IsNullOrEmpty (arg) && arg.Length > 1) {  	if (arg [0] == '/' || arg [0] == '-') {  		string operation = arg.Substring (1).ToLowerInvariant ();  		if (operation.Length == 1) {  			switch (operation) {  			case "c":  			case "o":  			case "p":  			case "k":  				result = '-' + operation;  				break;  			}  		}  		else if (operation.Length > 2 && operation [1] == ':') {  			switch (operation [0]) {  			case 'e':  				// I have mapped the -s:<regularExpression> option to be -e:  				// instead' because -s is being used for "skip external ip lookup"  				result = "-s" + arg.Substring (2);  				break;  			// case 'r': -r isn't actually implemented' due to running externalIP in a thread  			case 'p':  			case 'w':  			case 't':  				result = '-' + arg.Substring (1);  				break;  			}  		}  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (arg [0] == '/' || arg [0] == '-') {  	string operation = arg.Substring (1).ToLowerInvariant ();  	if (operation.Length == 1) {  		switch (operation) {  		case "c":  		case "o":  		case "p":  		case "k":  			result = '-' + operation;  			break;  		}  	}  	else if (operation.Length > 2 && operation [1] == ':') {  		switch (operation [0]) {  		case 'e':  			// I have mapped the -s:<regularExpression> option to be -e:  			// instead' because -s is being used for "skip external ip lookup"  			result = "-s" + arg.Substring (2);  			break;  		// case 'r': -r isn't actually implemented' due to running externalIP in a thread  		case 'p':  		case 'w':  		case 't':  			result = '-' + arg.Substring (1);  			break;  		}  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (arg [0] == '/' || arg [0] == '-') {  	string operation = arg.Substring (1).ToLowerInvariant ();  	if (operation.Length == 1) {  		switch (operation) {  		case "c":  		case "o":  		case "p":  		case "k":  			result = '-' + operation;  			break;  		}  	}  	else if (operation.Length > 2 && operation [1] == ':') {  		switch (operation [0]) {  		case 'e':  			// I have mapped the -s:<regularExpression> option to be -e:  			// instead' because -s is being used for "skip external ip lookup"  			result = "-s" + arg.Substring (2);  			break;  		// case 'r': -r isn't actually implemented' due to running externalIP in a thread  		case 'p':  		case 'w':  		case 't':  			result = '-' + arg.Substring (1);  			break;  		}  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (operation.Length == 1) {  	switch (operation) {  	case "c":  	case "o":  	case "p":  	case "k":  		result = '-' + operation;  		break;  	}  }  else if (operation.Length > 2 && operation [1] == ':') {  	switch (operation [0]) {  	case 'e':  		// I have mapped the -s:<regularExpression> option to be -e:  		// instead' because -s is being used for "skip external ip lookup"  		result = "-s" + arg.Substring (2);  		break;  	// case 'r': -r isn't actually implemented' due to running externalIP in a thread  	case 'p':  	case 'w':  	case 't':  		result = '-' + arg.Substring (1);  		break;  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (operation.Length == 1) {  	switch (operation) {  	case "c":  	case "o":  	case "p":  	case "k":  		result = '-' + operation;  		break;  	}  }  else if (operation.Length > 2 && operation [1] == ':') {  	switch (operation [0]) {  	case 'e':  		// I have mapped the -s:<regularExpression> option to be -e:  		// instead' because -s is being used for "skip external ip lookup"  		result = "-s" + arg.Substring (2);  		break;  	// case 'r': -r isn't actually implemented' due to running externalIP in a thread  	case 'p':  	case 'w':  	case 't':  		result = '-' + arg.Substring (1);  		break;  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (operation.Length > 2 && operation [1] == ':') {  	switch (operation [0]) {  	case 'e':  		// I have mapped the -s:<regularExpression> option to be -e:  		// instead' because -s is being used for "skip external ip lookup"  		result = "-s" + arg.Substring (2);  		break;  	// case 'r': -r isn't actually implemented' due to running externalIP in a thread  	case 'p':  	case 'w':  	case 't':  		result = '-' + arg.Substring (1);  		break;  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: if (operation.Length > 2 && operation [1] == ':') {  	switch (operation [0]) {  	case 'e':  		// I have mapped the -s:<regularExpression> option to be -e:  		// instead' because -s is being used for "skip external ip lookup"  		result = "-s" + arg.Substring (2);  		break;  	// case 'r': -r isn't actually implemented' due to running externalIP in a thread  	case 'p':  	case 'w':  	case 't':  		result = '-' + arg.Substring (1);  		break;  	}  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: switch (operation [0]) {  case 'e':  	// I have mapped the -s:<regularExpression> option to be -e:  	// instead' because -s is being used for "skip external ip lookup"  	result = "-s" + arg.Substring (2);  	break;  // case 'r': -r isn't actually implemented' due to running externalIP in a thread  case 'p':  case 'w':  case 't':  	result = '-' + arg.Substring (1);  	break;  }  
Magic Number,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following statement contains a magic number: result = "-s" + arg.Substring (2);  
Magic Number,ip4.formatters,Formatter_Color,C:\repos\Treer_ip4\src\formatters\Formatter_Color.cs,WriteInterfaces,The following statement contains a magic number: try {  	foreach (InterfaceInfo info in interfaces) {  		bool isOperational = info.State == OperationalStatus.Up;  		string output = _ipIndent + info.Address.PadRight (maxAddressLength);  		SetColor (isOperational ? ConsoleColor.Green : ConsoleColor.DarkRed);  		Console.Write (output);  		// make sure we don't take up more than one line per ip  		int lineChars = output.Length;  		if (Verbosity >= Verbosity.Default) {  			// Show the mask  			output = " " + info.Mask.PadRight (maxMaskLength);  			SetColor (isOperational ? ConsoleColor.DarkGreen : ConsoleColor.DarkRed);  			Console.Write (output);  			lineChars += output.Length;  			// Show whether network is up/down and whether the address came from dchp  			output = String.Format (" {0} {1} "' ("[" + info.StateAsString + "]").PadRight (maxStatusLength + 2)' info.AddressAssignedByDhcp ? "via DHCP" : (dhcpAddressesFound ? "        " : "     ")// if none of the interfaces has DHCP then can afford to make the column slightly narrowed than would otherwise be needed.  			);  			SetColor (isOperational ? ConsoleColor.Green : ConsoleColor.DarkRed);  			Console.Write (output);  			lineChars += output.Length;  		}  		if (Verbosity >= Verbosity.Default) {  			// Show the adapter name  			output = info.AdapterName.PadRight (maxNameLength);  			int remainingChars = Console.WindowWidth - (1 + lineChars + output.Length);  			if (remainingChars < 0 && Verbosity < Verbosity.Verbose) {  				// Trim the description to ensure the adpater info fits on one line  				output = output.Substring (0' Math.Max (0' output.Length + remainingChars));  			}  			SetColor (ConsoleColor.White);  			Console.Write (output);  			lineChars += output.Length;  			// show the adapter description  			output = " " + info.AdapterDescription;  			remainingChars = Console.WindowWidth - (1 + lineChars + output.Length);  			if (remainingChars < 0 && Verbosity < Verbosity.Verbose) {  				// Trim the description to ensure the adpater info fits on one line  				output = output.Substring (0' Math.Max (0' output.Length + remainingChars));  			}  			SetColor (ConsoleColor.DarkGray);  			Console.WriteLine (output);  		}  		else {  			Console.WriteLine ();  		}  	}  }  finally {  	ResetColor ();  }  
Magic Number,ip4.formatters,Formatter_Color,C:\repos\Treer_ip4\src\formatters\Formatter_Color.cs,WriteInterfaces,The following statement contains a magic number: foreach (InterfaceInfo info in interfaces) {  	bool isOperational = info.State == OperationalStatus.Up;  	string output = _ipIndent + info.Address.PadRight (maxAddressLength);  	SetColor (isOperational ? ConsoleColor.Green : ConsoleColor.DarkRed);  	Console.Write (output);  	// make sure we don't take up more than one line per ip  	int lineChars = output.Length;  	if (Verbosity >= Verbosity.Default) {  		// Show the mask  		output = " " + info.Mask.PadRight (maxMaskLength);  		SetColor (isOperational ? ConsoleColor.DarkGreen : ConsoleColor.DarkRed);  		Console.Write (output);  		lineChars += output.Length;  		// Show whether network is up/down and whether the address came from dchp  		output = String.Format (" {0} {1} "' ("[" + info.StateAsString + "]").PadRight (maxStatusLength + 2)' info.AddressAssignedByDhcp ? "via DHCP" : (dhcpAddressesFound ? "        " : "     ")// if none of the interfaces has DHCP then can afford to make the column slightly narrowed than would otherwise be needed.  		);  		SetColor (isOperational ? ConsoleColor.Green : ConsoleColor.DarkRed);  		Console.Write (output);  		lineChars += output.Length;  	}  	if (Verbosity >= Verbosity.Default) {  		// Show the adapter name  		output = info.AdapterName.PadRight (maxNameLength);  		int remainingChars = Console.WindowWidth - (1 + lineChars + output.Length);  		if (remainingChars < 0 && Verbosity < Verbosity.Verbose) {  			// Trim the description to ensure the adpater info fits on one line  			output = output.Substring (0' Math.Max (0' output.Length + remainingChars));  		}  		SetColor (ConsoleColor.White);  		Console.Write (output);  		lineChars += output.Length;  		// show the adapter description  		output = " " + info.AdapterDescription;  		remainingChars = Console.WindowWidth - (1 + lineChars + output.Length);  		if (remainingChars < 0 && Verbosity < Verbosity.Verbose) {  			// Trim the description to ensure the adpater info fits on one line  			output = output.Substring (0' Math.Max (0' output.Length + remainingChars));  		}  		SetColor (ConsoleColor.DarkGray);  		Console.WriteLine (output);  	}  	else {  		Console.WriteLine ();  	}  }  
Magic Number,ip4.formatters,Formatter_Color,C:\repos\Treer_ip4\src\formatters\Formatter_Color.cs,WriteInterfaces,The following statement contains a magic number: if (Verbosity >= Verbosity.Default) {  	// Show the mask  	output = " " + info.Mask.PadRight (maxMaskLength);  	SetColor (isOperational ? ConsoleColor.DarkGreen : ConsoleColor.DarkRed);  	Console.Write (output);  	lineChars += output.Length;  	// Show whether network is up/down and whether the address came from dchp  	output = String.Format (" {0} {1} "' ("[" + info.StateAsString + "]").PadRight (maxStatusLength + 2)' info.AddressAssignedByDhcp ? "via DHCP" : (dhcpAddressesFound ? "        " : "     ")// if none of the interfaces has DHCP then can afford to make the column slightly narrowed than would otherwise be needed.  	);  	SetColor (isOperational ? ConsoleColor.Green : ConsoleColor.DarkRed);  	Console.Write (output);  	lineChars += output.Length;  }  
Magic Number,ip4.formatters,Formatter_Color,C:\repos\Treer_ip4\src\formatters\Formatter_Color.cs,WriteInterfaces,The following statement contains a magic number: output = String.Format (" {0} {1} "' ("[" + info.StateAsString + "]").PadRight (maxStatusLength + 2)' info.AddressAssignedByDhcp ? "via DHCP" : (dhcpAddressesFound ? "        " : "     ")// if none of the interfaces has DHCP then can afford to make the column slightly narrowed than would otherwise be needed.  );  
Missing Default,ip4,Program,C:\repos\Treer_ip4\src\Program.cs,ListIPs,The following switch statement is missing a default case: switch (options.OutputFormat) {  case OutputFormat.Color:  	formatter = new Formatter_Color (options.Verbosity' true);  	break;  case OutputFormat.Json:  	// I don't think anyone is ever going to use this feature  	break;  case OutputFormat.Xml:  	// I don't think anyone is ever going to use this feature  	break;  case OutputFormat.Plain:  	formatter = new Formatter_Color (options.Verbosity' false);  	break;  }  
Missing Default,ip4,Program,C:\repos\Treer_ip4\src\Program.cs,Run,The following switch statement is missing a default case: switch (options.RunMode) {  case RunMode.ListIPs:  	result = ListIPs (options);  	break;  case RunMode.ConfigureExternalIP:  	result = RunExternalIPs (options);  	break;  case RunMode.ShowHelp:  	ShowHelp ();  	break;  case RunMode.ShowVersion:  	ShowVersion ();  	break;  }  
Missing Default,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following switch statement is missing a default case: switch (operation) {  case "c":  case "o":  case "p":  case "k":  	result = '-' + operation;  	break;  }  
Missing Default,ip4,ProgramOptions,C:\repos\Treer_ip4\src\ProgramOptions.cs,AsExternalIPArg,The following switch statement is missing a default case: switch (operation [0]) {  case 'e':  	// I have mapped the -s:<regularExpression> option to be -e:  	// instead' because -s is being used for "skip external ip lookup"  	result = "-s" + arg.Substring (2);  	break;  // case 'r': -r isn't actually implemented' due to running externalIP in a thread  case 'p':  case 'w':  case 't':  	result = '-' + arg.Substring (1);  	break;  }  
