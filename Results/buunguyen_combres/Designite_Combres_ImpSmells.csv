Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Combres,Setting,C:\repos\buunguyen_combres\Combres\Common\SchemaConstants.cs,,The length of the parameter DefaultIgnorePipelineWhenDebug is 30.
Long Statement,Combres,ResourceSet,C:\repos\buunguyen_combres\Combres\Engine\Model\Default.cs,InitializeMinifier,The length of the statement  "                           : ModelUtils.LoadMinifier(xe' SchemaConstants.Set.MinifierRef' Settings.DefaultCssMinifierRef' Settings.CssMinifierMap); " is 120.
Long Statement,Combres,WebExtensions,C:\repos\buunguyen_combres\Combres\API\WebExtensions.cs,CombresUrl,The length of the statement  "                    "CombresUrl() cannot be used when DebugEnabled and IgnorePipelineWhenDebug properties of the resource set are turned-on.  Use one of CombresLink() overloads instead."); " is 168.
Magic Number,Combres,Include,C:\repos\buunguyen_combres\Combres\API\Control\Include.cs,Render,The following statement contains a magic number: if (string.IsNullOrEmpty(HtmlAttributes))              {                  writer.Write(WebExtensions.CombresLink(SetName));              }              else              {                  var attributes = new Dictionary<string' string>();                  var array = HtmlAttributes.Split('|');                  for (int i = 0; i < array.Length; i += 2)                  {                      attributes[array[i]] = array[i + 1];                  }                  writer.Write(WebExtensions.CombresLink(SetName' attributes));              }
Magic Number,Combres,CompressionExtensions,C:\repos\buunguyen_combres\Combres\Common\Extensions\CompressionExtensions.cs,UnCompress,The following statement contains a magic number: using (var stream = type == CompressionType.GZip                  ? (Stream)new GZipStream(new MemoryStream(bytes)' CompressionMode.Decompress)                  : new DeflateStream(new MemoryStream(bytes)' CompressionMode.Decompress))              {                  var buffer = new byte[4096];                  using (var memory = new MemoryStream())                  {                      int count;                      do                      {                          count = stream.Read(buffer' 0' buffer.Length);                          if (count > 0)                          {                              memory.Write(buffer' 0' count);                          }                      }                      while (count > 0);                      bytes = memory.ToArray();                  }              }
Magic Number,Combres,UrlExtensions,C:\repos\buunguyen_combres\Combres\Common\Extensions\UrlExtensions.cs,ToHttps,The following statement contains a magic number: var builder = new UriBuilder(uri)              {                  Scheme = Uri.UriSchemeHttps'                  Port = 443              };
Magic Number,Combres,Resource,C:\repos\buunguyen_combres\Combres\Common\SchemaConstants.cs,GetHashCode,The following statement contains a magic number: return new object[] { Path.ToLowerInvariant()' Mode.ToString()' ForwardCookie }                  .Select(o => o.GetHashCode())                  .Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,Resource,C:\repos\buunguyen_combres\Combres\Common\SchemaConstants.cs,GetHashCode,The following statement contains a magic number: return new object[] { Path.ToLowerInvariant()' Mode.ToString()' ForwardCookie }                  .Select(o => o.GetHashCode())                  .Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,ChangeMonitor,C:\repos\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: while (true)              {                  try                  {                      watch.Start();                      DynamicChangesMonitorInfo tmpMonitorInfo;                      lock (currentMonitorInfo)                      {                          /*                           * local.DynamicResourcesToWatch may be referring to an old Setting object here.                           * The code should deal with that accordingly.                           */                          tmpMonitorInfo = new DynamicChangesMonitorInfo(currentMonitorInfo);                      }                        bool nothingToWatch = false;                      if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 ||                          (tmpMonitorInfo.LocalChangeMonitorInterval == null &&                           tmpMonitorInfo.RemoteChangeMonitorInterval == null))                      {                          nothingToWatch = true;                      }                      else                      {                          var modifiedResourcePaths = new List<string>();                          var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null &&                                                    localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;                          var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null &&                                                     remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;                          if (localCheckShouldRun || remoteCheckShouldRun)                          {                              if (localCheckShouldRun)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Checking changes to local dynamic resources...");                                  CheckChange(tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);                                  localIntervalElapsed = 0;                              }                              if (remoteCheckShouldRun)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Checking changes to remote dynamic resources...");                                  CheckChange(tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);                                  remoteIntervalElapsed = 0;                              }                              if (modifiedResourcePaths.Count > 0)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Dynamic resources change count: " + modifiedResourcePaths.Count);                                  OnChange(ChangeType.Resource' modifiedResourcePaths);                              }                          }                      }                        // nothingToWatch is a status that won't change unless there's a configuration change                      // so a reasonably long sleep till the next check shouldn't hurt.                      // Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.                      Thread.Sleep(nothingToWatch ? 5000 : 1000);                        // Accummulate elapsed periods                      watch.Stop();                      var elapsed = watch.ElapsedMilliseconds;                      localIntervalElapsed += elapsed;                      remoteIntervalElapsed += elapsed;                      watch.Reset();                  }                  catch (Exception ex)                  {                      if (Log.IsWarnEnabled)                          Log.Warn("Error in dynamic resource monitor thread"' ex);                  }              }
Magic Number,Combres,ChangeMonitor,C:\repos\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: while (true)              {                  try                  {                      watch.Start();                      DynamicChangesMonitorInfo tmpMonitorInfo;                      lock (currentMonitorInfo)                      {                          /*                           * local.DynamicResourcesToWatch may be referring to an old Setting object here.                           * The code should deal with that accordingly.                           */                          tmpMonitorInfo = new DynamicChangesMonitorInfo(currentMonitorInfo);                      }                        bool nothingToWatch = false;                      if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 ||                          (tmpMonitorInfo.LocalChangeMonitorInterval == null &&                           tmpMonitorInfo.RemoteChangeMonitorInterval == null))                      {                          nothingToWatch = true;                      }                      else                      {                          var modifiedResourcePaths = new List<string>();                          var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null &&                                                    localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;                          var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null &&                                                     remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;                          if (localCheckShouldRun || remoteCheckShouldRun)                          {                              if (localCheckShouldRun)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Checking changes to local dynamic resources...");                                  CheckChange(tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);                                  localIntervalElapsed = 0;                              }                              if (remoteCheckShouldRun)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Checking changes to remote dynamic resources...");                                  CheckChange(tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);                                  remoteIntervalElapsed = 0;                              }                              if (modifiedResourcePaths.Count > 0)                              {                                  if (Log.IsDebugEnabled)                                      Log.Debug("Dynamic resources change count: " + modifiedResourcePaths.Count);                                  OnChange(ChangeType.Resource' modifiedResourcePaths);                              }                          }                      }                        // nothingToWatch is a status that won't change unless there's a configuration change                      // so a reasonably long sleep till the next check shouldn't hurt.                      // Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.                      Thread.Sleep(nothingToWatch ? 5000 : 1000);                        // Accummulate elapsed periods                      watch.Stop();                      var elapsed = watch.ElapsedMilliseconds;                      localIntervalElapsed += elapsed;                      remoteIntervalElapsed += elapsed;                      watch.Reset();                  }                  catch (Exception ex)                  {                      if (Log.IsWarnEnabled)                          Log.Warn("Error in dynamic resource monitor thread"' ex);                  }              }
Magic Number,Combres,CacheVaryProviderInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\CacheVaryProviderInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,CacheVaryProviderInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\CacheVaryProviderInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,DebugProcessingWorkflow,C:\repos\buunguyen_combres\Combres\Engine\DebugProcessingWorkflow.cs,Execute,The following statement contains a magic number: using (var memoryStream = new MemoryStream(4096))              {                  var singleContents = processor.GetSingleContents(processor.ResourceSet' false);                  var combinedContent = processor.GetCombinedContents(processor.ResourceSet' singleContents' true);                  var compressedContent = processor.TryZipContent(combinedContent' memoryStream);                  processor.SendOutputToClient(compressedContent' false' null);              }
Magic Number,Combres,DefaultProcessingWorkflow,C:\repos\buunguyen_combres\Combres\Engine\DefaultProcessingWorkflow.cs,Execute,The following statement contains a magic number: using (var memoryStream = new MemoryStream(4096))              {                  /*                   * Each resource in a set may have a unique minifier.  At the same time'                   * the order of resource as configured in the XML data file must be honored                   * when merging them together.                   *                    * Combres will group resources into merge-groups each includes resources sitting                   * next to each other in the XML data file having the same minifier.                   */                  var minifiedContents = new List<string>();                  var mergeGroup = new List<Resource>();                  MinifierInfo currentMinifier = null;                  foreach (var resource in processor.ResourceSet)                  {                      // not the first time AND hit a different minifier' finish up the current merge-group                      if (currentMinifier != null && currentMinifier != resource.Minifier)                       {                          ProcessMergeGroup(minifiedContents' mergeGroup' currentMinifier);                          mergeGroup.Clear();                      }                      currentMinifier = resource.Minifier;                      mergeGroup.Add(resource);                  }                  if (mergeGroup.Count > 0) // there's some left-over                  {                      ProcessMergeGroup(minifiedContents' mergeGroup' currentMinifier);                  }                    var mergedContent = processor.MergeContents(minifiedContents.ToArray());                  var compressedContent = processor.TryZipContent(mergedContent' memoryStream);                  string etag = processor.GenerateETag(compressedContent);                  processor.CacheNewResponse(compressedContent' etag);                  processor.SendOutputToClient(compressedContent' true' etag);              }
Magic Number,Combres,FilterInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\FilterInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,FilterInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\FilterInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,MinifierInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\MinifierInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,MinifierInfo,C:\repos\buunguyen_combres\Combres\Engine\Model\MinifierInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate(17' (accum' element) => 31 * accum + element);
Magic Number,Combres,WebExtensions,C:\repos\buunguyen_combres\Combres\API\WebExtensions.cs,AddCombresRoute,The following statement contains a magic number: var adjustedUrl = url.Substring(2);
Magic Number,Combres,WebExtensions,C:\repos\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceUrl,The following statement contains a magic number: contentHash = contentHash.Length > 32                   ? contentHash.Substring(0' 32)                  : contentHash;
Magic Number,Combres,WebExtensions,C:\repos\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceUrl,The following statement contains a magic number: contentHash = contentHash.Length > 32                   ? contentHash.Substring(0' 32)                  : contentHash;
Magic Number,Combres.Filters,FixUrlsInCssFilter,C:\repos\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: try              {                  const string template = "url(\"{0}\")";                  bool isInSameApp = resource.IsInSameApplication;                  var url = match.Groups["url"].Value.Trim('\"'' '\'');                    // Return as-is if                  // - Absolute URL                  // - Data http://combres.codeplex.com/workitem/7654                  if (url.StartsWith("http"' true' CultureInfo.InvariantCulture) ||                      url.StartsWith("data:"' true' CultureInfo.InvariantCulture))                      return string.Format(CultureInfo.InvariantCulture' template' url);                    if (url.StartsWith("~"' StringComparison.Ordinal))                  {                      // The CSS is in the same application                       // resolve partial URLs found in the CSS to full relative paths                      if (isInSameApp)                          return string.Format(CultureInfo.InvariantCulture' template' url.ResolveUrl());                                            /* Otherwise' attempt to treat ~ as /                       *                        * @NOTE: This won't work if the remote app is in a virtual directory                       * See my comment dated 11:00PM Monday Nov 23 in this discussion                       * http://combres.codeplex.com/Thread/View.aspx?ThreadId=64366                       */                      url = "/" + url.Substring(2); // 2 for the "~/"                  }                    var cssPath = resource.Path;                  if (url.StartsWith("/"' StringComparison.Ordinal))                  {                      // The CSS is in the same application' keep root-based URLs as-is                      if (isInSameApp)                          return string.Format(CultureInfo.InvariantCulture' template' url);                        // Otherwise' append root URL of the remote server/app to this url object                      var uri = new Uri(cssPath);                      return string.Format(CultureInfo.InvariantCulture' template' uri.GetBase() + url);                  }                    // Relative URL in CSS mean relative to the CSS location                  // Because CSS location must either be ~/ or absolute' the ResolveUrl()                   // at the end of this code block will do                   var cssFolder = cssPath.Substring(0' cssPath.LastIndexOf("/"' StringComparison.Ordinal)); // e.g. ~/content/css                  while (url.StartsWith("../"' StringComparison.Ordinal))                  {                      url = url.Substring(3); // skip one '../'                      cssFolder = cssFolder.Substring(0' cssFolder.LastIndexOf("/"' StringComparison.Ordinal)); // move back one folder                  }                    return string.Format(CultureInfo.InvariantCulture' template' (cssFolder + "/" + url).ResolveUrl());              }              catch (Exception ex)              {                  // Be lenient here' only log.  After all' this is just an image in the CSS file                  // and it should't be the reason to stop loading that CSS file.                  if (Log.IsWarnEnabled)                       Log.Warn("Cannot fix url " + match.Value' ex);                  return match.Value;              }
Magic Number,Combres.Filters,FixUrlsInCssFilter,C:\repos\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: try              {                  const string template = "url(\"{0}\")";                  bool isInSameApp = resource.IsInSameApplication;                  var url = match.Groups["url"].Value.Trim('\"'' '\'');                    // Return as-is if                  // - Absolute URL                  // - Data http://combres.codeplex.com/workitem/7654                  if (url.StartsWith("http"' true' CultureInfo.InvariantCulture) ||                      url.StartsWith("data:"' true' CultureInfo.InvariantCulture))                      return string.Format(CultureInfo.InvariantCulture' template' url);                    if (url.StartsWith("~"' StringComparison.Ordinal))                  {                      // The CSS is in the same application                       // resolve partial URLs found in the CSS to full relative paths                      if (isInSameApp)                          return string.Format(CultureInfo.InvariantCulture' template' url.ResolveUrl());                                            /* Otherwise' attempt to treat ~ as /                       *                        * @NOTE: This won't work if the remote app is in a virtual directory                       * See my comment dated 11:00PM Monday Nov 23 in this discussion                       * http://combres.codeplex.com/Thread/View.aspx?ThreadId=64366                       */                      url = "/" + url.Substring(2); // 2 for the "~/"                  }                    var cssPath = resource.Path;                  if (url.StartsWith("/"' StringComparison.Ordinal))                  {                      // The CSS is in the same application' keep root-based URLs as-is                      if (isInSameApp)                          return string.Format(CultureInfo.InvariantCulture' template' url);                        // Otherwise' append root URL of the remote server/app to this url object                      var uri = new Uri(cssPath);                      return string.Format(CultureInfo.InvariantCulture' template' uri.GetBase() + url);                  }                    // Relative URL in CSS mean relative to the CSS location                  // Because CSS location must either be ~/ or absolute' the ResolveUrl()                   // at the end of this code block will do                   var cssFolder = cssPath.Substring(0' cssPath.LastIndexOf("/"' StringComparison.Ordinal)); // e.g. ~/content/css                  while (url.StartsWith("../"' StringComparison.Ordinal))                  {                      url = url.Substring(3); // skip one '../'                      cssFolder = cssFolder.Substring(0' cssFolder.LastIndexOf("/"' StringComparison.Ordinal)); // move back one folder                  }                    return string.Format(CultureInfo.InvariantCulture' template' (cssFolder + "/" + url).ResolveUrl());              }              catch (Exception ex)              {                  // Be lenient here' only log.  After all' this is just an image in the CSS file                  // and it should't be the reason to stop loading that CSS file.                  if (Log.IsWarnEnabled)                       Log.Warn("Cannot fix url " + match.Value' ex);                  return match.Value;              }
Magic Number,Combres.VersionGenerators,HashCodeVersionGenerator,C:\repos\buunguyen_combres\Combres\Engine\VersionGenerators\HashCodeVersionGenerator.cs,Generate,The following statement contains a magic number: var hash = contributingFactors.Select(f => f.GetHashCode())                                            .Aggregate(17' (accum' element) => 31 * accum + element)                                            .ToString();
Magic Number,Combres.VersionGenerators,HashCodeVersionGenerator,C:\repos\buunguyen_combres\Combres\Engine\VersionGenerators\HashCodeVersionGenerator.cs,Generate,The following statement contains a magic number: var hash = contributingFactors.Select(f => f.GetHashCode())                                            .Aggregate(17' (accum' element) => 31 * accum + element)                                            .ToString();
Missing Default,Combres,Configuration,C:\repos\buunguyen_combres\Combres\Configuration\Configuration.cs,ApplyChanges,The following switch statement is missing a default case: switch (change.ChangeType)                  {                      case ChangeType.Config:                          ReloadSettings();                          break;                      case ChangeType.Resource:                          ApplyChange(change);                          break;                  }
