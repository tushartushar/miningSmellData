Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,Cyclomatic complexity of the method is 12
Complex Method,Combres,Configuration,F:\newReposMay17\buunguyen_combres\Combres\Configuration\Configuration.cs,ChangeDetectedHandler,Cyclomatic complexity of the method is 9
Complex Method,Combres,Configuration,F:\newReposMay17\buunguyen_combres\Combres\Configuration\Configuration.cs,ApplyChanges,Cyclomatic complexity of the method is 9
Complex Method,Combres,ResourceContentReader,F:\newReposMay17\buunguyen_combres\Combres\Engine\ResourceContentReader.cs,ReadNewContent,Cyclomatic complexity of the method is 21
Long Statement,Combres,CompressionExtensions,F:\newReposMay17\buunguyen_combres\Combres\Common\Extensions\CompressionExtensions.cs,UnCompress,The length of the statement  "	using (var stream = type == CompressionType.GZip ? (Stream)new GZipStream (new MemoryStream (bytes)' CompressionMode.Decompress) : new DeflateStream (new MemoryStream (bytes)' CompressionMode.Decompress)) { " is 206.
Long Statement,Combres,UrlExtensions,F:\newReposMay17\buunguyen_combres\Combres\Common\Extensions\UrlExtensions.cs,ResolveUrl,The length of the statement  "	if (string.IsNullOrEmpty (originalUrl) || IsAbsoluteUrl (originalUrl) || !originalUrl.StartsWith ("~"' StringComparison.Ordinal)) " is 129.
Long Statement,Combres,Timer,F:\newReposMay17\buunguyen_combres\Combres\Common\Timer.cs,Dispose,The length of the statement  "		Action (string.Format (CultureInfo.InvariantCulture' "Elapsed time for '{0}': {1} ms"' ActionName' Stopwatch.ElapsedMilliseconds)); " is 131.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorRemoteChanges,The length of the statement  "		var localInterval = (settings.LocalChangeMonitorInterval == null || settings.LocalChangeMonitorInterval <= 0) ? null : settings.LocalChangeMonitorInterval * 1000L; " is 163.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorRemoteChanges,The length of the statement  "		var remoteInterval = (settings.RemoteChangeMonitorInterval == null || settings.RemoteChangeMonitorInterval <= 0) ? null : settings.RemoteChangeMonitorInterval * 1000L; " is 167.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The length of the statement  "			if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 || (tmpMonitorInfo.LocalChangeMonitorInterval == null && tmpMonitorInfo.RemoteChangeMonitorInterval == null)) { " is 165.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The length of the statement  "				var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null && localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval; " is 145.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The length of the statement  "				var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null && remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval; " is 149.
Long Statement,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorLocalChanges,The length of the statement  "					where resource.Mode == ResourceMode.Static && path.Equals (HostingEnvironment.MapPath (resource.Path)' StringComparison.OrdinalIgnoreCase) " is 138.
Long Statement,Combres,Configuration,F:\newReposMay17\buunguyen_combres\Combres\Configuration\Configuration.cs,ApplyChange,The length of the statement  "		var modifiedResources = set.Where (r => change.ModifiedResourcePaths.Any (path => path.Equals (r.Path' StringComparison.OrdinalIgnoreCase))).ToList (); " is 151.
Long Statement,Combres,ModelUtils,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ModelUtils.cs,LoadType,The length of the statement  "		throw new XmlSchemaException (string.Format (CultureInfo.InvariantCulture' "{0} type {1} cannot be found"' itemName' typeName)); " is 128.
Long Statement,Combres,ModelUtils,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ModelUtils.cs,LoadType,The length of the statement  "		throw new XmlSchemaException (string.Format (CultureInfo.InvariantCulture' "{0} {1} doesn't implement/extend the correct interface/class"' itemName' typeName)); " is 160.
Long Statement,Combres,ModelUtils,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ModelUtils.cs,LoadMinifier,The length of the statement  "		throw new XmlSchemaException (string.Format (CultureInfo.InvariantCulture' "Minifier {0} is not declared"' minifierRef)); " is 121.
Long Statement,Combres,MinifierInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\MinifierInfo.cs,Equals,The length of the statement  "	return Name == other.Name && Type == other.Type && BinderType == other.BinderType && Parameters.IsEqualTo (other.Parameters); " is 125.
Long Statement,Combres,Resource,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Resource.cs,Equals,The length of the statement  "	return Path.Equals (other.Path' StringComparison.OrdinalIgnoreCase) && Mode == other.Mode && ForwardCookie.Equals (other.ForwardCookie); " is 136.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeMinifier,The length of the statement  "	Minifier = Type == ResourceType.JS ? ModelUtils.LoadMinifier (xe' SchemaConstants.Set.MinifierRef' Settings.DefaultJSMinifierRef' Settings.JSMinifierMap) : ModelUtils.LoadMinifier (xe' SchemaConstants.Set.MinifierRef' Settings.DefaultCssMinifierRef' Settings.CssMinifierMap); " is 275.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeSettings,The length of the statement  "	var duration = ModelUtils.GetString (xe' SchemaConstants.Set.Duration' Settings.DefaultDuration == null ? null : Settings.DefaultDuration.ToString ()); " is 151.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeSettings,The length of the statement  "	: debugEnabled.Equals (SchemaConstants.Set.Auto' StringComparison.OrdinalIgnoreCase) ? HttpContext.Current.IsDebuggingEnabled // use web.config if autor " is 152.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeSettings,The length of the statement  "	IgnorePipelineWhenDebug = (bool)xe.Attr<string> (SchemaConstants.Set.IgnorePipelineWhenDebug).ConvertToType (typeof(bool)' Settings.DefaultIgnorePipelineWhenDebug); " is 164.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeSettings,The length of the statement  "	CompressionEnabled = (bool)xe.Attr<string> (SchemaConstants.Set.CompressionEnabled).ConvertToType (typeof(bool)' Settings.DefaultCompressionEnabled); " is 149.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeResources,The length of the statement  "				throw new XmlSchemaException (string.Format (CultureInfo.InvariantCulture' "Referenced resource set {0} must be declared before this resource set"' referenceName)); " is 164.
Long Statement,Combres,ResourceSet,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\ResourceSet.cs,InitializeCacheVaryProviders,The length of the statement  "	CacheVaryProviders = settings.CacheVaryProviderInfoList.Where (providerInfo => providerInfo.ResourceSetNames == null || providerInfo.ResourceSetNames.Contains (Name)).ToList ().AsReadOnly (); " is 191.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,GetBinderType,The length of the statement  "	return binderTypeName == null ? Default.Binder.Type : ModelUtils.LoadType ("Binder"' binderTypeName' SchemaConstants.Binder.ValidTypes); " is 136.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,LoadResourceSets,The length of the statement  "	DefaultVersionGeneratorType = string.IsNullOrEmpty (generatorType) ? Default.ResourceSet.VersionGeneratorType : ModelUtils.LoadType ("Generator"' generatorType' SchemaConstants.VersionGenerator.ValidTypes); " is 206.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,LoadResourceSets,The length of the statement  "	DefaultDebugEnabled = string.IsNullOrEmpty (debugEnabled) ? Default.ResourceSet.DebugEnabled : debugEnabled.Equals (SchemaConstants.Set.Auto' StringComparison.OrdinalIgnoreCase) ? HttpContext.Current.IsDebuggingEnabled : bool.Parse (debugEnabled); " is 247.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,LoadResourceSets,The length of the statement  "	DefaultIgnorePipelineWhenDebug = (bool)rsXe.Attr<string> (SchemaConstants.Setting.DefaultIgnorePipelineWhenDebug).ConvertToType (typeof(bool)' Default.ResourceSet.IgnorePipelineWhenDebug); " is 188.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,LoadResourceSets,The length of the statement  "	DefaultCompressionEnabled = (bool)rsXe.Attr<string> (SchemaConstants.Setting.DefaultCompressionEnabled).ConvertToType (typeof(bool)' Default.ResourceSet.CompressionEnabled); " is 173.
Long Statement,Combres,Settings,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Settings.cs,GetMinifier,The length of the statement  "		throw new XmlSchemaException (string.Format (CultureInfo.InvariantCulture' "Minifier {0} is not declared"' minifierRef)); " is 121.
Long Statement,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,AddCombresRoute,The length of the statement  "	routes.Add (name' new Route (adjustedUrl + "/{name}/{version}/{*cacheVaryKeys}"' defaults' new CombresRouteHandler ())); " is 120.
Long Statement,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,CombresUrl,The length of the statement  "		throw new InvalidOperationException ("CombresUrl() cannot be used when DebugEnabled and IgnorePipelineWhenDebug properties of the resource set are turned-on.  Use one of CombresLink() overloads instead."); " is 205.
Long Statement,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceSetUrl,The length of the statement  "	var cacheVaryKeys = string.Join ("/"' set.GetCacheVaryStates (HttpContext.Current' predicate).Select (s => s.Key).ToArray ()); " is 126.
Long Statement,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceSetUrl,The length of the statement  "	var fullUrl = string.Format (CultureInfo.InvariantCulture' UrlPattern' set.Settings.Url' set.Name' set.GetVersionString ()) + cacheVaryKeys; " is 140.
Long Statement,Combres,RequestProcessor,F:\newReposMay17\buunguyen_combres\Combres\Engine\RequestProcessor.cs,GetSingleContents,The length of the statement  "		return resources.Select (resource => FilterContent<string' ISingleContentFilter' Resource> (resource' ReadResourceContent (resource' useCache))).ToArray (); " is 156.
Long Statement,Combres,RequestProcessor,F:\newReposMay17\buunguyen_combres\Combres\Engine\RequestProcessor.cs,GetCombinedContents,The length of the statement  "				singleContents [i] = string.Format ("{0}/* Comment Generated by Combres - {2} */{1}{3}"' string.Format (newLines' Environment.NewLine)' Environment.NewLine' resourceArray [i]' singleContents [i]); " is 196.
Long Statement,Combres,RequestProcessor,F:\newReposMay17\buunguyen_combres\Combres\Engine\RequestProcessor.cs,MinifyContent,The length of the statement  "		Log.Debug (string.Format (CultureInfo.InvariantCulture' "Minifying combined content using minifier {0} and binder {1}..."' minifierInfo.Name' minifierInfo.BinderType)); " is 168.
Long Statement,Combres.Caches,AspNetResourceSetCache,F:\newReposMay17\buunguyen_combres\Combres\Engine\Caches\AspNetResourceSetCache.cs,Add,The length of the statement  "	HttpContext.Current.Cache.Insert (key' value' null/* cache dependencies */' Cache.NoAbsoluteExpiration' slidingExpiration); " is 123.
Long Statement,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The length of the statement  "		if (url.StartsWith ("http"' true' CultureInfo.InvariantCulture) || url.StartsWith ("data:"' true' CultureInfo.InvariantCulture)) " is 128.
Long Statement,Combres.Minifiers,LocalClosureJSMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\LocalClosureJSMinifier.cs,Compile,The length of the statement  "		var args = string.Format (argsTemplate' compilerPath/* {0} */' compilationLevel/* {1} */' inputFile/* {2} */' outputFile/* {3} */); " is 131.
Long Statement,Combres.Minifiers,MSAjaxCssMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\MSAjaxCssMinifier.cs,Minify,The length of the statement  "	var outputMode = (OutputMode)OutputMode.ConvertToType (typeof(OutputMode)' Microsoft.Ajax.Utilities.OutputMode.SingleLine); " is 123.
Long Statement,Combres.Minifiers,ClosureJSMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\ClosureJSMinifier.cs,Minify,The length of the statement  "	var level = (ClosureCodeRequest.CompilationLevel)CompilationLevel.ConvertToType (typeof(ClosureCodeRequest.CompilationLevel)' ClosureCodeRequest.CompilationLevel.SIMPLE_OPTIMIZATIONS); " is 184.
Long Statement,Combres.Minifiers,MSAjaxJSMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\MSAjaxJSMinifier.cs,Minify,The length of the statement  "	var localRenaming = (LocalRenaming)LocalRenaming.ConvertToType (typeof(LocalRenaming)' Microsoft.Ajax.Utilities.LocalRenaming.CrunchAll); " is 137.
Long Statement,Combres.Minifiers,MSAjaxJSMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\MSAjaxJSMinifier.cs,Minify,The length of the statement  "	var outputMode = (OutputMode)OutputMode.ConvertToType (typeof(OutputMode)' Microsoft.Ajax.Utilities.OutputMode.SingleLine); " is 123.
Long Statement,Combres.Minifiers,MSAjaxJSMinifier,F:\newReposMay17\buunguyen_combres\Combres\Engine\Minifiers\MSAjaxJSMinifier.cs,Minify,The length of the statement  "	var evalTreatment = (EvalTreatment)EvalTreatment.ConvertToType (typeof(EvalTreatment)' Microsoft.Ajax.Utilities.EvalTreatment.MakeAllSafe); " is 139.
Long Statement,Combres.VersionGenerators,HashCodeVersionGenerator,F:\newReposMay17\buunguyen_combres\Combres\Engine\VersionGenerators\HashCodeVersionGenerator.cs,Generate,The length of the statement  "	var hash = contributingFactors.Select (f => f.GetHashCode ()).Aggregate (17' (accum' element) => 31 * accum + element).ToString (); " is 131.
Magic Number,Combres,Include,F:\newReposMay17\buunguyen_combres\Combres\API\Control\Include.cs,Render,The following statement contains a magic number: if (string.IsNullOrEmpty (HtmlAttributes)) {  	writer.Write (WebExtensions.CombresLink (SetName));  } else {  	var attributes = new Dictionary<string' string> ();  	var array = HtmlAttributes.Split ('|');  	for (int i = 0; i < array.Length; i += 2) {  		attributes [array [i]] = array [i + 1];  	}  	writer.Write (WebExtensions.CombresLink (SetName' attributes));  }  
Magic Number,Combres,Include,F:\newReposMay17\buunguyen_combres\Combres\API\Control\Include.cs,Render,The following statement contains a magic number: for (int i = 0; i < array.Length; i += 2) {  	attributes [array [i]] = array [i + 1];  }  
Magic Number,Combres,Include,F:\newReposMay17\buunguyen_combres\Combres\API\Control\Include.cs,Render,The following statement contains a magic number: i += 2
Magic Number,Combres,CompressionExtensions,F:\newReposMay17\buunguyen_combres\Combres\Common\Extensions\CompressionExtensions.cs,UnCompress,The following statement contains a magic number: using (var stream = type == CompressionType.GZip ? (Stream)new GZipStream (new MemoryStream (bytes)' CompressionMode.Decompress) : new DeflateStream (new MemoryStream (bytes)' CompressionMode.Decompress)) {  	var buffer = new byte[4096];  	using (var memory = new MemoryStream ()) {  		int count;  		do {  			count = stream.Read (buffer' 0' buffer.Length);  			if (count > 0) {  				memory.Write (buffer' 0' count);  			}  		} while (count > 0);  		bytes = memory.ToArray ();  	}  }  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: while (true) {  	try {  		watch.Start ();  		DynamicChangesMonitorInfo tmpMonitorInfo;  		lock (currentMonitorInfo) {  			/*                          * local.DynamicResourcesToWatch may be referring to an old Setting object here.                          * The code should deal with that accordingly.                          */tmpMonitorInfo = new DynamicChangesMonitorInfo (currentMonitorInfo);  		}  		bool nothingToWatch = false;  		if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 || (tmpMonitorInfo.LocalChangeMonitorInterval == null && tmpMonitorInfo.RemoteChangeMonitorInterval == null)) {  			nothingToWatch = true;  		} else {  			var modifiedResourcePaths = new List<string> ();  			var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null && localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;  			var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null && remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;  			if (localCheckShouldRun || remoteCheckShouldRun) {  				if (localCheckShouldRun) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Checking changes to local dynamic resources...");  					CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);  					localIntervalElapsed = 0;  				}  				if (remoteCheckShouldRun) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Checking changes to remote dynamic resources...");  					CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);  					remoteIntervalElapsed = 0;  				}  				if (modifiedResourcePaths.Count > 0) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Dynamic resources change count: " + modifiedResourcePaths.Count);  					OnChange (ChangeType.Resource' modifiedResourcePaths);  				}  			}  		}  		// nothingToWatch is a status that won't change unless there's a configuration change  		// so a reasonably long sleep till the next check shouldn't hurt.  		// Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.  		Thread.Sleep (nothingToWatch ? 5000 : 1000);  		// Accummulate elapsed periods  		watch.Stop ();  		var elapsed = watch.ElapsedMilliseconds;  		localIntervalElapsed += elapsed;  		remoteIntervalElapsed += elapsed;  		watch.Reset ();  	} catch (Exception ex) {  		if (Log.IsWarnEnabled)  			Log.Warn ("Error in dynamic resource monitor thread"' ex);  	}  }  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: while (true) {  	try {  		watch.Start ();  		DynamicChangesMonitorInfo tmpMonitorInfo;  		lock (currentMonitorInfo) {  			/*                          * local.DynamicResourcesToWatch may be referring to an old Setting object here.                          * The code should deal with that accordingly.                          */tmpMonitorInfo = new DynamicChangesMonitorInfo (currentMonitorInfo);  		}  		bool nothingToWatch = false;  		if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 || (tmpMonitorInfo.LocalChangeMonitorInterval == null && tmpMonitorInfo.RemoteChangeMonitorInterval == null)) {  			nothingToWatch = true;  		} else {  			var modifiedResourcePaths = new List<string> ();  			var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null && localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;  			var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null && remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;  			if (localCheckShouldRun || remoteCheckShouldRun) {  				if (localCheckShouldRun) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Checking changes to local dynamic resources...");  					CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);  					localIntervalElapsed = 0;  				}  				if (remoteCheckShouldRun) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Checking changes to remote dynamic resources...");  					CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);  					remoteIntervalElapsed = 0;  				}  				if (modifiedResourcePaths.Count > 0) {  					if (Log.IsDebugEnabled)  						Log.Debug ("Dynamic resources change count: " + modifiedResourcePaths.Count);  					OnChange (ChangeType.Resource' modifiedResourcePaths);  				}  			}  		}  		// nothingToWatch is a status that won't change unless there's a configuration change  		// so a reasonably long sleep till the next check shouldn't hurt.  		// Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.  		Thread.Sleep (nothingToWatch ? 5000 : 1000);  		// Accummulate elapsed periods  		watch.Stop ();  		var elapsed = watch.ElapsedMilliseconds;  		localIntervalElapsed += elapsed;  		remoteIntervalElapsed += elapsed;  		watch.Reset ();  	} catch (Exception ex) {  		if (Log.IsWarnEnabled)  			Log.Warn ("Error in dynamic resource monitor thread"' ex);  	}  }  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: try {  	watch.Start ();  	DynamicChangesMonitorInfo tmpMonitorInfo;  	lock (currentMonitorInfo) {  		/*                          * local.DynamicResourcesToWatch may be referring to an old Setting object here.                          * The code should deal with that accordingly.                          */tmpMonitorInfo = new DynamicChangesMonitorInfo (currentMonitorInfo);  	}  	bool nothingToWatch = false;  	if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 || (tmpMonitorInfo.LocalChangeMonitorInterval == null && tmpMonitorInfo.RemoteChangeMonitorInterval == null)) {  		nothingToWatch = true;  	} else {  		var modifiedResourcePaths = new List<string> ();  		var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null && localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;  		var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null && remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;  		if (localCheckShouldRun || remoteCheckShouldRun) {  			if (localCheckShouldRun) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Checking changes to local dynamic resources...");  				CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);  				localIntervalElapsed = 0;  			}  			if (remoteCheckShouldRun) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Checking changes to remote dynamic resources...");  				CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);  				remoteIntervalElapsed = 0;  			}  			if (modifiedResourcePaths.Count > 0) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Dynamic resources change count: " + modifiedResourcePaths.Count);  				OnChange (ChangeType.Resource' modifiedResourcePaths);  			}  		}  	}  	// nothingToWatch is a status that won't change unless there's a configuration change  	// so a reasonably long sleep till the next check shouldn't hurt.  	// Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.  	Thread.Sleep (nothingToWatch ? 5000 : 1000);  	// Accummulate elapsed periods  	watch.Stop ();  	var elapsed = watch.ElapsedMilliseconds;  	localIntervalElapsed += elapsed;  	remoteIntervalElapsed += elapsed;  	watch.Reset ();  } catch (Exception ex) {  	if (Log.IsWarnEnabled)  		Log.Warn ("Error in dynamic resource monitor thread"' ex);  }  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: try {  	watch.Start ();  	DynamicChangesMonitorInfo tmpMonitorInfo;  	lock (currentMonitorInfo) {  		/*                          * local.DynamicResourcesToWatch may be referring to an old Setting object here.                          * The code should deal with that accordingly.                          */tmpMonitorInfo = new DynamicChangesMonitorInfo (currentMonitorInfo);  	}  	bool nothingToWatch = false;  	if (tmpMonitorInfo.DynamicResourcesToWatch.Count == 0 || (tmpMonitorInfo.LocalChangeMonitorInterval == null && tmpMonitorInfo.RemoteChangeMonitorInterval == null)) {  		nothingToWatch = true;  	} else {  		var modifiedResourcePaths = new List<string> ();  		var localCheckShouldRun = tmpMonitorInfo.LocalChangeMonitorInterval != null && localIntervalElapsed >= tmpMonitorInfo.LocalChangeMonitorInterval;  		var remoteCheckShouldRun = tmpMonitorInfo.RemoteChangeMonitorInterval != null && remoteIntervalElapsed >= tmpMonitorInfo.RemoteChangeMonitorInterval;  		if (localCheckShouldRun || remoteCheckShouldRun) {  			if (localCheckShouldRun) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Checking changes to local dynamic resources...");  				CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => r.IsInSameApplication);  				localIntervalElapsed = 0;  			}  			if (remoteCheckShouldRun) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Checking changes to remote dynamic resources...");  				CheckChange (tmpMonitorInfo' modifiedResourcePaths' r => !r.IsInSameApplication);  				remoteIntervalElapsed = 0;  			}  			if (modifiedResourcePaths.Count > 0) {  				if (Log.IsDebugEnabled)  					Log.Debug ("Dynamic resources change count: " + modifiedResourcePaths.Count);  				OnChange (ChangeType.Resource' modifiedResourcePaths);  			}  		}  	}  	// nothingToWatch is a status that won't change unless there's a configuration change  	// so a reasonably long sleep till the next check shouldn't hurt.  	// Otherwise' sleep for 1 second' which is the smallest value that can be specified for an interval.  	Thread.Sleep (nothingToWatch ? 5000 : 1000);  	// Accummulate elapsed periods  	watch.Stop ();  	var elapsed = watch.ElapsedMilliseconds;  	localIntervalElapsed += elapsed;  	remoteIntervalElapsed += elapsed;  	watch.Reset ();  } catch (Exception ex) {  	if (Log.IsWarnEnabled)  		Log.Warn ("Error in dynamic resource monitor thread"' ex);  }  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: Thread.Sleep (nothingToWatch ? 5000 : 1000);  
Magic Number,Combres,ChangeMonitor,F:\newReposMay17\buunguyen_combres\Combres\Configuration\ChangeMonitor.cs,MonitorDynamicChanges,The following statement contains a magic number: Thread.Sleep (nothingToWatch ? 5000 : 1000);  
Magic Number,Combres,CacheVaryProviderInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\CacheVaryProviderInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,CacheVaryProviderInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\CacheVaryProviderInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,DebugProcessingWorkflow,F:\newReposMay17\buunguyen_combres\Combres\Engine\DebugProcessingWorkflow.cs,Execute,The following statement contains a magic number: using (var memoryStream = new MemoryStream (4096)) {  	var singleContents = processor.GetSingleContents (processor.ResourceSet' false);  	var combinedContent = processor.GetCombinedContents (processor.ResourceSet' singleContents' true);  	var compressedContent = processor.TryZipContent (combinedContent' memoryStream);  	processor.SendOutputToClient (compressedContent' false' null);  }  
Magic Number,Combres,DefaultProcessingWorkflow,F:\newReposMay17\buunguyen_combres\Combres\Engine\DefaultProcessingWorkflow.cs,Execute,The following statement contains a magic number: using (var memoryStream = new MemoryStream (4096)) {  	/*                  * Each resource in a set may have a unique minifier.  At the same time'                  * the order of resource as configured in the XML data file must be honored                  * when merging them together.                  *                   * Combres will group resources into merge-groups each includes resources sitting                  * next to each other in the XML data file having the same minifier.                  */var minifiedContents = new List<string> ();  	var mergeGroup = new List<Resource> ();  	MinifierInfo currentMinifier = null;  	foreach (var resource in processor.ResourceSet) {  		// not the first time AND hit a different minifier' finish up the current merge-group  		if (currentMinifier != null && currentMinifier != resource.Minifier) {  			ProcessMergeGroup (minifiedContents' mergeGroup' currentMinifier);  			mergeGroup.Clear ();  		}  		currentMinifier = resource.Minifier;  		mergeGroup.Add (resource);  	}  	if (mergeGroup.Count > 0)// there's some left-over  	 {  		ProcessMergeGroup (minifiedContents' mergeGroup' currentMinifier);  	}  	var mergedContent = processor.MergeContents (minifiedContents.ToArray ());  	var compressedContent = processor.TryZipContent (mergedContent' memoryStream);  	string etag = processor.GenerateETag (compressedContent);  	processor.CacheNewResponse (compressedContent' etag);  	processor.SendOutputToClient (compressedContent' true' etag);  }  
Magic Number,Combres,FilterInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\FilterInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,FilterInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\FilterInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,MinifierInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\MinifierInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,MinifierInfo,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\MinifierInfo.cs,GetHashCode,The following statement contains a magic number: return factors.Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,Resource,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Resource.cs,GetHashCode,The following statement contains a magic number: return new object[] {  	Path.ToLowerInvariant ()'  	Mode.ToString ()'  	ForwardCookie  }.Select (o => o.GetHashCode ()).Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,Resource,F:\newReposMay17\buunguyen_combres\Combres\Engine\Model\Resource.cs,GetHashCode,The following statement contains a magic number: return new object[] {  	Path.ToLowerInvariant ()'  	Mode.ToString ()'  	ForwardCookie  }.Select (o => o.GetHashCode ()).Aggregate (17' (accum' element) => 31 * accum + element);  
Magic Number,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceUrl,The following statement contains a magic number: contentHash = contentHash.Length > 32 ? contentHash.Substring (0' 32) : contentHash;  
Magic Number,Combres,WebExtensions,F:\newReposMay17\buunguyen_combres\Combres\API\WebExtensions.cs,GetResourceUrl,The following statement contains a magic number: contentHash = contentHash.Length > 32 ? contentHash.Substring (0' 32) : contentHash;  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: try {  	const string template = "url(\"{0}\")";  	bool isInSameApp = resource.IsInSameApplication;  	var url = match.Groups ["url"].Value.Trim ('\"'' '\'');  	// Return as-is if  	// - Absolute URL  	// - Data http://combres.codeplex.com/workitem/7654  	if (url.StartsWith ("http"' true' CultureInfo.InvariantCulture) || url.StartsWith ("data:"' true' CultureInfo.InvariantCulture))  		return string.Format (CultureInfo.InvariantCulture' template' url);  	if (url.StartsWith ("~"' StringComparison.Ordinal)) {  		// The CSS is in the same application   		// resolve partial URLs found in the CSS to full relative paths  		if (isInSameApp)  			return string.Format (CultureInfo.InvariantCulture' template' url.ResolveUrl ());  		/* Otherwise' attempt to treat ~ as /                      *                       * @NOTE: This won't work if the remote app is in a virtual directory                      * See my comment dated 11:00PM Monday Nov 23 in this discussion                      * http://combres.codeplex.com/Thread/View.aspx?ThreadId=64366                      */url = "/" + url.Substring (2);  		// 2 for the "~/"  	}  	var cssPath = resource.Path;  	if (url.StartsWith ("/"' StringComparison.Ordinal)) {  		// The CSS is in the same application' keep root-based URLs as-is  		if (isInSameApp)  			return string.Format (CultureInfo.InvariantCulture' template' url);  		// Otherwise' append root URL of the remote server/app to this url object  		var uri = new Uri (cssPath);  		return string.Format (CultureInfo.InvariantCulture' template' uri.GetBase () + url);  	}  	// Relative URL in CSS mean relative to the CSS location  	// Because CSS location must either be ~/ or absolute' the ResolveUrl()   	// at the end of this code block will do   	var cssFolder = cssPath.Substring (0' cssPath.LastIndexOf ("/"' StringComparison.Ordinal));  	// e.g. ~/content/css  	while (url.StartsWith ("../"' StringComparison.Ordinal)) {  		url = url.Substring (3);  		// skip one '../'  		cssFolder = cssFolder.Substring (0' cssFolder.LastIndexOf ("/"' StringComparison.Ordinal));  		// move back one folder  	}  	return string.Format (CultureInfo.InvariantCulture' template' (cssFolder + "/" + url).ResolveUrl ());  } catch (Exception ex) {  	// Be lenient here' only log.  After all' this is just an image in the CSS file  	// and it should't be the reason to stop loading that CSS file.  	if (Log.IsWarnEnabled)  		Log.Warn ("Cannot fix url " + match.Value' ex);  	return match.Value;  }  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: try {  	const string template = "url(\"{0}\")";  	bool isInSameApp = resource.IsInSameApplication;  	var url = match.Groups ["url"].Value.Trim ('\"'' '\'');  	// Return as-is if  	// - Absolute URL  	// - Data http://combres.codeplex.com/workitem/7654  	if (url.StartsWith ("http"' true' CultureInfo.InvariantCulture) || url.StartsWith ("data:"' true' CultureInfo.InvariantCulture))  		return string.Format (CultureInfo.InvariantCulture' template' url);  	if (url.StartsWith ("~"' StringComparison.Ordinal)) {  		// The CSS is in the same application   		// resolve partial URLs found in the CSS to full relative paths  		if (isInSameApp)  			return string.Format (CultureInfo.InvariantCulture' template' url.ResolveUrl ());  		/* Otherwise' attempt to treat ~ as /                      *                       * @NOTE: This won't work if the remote app is in a virtual directory                      * See my comment dated 11:00PM Monday Nov 23 in this discussion                      * http://combres.codeplex.com/Thread/View.aspx?ThreadId=64366                      */url = "/" + url.Substring (2);  		// 2 for the "~/"  	}  	var cssPath = resource.Path;  	if (url.StartsWith ("/"' StringComparison.Ordinal)) {  		// The CSS is in the same application' keep root-based URLs as-is  		if (isInSameApp)  			return string.Format (CultureInfo.InvariantCulture' template' url);  		// Otherwise' append root URL of the remote server/app to this url object  		var uri = new Uri (cssPath);  		return string.Format (CultureInfo.InvariantCulture' template' uri.GetBase () + url);  	}  	// Relative URL in CSS mean relative to the CSS location  	// Because CSS location must either be ~/ or absolute' the ResolveUrl()   	// at the end of this code block will do   	var cssFolder = cssPath.Substring (0' cssPath.LastIndexOf ("/"' StringComparison.Ordinal));  	// e.g. ~/content/css  	while (url.StartsWith ("../"' StringComparison.Ordinal)) {  		url = url.Substring (3);  		// skip one '../'  		cssFolder = cssFolder.Substring (0' cssFolder.LastIndexOf ("/"' StringComparison.Ordinal));  		// move back one folder  	}  	return string.Format (CultureInfo.InvariantCulture' template' (cssFolder + "/" + url).ResolveUrl ());  } catch (Exception ex) {  	// Be lenient here' only log.  After all' this is just an image in the CSS file  	// and it should't be the reason to stop loading that CSS file.  	if (Log.IsWarnEnabled)  		Log.Warn ("Cannot fix url " + match.Value' ex);  	return match.Value;  }  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: if (url.StartsWith ("~"' StringComparison.Ordinal)) {  	// The CSS is in the same application   	// resolve partial URLs found in the CSS to full relative paths  	if (isInSameApp)  		return string.Format (CultureInfo.InvariantCulture' template' url.ResolveUrl ());  	/* Otherwise' attempt to treat ~ as /                      *                       * @NOTE: This won't work if the remote app is in a virtual directory                      * See my comment dated 11:00PM Monday Nov 23 in this discussion                      * http://combres.codeplex.com/Thread/View.aspx?ThreadId=64366                      */url = "/" + url.Substring (2);  	// 2 for the "~/"  }  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: url = "/" + url.Substring (2);  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: while (url.StartsWith ("../"' StringComparison.Ordinal)) {  	url = url.Substring (3);  	// skip one '../'  	cssFolder = cssFolder.Substring (0' cssFolder.LastIndexOf ("/"' StringComparison.Ordinal));  	// move back one folder  }  
Magic Number,Combres.Filters,FixUrlsInCssFilter,F:\newReposMay17\buunguyen_combres\Combres\Engine\Filters\FixUrlsInCssFilter.cs,FixUrl,The following statement contains a magic number: url = url.Substring (3);  
Missing Default,Combres,Configuration,F:\newReposMay17\buunguyen_combres\Combres\Configuration\Configuration.cs,ApplyChanges,The following switch statement is missing a default case: switch (change.ChangeType) {  case ChangeType.Config:  	ReloadSettings ();  	break;  case ChangeType.Resource:  	ApplyChange (change);  	break;  }  
