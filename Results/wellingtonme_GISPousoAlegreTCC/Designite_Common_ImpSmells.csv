Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Common.Conversion,DataBaseResultConversion,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\DataBaseResultConversion.cs,FormatResultList,Cyclomatic complexity of the method is 9
Complex Method,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,Cyclomatic complexity of the method is 16
Complex Method,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,Cyclomatic complexity of the method is 16
Long Statement,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The length of the statement  "	if ((Math.Abs (double.Parse (mercator [0])) > 20037508.3427892) || (Math.Abs (double.Parse (mercator [1])) > 20037508.3427892)) " is 127.
Long Statement,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ConvertListInGraplhicsPoints,The length of the statement  "					var url = (graphicsType == GraphycsLayerType.Schools) ? Constants.SCHOOL_POINT_ICON_URL : Constants.COPS_POINT_ICON_URL; " is 120.
Long Statement,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ConvertListInGraplhicsPoints,The length of the statement  "					var title = (graphicsType == GraphycsLayerType.Schools) ? Constants.SCHOOL_INFOTEMPLATE_TITLE : Constants.COPS_INFOTEMPLATE_TITLE; " is 130.
Long Statement,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ConvertListInGraplhicsPoints,The length of the statement  "					var content = (graphicsType == GraphycsLayerType.Schools) ? Constants.SCHOOL_INFOTEMPLATE_CONTENT : Constants.COPS_INFOTEMPLATE_CONTENT; " is 136.
Empty Catch Block,Common.Conversion,DataBaseResultConversion,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\DataBaseResultConversion.cs,FormatResultList,The method has an empty catch block.
Empty Catch Block,Common.Conversion,DataBaseResultConversion,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\DataBaseResultConversion.cs,FormatResult,The method has an empty catch block.
Empty Catch Block,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ConvertListInGraplhicsPoints,The method has an empty catch block.
Empty Catch Block,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The method has an empty catch block.
Empty Catch Block,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ConvertListToGraphicsPolygon,The method has an empty catch block.
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,GetPolygonCoordinates,The following statement contains a magic number: try {  	result = new List<string> ();  	string[] split = coordinatesToParse.Split ('(');  	split [2] = split [2].Replace (")"' "");  	string[] coords = split [2].Split (''');  	for (int x = 0; x < coords.Length; x++) {  		string[] temp = coords [x].Split (' ');  		result.Add (temp [0]);  		result.Add (temp [1]);  	}  }  catch (Exception ex) {  	result = null;  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,GetPolygonCoordinates,The following statement contains a magic number: try {  	result = new List<string> ();  	string[] split = coordinatesToParse.Split ('(');  	split [2] = split [2].Replace (")"' "");  	string[] coords = split [2].Split (''');  	for (int x = 0; x < coords.Length; x++) {  		string[] temp = coords [x].Split (' ');  		result.Add (temp [0]);  		result.Add (temp [1]);  	}  }  catch (Exception ex) {  	result = null;  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,GetPolygonCoordinates,The following statement contains a magic number: try {  	result = new List<string> ();  	string[] split = coordinatesToParse.Split ('(');  	split [2] = split [2].Replace (")"' "");  	string[] coords = split [2].Split (''');  	for (int x = 0; x < coords.Length; x++) {  		string[] temp = coords [x].Split (' ');  		result.Add (temp [0]);  		result.Add (temp [1]);  	}  }  catch (Exception ex) {  	result = null;  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,GetPolygonCoordinates,The following statement contains a magic number: split [2] = split [2].Replace (")"' "");  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,GetPolygonCoordinates,The following statement contains a magic number: split [2] = split [2].Replace (")"' "");  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The following statement contains a magic number: if (Math.Abs (double.Parse (mercator [0])) < 180 && Math.Abs (double.Parse (mercator [1])) < 90)  	return null;  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The following statement contains a magic number: if (Math.Abs (double.Parse (mercator [0])) < 180 && Math.Abs (double.Parse (mercator [1])) < 90)  	return null;  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The following statement contains a magic number: if ((Math.Abs (double.Parse (mercator [0])) > 20037508.3427892) || (Math.Abs (double.Parse (mercator [1])) > 20037508.3427892))  	return null;  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The following statement contains a magic number: if ((Math.Abs (double.Parse (mercator [0])) > 20037508.3427892) || (Math.Abs (double.Parse (mercator [1])) > 20037508.3427892))  	return null;  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ConvertWebMercatorToGeographic,The following statement contains a magic number: result [1] = num7 * 57.295779513082323;  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: try {  	string[] splited = coordinates.Split (''');  	for (int x = 0; x < splited.Length; x = x + 2) {  		var temp = string.Concat (splited [x] + " "' splited [x + 1] + "'");  		if ((x + 2) == splited.Length)  			temp = temp.Replace ("'"' "");  		result = string.Concat (result' temp);  	}  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: try {  	string[] splited = coordinates.Split (''');  	for (int x = 0; x < splited.Length; x = x + 2) {  		var temp = string.Concat (splited [x] + " "' splited [x + 1] + "'");  		if ((x + 2) == splited.Length)  			temp = temp.Replace ("'"' "");  		result = string.Concat (result' temp);  	}  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: for (int x = 0; x < splited.Length; x = x + 2) {  	var temp = string.Concat (splited [x] + " "' splited [x + 1] + "'");  	if ((x + 2) == splited.Length)  		temp = temp.Replace ("'"' "");  	result = string.Concat (result' temp);  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: for (int x = 0; x < splited.Length; x = x + 2) {  	var temp = string.Concat (splited [x] + " "' splited [x + 1] + "'");  	if ((x + 2) == splited.Length)  		temp = temp.Replace ("'"' "");  	result = string.Concat (result' temp);  }  
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: x = x + 2
Magic Number,Common.Conversion,CoordinatesParser,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\CoordinatesParser.cs,ParseCoordinatesToPolygon,The following statement contains a magic number: if ((x + 2) == splited.Length)  	temp = temp.Replace ("'"' "");  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: try {  	IList<string> coords = CoordinatesParser.GetPolygonCoordinates (model.AreaLocation);  	polygon = new PolygonModel ();  	polygon.geometry = new GeometryPolygon () {  		spatialReference = new SpatialReference () {  			wkid = Constants.SPATIAL_REFERENCES_OF_POINT  		}  	};  	IList<IList<IList<string>>> ringsOut = new List<IList<IList<string>>> ();  	IList<IList<string>> ringsIn = new List<IList<string>> ();  	for (int x = 0; x < coords.Count; x = x + 2) {  		IList<string> coord = new List<string> ();  		coord.Add (coords [x]);  		coord.Add (coords [x + 1]);  		ringsIn.Add (coord);  	}  	ringsOut.Add (ringsIn);  	polygon.geometry.rings = ringsOut;  	polygon.symbol = new SymbolPolygon () {  		color = GetColor (model.CriminalIndex)'  		outline = new Outline () {  			color = GetColor (model.CriminalIndex)'  			width = Constants.POLYGON_WIDTH'  			type = Constants.OUTLINE_TYPE'  			style = Constants.OUTLINE_STYLE  		}'  		type = Constants.POLYGON_TYPE'  		style = Constants.POLYGON_STYLE  	};  	polygon.symbol.color [3] = Constants.COLOR_OUTLINE;  	polygon.symbol.outline.color [3] = Constants.COLOR_LINE;  	polygon.attributes = new AttributesPolygon () {  		District = model.District'  		CriminalIndex = GetIndexName (model.CriminalIndex)  	};  	polygon.infoTemplate = new InfoTemplate () {  		title = "Indice de Criminalidade"'  		content = Constants.CRIMINAL_INDEX_CONTENT  	};  }  catch (Exception ex) {  	polygon = null;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: try {  	IList<string> coords = CoordinatesParser.GetPolygonCoordinates (model.AreaLocation);  	polygon = new PolygonModel ();  	polygon.geometry = new GeometryPolygon () {  		spatialReference = new SpatialReference () {  			wkid = Constants.SPATIAL_REFERENCES_OF_POINT  		}  	};  	IList<IList<IList<string>>> ringsOut = new List<IList<IList<string>>> ();  	IList<IList<string>> ringsIn = new List<IList<string>> ();  	for (int x = 0; x < coords.Count; x = x + 2) {  		IList<string> coord = new List<string> ();  		coord.Add (coords [x]);  		coord.Add (coords [x + 1]);  		ringsIn.Add (coord);  	}  	ringsOut.Add (ringsIn);  	polygon.geometry.rings = ringsOut;  	polygon.symbol = new SymbolPolygon () {  		color = GetColor (model.CriminalIndex)'  		outline = new Outline () {  			color = GetColor (model.CriminalIndex)'  			width = Constants.POLYGON_WIDTH'  			type = Constants.OUTLINE_TYPE'  			style = Constants.OUTLINE_STYLE  		}'  		type = Constants.POLYGON_TYPE'  		style = Constants.POLYGON_STYLE  	};  	polygon.symbol.color [3] = Constants.COLOR_OUTLINE;  	polygon.symbol.outline.color [3] = Constants.COLOR_LINE;  	polygon.attributes = new AttributesPolygon () {  		District = model.District'  		CriminalIndex = GetIndexName (model.CriminalIndex)  	};  	polygon.infoTemplate = new InfoTemplate () {  		title = "Indice de Criminalidade"'  		content = Constants.CRIMINAL_INDEX_CONTENT  	};  }  catch (Exception ex) {  	polygon = null;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: try {  	IList<string> coords = CoordinatesParser.GetPolygonCoordinates (model.AreaLocation);  	polygon = new PolygonModel ();  	polygon.geometry = new GeometryPolygon () {  		spatialReference = new SpatialReference () {  			wkid = Constants.SPATIAL_REFERENCES_OF_POINT  		}  	};  	IList<IList<IList<string>>> ringsOut = new List<IList<IList<string>>> ();  	IList<IList<string>> ringsIn = new List<IList<string>> ();  	for (int x = 0; x < coords.Count; x = x + 2) {  		IList<string> coord = new List<string> ();  		coord.Add (coords [x]);  		coord.Add (coords [x + 1]);  		ringsIn.Add (coord);  	}  	ringsOut.Add (ringsIn);  	polygon.geometry.rings = ringsOut;  	polygon.symbol = new SymbolPolygon () {  		color = GetColor (model.CriminalIndex)'  		outline = new Outline () {  			color = GetColor (model.CriminalIndex)'  			width = Constants.POLYGON_WIDTH'  			type = Constants.OUTLINE_TYPE'  			style = Constants.OUTLINE_STYLE  		}'  		type = Constants.POLYGON_TYPE'  		style = Constants.POLYGON_STYLE  	};  	polygon.symbol.color [3] = Constants.COLOR_OUTLINE;  	polygon.symbol.outline.color [3] = Constants.COLOR_LINE;  	polygon.attributes = new AttributesPolygon () {  		District = model.District'  		CriminalIndex = GetIndexName (model.CriminalIndex)  	};  	polygon.infoTemplate = new InfoTemplate () {  		title = "Indice de Criminalidade"'  		content = Constants.CRIMINAL_INDEX_CONTENT  	};  }  catch (Exception ex) {  	polygon = null;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: for (int x = 0; x < coords.Count; x = x + 2) {  	IList<string> coord = new List<string> ();  	coord.Add (coords [x]);  	coord.Add (coords [x + 1]);  	ringsIn.Add (coord);  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: x = x + 2
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: polygon.symbol.color [3] = Constants.COLOR_OUTLINE;  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,ModelToGraphicPolygon,The following statement contains a magic number: polygon.symbol.outline.color [3] = Constants.COLOR_LINE;  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: try {  	switch (criminalIndex) {  	case 1:  		result = "Muito Baixo";  		break;  	case 2:  		result = "Baixo";  		break;  	case 3:  		result = "Médio";  		break;  	case 4:  		result = "Alto";  		break;  	case 5:  		result = "Muito Alto";  		break;  	}  }  catch (Exception ex) {  	result = "";  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: try {  	switch (criminalIndex) {  	case 1:  		result = "Muito Baixo";  		break;  	case 2:  		result = "Baixo";  		break;  	case 3:  		result = "Médio";  		break;  	case 4:  		result = "Alto";  		break;  	case 5:  		result = "Muito Alto";  		break;  	}  }  catch (Exception ex) {  	result = "";  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: try {  	switch (criminalIndex) {  	case 1:  		result = "Muito Baixo";  		break;  	case 2:  		result = "Baixo";  		break;  	case 3:  		result = "Médio";  		break;  	case 4:  		result = "Alto";  		break;  	case 5:  		result = "Muito Alto";  		break;  	}  }  catch (Exception ex) {  	result = "";  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: try {  	switch (criminalIndex) {  	case 1:  		result = "Muito Baixo";  		break;  	case 2:  		result = "Baixo";  		break;  	case 3:  		result = "Médio";  		break;  	case 4:  		result = "Alto";  		break;  	case 5:  		result = "Muito Alto";  		break;  	}  }  catch (Exception ex) {  	result = "";  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: switch (criminalIndex) {  case 1:  	result = "Muito Baixo";  	break;  case 2:  	result = "Baixo";  	break;  case 3:  	result = "Médio";  	break;  case 4:  	result = "Alto";  	break;  case 5:  	result = "Muito Alto";  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: switch (criminalIndex) {  case 1:  	result = "Muito Baixo";  	break;  case 2:  	result = "Baixo";  	break;  case 3:  	result = "Médio";  	break;  case 4:  	result = "Alto";  	break;  case 5:  	result = "Muito Alto";  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: switch (criminalIndex) {  case 1:  	result = "Muito Baixo";  	break;  case 2:  	result = "Baixo";  	break;  case 3:  	result = "Médio";  	break;  case 4:  	result = "Alto";  	break;  case 5:  	result = "Muito Alto";  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following statement contains a magic number: switch (criminalIndex) {  case 1:  	result = "Muito Baixo";  	break;  case 2:  	result = "Baixo";  	break;  case 3:  	result = "Médio";  	break;  case 4:  	result = "Alto";  	break;  case 5:  	result = "Muito Alto";  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: try {  	switch (indexCriminal) {  	case 1:  		color = Constants.CRIMINAL_INDICE_VERY_LOW;  		break;  	case 2:  		color = Constants.CRIMINAL_INDICE_LOW;  		break;  	case 3:  		color = Constants.CRIMINAL_INDICE_MEDIUM;  		break;  	case 4:  		color = Constants.CRIMINAL_INDICE_HIGH;  		break;  	case 5:  		color = Constants.CRIMINAL_INDICE_VERY_HIGH;  		break;  	}  }  catch (Exception ex) {  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: try {  	switch (indexCriminal) {  	case 1:  		color = Constants.CRIMINAL_INDICE_VERY_LOW;  		break;  	case 2:  		color = Constants.CRIMINAL_INDICE_LOW;  		break;  	case 3:  		color = Constants.CRIMINAL_INDICE_MEDIUM;  		break;  	case 4:  		color = Constants.CRIMINAL_INDICE_HIGH;  		break;  	case 5:  		color = Constants.CRIMINAL_INDICE_VERY_HIGH;  		break;  	}  }  catch (Exception ex) {  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: try {  	switch (indexCriminal) {  	case 1:  		color = Constants.CRIMINAL_INDICE_VERY_LOW;  		break;  	case 2:  		color = Constants.CRIMINAL_INDICE_LOW;  		break;  	case 3:  		color = Constants.CRIMINAL_INDICE_MEDIUM;  		break;  	case 4:  		color = Constants.CRIMINAL_INDICE_HIGH;  		break;  	case 5:  		color = Constants.CRIMINAL_INDICE_VERY_HIGH;  		break;  	}  }  catch (Exception ex) {  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: try {  	switch (indexCriminal) {  	case 1:  		color = Constants.CRIMINAL_INDICE_VERY_LOW;  		break;  	case 2:  		color = Constants.CRIMINAL_INDICE_LOW;  		break;  	case 3:  		color = Constants.CRIMINAL_INDICE_MEDIUM;  		break;  	case 4:  		color = Constants.CRIMINAL_INDICE_HIGH;  		break;  	case 5:  		color = Constants.CRIMINAL_INDICE_VERY_HIGH;  		break;  	}  }  catch (Exception ex) {  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: switch (indexCriminal) {  case 1:  	color = Constants.CRIMINAL_INDICE_VERY_LOW;  	break;  case 2:  	color = Constants.CRIMINAL_INDICE_LOW;  	break;  case 3:  	color = Constants.CRIMINAL_INDICE_MEDIUM;  	break;  case 4:  	color = Constants.CRIMINAL_INDICE_HIGH;  	break;  case 5:  	color = Constants.CRIMINAL_INDICE_VERY_HIGH;  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: switch (indexCriminal) {  case 1:  	color = Constants.CRIMINAL_INDICE_VERY_LOW;  	break;  case 2:  	color = Constants.CRIMINAL_INDICE_LOW;  	break;  case 3:  	color = Constants.CRIMINAL_INDICE_MEDIUM;  	break;  case 4:  	color = Constants.CRIMINAL_INDICE_HIGH;  	break;  case 5:  	color = Constants.CRIMINAL_INDICE_VERY_HIGH;  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: switch (indexCriminal) {  case 1:  	color = Constants.CRIMINAL_INDICE_VERY_LOW;  	break;  case 2:  	color = Constants.CRIMINAL_INDICE_LOW;  	break;  case 3:  	color = Constants.CRIMINAL_INDICE_MEDIUM;  	break;  case 4:  	color = Constants.CRIMINAL_INDICE_HIGH;  	break;  case 5:  	color = Constants.CRIMINAL_INDICE_VERY_HIGH;  	break;  }  
Magic Number,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following statement contains a magic number: switch (indexCriminal) {  case 1:  	color = Constants.CRIMINAL_INDICE_VERY_LOW;  	break;  case 2:  	color = Constants.CRIMINAL_INDICE_LOW;  	break;  case 3:  	color = Constants.CRIMINAL_INDICE_MEDIUM;  	break;  case 4:  	color = Constants.CRIMINAL_INDICE_HIGH;  	break;  case 5:  	color = Constants.CRIMINAL_INDICE_VERY_HIGH;  	break;  }  
Missing Default,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetIndexName,The following switch statement is missing a default case: switch (criminalIndex) {  case 1:  	result = "Muito Baixo";  	break;  case 2:  	result = "Baixo";  	break;  case 3:  	result = "Médio";  	break;  case 4:  	result = "Alto";  	break;  case 5:  	result = "Muito Alto";  	break;  }  
Missing Default,Common.Conversion,ModelToPointMapService,C:\repos\wellingtonme_GISPousoAlegreTCC\Common\Conversion\ModelToPointMapService.cs,GetColor,The following switch statement is missing a default case: switch (indexCriminal) {  case 1:  	color = Constants.CRIMINAL_INDICE_VERY_LOW;  	break;  case 2:  	color = Constants.CRIMINAL_INDICE_LOW;  	break;  case 3:  	color = Constants.CRIMINAL_INDICE_MEDIUM;  	break;  case 4:  	color = Constants.CRIMINAL_INDICE_HIGH;  	break;  case 5:  	color = Constants.CRIMINAL_INDICE_VERY_HIGH;  	break;  }  
