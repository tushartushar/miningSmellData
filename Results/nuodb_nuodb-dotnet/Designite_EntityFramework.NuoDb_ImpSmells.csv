Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,The method has 102 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The method has 110 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The method has 143 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitJoinExpression,The method has 160 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,The method has 100 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,AddColumns,The method has 116 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,The method has 104 lines of code.
Long Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlSelectStatement,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlSelectStatement.cs,WriteSql,The method has 135 lines of code.
Complex Method,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,Cyclomatic complexity of the method is 25
Complex Method,NuoDb.Data.Client.EntityFramework6,NuoDbProviderServices,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderServices.cs,CreateDbCommandDefinition,Cyclomatic complexity of the method is 10
Complex Method,NuoDb.Data.Client.EntityFramework6,NuoDbProviderServices,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderServices.cs,PrepareTypeCoercions,Cyclomatic complexity of the method is 10
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 16
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetTargetSql,Cyclomatic complexity of the method is 9
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitJoinExpression,Cyclomatic complexity of the method is 21
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,Cyclomatic complexity of the method is 9
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,AddColumns,Cyclomatic complexity of the method is 10
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,Cyclomatic complexity of the method is 17
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,IsCompatible,Cyclomatic complexity of the method is 8
Complex Method,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlSelectStatement,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlSelectStatement.cs,WriteSql,Cyclomatic complexity of the method is 18
Long Parameter List,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,The method has 6 parameters. Parameters: fromExtentFragment' result' inputExpression' inputVariableName' inputVariableType' fromSymbolStart
Long Parameter List,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,AddColumns,The method has 5 parameters. Parameters: selectStatement' symbol' columnList' columnDictionary' separator
Long Parameter List,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,CreateNewSelectStatement,The method has 5 parameters. Parameters: oldStatement' inputVarName' inputVarType' finalizeOldStatement' fromSymbol
Long Identifier,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,,The length of the parameter StoreSchemaDefinitionResourceName is 33.
Long Identifier,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,,The length of the parameter StoreSchemaDefinitionVersion3ResourceName is 41.
Long Identifier,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,,The length of the parameter StoreSchemaMappingResourceName is 30.
Long Identifier,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,,The length of the parameter StoreSchemaMappingVersion3ResourceName is 38.
Long Identifier,NuoDb.Data.Client.EntityFramework6.SqlGen,DmlSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\DmlSqlGenerator.cs,,The length of the parameter CommandTextBuilderInitialCapacity is 33.
Long Identifier,NuoDb.Data.Client.EntityFramework6.SqlGen,MetadataHelpers,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\MetadataHelpers.cs,,The length of the parameter StoreGeneratedPatternFacetName is 30.
Long Identifier,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,InitializeFunctionNameToOperatorDictionary,The length of the parameter functionNameToOperatorDictionary is 32.
Long Identifier,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,,The length of the parameter _functionNameToOperatorDictionary is 33.
Long Statement,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,The length of the statement  "                        return TypeUsage.CreateDefaultTypeUsage(useTimestamp ? StoreTypeNameToStorePrimitiveType["datetime"] : StoreTypeNameToStorePrimitiveType["date"]);" is 146.
Long Statement,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,The length of the statement  "                    throw new NotSupportedException(string.Format("There is no store type corresponding to the EDM type '{0}' of primitive type '{1}'."' edmType' primitiveType.PrimitiveTypeKind));" is 176.
Long Statement,NuoDb.Data.Client.EntityFramework6,NuoDbProviderServices,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderServices.cs,CreateDbCommandDefinition,The length of the statement  "                    parameter = CreateSqlParameter(functionParameter.Name' functionParameter.TypeUsage' functionParameter.Mode' DBNull.Value);" is 122.
Long Statement,NuoDb.Data.Client.EntityFramework6,NuoDbMigrationSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\EntityFramework.NuoDb\NuoDbMigrationSqlGenerator.cs,Generate,The length of the statement  "                writer.Write(Quote(string.Format("{0}.{1}_{2}"' SchemaName(operation.Table)' FixName(ObjectName(operation.Table))' FixName(operation.Name))));" is 142.
Long Statement,NuoDb.Data.Client.EntityFramework6,NuoDbMigrationSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\EntityFramework.NuoDb\NuoDbMigrationSqlGenerator.cs,CreateConnection,The length of the statement  "            return DbConfiguration.DependencyResolver.GetService<DbProviderFactory>(NuoDbProviderServices.ProviderInvariantName).CreateConnection();" is 136.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,DmlSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\DmlSqlGenerator.cs,GenerateUpdateSql,The length of the statement  "            ExpressionTranslator translator = new ExpressionTranslator(commandText' tree' null != tree.Returning' generateParameters);" is 122.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,DmlSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The length of the statement  "            ExpressionTranslator translator = new ExpressionTranslator(commandText' tree' null != tree.Returning' generateParameters);" is 122.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,MetadataHelpers,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\MetadataHelpers.cs,IsStoreGeneratedPattern,The length of the statement  "            return (member.TypeUsage.Facets.TryGetValue(StoreGeneratedPatternFacetName' false' out item) && ((StoreGeneratedPattern)item.Value) == pattern);" is 144.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,ScriptBuilder,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\ScriptBuilder.cs,GenerateTables,The length of the statement  "                result.AppendFormat("CREATE TABLE {0}.{1} ("' SqlGenerator.QuoteIdentifier(schemaName)' SqlGenerator.QuoteIdentifier(tableName));" is 129.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,ScriptBuilder,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\ScriptBuilder.cs,GenerateTables,The length of the statement  "                result.Append(string.Join("'" + Environment.NewLine + "\t"' MetadataHelpers.GetProperties(entitySet.ElementType).Select(p => GenerateColumn(p))));" is 146.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            Dictionary<string' FunctionHandler> functionHandlers = new Dictionary<string' FunctionHandler>(0' StringComparer.Ordinal);" is 122.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "                        if (MetadataHelpers.TryGetTypeFacetDescriptionByName(e.ResultType.EdmType' MetadataHelpers.PrecisionFacetName' out precisionFacetDescription))" is 142.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            RowType groupByType = MetadataHelpers.GetEdmType<RowType>(MetadataHelpers.GetEdmType<CollectionType>(e.ResultType).TypeUsage);" is 126.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            Debug.Assert(e.Limit is DbConstantExpression || e.Limit is DbParameterReferenceExpression' "DbLimitExpression.Limit is of invalid expression type");" is 148.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement result = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol);" is 129.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            Debug.Assert(e.Count is DbConstantExpression || e.Count is DbParameterReferenceExpression' "DbSkipExpression.Count is of invalid expression type");" is 147.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement result = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol);" is 129.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement result = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol);" is 129.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitJoinExpression,The length of the statement  "                    DbExpression[] children = new DbExpression[] { (processing as DbUnionAllExpression).Left' (processing as DbUnionAllExpression).Right };" is 135.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitJoinExpression,The length of the statement  "                ProcessJoinInputResult(fromExtentFragment' result' processing' input.VariableName' input.VariableType' fromSymbolStart);" is 120.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ExtractConstraints,The length of the statement  "                        result.Add(((joinCondition as DbComparisonExpression).Right as DbPropertyExpression).Property.Name' (joinCondition as DbComparisonExpression).Left as DbConstantExpression);" is 172.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ExtractConstraints,The length of the statement  "                        result.Add(((joinCondition as DbComparisonExpression).Left as DbPropertyExpression).Property.Name' (joinCondition as DbComparisonExpression).Right as DbConstantExpression);" is 172.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleSpecialFunction,The length of the statement  "                throw new InvalidOperationException("Special handling should be called only for functions in the list of special functions");" is 125.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleSpecialFunctionToOperator,The length of the statement  "            Debug.Assert(_functionNameToOperatorDictionary.ContainsKey(e.Function.Name)' "The function can not be mapped to an operator");" is 126.
Long Statement,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,WriteFunctionName,The length of the statement  "            string storeFunctionName = MetadataHelpers.TryGetValueForMetadataProperty<string>(function' "StoreFunctionNameAttribute");" is 122.
Complex Conditional,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetEdmType,The conditional expression  "fPrecision != null && !fPrecision.IsUnbounded && fPrecision.Value != null &&                      fScale != null && !fScale.IsUnbounded && fScale.Value != null"  is complex.
Complex Conditional,NuoDb.Data.Client.EntityFramework6,NuoDbMigrationSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\EntityFramework.NuoDb\NuoDbMigrationSqlGenerator.cs,Generate,The conditional expression  "column.IsNullable != null                     && !column.IsNullable.Value                     && column.DefaultValue == null                     && string.IsNullOrWhiteSpace(column.DefaultValueSql)                     && !column.IsIdentity                     && !column.IsTimestamp"  is complex.
Complex Conditional,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitAggregate,The conditional expression  "MetadataHelpers.IsCanonicalFunction(functionAggregate.Function) && (                 string.Equals(functionAggregate.Function.Name' "StDev"' StringComparison.Ordinal) ||                 string.Equals(functionAggregate.Function.Name' "StDevP"' StringComparison.Ordinal) ||                 string.Equals(functionAggregate.Function.Name' "Var"' StringComparison.Ordinal) ||                 string.Equals(functionAggregate.Function.Name' "VarP"' StringComparison.Ordinal))"  is complex.
Complex Conditional,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlSelectStatement,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlSelectStatement.cs,WriteSql,The conditional expression  "(this.orderBy != null) && !this.OrderBy.IsEmpty && (this.IsTopMost || this.First != null || this.Skip != null)"  is complex.
Magic Number,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)             {                 case PrimitiveTypeKind.Boolean:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["boolean"]);                  case PrimitiveTypeKind.Byte:                 case PrimitiveTypeKind.Int16:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["smallint"]);                  case PrimitiveTypeKind.Int32:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["integer"]);                  case PrimitiveTypeKind.Int64:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bigint"]);                  case PrimitiveTypeKind.Double:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["double"]);                  case PrimitiveTypeKind.Single:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["float"]);                  case PrimitiveTypeKind.Decimal: // decimal' numeric                     {                         byte precision = 9;                         if (facets.TryGetValue("Precision"' false' out f) && !f.IsUnbounded && f.Value != null)                             precision = (byte)f.Value;                         byte scale = 0;                         if (facets.TryGetValue("Scale"' false' out f) && !f.IsUnbounded && f.Value != null)                             scale = (byte)f.Value;                          return TypeUsage.CreateDecimalTypeUsage(StoreTypeNameToStorePrimitiveType["decimal"]' precision' scale);                     }                  case PrimitiveTypeKind.String: // char' varchar' text blob                     {                         bool isUnicode = true;                         if (facets.TryGetValue("Unicode"' false' out f) && !f.IsUnbounded && f.Value != null)                             isUnicode = (bool)f.Value;                         bool isFixedLength = true;                         if (facets.TryGetValue("FixedLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             isFixedLength = (bool)f.Value;                         int maxLength = Int32.MinValue;                         if (facets.TryGetValue("MaxLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             maxLength = (int)f.Value;                          PrimitiveType storePrimitiveType = StoreTypeNameToStorePrimitiveType[isFixedLength ? "char" : "varchar"];                         if (maxLength != Int32.MinValue)                             return TypeUsage.CreateStringTypeUsage(storePrimitiveType' isUnicode' isFixedLength' maxLength);                          return TypeUsage.CreateStringTypeUsage(storePrimitiveType' isUnicode' isFixedLength);                     }                  case PrimitiveTypeKind.DateTime: // datetime' date                     {                         byte precision = 4;                         if (facets.TryGetValue("Precision"' false' out f) && !f.IsUnbounded && f.Value != null)                             precision = (byte)f.Value;                          bool useTimestamp = (precision != 0);                          return TypeUsage.CreateDefaultTypeUsage(useTimestamp ? StoreTypeNameToStorePrimitiveType["datetime"] : StoreTypeNameToStorePrimitiveType["date"]);                     }                  case PrimitiveTypeKind.Time:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["time"]);                  case PrimitiveTypeKind.Binary: // blob                     {                         bool isFixedLength = true;                         if (facets.TryGetValue("FixedLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             isFixedLength = (bool)f.Value;                         int maxLength = Int32.MinValue;                         if (facets.TryGetValue("MaxLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             maxLength = (int)f.Value;                          PrimitiveType storePrimitiveType = StoreTypeNameToStorePrimitiveType["binary"];                         if (maxLength != Int32.MinValue)                             return TypeUsage.CreateBinaryTypeUsage(storePrimitiveType' isFixedLength' maxLength);                          return TypeUsage.CreateBinaryTypeUsage(storePrimitiveType' isFixedLength);                     }                  case PrimitiveTypeKind.Guid:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["guid_char"]);                  default:                     throw new NotSupportedException(string.Format("There is no store type corresponding to the EDM type '{0}' of primitive type '{1}'."' edmType' primitiveType.PrimitiveTypeKind));             }
Magic Number,NuoDb.Data.Client.EntityFramework6,NuoDbProviderManifest,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\NuoDbProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)             {                 case PrimitiveTypeKind.Boolean:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["boolean"]);                  case PrimitiveTypeKind.Byte:                 case PrimitiveTypeKind.Int16:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["smallint"]);                  case PrimitiveTypeKind.Int32:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["integer"]);                  case PrimitiveTypeKind.Int64:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bigint"]);                  case PrimitiveTypeKind.Double:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["double"]);                  case PrimitiveTypeKind.Single:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["float"]);                  case PrimitiveTypeKind.Decimal: // decimal' numeric                     {                         byte precision = 9;                         if (facets.TryGetValue("Precision"' false' out f) && !f.IsUnbounded && f.Value != null)                             precision = (byte)f.Value;                         byte scale = 0;                         if (facets.TryGetValue("Scale"' false' out f) && !f.IsUnbounded && f.Value != null)                             scale = (byte)f.Value;                          return TypeUsage.CreateDecimalTypeUsage(StoreTypeNameToStorePrimitiveType["decimal"]' precision' scale);                     }                  case PrimitiveTypeKind.String: // char' varchar' text blob                     {                         bool isUnicode = true;                         if (facets.TryGetValue("Unicode"' false' out f) && !f.IsUnbounded && f.Value != null)                             isUnicode = (bool)f.Value;                         bool isFixedLength = true;                         if (facets.TryGetValue("FixedLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             isFixedLength = (bool)f.Value;                         int maxLength = Int32.MinValue;                         if (facets.TryGetValue("MaxLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             maxLength = (int)f.Value;                          PrimitiveType storePrimitiveType = StoreTypeNameToStorePrimitiveType[isFixedLength ? "char" : "varchar"];                         if (maxLength != Int32.MinValue)                             return TypeUsage.CreateStringTypeUsage(storePrimitiveType' isUnicode' isFixedLength' maxLength);                          return TypeUsage.CreateStringTypeUsage(storePrimitiveType' isUnicode' isFixedLength);                     }                  case PrimitiveTypeKind.DateTime: // datetime' date                     {                         byte precision = 4;                         if (facets.TryGetValue("Precision"' false' out f) && !f.IsUnbounded && f.Value != null)                             precision = (byte)f.Value;                          bool useTimestamp = (precision != 0);                          return TypeUsage.CreateDefaultTypeUsage(useTimestamp ? StoreTypeNameToStorePrimitiveType["datetime"] : StoreTypeNameToStorePrimitiveType["date"]);                     }                  case PrimitiveTypeKind.Time:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["time"]);                  case PrimitiveTypeKind.Binary: // blob                     {                         bool isFixedLength = true;                         if (facets.TryGetValue("FixedLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             isFixedLength = (bool)f.Value;                         int maxLength = Int32.MinValue;                         if (facets.TryGetValue("MaxLength"' false' out f) && !f.IsUnbounded && f.Value != null)                             maxLength = (int)f.Value;                          PrimitiveType storePrimitiveType = StoreTypeNameToStorePrimitiveType["binary"];                         if (maxLength != Int32.MinValue)                             return TypeUsage.CreateBinaryTypeUsage(storePrimitiveType' isFixedLength' maxLength);                          return TypeUsage.CreateBinaryTypeUsage(storePrimitiveType' isFixedLength);                     }                  case PrimitiveTypeKind.Guid:                     return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["guid_char"]);                  default:                     throw new NotSupportedException(string.Format("There is no store type corresponding to the EDM type '{0}' of primitive type '{1}'."' edmType' primitiveType.PrimitiveTypeKind));             }
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,WriteSql,The following statement contains a magic number: StringBuilder builder = new StringBuilder(1024);
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The following statement contains a magic number: switch (typeKind)                 {                     case PrimitiveTypeKind.Boolean:                         result.Append(FormatBoolean((bool)e.Value));                         break;                      case PrimitiveTypeKind.Int16:                         result.Append("CAST(");                         result.Append(e.Value.ToString());                         result.Append(" AS ");                         result.Append(GetSqlPrimitiveType(e.ResultType));                         result.Append(")");                         break;                      case PrimitiveTypeKind.Int32:                         // default for integral values.                         result.Append(e.Value.ToString());                         break;                      case PrimitiveTypeKind.Int64:                         result.Append("CAST(");                         result.Append(e.Value.ToString());                         result.Append(" AS ");                         result.Append(GetSqlPrimitiveType(e.ResultType));                         result.Append(")");                         break;                      case PrimitiveTypeKind.Double:                         result.Append("CAST(");                         result.Append(((Double)e.Value).ToString(CultureInfo.InvariantCulture));                         result.Append(" AS ");                         result.Append(GetSqlPrimitiveType(e.ResultType));                         result.Append(")");                         break;                      case PrimitiveTypeKind.Single:                         result.Append("CAST(");                         result.Append(((Single)e.Value).ToString(CultureInfo.InvariantCulture));                         result.Append(" AS ");                         result.Append(GetSqlPrimitiveType(e.ResultType));                         result.Append(")");                         break;                      case PrimitiveTypeKind.Decimal:                         var sqlPrimitiveType = GetSqlPrimitiveType(e.ResultType);                         string strDecimal = ((Decimal)e.Value).ToString(CultureInfo.InvariantCulture);                          int pointPosition = strDecimal.IndexOf('.');                          int precision = 9;                         FacetDescription precisionFacetDescription;                         // there's always the max value in manifest                         if (MetadataHelpers.TryGetTypeFacetDescriptionByName(e.ResultType.EdmType' MetadataHelpers.PrecisionFacetName' out precisionFacetDescription))                         {                             if (precisionFacetDescription.DefaultValue != null)                                 precision = (int)precisionFacetDescription.DefaultValue;                         }                          int maxScale = (pointPosition != -1 ? precision - pointPosition + 1 : 0);                          result.Append("CAST(");                         result.Append(strDecimal);                         result.Append(" AS ");                         result.Append(sqlPrimitiveType.Substring(0' sqlPrimitiveType.IndexOf('(')));                         result.Append("(");                         result.Append(precision.ToString(CultureInfo.InvariantCulture));                         result.Append("'");                         result.Append(maxScale.ToString(CultureInfo.InvariantCulture));                         result.Append("))");                         break;                      case PrimitiveTypeKind.Binary:                         result.Append(FormatBinary((byte[])e.Value));                         break;                      case PrimitiveTypeKind.String:                         result.Append(FormatString((string)e.Value));                         break;                      case PrimitiveTypeKind.DateTime:                         result.Append(FormatDateTime((DateTime)e.Value));                         break;                      case PrimitiveTypeKind.Time:                         result.Append(FormatTime((DateTime)e.Value));                         break;                      case PrimitiveTypeKind.Guid:                         result.Append(FormatGuid((Guid)e.Value));                         break;                      default:                         // all known scalar types should been handled already.                         throw new NotSupportedException();                 }
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,Visit,The following statement contains a magic number: List<DbExpressionBinding> inputs = new List<DbExpressionBinding>(2);
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleSpecialFunctionToOperator,The following statement contains a magic number: Debug.Assert(e.Arguments.Count > 0 && e.Arguments.Count <= 2' "There should be 1 or 2 arguments for operator");
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionAddDays,The following statement contains a magic number: Debug.Assert(e.Arguments.Count == 2' "Canonical AddDays functions should have exactly two arguments");
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionDiffDays,The following statement contains a magic number: Debug.Assert(e.Arguments.Count == 2' "Canonical DiffDays functions should have exactly two arguments");
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateDateTime,The following statement contains a magic number: result.Append(e.Arguments[2].Accept(sqlgen));
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateDateTime,The following statement contains a magic number: result.Append(e.Arguments[3].Accept(sqlgen));
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateDateTime,The following statement contains a magic number: result.Append(e.Arguments[4].Accept(sqlgen));
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateDateTime,The following statement contains a magic number: result.Append(e.Arguments[5].Accept(sqlgen));
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateTime,The following statement contains a magic number: result.Append(e.Arguments[2].Accept(sqlgen));
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)             {                 case PrimitiveTypeKind.Boolean:                     typeName = "BOOLEAN";                     break;                  case PrimitiveTypeKind.Int16:                     typeName = "SMALLINT";                     break;                  case PrimitiveTypeKind.Int32:                     typeName = "INT";                     break;                  case PrimitiveTypeKind.Int64:                     typeName = "BIGINT";                     break;                  case PrimitiveTypeKind.Double:                     typeName = "DOUBLE PRECISION";                     break;                  case PrimitiveTypeKind.Single:                     typeName = "FLOAT";                     break;                  case PrimitiveTypeKind.Decimal:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 9);                     Debug.Assert(precision > 0' "decimal precision must be greater than zero");                     scale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                     Debug.Assert(precision >= scale' "decimalPrecision must be greater or equal to decimalScale");                     Debug.Assert(precision <= 100' "decimalPrecision must be less than or equal to 100");                     typeName = string.Format("DECIMAL({0}'{1})"' precision' scale);                     break;                  case PrimitiveTypeKind.Binary:                     typeName = "BLOB";                     break;                  case PrimitiveTypeKind.String:                     isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                     isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                     maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                     if (maxLength == Int32.MinValue)                     {                         // try to get maximum length' if not enough' server will return error                         if (isUnicode)                             length = NuoDbProviderManifest.NVarcharMaxSize.ToString(CultureInfo.InvariantCulture);                         else                             length = NuoDbProviderManifest.VarcharMaxSize.ToString(CultureInfo.InvariantCulture);                     }                     else                     {                         // if the length will be too much' server will return error                         length = maxLength.ToString(CultureInfo.InvariantCulture);                     }                      if (isFixedLength)                     {                         typeName = (isUnicode ? "CHAR(" : "CHAR(") + length + ")";                     }                     else                     {                         if (int.Parse(length) > (isUnicode ? NuoDbProviderManifest.NVarcharMaxSize : NuoDbProviderManifest.VarcharMaxSize))                         {                             typeName = "CLOB";                         }                         else                         {                             typeName = (isUnicode ? "VARCHAR(" : "VARCHAR(") + length + ")";                         }                     }                     break;                  case PrimitiveTypeKind.DateTime:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 4);                     typeName = (precision > 0 ? "TIMESTAMP" : "DATE");                     break;                  case PrimitiveTypeKind.Time:                     typeName = "TIME";                     break;                  case PrimitiveTypeKind.Guid:                     typeName = "CHAR(38)";                     break;                  default:                     throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);             }
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)             {                 case PrimitiveTypeKind.Boolean:                     typeName = "BOOLEAN";                     break;                  case PrimitiveTypeKind.Int16:                     typeName = "SMALLINT";                     break;                  case PrimitiveTypeKind.Int32:                     typeName = "INT";                     break;                  case PrimitiveTypeKind.Int64:                     typeName = "BIGINT";                     break;                  case PrimitiveTypeKind.Double:                     typeName = "DOUBLE PRECISION";                     break;                  case PrimitiveTypeKind.Single:                     typeName = "FLOAT";                     break;                  case PrimitiveTypeKind.Decimal:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 9);                     Debug.Assert(precision > 0' "decimal precision must be greater than zero");                     scale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                     Debug.Assert(precision >= scale' "decimalPrecision must be greater or equal to decimalScale");                     Debug.Assert(precision <= 100' "decimalPrecision must be less than or equal to 100");                     typeName = string.Format("DECIMAL({0}'{1})"' precision' scale);                     break;                  case PrimitiveTypeKind.Binary:                     typeName = "BLOB";                     break;                  case PrimitiveTypeKind.String:                     isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                     isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                     maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                     if (maxLength == Int32.MinValue)                     {                         // try to get maximum length' if not enough' server will return error                         if (isUnicode)                             length = NuoDbProviderManifest.NVarcharMaxSize.ToString(CultureInfo.InvariantCulture);                         else                             length = NuoDbProviderManifest.VarcharMaxSize.ToString(CultureInfo.InvariantCulture);                     }                     else                     {                         // if the length will be too much' server will return error                         length = maxLength.ToString(CultureInfo.InvariantCulture);                     }                      if (isFixedLength)                     {                         typeName = (isUnicode ? "CHAR(" : "CHAR(") + length + ")";                     }                     else                     {                         if (int.Parse(length) > (isUnicode ? NuoDbProviderManifest.NVarcharMaxSize : NuoDbProviderManifest.VarcharMaxSize))                         {                             typeName = "CLOB";                         }                         else                         {                             typeName = (isUnicode ? "VARCHAR(" : "VARCHAR(") + length + ")";                         }                     }                     break;                  case PrimitiveTypeKind.DateTime:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 4);                     typeName = (precision > 0 ? "TIMESTAMP" : "DATE");                     break;                  case PrimitiveTypeKind.Time:                     typeName = "TIME";                     break;                  case PrimitiveTypeKind.Guid:                     typeName = "CHAR(38)";                     break;                  default:                     throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);             }
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)             {                 case PrimitiveTypeKind.Boolean:                     typeName = "BOOLEAN";                     break;                  case PrimitiveTypeKind.Int16:                     typeName = "SMALLINT";                     break;                  case PrimitiveTypeKind.Int32:                     typeName = "INT";                     break;                  case PrimitiveTypeKind.Int64:                     typeName = "BIGINT";                     break;                  case PrimitiveTypeKind.Double:                     typeName = "DOUBLE PRECISION";                     break;                  case PrimitiveTypeKind.Single:                     typeName = "FLOAT";                     break;                  case PrimitiveTypeKind.Decimal:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 9);                     Debug.Assert(precision > 0' "decimal precision must be greater than zero");                     scale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                     Debug.Assert(precision >= scale' "decimalPrecision must be greater or equal to decimalScale");                     Debug.Assert(precision <= 100' "decimalPrecision must be less than or equal to 100");                     typeName = string.Format("DECIMAL({0}'{1})"' precision' scale);                     break;                  case PrimitiveTypeKind.Binary:                     typeName = "BLOB";                     break;                  case PrimitiveTypeKind.String:                     isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                     isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                     maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                     if (maxLength == Int32.MinValue)                     {                         // try to get maximum length' if not enough' server will return error                         if (isUnicode)                             length = NuoDbProviderManifest.NVarcharMaxSize.ToString(CultureInfo.InvariantCulture);                         else                             length = NuoDbProviderManifest.VarcharMaxSize.ToString(CultureInfo.InvariantCulture);                     }                     else                     {                         // if the length will be too much' server will return error                         length = maxLength.ToString(CultureInfo.InvariantCulture);                     }                      if (isFixedLength)                     {                         typeName = (isUnicode ? "CHAR(" : "CHAR(") + length + ")";                     }                     else                     {                         if (int.Parse(length) > (isUnicode ? NuoDbProviderManifest.NVarcharMaxSize : NuoDbProviderManifest.VarcharMaxSize))                         {                             typeName = "CLOB";                         }                         else                         {                             typeName = (isUnicode ? "VARCHAR(" : "VARCHAR(") + length + ")";                         }                     }                     break;                  case PrimitiveTypeKind.DateTime:                     precision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 4);                     typeName = (precision > 0 ? "TIMESTAMP" : "DATE");                     break;                  case PrimitiveTypeKind.Time:                     typeName = "TIME";                     break;                  case PrimitiveTypeKind.Guid:                     typeName = "CHAR(38)";                     break;                  default:                     throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);             }
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(binaryArray.Length * 2);
Magic Number,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: sb.Append(hexDigits[(binaryArray[i] & 0xF0) >> 4]).Append(hexDigits[binaryArray[i] & 0x0F]);
Missing Default,NuoDb.Data.Client.EntityFramework6,NuoDbMigrationSqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\EntityFramework.NuoDb\NuoDbMigrationSqlGenerator.cs,Generate,The following switch statement is missing a default case: switch (commandTree.CommandTreeKind)                 {                     case DbCommandTreeKind.Insert:                         using (var writer = SqlWriter())                         {                             writer.Write(DmlSqlGenerator.GenerateInsertSql((DbInsertCommandTree)commandTree' out _'                                 generateParameters: false));                             yield return Statement(writer);                         }                         break;                     case DbCommandTreeKind.Delete:                         using (var writer = SqlWriter())                         {                             writer.Write(DmlSqlGenerator.GenerateDeleteSql((DbDeleteCommandTree)commandTree' out _'                                 generateParameters: false));                             yield return Statement(writer);                         }                         break;                 }
Missing Default,NuoDb.Data.Client.EntityFramework6.SqlGen,SqlGenerator,C:\research\architectureSmells\repos\nuodb_nuodb-dotnet\NuoDb.Data.Client\EntityFramework\SqlGen\SqlGenerator.cs,VisitJoinExpression,The following switch statement is missing a default case: switch (joinKind)             {                 case DbExpressionKind.FullOuterJoin:                 case DbExpressionKind.InnerJoin:                 case DbExpressionKind.LeftOuterJoin:                     result.From.Append(" ON ");                     isParentAJoinStack.Push(false);                     result.From.Append(joinCondition.Accept(this));                     isParentAJoinStack.Pop();                     break;             }
