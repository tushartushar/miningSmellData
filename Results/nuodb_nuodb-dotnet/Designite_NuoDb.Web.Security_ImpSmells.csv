Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The method has 152 lines of code.
Long Method,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,ResetPassword,The method has 106 lines of code.
Long Method,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,UpdateFailureCount,The method has 156 lines of code.
Complex Method,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 9
Long Parameter List,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,ChangePassword,The length of the parameter lastPasswordChangedDataParameter is 32.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The length of the parameter lastPasswordChangedDateParameter is 32.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The length of the parameter failedPasswordAttemptCountParameter is 35.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The length of the parameter failedPasswordAttemptWindowStartParameter is 41.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The length of the parameter failedPasswordAnswerAttemptCountParameter is 41.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,CreateUser,The length of the parameter failedPasswordAnswerAttemptWindowStartParameter is 47.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,ResetPassword,The length of the parameter lastPasswordChangedDateParameter is 32.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,,The length of the parameter pMinRequiredNonAlphanumericCharacters is 37.
Long Identifier,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,,The length of the parameter pPasswordStrengthRegularExpression is 34.
Long Statement,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,Initialize,The length of the statement  "            pMinRequiredNonAlphanumericCharacters = Convert.ToInt32(GetConfigValue(config["minRequiredNonAlphanumericCharacters"]' "1")); " is 125.
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetPassword,The following statement contains a magic number: try              {                  conn = new NuoDbConnection(connectionString);                  conn.Open();                    using (DbCommand cmd = conn.CreateCommand())                  {                      cmd.CommandText = "SELECT Password' PasswordAnswer' IsLockedOut " +                                        "FROM Users " +                                        "WHERE Username = ? AND ApplicationName = ?";                        IDbDataParameter usernameParameter = cmd.CreateParameter();                      usernameParameter.Value = username;                      usernameParameter.DbType = DbType.String;                      cmd.Parameters.Add(usernameParameter);                      IDbDataParameter applicationNameParameter = cmd.CreateParameter();                      applicationNameParameter.Value = pApplicationName;                      applicationNameParameter.DbType = DbType.String;                      cmd.Parameters.Add(applicationNameParameter);                        reader = cmd.ExecuteReader(CommandBehavior.SingleRow);                        if (reader.Read())                      {                          if (reader.GetBoolean(2))                              throw new MembershipPasswordException("The supplied user is locked out.");                            password = reader.GetString(0);                          passwordAnswer = reader.GetString(1);                      }                      else                      {                          throw new MembershipPasswordException("The supplied user name is not found.");                      }                  }              }              catch (NuoDbSqlException e)              {                  if (WriteExceptionsToEventLog)                  {                      WriteToEventLog(e' "GetPassword");                        throw new ProviderException(exceptionMessage);                  }                  else                  {                      throw e;                  }              }              finally              {                  if (reader != null) { reader.Close(); }                  conn.Close();              }
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string email = reader.GetString(2);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(3) != DBNull.Value)                  passwordQuestion = reader.GetString(3);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(3) != DBNull.Value)                  passwordQuestion = reader.GetString(3);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(4) != DBNull.Value)                  comment = reader.GetString(4);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(4) != DBNull.Value)                  comment = reader.GetString(4);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isApproved = reader.GetBoolean(5);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isLockedOut = reader.GetBoolean(6);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime creationDate = reader.GetDateTime(7);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(8) != DBNull.Value)                  lastLoginDate = reader.GetDateTime(8);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(8) != DBNull.Value)                  lastLoginDate = reader.GetDateTime(8);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastActivityDate = reader.GetDateTime(9);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastPasswordChangedDate = reader.GetDateTime(10);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(11) != DBNull.Value)                  lastLockedOutDate = reader.GetDateTime(11);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: if (reader.GetValue(11) != DBNull.Value)                  lastLockedOutDate = reader.GetDateTime(11);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: try              {                  conn = new NuoDbConnection(connectionString);                  conn.Open();                    using (DbCommand cmd = conn.CreateCommand())                  {                      cmd.CommandText = "SELECT FailedPasswordAttemptCount' " +                                        "       FailedPasswordAttemptWindowStart' " +                                        "       FailedPasswordAnswerAttemptCount' " +                                        "       FailedPasswordAnswerAttemptWindowStart " +                                        "FROM Users " +                                        "WHERE Username = ? AND ApplicationName = ?";                        IDbDataParameter usernameParameter = cmd.CreateParameter();                      usernameParameter.Value = username;                      usernameParameter.DbType = DbType.String;                      cmd.Parameters.Add(usernameParameter);                      IDbDataParameter applicationNameParameter = cmd.CreateParameter();                      applicationNameParameter.Value = pApplicationName;                      applicationNameParameter.DbType = DbType.String;                      cmd.Parameters.Add(applicationNameParameter);                        reader = cmd.ExecuteReader(CommandBehavior.SingleRow);                        if (reader.HasRows)                      {                          reader.Read();                            if (failureType == "password")                          {                              failureCount = reader.GetInt32(0);                              windowStart = reader.GetDateTime(1);                          }                            if (failureType == "passwordAnswer")                          {                              failureCount = reader.GetInt32(2);                              windowStart = reader.GetDateTime(3);                          }                      }                        reader.Close();                        DateTime windowEnd = windowStart.AddMinutes(PasswordAttemptWindow);                        if (failureCount == 0 || DateTime.Now > windowEnd)                      {                          // First password failure or outside of PasswordAttemptWindow.                           // Start a new password failure count from 1 and a new window starting now.                            using (DbCommand updateCmd = conn.CreateCommand())                          {                              if (failureType == "password")                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET FailedPasswordAttemptCount = ?' " +                                                          "    FailedPasswordAttemptWindowStart = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                if (failureType == "passwordAnswer")                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET FailedPasswordAnswerAttemptCount = ?' " +                                                          "    FailedPasswordAnswerAttemptWindowStart = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                updateCmd.Parameters.Clear();                                IDbDataParameter countParameter = updateCmd.CreateParameter();                              countParameter.Value = 1;                              countParameter.DbType = DbType.Int32;                              updateCmd.Parameters.Add(countParameter);                              IDbDataParameter windowStartParameter = updateCmd.CreateParameter();                              windowStartParameter.Value = DateTime.Now;                              windowStartParameter.DbType = DbType.DateTime;                              updateCmd.Parameters.Add(windowStartParameter);                              IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                              updateUsernameParameter.Value = username;                              updateUsernameParameter.DbType = DbType.String;                              updateCmd.Parameters.Add(updateUsernameParameter);                                updateCmd.Parameters.Add(applicationNameParameter);                                if (cmd.ExecuteNonQuery() < 0)                                  throw new ProviderException("Unable to update failure count and window start.");                          }                      }                      else                      {                          if (failureCount++ >= MaxInvalidPasswordAttempts)                          {                              // Password attempts have exceeded the failure threshold. Lock out                              // the user.                              using (DbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET IsLockedOut = ?' LastLockedOutDate = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                    updateCmd.Parameters.Clear();                                    IDbDataParameter isLockedOutParameter = updateCmd.CreateParameter();                                  isLockedOutParameter.Value = true;                                  isLockedOutParameter.DbType = DbType.Boolean;                                  updateCmd.Parameters.Add(isLockedOutParameter);                                  IDbDataParameter lastLockedOutDateParameter = updateCmd.CreateParameter();                                  lastLockedOutDateParameter.Value = DateTime.Now;                                  lastLockedOutDateParameter.DbType = DbType.DateTime;                                  updateCmd.Parameters.Add(lastLockedOutDateParameter);                                    IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                                  updateUsernameParameter.Value = username;                                  updateUsernameParameter.DbType = DbType.String;                                  updateCmd.Parameters.Add(updateUsernameParameter);                                    updateCmd.Parameters.Add(applicationNameParameter);                                      if (cmd.ExecuteNonQuery() < 0)                                      throw new ProviderException("Unable to lock out user.");                              }                          }                          else                          {                              // Password attempts have not exceeded the failure threshold. Update                              // the failure counts. Leave the window the same.                              using (DbCommand updateCmd = conn.CreateCommand())                              {                                  if (failureType == "password")                                      updateCmd.CommandText = "UPDATE Users " +                                                              "SET FailedPasswordAttemptCount = ? " +                                                              "WHERE Username = ? AND ApplicationName = ?";                                    if (failureType == "passwordAnswer")                                      updateCmd.CommandText = "UPDATE Users " +                                                              "SET FailedPasswordAnswerAttemptCount = ? " +                                                              "WHERE Username = ? AND ApplicationName = ?";                                    updateCmd.Parameters.Clear();                                  IDbDataParameter countParameter = updateCmd.CreateParameter();                                  countParameter.Value = failureCount;                                  countParameter.DbType = DbType.Int32;                                  updateCmd.Parameters.Add(countParameter);                                  IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                                  updateUsernameParameter.Value = username;                                  updateUsernameParameter.DbType = DbType.String;                                  updateCmd.Parameters.Add(updateUsernameParameter);                                    updateCmd.Parameters.Add(applicationNameParameter);                                    if (cmd.ExecuteNonQuery() < 0)                                      throw new ProviderException("Unable to update failure count.");                              }                          }                      }                  }              }              catch (NuoDbSqlException e)              {                  if (WriteExceptionsToEventLog)                  {                      WriteToEventLog(e' "UpdateFailureCount");                        throw new ProviderException(exceptionMessage);                  }                  else                  {                      throw e;                  }              }              finally              {                  if (reader != null) { reader.Close(); }                  conn.Close();              }
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: try              {                  conn = new NuoDbConnection(connectionString);                  conn.Open();                    using (DbCommand cmd = conn.CreateCommand())                  {                      cmd.CommandText = "SELECT FailedPasswordAttemptCount' " +                                        "       FailedPasswordAttemptWindowStart' " +                                        "       FailedPasswordAnswerAttemptCount' " +                                        "       FailedPasswordAnswerAttemptWindowStart " +                                        "FROM Users " +                                        "WHERE Username = ? AND ApplicationName = ?";                        IDbDataParameter usernameParameter = cmd.CreateParameter();                      usernameParameter.Value = username;                      usernameParameter.DbType = DbType.String;                      cmd.Parameters.Add(usernameParameter);                      IDbDataParameter applicationNameParameter = cmd.CreateParameter();                      applicationNameParameter.Value = pApplicationName;                      applicationNameParameter.DbType = DbType.String;                      cmd.Parameters.Add(applicationNameParameter);                        reader = cmd.ExecuteReader(CommandBehavior.SingleRow);                        if (reader.HasRows)                      {                          reader.Read();                            if (failureType == "password")                          {                              failureCount = reader.GetInt32(0);                              windowStart = reader.GetDateTime(1);                          }                            if (failureType == "passwordAnswer")                          {                              failureCount = reader.GetInt32(2);                              windowStart = reader.GetDateTime(3);                          }                      }                        reader.Close();                        DateTime windowEnd = windowStart.AddMinutes(PasswordAttemptWindow);                        if (failureCount == 0 || DateTime.Now > windowEnd)                      {                          // First password failure or outside of PasswordAttemptWindow.                           // Start a new password failure count from 1 and a new window starting now.                            using (DbCommand updateCmd = conn.CreateCommand())                          {                              if (failureType == "password")                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET FailedPasswordAttemptCount = ?' " +                                                          "    FailedPasswordAttemptWindowStart = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                if (failureType == "passwordAnswer")                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET FailedPasswordAnswerAttemptCount = ?' " +                                                          "    FailedPasswordAnswerAttemptWindowStart = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                updateCmd.Parameters.Clear();                                IDbDataParameter countParameter = updateCmd.CreateParameter();                              countParameter.Value = 1;                              countParameter.DbType = DbType.Int32;                              updateCmd.Parameters.Add(countParameter);                              IDbDataParameter windowStartParameter = updateCmd.CreateParameter();                              windowStartParameter.Value = DateTime.Now;                              windowStartParameter.DbType = DbType.DateTime;                              updateCmd.Parameters.Add(windowStartParameter);                              IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                              updateUsernameParameter.Value = username;                              updateUsernameParameter.DbType = DbType.String;                              updateCmd.Parameters.Add(updateUsernameParameter);                                updateCmd.Parameters.Add(applicationNameParameter);                                if (cmd.ExecuteNonQuery() < 0)                                  throw new ProviderException("Unable to update failure count and window start.");                          }                      }                      else                      {                          if (failureCount++ >= MaxInvalidPasswordAttempts)                          {                              // Password attempts have exceeded the failure threshold. Lock out                              // the user.                              using (DbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.CommandText = "UPDATE Users " +                                                          "SET IsLockedOut = ?' LastLockedOutDate = ? " +                                                          "WHERE Username = ? AND ApplicationName = ?";                                    updateCmd.Parameters.Clear();                                    IDbDataParameter isLockedOutParameter = updateCmd.CreateParameter();                                  isLockedOutParameter.Value = true;                                  isLockedOutParameter.DbType = DbType.Boolean;                                  updateCmd.Parameters.Add(isLockedOutParameter);                                  IDbDataParameter lastLockedOutDateParameter = updateCmd.CreateParameter();                                  lastLockedOutDateParameter.Value = DateTime.Now;                                  lastLockedOutDateParameter.DbType = DbType.DateTime;                                  updateCmd.Parameters.Add(lastLockedOutDateParameter);                                    IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                                  updateUsernameParameter.Value = username;                                  updateUsernameParameter.DbType = DbType.String;                                  updateCmd.Parameters.Add(updateUsernameParameter);                                    updateCmd.Parameters.Add(applicationNameParameter);                                      if (cmd.ExecuteNonQuery() < 0)                                      throw new ProviderException("Unable to lock out user.");                              }                          }                          else                          {                              // Password attempts have not exceeded the failure threshold. Update                              // the failure counts. Leave the window the same.                              using (DbCommand updateCmd = conn.CreateCommand())                              {                                  if (failureType == "password")                                      updateCmd.CommandText = "UPDATE Users " +                                                              "SET FailedPasswordAttemptCount = ? " +                                                              "WHERE Username = ? AND ApplicationName = ?";                                    if (failureType == "passwordAnswer")                                      updateCmd.CommandText = "UPDATE Users " +                                                              "SET FailedPasswordAnswerAttemptCount = ? " +                                                              "WHERE Username = ? AND ApplicationName = ?";                                    updateCmd.Parameters.Clear();                                  IDbDataParameter countParameter = updateCmd.CreateParameter();                                  countParameter.Value = failureCount;                                  countParameter.DbType = DbType.Int32;                                  updateCmd.Parameters.Add(countParameter);                                  IDbDataParameter updateUsernameParameter = updateCmd.CreateParameter();                                  updateUsernameParameter.Value = username;                                  updateUsernameParameter.DbType = DbType.String;                                  updateCmd.Parameters.Add(updateUsernameParameter);                                    updateCmd.Parameters.Add(applicationNameParameter);                                    if (cmd.ExecuteNonQuery() < 0)                                      throw new ProviderException("Unable to update failure count.");                              }                          }                      }                  }              }              catch (NuoDbSqlException e)              {                  if (WriteExceptionsToEventLog)                  {                      WriteToEventLog(e' "UpdateFailureCount");                        throw new ProviderException(exceptionMessage);                  }                  else                  {                      throw e;                  }              }              finally              {                  if (reader != null) { reader.Close(); }                  conn.Close();              }
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,HexToByte,The following statement contains a magic number: byte[] returnBytes = new byte[hexString.Length / 2];
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,NuoDb.Web.Security,NuoDbMembershipProvider,C:\repos\nuodb_nuodb-dotnet\NuoDb.Web.Security\NuoDbMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                  returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
