Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,Purge,The length of the statement  "                totalMessagesPurged = await PurgeNonSessionEntity(purgeDeadLetterQueueInstead: purgeDeadLetterQueueInstead).ConfigureAwait(false); " is 130.
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeSessionEntity,The following statement contains a magic number: ISessionClient sessionClient = new SessionClient(                  serviceBusHelper.ConnectionString'                   GetEntityPath(deadLetterQueue: false)'                  ReceiveMode.ReceiveAndDelete'                   RetryPolicy.Default'                   prefetchCount: 10);
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeSessionEntity,The following statement contains a magic number: const int enoughZeroReceives = 3;
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeSessionEntity,The following statement contains a magic number: var messages = await session.ReceiveAsync(1000' TimeSpan.FromMilliseconds(1000))                                                      .ConfigureAwait(false);
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeSessionEntity,The following statement contains a magic number: var messages = await session.ReceiveAsync(1000' TimeSpan.FromMilliseconds(1000))                                                      .ConfigureAwait(false);
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,PurgeNonSessionEntity,The following statement contains a magic number: purgedMessagesCount < messagesToPurgeCount && messageCount >= 1 && retries < 3
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: var taskCount = Math.Min((int)messagesToPurgeCount / 1000 + 1' 20);
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: var taskCount = Math.Min((int)messagesToPurgeCount / 1000 + 1' 20);
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: tasks[taskIndex] = Task.Run(async () =>                  {                      ClientEntity receiver;                        receiver = new MessageReceiver(serviceBusHelper.ConnectionString' entityPath'                          ReceiveMode.ReceiveAndDelete' RetryPolicy.Default' prefetchCount: 50);                        try                      {                          var consecutiveZeroBatchReceives = 0;                          const int enoughZeroBatchReceives = 3;                            while (!quit && Interlocked.Read(ref totalMessagesPurged) < messagesToPurgeCount)                          {                              IEnumerable<Message> messages;                                messages = await ((MessageReceiver)receiver).ReceiveAsync(1000'                                 TimeSpan.FromMilliseconds(20000 * (consecutiveZeroBatchReceives + 1)))                                 .ConfigureAwait(false);                                // ReSharper disable once PossibleMultipleEnumeration                              if (messages != null && messages.Any())                              {                                  // ReSharper disable once PossibleMultipleEnumeration                                  long messageCount = messages.Count();                                  Interlocked.Add(ref totalMessagesPurged' messageCount);                              }                              else                              {                                  ++consecutiveZeroBatchReceives;                                  if (consecutiveZeroBatchReceives >= enoughZeroBatchReceives)                                      quit = true;                              }                          }                      }                      finally                      {                          await receiver.CloseAsync().ConfigureAwait(false);                      }                  });
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: tasks[taskIndex] = Task.Run(async () =>                  {                      ClientEntity receiver;                        receiver = new MessageReceiver(serviceBusHelper.ConnectionString' entityPath'                          ReceiveMode.ReceiveAndDelete' RetryPolicy.Default' prefetchCount: 50);                        try                      {                          var consecutiveZeroBatchReceives = 0;                          const int enoughZeroBatchReceives = 3;                            while (!quit && Interlocked.Read(ref totalMessagesPurged) < messagesToPurgeCount)                          {                              IEnumerable<Message> messages;                                messages = await ((MessageReceiver)receiver).ReceiveAsync(1000'                                 TimeSpan.FromMilliseconds(20000 * (consecutiveZeroBatchReceives + 1)))                                 .ConfigureAwait(false);                                // ReSharper disable once PossibleMultipleEnumeration                              if (messages != null && messages.Any())                              {                                  // ReSharper disable once PossibleMultipleEnumeration                                  long messageCount = messages.Count();                                  Interlocked.Add(ref totalMessagesPurged' messageCount);                              }                              else                              {                                  ++consecutiveZeroBatchReceives;                                  if (consecutiveZeroBatchReceives >= enoughZeroBatchReceives)                                      quit = true;                              }                          }                      }                      finally                      {                          await receiver.CloseAsync().ConfigureAwait(false);                      }                  });
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: tasks[taskIndex] = Task.Run(async () =>                  {                      ClientEntity receiver;                        receiver = new MessageReceiver(serviceBusHelper.ConnectionString' entityPath'                          ReceiveMode.ReceiveAndDelete' RetryPolicy.Default' prefetchCount: 50);                        try                      {                          var consecutiveZeroBatchReceives = 0;                          const int enoughZeroBatchReceives = 3;                            while (!quit && Interlocked.Read(ref totalMessagesPurged) < messagesToPurgeCount)                          {                              IEnumerable<Message> messages;                                messages = await ((MessageReceiver)receiver).ReceiveAsync(1000'                                 TimeSpan.FromMilliseconds(20000 * (consecutiveZeroBatchReceives + 1)))                                 .ConfigureAwait(false);                                // ReSharper disable once PossibleMultipleEnumeration                              if (messages != null && messages.Any())                              {                                  // ReSharper disable once PossibleMultipleEnumeration                                  long messageCount = messages.Count();                                  Interlocked.Add(ref totalMessagesPurged' messageCount);                              }                              else                              {                                  ++consecutiveZeroBatchReceives;                                  if (consecutiveZeroBatchReceives >= enoughZeroBatchReceives)                                      quit = true;                              }                          }                      }                      finally                      {                          await receiver.CloseAsync().ConfigureAwait(false);                      }                  });
Magic Number,Microsoft.Azure.ServiceBusExplorer.ServiceBus.Helpers,ServiceBusPurger,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\ServiceBus\Helpers\ServiceBusPurger.cs,DoPurgeNonSessionEntity,The following statement contains a magic number: tasks[taskIndex] = Task.Run(async () =>                  {                      ClientEntity receiver;                        receiver = new MessageReceiver(serviceBusHelper.ConnectionString' entityPath'                          ReceiveMode.ReceiveAndDelete' RetryPolicy.Default' prefetchCount: 50);                        try                      {                          var consecutiveZeroBatchReceives = 0;                          const int enoughZeroBatchReceives = 3;                            while (!quit && Interlocked.Read(ref totalMessagesPurged) < messagesToPurgeCount)                          {                              IEnumerable<Message> messages;                                messages = await ((MessageReceiver)receiver).ReceiveAsync(1000'                                 TimeSpan.FromMilliseconds(20000 * (consecutiveZeroBatchReceives + 1)))                                 .ConfigureAwait(false);                                // ReSharper disable once PossibleMultipleEnumeration                              if (messages != null && messages.Any())                              {                                  // ReSharper disable once PossibleMultipleEnumeration                                  long messageCount = messages.Count();                                  Interlocked.Add(ref totalMessagesPurged' messageCount);                              }                              else                              {                                  ++consecutiveZeroBatchReceives;                                  if (consecutiveZeroBatchReceives >= enoughZeroBatchReceives)                                      quit = true;                              }                          }                      }                      finally                      {                          await receiver.CloseAsync().ConfigureAwait(false);                      }                  });
