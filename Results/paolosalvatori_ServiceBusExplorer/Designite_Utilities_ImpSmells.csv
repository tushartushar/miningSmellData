Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,ConversionHelper,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\ConversionHelper.cs,MapEDMTypeToCLRType,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,ConversionHelper,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\ConversionHelper.cs,MapStringTypeToCLRType,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,TimeFilterInfo,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\TimeFilterInfo.cs,Adjust,Cyclomatic complexity of the method is 10
Long Statement,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,GitHubReleaseProvider,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\GitHubReleaseProvider.cs,GetServiceBusClientLatestVersion,The length of the statement  "                    responseBody = await client.GetStringAsync("https://api.github.com/repos/paolosalvatori/ServiceBusExplorer/releases/latest") " is 124.
Long Statement,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,JsonSerializerHelper,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\JsonSerializerHelper.cs,Indent,The length of the statement  "                    .SerializeObject(JsonConvert.DeserializeObject(json.Replace("$type"' "%%$type%%")' serializerSettings)' Formatting.Indented) " is 124.
Missing Default,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,ConversionHelper,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\ConversionHelper.cs,MapEDMTypeToCLRType,The following switch statement is missing a default case: switch (type)              {                  case "Edm.String":                      return value;                  case "Edm.Byte":                      return Convert.ChangeType(value' typeof(byte));                  case "Edm.SByte":                      return Convert.ChangeType(value' typeof(sbyte));                  case "Edm.Int16":                      return Convert.ChangeType(value' typeof(short));                  case "Edm.Int32":                      return Convert.ChangeType(value' typeof(int));                  case "Edm.Int64":                      return Convert.ChangeType(value' typeof(long));                  case "Edm.Single":                      return Convert.ChangeType(value' typeof(float));                  case "Edm.Double":                      return Convert.ChangeType(value' typeof(double));                  case "Edm.Boolean":                      return Convert.ChangeType(value' typeof(bool));                  case "Edm.Decimal":                      return Convert.ChangeType(value' typeof(decimal));                  case "Edm.DateTime":                      return XmlConvert.ToDateTime(value' XmlDateTimeSerializationMode.RoundtripKind);                  case "Edm.Binary":                      return Convert.FromBase64String(value);                  case "Edm.Guid":                      return new Guid(value);              }
Missing Default,Microsoft.Azure.ServiceBusExplorer.Utilities.Helpers,ConversionHelper,C:\research\architectureSmells\repos\paolosalvatori_ServiceBusExplorer\src\Utilities\Helpers\ConversionHelper.cs,MapStringTypeToCLRType,The following switch statement is missing a default case: switch (type)              {                  case "String":                      var s = value as string;                      return s != null ? s.Trim() : null;                  case "Byte":                      return Convert.ChangeType(value' typeof(byte));                  case "Int16":                      return Convert.ChangeType(value' typeof(short));                  case "Int32":                      return Convert.ChangeType(value' typeof(int));                  case "Int64":                      return Convert.ChangeType(value' typeof(long));                  case "Single":                      return Convert.ChangeType(value' typeof(float));                  case "Double":                      return Convert.ChangeType(value' typeof(double));                  case "Boolean":                      return Convert.ChangeType(value' typeof(bool));                  case "Decimal":                      return Convert.ChangeType(value' typeof(decimal));                  case "DateTime":                      return Convert.ChangeType(value' typeof(DateTime));                  case "TimeSpan":                      if (value is TimeSpan t) return t;                      if (value is string st) return TimeSpan.Parse(st' CultureInfo.InvariantCulture);                      return TimeSpan.Parse((string)value);                  case "Guid":                      return new Guid(value.ToString());              }
