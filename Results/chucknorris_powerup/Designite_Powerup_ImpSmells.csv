Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,Cyclomatic complexity of the method is 9
Complex Method,Powerup.Commandline.Options,StringCoda,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,CreateWrappedLinesIterator,Cyclomatic complexity of the method is 8
Complex Method,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,Powerup.Commandline.Options,ArgumentSource,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,GetArguments,Cyclomatic complexity of the method is 9
Complex Method,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 9
Complex Method,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Complex Method,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,Cyclomatic complexity of the method is 10
Long Parameter List,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,GetOptionParts,The method has 5 parameters.
Long Parameter List,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteDescription,The method has 5 parameters.
Long Statement,Powerup,Program,F:\newReposMay17\chucknorris_powerup\src\Powerup\Program.cs,ParseCommandLineOptions,The length of the statement  "	var optionSet = new OptionSet ().Add ("?|h|help"' ShowHelp).Add ("d=|database="' "Specify the name of a database to use."' o => configuration.ConnectionStringBuilder.InitialCatalog = o).Add ("s=|server="' "Specify the name of a server to use."' o => configuration.ConnectionStringBuilder.DataSource = o).Add ("o=|output="' "The location to write the generated files."' o => configuration.OutputFolder = o).Add ("t=|trusted="' "Whether connection uses integrated security or not."' o => configuration.ConnectionStringBuilder.IntegratedSecurity = bool.Parse (o)).Add ("u=|username="' "Database username."' o => configuration.ConnectionStringBuilder.UserID = o).Add ("p=|password="' "Database password"' o => configuration.ConnectionStringBuilder.Password = o); " is 758.
Long Statement,Powerup.Commandline.Options,StringCoda,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,GetNextWidth,The length of the statement  "			throw new ArgumentOutOfRangeException ("widths"' string.Format ("Element must be >= {0}' was {1}."' minWidth.Length' curWidth)); " is 128.
Long Statement,Powerup.Commandline.Options,OptionValueCollection,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Parse,The length of the statement  "	bool nullable = tt.IsValueType && tt.IsGenericType && !tt.IsGenericTypeDefinition && tt.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' c.Option.MaxValueCount - c.OptionValues.Count' StringSplitOptions.None) : new string[] { " is 184.
Long Statement,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Long Statement,Powerup.Output,FileWriter,F:\newReposMay17\chucknorris_powerup\src\Powerup\Output\FileWriter.cs,CleanFileName,The length of the statement  "	return Path.GetInvalidFileNameChars ().Aggregate (fileName' (current' c) => current.Replace (c.ToString ()' string.Empty)); " is 123.
Long Statement,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The length of the statement  "			buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema); " is 139.
Long Statement,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The length of the statement  "			buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))"); " is 167.
Long Statement,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The length of the statement  "				buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name))); " is 120.
Complex Conditional,Powerup.Commandline.Options,Option,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: using (var con = conn.ConnectionStringBuilder.CreateConnection ()) {  	con.Open ();  	foreach (var type in _typesToFind) {  		using (var cmd = new SqlCommand (type.NameSql' con)) {  			using (var reader = cmd.ExecuteReader ()) {  				if (!reader.HasRows)  					return;  				while (reader.Read ()) {  					_sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  				}  			}  		}  	}  }  
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: foreach (var type in _typesToFind) {  	using (var cmd = new SqlCommand (type.NameSql' con)) {  		using (var reader = cmd.ExecuteReader ()) {  			if (!reader.HasRows)  				return;  			while (reader.Read ()) {  				_sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  			}  		}  	}  }  
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: using (var cmd = new SqlCommand (type.NameSql' con)) {  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			_sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  		}  	}  }  
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		_sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  	}  }  
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: while (reader.Read ()) {  	_sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  }  
Magic Number,Powerup,Application,F:\newReposMay17\chucknorris_powerup\src\Powerup\Application.cs,BuildEntities,The following statement contains a magic number: _sqlObject.Add (type.MakeSqlObject (con.Database' reader [1].ToString ()' reader [0].ToString ()' (int)reader [2]));  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  	string[] names = s.GetNames ();  	if (names == null || names.Length == 0)  		continue;  	int written = 0;  	Write (o' ref written' "  ");  	Write (o' ref written' names [0]);  	for (int i = 1; i < names.Length; ++i) {  		Write (o' ref written' "' ");  		Write (o' ref written' names [i]);  	}  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT ind.index_id AS IndexId 'ind.name AS IndexName 'col.name AS ColumnName 't.name AS TableName 's.name AS SchemaName 'ic.index_column_id AS ColumnId 'ind.is_unique AS IsUnique 'ind.type_desc as Type 'ind.has_filter AS HasFilter 'ind.filter_definition AS FilterDefinition 'ic.is_descending_key AS IsDescending 'ic.is_included_column AS IsIncluded FROM sys.indexes ind  JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id  JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id  JOIN sys.tables t ON ind.object_id = t.object_id  JOIN sys.schemas s ON t.schema_id = s.schema_id WHERE ind.name = @NAME   AND ind.object_id = @ID ORDER BY TableName 'IndexId 'ColumnId"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (index == null) {  				var tbl = new SysTable {  					Name = reader [3].ToString ()'  					Schema = reader [4].ToString ()  				};  				index = new SysIndex {  					Id = Convert.ToInt32 (reader [0])'  					Name = reader [1].ToString ()'  					Table = tbl'  					Type = reader [7].ToString ()'  					IsUnique = Convert.ToBoolean (reader [6])'  					HasFilter = Convert.ToBoolean (reader [8])'  					FilterDefinition = Convert.ToString (reader [9])  				};  			}  			index.Columns.Add (new SysIndexColumn {  				Id = Convert.ToInt32 (reader [5])'  				Name = Convert.ToString (reader [2])'  				IsDescending = Convert.ToBoolean (reader [10])'  				IsIncluded = Convert.ToBoolean (reader [11])'  			});  		}  		var buffer = new StringBuilder ();  		buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  		buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  		buffer.AppendLine ();  		buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  		buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  		buffer.AppendLine ();  		buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  		buffer.AppendLine ("GO");  		buffer.AppendLine ();  		buffer.Append (@"CREATE");  		if (index.IsUnique) {  			buffer.Append (" UNIQUE");  		}  		buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  		buffer.AppendLine ();  		buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  		buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  			if (c.IsDescending) {  				return c.Name + " DESC";  			}  			return c.Name;  		})));  		if (index.Columns.Any (c => c.IsIncluded)) {  			buffer.AppendLine ();  			buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  		}  		if (index.HasFilter) {  			buffer.AppendLine ();  			buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  		}  		obj.Code += buffer.ToString ();  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (index == null) {  			var tbl = new SysTable {  				Name = reader [3].ToString ()'  				Schema = reader [4].ToString ()  			};  			index = new SysIndex {  				Id = Convert.ToInt32 (reader [0])'  				Name = reader [1].ToString ()'  				Table = tbl'  				Type = reader [7].ToString ()'  				IsUnique = Convert.ToBoolean (reader [6])'  				HasFilter = Convert.ToBoolean (reader [8])'  				FilterDefinition = Convert.ToString (reader [9])  			};  		}  		index.Columns.Add (new SysIndexColumn {  			Id = Convert.ToInt32 (reader [5])'  			Name = Convert.ToString (reader [2])'  			IsDescending = Convert.ToBoolean (reader [10])'  			IsIncluded = Convert.ToBoolean (reader [11])'  		});  	}  	var buffer = new StringBuilder ();  	buffer.AppendLine (@"DECLARE @Name nvarchar(128)' @TableName nvarchar(128)' @TableSchema nvarchar(128)");  	buffer.AppendFormat (@"SELECT @Name = N'{0}'' @TableName=N'{1}'' @TableSchema = N'{2}'"' index.Name' index.Table.Name' index.Table.Schema);  	buffer.AppendLine ();  	buffer.AppendLine ("IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('[' + @TableSchema + '].[' + @TableName + ']') AND UPPER(name) = UPPER(@Name))");  	buffer.AppendLine ("    EXECUTE('DROP INDEX [' + @Name + '] ON [' + @TableSchema + '].[' + @TableName + ']')");  	buffer.AppendLine ();  	buffer.AppendLine (@"PRINT 'Creating index [' + @Name + '] on table [' + @TableSchema + '].[' + @TableName + ']'");  	buffer.AppendLine ("GO");  	buffer.AppendLine ();  	buffer.Append (@"CREATE");  	if (index.IsUnique) {  		buffer.Append (" UNIQUE");  	}  	buffer.AppendFormat (" {0} INDEX [{1}]"' index.Type' index.Name);  	buffer.AppendLine ();  	buffer.AppendFormat ("ON [{0}].[{1}]"' index.Table.Schema' index.Table.Name);  	buffer.AppendFormat ("({0})"' string.Join ("' "' index.Columns.Where (c => !c.IsIncluded).Select (c => {  		if (c.IsDescending) {  			return c.Name + " DESC";  		}  		return c.Name;  	})));  	if (index.Columns.Any (c => c.IsIncluded)) {  		buffer.AppendLine ();  		buffer.AppendFormat ("INCLUDE ({0})"' string.Join ("' "' index.Columns.Where (c => c.IsIncluded).Select (c => c.Name)));  	}  	if (index.HasFilter) {  		buffer.AppendLine ();  		buffer.AppendFormat ("WHERE {0}"' index.FilterDefinition);  	}  	obj.Code += buffer.ToString ();  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (index == null) {  		var tbl = new SysTable {  			Name = reader [3].ToString ()'  			Schema = reader [4].ToString ()  		};  		index = new SysIndex {  			Id = Convert.ToInt32 (reader [0])'  			Name = reader [1].ToString ()'  			Table = tbl'  			Type = reader [7].ToString ()'  			IsUnique = Convert.ToBoolean (reader [6])'  			HasFilter = Convert.ToBoolean (reader [8])'  			FilterDefinition = Convert.ToString (reader [9])  		};  	}  	index.Columns.Add (new SysIndexColumn {  		Id = Convert.ToInt32 (reader [5])'  		Name = Convert.ToString (reader [2])'  		IsDescending = Convert.ToBoolean (reader [10])'  		IsIncluded = Convert.ToBoolean (reader [11])'  	});  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: if (index == null) {  	var tbl = new SysTable {  		Name = reader [3].ToString ()'  		Schema = reader [4].ToString ()  	};  	index = new SysIndex {  		Id = Convert.ToInt32 (reader [0])'  		Name = reader [1].ToString ()'  		Table = tbl'  		Type = reader [7].ToString ()'  		IsUnique = Convert.ToBoolean (reader [6])'  		HasFilter = Convert.ToBoolean (reader [8])'  		FilterDefinition = Convert.ToString (reader [9])  	};  }  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index = new SysIndex {  	Id = Convert.ToInt32 (reader [0])'  	Name = reader [1].ToString ()'  	Table = tbl'  	Type = reader [7].ToString ()'  	IsUnique = Convert.ToBoolean (reader [6])'  	HasFilter = Convert.ToBoolean (reader [8])'  	FilterDefinition = Convert.ToString (reader [9])  };  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index = new SysIndex {  	Id = Convert.ToInt32 (reader [0])'  	Name = reader [1].ToString ()'  	Table = tbl'  	Type = reader [7].ToString ()'  	IsUnique = Convert.ToBoolean (reader [6])'  	HasFilter = Convert.ToBoolean (reader [8])'  	FilterDefinition = Convert.ToString (reader [9])  };  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index = new SysIndex {  	Id = Convert.ToInt32 (reader [0])'  	Name = reader [1].ToString ()'  	Table = tbl'  	Type = reader [7].ToString ()'  	IsUnique = Convert.ToBoolean (reader [6])'  	HasFilter = Convert.ToBoolean (reader [8])'  	FilterDefinition = Convert.ToString (reader [9])  };  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index = new SysIndex {  	Id = Convert.ToInt32 (reader [0])'  	Name = reader [1].ToString ()'  	Table = tbl'  	Type = reader [7].ToString ()'  	IsUnique = Convert.ToBoolean (reader [6])'  	HasFilter = Convert.ToBoolean (reader [8])'  	FilterDefinition = Convert.ToString (reader [9])  };  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index.Columns.Add (new SysIndexColumn {  	Id = Convert.ToInt32 (reader [5])'  	Name = Convert.ToString (reader [2])'  	IsDescending = Convert.ToBoolean (reader [10])'  	IsIncluded = Convert.ToBoolean (reader [11])'  });  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index.Columns.Add (new SysIndexColumn {  	Id = Convert.ToInt32 (reader [5])'  	Name = Convert.ToString (reader [2])'  	IsDescending = Convert.ToBoolean (reader [10])'  	IsIncluded = Convert.ToBoolean (reader [11])'  });  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index.Columns.Add (new SysIndexColumn {  	Id = Convert.ToInt32 (reader [5])'  	Name = Convert.ToString (reader [2])'  	IsDescending = Convert.ToBoolean (reader [10])'  	IsIncluded = Convert.ToBoolean (reader [11])'  });  
Magic Number,Powerup.SqlQueries,IndexQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\IndexQuery.cs,AddCode,The following statement contains a magic number: index.Columns.Add (new SysIndexColumn {  	Id = Convert.ToInt32 (reader [5])'  	Name = Convert.ToString (reader [2])'  	IsDescending = Convert.ToBoolean (reader [10])'  	IsIncluded = Convert.ToBoolean (reader [11])'  });  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var cmd = new SqlCommand (@"SELECT  seq.name ' 		t.name '         is_cached ' 		is_cycling ' 		increment ' 		maximum_value ' 		minimum_value ' 		start_value   		FROM sys.sequences AS seq 		JOIN Sys.types t ON seq.user_type_id = t.user_type_id WHERE seq.name = @NAME AND object_id = @ID"' connection)) {  	cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  	cmd.Parameters.Add ("@ID"' SqlDbType.Int);  	cmd.Parameters ["@NAME"].Value = obj.Name;  	cmd.Parameters ["@ID"].Value = obj.ObjectId;  	using (var reader = cmd.ExecuteReader ()) {  		if (!reader.HasRows)  			return;  		while (reader.Read ()) {  			if (sequence == null) {  				sequence = new SysSequence {  					Name = '  					UserTypeId = '  					Cache = (bool)reader [2]'  					Cycle = (bool)reader [3]'  					Increment = Convert.ToInt32 (reader [4])'  					MaxValue = reader [5].ToString ()'  					MinValue = reader [6].ToString ()'  					StartWith = Convert.ToInt32 (reader [7])  				};  			}  		}  		string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  		obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  		obj.AddCodeTemplate ();  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: cmd.Parameters.Add ("@NAME"' SqlDbType.NVarChar' 128);  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	if (!reader.HasRows)  		return;  	while (reader.Read ()) {  		if (sequence == null) {  			sequence = new SysSequence {  				Name = '  				UserTypeId = '  				Cache = (bool)reader [2]'  				Cycle = (bool)reader [3]'  				Increment = Convert.ToInt32 (reader [4])'  				MaxValue = reader [5].ToString ()'  				MinValue = reader [6].ToString ()'  				StartWith = Convert.ToInt32 (reader [7])  			};  		}  	}  	string codeSequence = @"CREATE SEQUENCE [dbo].[{sequence.Name}]          AS {sequence.UserTypeId}          START WITH {sequence.StartWith}         INCREMENT BY {sequence.Increment}         MINVALUE {sequence.MinValue}         MAXVALUE {sequence.MaxValue}         {sequence.StrCache}         {sequence.StrCycle}";  	obj.Code = string.Format (scriptValidation' obj.Name' codeSequence);  	obj.AddCodeTemplate ();  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: while (reader.Read ()) {  	if (sequence == null) {  		sequence = new SysSequence {  			Name = '  			UserTypeId = '  			Cache = (bool)reader [2]'  			Cycle = (bool)reader [3]'  			Increment = Convert.ToInt32 (reader [4])'  			MaxValue = reader [5].ToString ()'  			MinValue = reader [6].ToString ()'  			StartWith = Convert.ToInt32 (reader [7])  		};  	}  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: if (sequence == null) {  	sequence = new SysSequence {  		Name = '  		UserTypeId = '  		Cache = (bool)reader [2]'  		Cycle = (bool)reader [3]'  		Increment = Convert.ToInt32 (reader [4])'  		MaxValue = reader [5].ToString ()'  		MinValue = reader [6].ToString ()'  		StartWith = Convert.ToInt32 (reader [7])  	};  }  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Magic Number,Powerup.SqlQueries,SequenceQuery,F:\newReposMay17\chucknorris_powerup\src\Powerup\SqlQueries\SequenceQuery.cs,AddCode,The following statement contains a magic number: sequence = new SysSequence {  	Name = '  	UserTypeId = '  	Cache = (bool)reader [2]'  	Cycle = (bool)reader [3]'  	Increment = Convert.ToInt32 (reader [4])'  	MaxValue = reader [5].ToString ()'  	MinValue = reader [6].ToString ()'  	StartWith = Convert.ToInt32 (reader [7])  };  
Missing Default,Powerup.Commandline.Options,OptionSet,F:\newReposMay17\chucknorris_powerup\src\Powerup\Commandline.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
