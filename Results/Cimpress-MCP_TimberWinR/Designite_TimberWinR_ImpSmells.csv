Implementation smell,Namespace,Class,File,Method,Description
Long Method,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,ProcessConfiguration,The method has 134 lines of code.
Long Method,TimberWinR.Inputs,LogsListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\LogsListener.cs,FileWatcher,The method has 145 lines of code.
Long Method,TimberWinR.Outputs,RedisOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Redis.cs,RedisSender,The method has 108 lines of code.
Complex Method,TimberWinR,Configuration,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Configuration.cs,FromString,Cyclomatic complexity of the method is 19
Complex Method,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,ProcessConfiguration,Cyclomatic complexity of the method is 32
Complex Method,TimberWinR.Parser,Grok,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GrokFilter.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,TimberWinR.Parser,Json,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\JsonFilter.cs,Apply,Cyclomatic complexity of the method is 12
Long Parameter List,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,Manager,The method has 6 parameters. Parameters: jsonConfigFile' logLevel' logfileDir' liveMonitor' cancelToken' processConfiguration
Long Parameter List,TimberWinR.Outputs,ElasticsearchOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Elasticsearch.cs,ComposeUri,The method has 5 parameters. Parameters: host' port' ssl' username' password
Long Parameter List,TimberWinR.Outputs,ElasticsearchOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Elasticsearch.cs,transmitBulkData,The method has 6 parameters. Parameters: bulkItems' bulkIndexName' bulkTypeName' client' lastFlushTime' messages
Long Statement,TimberWinR,Configuration,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Configuration.cs,MonitorDirectory,The length of the statement  "                _dirWatcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName; " is 133.
Long Statement,TimberWinR.Diagnostics,Diagnostics,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Diagnostics\Diagnostics.cs,HandleNewClient,The length of the statement  "            //     Console.WriteLine("Handle new diag client: {0}' {1}"' tcpClient.Connected' tcpClient.Client.RemoteEndPoint.ToString()); " is 126.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileContents,The length of the statement  "            LogManager.GetCurrentClassLogger().Trace(":{0} Tailing File: {1} as Pos: {2}"' Thread.CurrentThread.ManagedThreadId' fileName' prevLen); " is 136.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileContents,The length of the statement  "            using (var stream = new FileStream(fi.FullName' FileMode.Open' FileAccess.Read' FileShare.Delete | FileShare.ReadWrite)) " is 120.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileContents,The length of the statement  "                                    //LogManager.GetCurrentClassLogger().Debug(":{0} File: {1}:{2}  {3}"' Thread.CurrentThread.ManagedThreadId' fileName' dbe.LinesProcessed' line); " is 144.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileWatcher,The length of the statement  "                            LogManager.GetCurrentClassLogger().Trace(":{0} Tailing File: {1}"' Thread.CurrentThread.ManagedThreadId' Path.Combine(path' name)); " is 131.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileWatcher,The length of the statement  "                                    LogManager.GetCurrentClassLogger().Debug(":{0} Starting Thread Tailing File: {1}"' Thread.CurrentThread.ManagedThreadId' dbe.FileName); " is 135.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileWatcher,The length of the statement  "                                        LogManager.GetCurrentClassLogger().Info("{0}: Log has Rolled: {1}"' Thread.CurrentThread.ManagedThreadId' dbe.FileName); " is 120.
Long Statement,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileWatcher,The length of the statement  "                                        LogManager.GetCurrentClassLogger().Debug("{0}: Process Whole File: {1}"' Thread.CurrentThread.ManagedThreadId' dbe.FileName); " is 125.
Long Statement,TimberWinR.Inputs,InputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\InputListener.cs,Finished,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("{0}: Signalling Event Shutdown {1}"' Thread.CurrentThread.ManagedThreadId' InputType); " is 127.
Long Statement,TimberWinR.Inputs,InputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\InputListener.cs,Finished,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("{0}: Finished signalling Shutdown {1}"' Thread.CurrentThread.ManagedThreadId' InputType); " is 130.
Long Statement,TimberWinR.Inputs,InputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\InputListener.cs,EnsureRollingCaught,The length of the statement  "                    Microsoft.Win32.Registry.LocalMachine.CreateSubKey(mteKey).SetValue("MaximumTunnelEntries"' 0' RegistryValueKind.DWord); " is 120.
Long Statement,TimberWinR.Inputs,InputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\InputListener.cs,EnsureRollingCaught,The length of the statement  "                          "HKLM\\{0}\\MaximumTunnelEntries is now set to 0' A reboot is now required to fix this issue.  See http://support.microsoft.com/en-us/kb/172190 for details"' " is 157.
Long Statement,TimberWinR.Outputs,ElasticsearchOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Elasticsearch.cs,ComposeUri,The length of the statement  "                ? new Uri(string.Format("https://{0}:{1}@{2}:{3}"' Uri.EscapeDataString(username)' Uri.EscapeDataString(password)' host' port)) " is 127.
Long Statement,TimberWinR.Outputs,RedisOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Redis.cs,ToString,The length of the statement  "            return string.Format("Redis Host: {0} Port: {1}' Threads: {2}' Interval: {3}' BatchCount: {4}"' string.Join("'"' _redisHosts)' _port' _numThreads' _interval' _batchCount); " is 171.
Long Statement,TimberWinR.Outputs,RedisOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Redis.cs,RedisSender,The length of the statement  "                                LogManager.GetCurrentClassLogger().Trace("{0}: Average Queue Depth: {1}' Current Length: {2}"' Thread.CurrentThread.ManagedThreadId' _batchCounter.AverageQueueDepth()' _jsonQueue.Count);  " is 186.
Empty Catch Block,TimberWinR.Diagnostics,Diagnostics,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Diagnostics\Diagnostics.cs,DiagnosticCallback,The method has an empty catch block.
Empty Catch Block,TimberWinR.Diagnostics,Diagnostics,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Diagnostics\Diagnostics.cs,HttpListen,The method has an empty catch block.
Empty Catch Block,TimberWinR.Diagnostics,Diagnostics,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Diagnostics\Diagnostics.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,TimberWinR.Inputs,TcpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TcpInputListener.cs,HandleNewClient,The method has an empty catch block.
Empty Catch Block,TimberWinR.Inputs,LogsListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\LogsListener.cs,FileWatcher,The method has an empty catch block.
Empty Catch Block,TimberWinR.Outputs,FileOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\File.cs,FileSender,The method has an empty catch block.
Empty Catch Block,TimberWinR.Outputs,StdoutOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Stdout.cs,StdoutSender,The method has an empty catch block.
Magic Number,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR"' "TimberWinR.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR_log-{#######}.log")'              };
Magic Number,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR"' "TimberWinR.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR_log-{#######}.log")'              };
Magic Number,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR"' "TimberWinR.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR_log-{#######}.log")'              };
Magic Number,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR"' "TimberWinR.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR_log-{#######}.log")'              };
Magic Number,TimberWinR,Manager,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Manager.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR"' "TimberWinR.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR_log-{#######}.log")'              };
Magic Number,TimberWinR.Parser,DateFilter,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\DateFilter.cs,Validate,The following statement contains a magic number: if (Match == null || Match.Length < 2)                  throw new DateFilterMatchException();
Magic Number,TimberWinR.Parser,Grok,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GrokFilter.cs,Matches,The following statement contains a magic number: for (int i = 0; i < Match.Length; i += 2)              {                  string field = Match[i];                  string expr = Match[i + 1];                    JToken token = null;                  if (json.TryGetValue(field' out token))                  {                      string text = token.ToString();                      if (!string.IsNullOrEmpty(text))                      {                          var resolver = new RegexGrokResolver();                          var pattern = resolver.ResolveToRegex(expr);                          var match = Regex.Match(text' pattern);                          if (match.Success)                          {                              var regex = new Regex(pattern);                              var namedCaptures = regex.MatchNamedCaptures(text);                              foreach (string fieldName in namedCaptures.Keys)                              {                                  AddOrModify(json' fieldName' namedCaptures[fieldName]);                              }                              return true; // Yes!                          }                      }                      if (string.IsNullOrEmpty(expr))                          return true; // Empty field is no match                                   }              }
Magic Number,TimberWinR.Parser,Grok,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GrokFilter.cs,AddFields,The following statement contains a magic number: if (AddField != null && AddField.Length > 0)              {                  for (int i = 0; i < AddField.Length; i += 2)                  {                      string fieldName = ExpandField(AddField[i]' json);                      string fieldValue = ExpandField(AddField[i + 1]' json);                      AddOrModify(json' fieldName' fieldValue);                  }              }
Magic Number,TimberWinR.Parser,Grok,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GrokFilter.cs,Validate,The following statement contains a magic number: if (Match == null || Match.Length % 2 != 0)                  throw new GrokFilterException();
Magic Number,TimberWinR.Parser,Grok,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GrokFilter.cs,Validate,The following statement contains a magic number: if (AddTag != null && AddTag.Length % 2 != 0)                  throw new GrokAddTagException();
Magic Number,TimberWinR.Parser,GeoIP,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GeoIPFilter.cs,AddFields,The following statement contains a magic number: if (AddField != null && AddField.Length > 0)              {                  for (int i = 0; i < AddField.Length; i += 2)                  {                      string fieldName = ExpandField(AddField[i]' json);                      string fieldValue = ExpandField(AddField[i + 1]' json);                      AddOrModify(json' fieldName' fieldValue);                  }              }
Magic Number,TimberWinR.Parser,GeoIP,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\GeoIPFilter.cs,Validate,The following statement contains a magic number: if (AddField != null && AddField.Length % 2 != 0)                  throw new GeoIPAddFieldException();
Magic Number,TimberWinR.Parser,Json,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\JsonFilter.cs,Apply,The following statement contains a magic number: if (!string.IsNullOrEmpty(source.ToString()))              {                  try                  {                      JObject subJson;                        if (Target != null && !string.IsNullOrEmpty(Target))                      {                          subJson = new JObject();                          subJson[Target] = JObject.Parse(source.ToString());                      }                      else                          subJson = JObject.Parse(source.ToString());                        if (!string.IsNullOrEmpty(Promote))                      {                          var promotedJson = subJson[Promote];                          RemoveProperties(subJson' new string[] { Promote });                            subJson.Merge(promotedJson' new JsonMergeSettings                          {                              MergeArrayHandling = MergeArrayHandling.Replace                          });                      }                        json.Merge(subJson' new JsonMergeSettings                      {                          MergeArrayHandling = MergeArrayHandling.Replace                      });                        if (Rename != null && Rename.Length > 0)                      {                          for (int i = 0; i < Rename.Length; i += 2)                          {                              string oldName = ExpandField(Rename[i]' json);                              string newName = ExpandField(Rename[i+1]' json);                              RenameProperty(json' oldName' newName);                          }                      }                        if (RemoveSource)                      {                          RemoveProperties(json' new string[] { Source });                      }                    }                  catch (Exception ex)                  {                      LogManager.GetCurrentClassLogger().Error(ex);                      Interlocked.Increment(ref _errorCount);                      return true;                  }              }
Magic Number,TimberWinR.Parser,Json,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\JsonFilter.cs,AddFields,The following statement contains a magic number: if (AddField != null && AddField.Length > 0)              {                  for (int i = 0; i < AddField.Length; i += 2)                  {                      string fieldName = ExpandField(AddField[i]' json);                      string fieldValue = ExpandField(AddField[i + 1]' json);                      AddOrModify(json' fieldName' fieldValue);                  }              }
Magic Number,TimberWinR.Parser,Json,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\JsonFilter.cs,Validate,The following statement contains a magic number: if (AddField != null && AddField.Length % 2 != 0)                  throw new JsonAddFieldException();
Magic Number,TimberWinR.Parser,Mutate,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\MutateFilter.cs,ApplyRenames,The following statement contains a magic number: if (Rename != null && Rename.Length > 0)               {                   for (int i = 0; i < Rename.Length; i += 2)                   {                       string oldName = ExpandField(Rename[i]' json);                       string newName = ExpandField(Rename[i + 1]' json);                       RenameProperty(json' oldName' newName);                   }               }
Magic Number,TimberWinR.Parser,Mutate,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\MutateFilter.cs,ApplySplits,The following statement contains a magic number: if (Split != null && Split.Length > 0)               {                   for (int i = 0; i < Split.Length; i += 2)                   {                       string fieldName = Split[i];                       string splitChar = Split[i + 1];                         JArray array = null;                       if (json[fieldName] != null)                       {                           string valueToSplit = json[fieldName].ToString();                           string[] values = valueToSplit.Split(new string[] {splitChar}' StringSplitOptions.None);                           foreach (string value in values)                           {                               if (array == null)                                   array = new JArray(value);                               else                                   array.Add(value);                           }                         }                   }               }
Magic Number,TimberWinR.Parser,Mutate,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\MutateFilter.cs,ApplyReplace,The following statement contains a magic number: if (Replace != null && Replace.Length > 0)               {                   for (int i = 0; i < Replace.Length; i += 2)                   {                       string fieldName = Replace[0];                       string replaceValue = ExpandField(Replace[i + 1]' json);                       ReplaceProperty(json' fieldName' replaceValue);                   }               }
Magic Number,TimberWinR.Parser,WindowsEvent,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,WindowsEvent,The following statement contains a magic number: Interval = 60;
Magic Number,TimberWinR.Parser,GeneratorParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,GeneratorParameters,The following statement contains a magic number: Rate = 10;
Magic Number,TimberWinR.Parser,TailFileArguments,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,TailFileArguments,The following statement contains a magic number: Interval = 30;
Magic Number,TimberWinR.Parser,LogParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,LogParameters,The following statement contains a magic number: Interval = 30;
Magic Number,TimberWinR.Parser,TcpParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,TcpParameters,The following statement contains a magic number: Port = 5140;
Magic Number,TimberWinR.Parser,UdpParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,UdpParameters,The following statement contains a magic number: Port = 5142;
Magic Number,TimberWinR.Parser,W3CLogParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,W3CLogParameters,The following statement contains a magic number: DtLines = 10;
Magic Number,TimberWinR.Parser,IISW3CLogParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,IISW3CLogParameters,The following statement contains a magic number: CodePage = -2;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StatsDOutputParameters,The following statement contains a magic number: Port = 8125;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StatsDOutputParameters,The following statement contains a magic number: Interval = 5000;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StatsDOutputParameters,The following statement contains a magic number: FlushSize = 5000;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StatsDOutputParameters,The following statement contains a magic number: IdleFlushTimeInSeconds = 10;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StatsDOutputParameters,The following statement contains a magic number: MaxQueueSize = 50000;
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,Validate,The following statement contains a magic number: if (Gauges != null && Gauges.Length % 2 != 0)                  throw new StatsDGaugeHashException();
Magic Number,TimberWinR.Parser,StatsDOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,Validate,The following statement contains a magic number: if (Counts != null && Counts.Length % 2 != 0)                  throw new StatsDCountHashException();
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: FlushSize = 5000;
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: IdleFlushTimeInSeconds = 10;
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: Port = 9200;
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: Timeout = 10000;
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: Interval = 1000;
Magic Number,TimberWinR.Parser,ElasticsearchOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,ElasticsearchOutputParameters,The following statement contains a magic number: MaxQueueSize = 50000;
Magic Number,TimberWinR.Parser,RedisOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,RedisOutputParameters,The following statement contains a magic number: Port = 6379;
Magic Number,TimberWinR.Parser,RedisOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,RedisOutputParameters,The following statement contains a magic number: Timeout = 10000;
Magic Number,TimberWinR.Parser,RedisOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,RedisOutputParameters,The following statement contains a magic number: BatchCount = 200;
Magic Number,TimberWinR.Parser,RedisOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,RedisOutputParameters,The following statement contains a magic number: Interval = 5000;
Magic Number,TimberWinR.Parser,RedisOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,RedisOutputParameters,The following statement contains a magic number: MaxQueueSize = 50000;
Magic Number,TimberWinR.Parser,StdoutOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,StdoutOutputParameters,The following statement contains a magic number: Interval = 1000;
Magic Number,TimberWinR.Parser,FileOutputParameters,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Parser.cs,FileOutputParameters,The following statement contains a magic number: Interval = 1000;
Magic Number,TimberWinR.Inputs,TailFileListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TailFileListener.cs,TailFileContents,The following statement contains a magic number: const int bufSize = 16535;
Magic Number,TimberWinR.Inputs,UdpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\UdpInputListener.cs,ProcessDataLoop,The following statement contains a magic number: while (!_unprocessedRawData.IsCompleted)              {                  try                  {                      ProcessData(_unprocessedRawData.Take());                  }                  catch (OperationCanceledException)                  {                      // we are shutting down.                      break;                  }                  catch (InvalidOperationException)                  {                      // when the collection is marked as completed                      break;                  }                  catch (Exception ex)                  {                      LogManager.GetCurrentClassLogger().ErrorException("Error while processing data"' ex);                      Thread.Sleep(100);                  }              }
Magic Number,TimberWinR.Inputs,UdpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\UdpInputListener.cs,ApplyFilters,The following statement contains a magic number: if (_arguments.Renames != null)              {                  for (int i=0; i<_arguments.Renames.Length; i += 2)                  {                      var oldName = ExpandField(_arguments.Renames[i]' json);                      var newName = ExpandField(_arguments.Renames[i + 1]' json);                      RenameProperty(json' oldName' newName);                  }              }
Magic Number,TimberWinR.Inputs,UdpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\UdpInputListener.cs,ApplyFilters,The following statement contains a magic number: if (_arguments.AddFields != null)              {                  for (int i = 0; i < _arguments.AddFields.Length; i += 2)                  {                      var fieldName = ExpandField(_arguments.AddFields[i]' json);                      var fieldValue = ExpandField(_arguments.AddFields[i + 1]' json);                      AddOrModify(json' fieldName' fieldValue);                  }              }
Magic Number,TimberWinR.Inputs,StdinListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\StdinListener.cs,Shutdown,The following statement contains a magic number: ThreadPool.QueueUserWorkItem((o) =>              {                  Thread.Sleep(100);                  var hWnd = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;                  PostMessage(hWnd' WM_KEYDOWN' VK_RETURN' 0);              });
Magic Number,TimberWinR.Inputs,TcpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TcpInputListener.cs,ApplyFilters,The following statement contains a magic number: if (_arguments.Renames != null)              {                  for (int i = 0; i < _arguments.Renames.Length; i += 2)                  {                      var oldName = ExpandField(_arguments.Renames[i]' json);                      var newName = ExpandField(_arguments.Renames[i + 1]' json);                      RenameProperty(json' oldName' newName);                  }              }
Magic Number,TimberWinR.Inputs,TcpInputListener,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\TcpInputListener.cs,ApplyFilters,The following statement contains a magic number: if (_arguments.AddFields != null)              {                  for (int i = 0; i < _arguments.AddFields.Length; i += 2)                  {                      var fieldName = ExpandField(_arguments.AddFields[i]' json);                      var fieldValue = ExpandField(_arguments.AddFields[i + 1]' json);                      AddOrModify(json' fieldName' fieldValue);                  }              }
Magic Number,TimberWinR.Outputs,StatsDOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\StatsD.cs,DoGauges,The following statement contains a magic number: for (int i=0; i<_params.Gauges.Length; i += 2)              {                  string metricPath = BuildMetricPath(_params.Gauges[i]' json);                  string gaugeName = ExpandField(_params.Gauges[i + 1]' json);                  int value;                  if (int.TryParse(gaugeName' out value))                  {                      Metrics.Gauge(metricPath' value);                  }              }
Magic Number,TimberWinR.Outputs,StatsDOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\StatsD.cs,DoTimings,The following statement contains a magic number: for (int i = 0; i < _params.Timings.Length; i += 2)              {                  string metricPath = BuildMetricPath(_params.Timings[i]' json);                  string timingName = ExpandField(_params.Timings[i + 1]' json);                  int value;                  if (int.TryParse(timingName' out value))                  {                      Metrics.Timer(metricPath' value' _params.SampleRate);                  }              }
Magic Number,TimberWinR.Outputs,StatsDOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\StatsD.cs,DoCounts,The following statement contains a magic number: for (int i = 0; i < _params.Counts.Length; i += 2)              {                  string metricPath = BuildMetricPath(_params.Counts[i]' json);                  string countName = ExpandField(_params.Counts[i + 1]' json);                  int value;                  if (int.TryParse(countName' out value))                  {                     Metrics.Counter(metricPath' value' _params.SampleRate);                  }              }
Magic Number,TimberWinR.Outputs,BatchCounter,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Redis.cs,UpdateCurrentBatchCount,The following statement contains a magic number: if (currentBatchCount < _maxBatchCount && currentBatchCount < queueSize && avgQueueDepth > currentBatchCount)              {                  currentBatchCount += Math.Max(avgQueueDepth / _batchCount' _batchCount / 5);                  if (currentBatchCount >= _maxBatchCount && !_warnedReachedMax)                  {                      LogManager.GetCurrentClassLogger().Warn("Maximum Batch Count of {0} reached."' currentBatchCount);                      _warnedReachedMax = true; // Only complain when it's reached (1 time' unless reset)                      ReachedMaxBatchCountTimes++;                      currentBatchCount = _maxBatchCount;                  }              }              else // Reset to default              {                  currentBatchCount = _batchCount;                  _warnedReachedMax = false;              }
Magic Number,TimberWinR.Outputs,RedisOutput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Outputs\Redis.cs,RedisOutput,The following statement contains a magic number: if (_maxBatchCount <= _batchCount)                  _maxBatchCount = _batchCount * 10;
Missing Default,TimberWinR.Codecs,Multiline,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Codecs\Multiline.cs,Apply,The following switch statement is missing a default case: switch (_codecArguments.What)              {                  case CodecArguments.WhatType.previous:                      if (isMatch)                      {                          if (_multiline == null)                              _multiline = new List<string>();                            _multiline.Add(msg);                      }                      else // No Match                      {                          if (_multiline != null)                          {                              string single = string.Join("\n"' _multiline.ToArray());                              _multiline = null;                              JObject jo = new JObject();                              jo["message"] = single;                              jo.Add("tags"' new JArray(_codecArguments.MultilineTag));                              listener.AddDefaultFields(jo);                              listener.ProcessJson(jo);                          }                          _multiline = new List<string>();                          _multiline.Add(msg);                      }                      break;                  case CodecArguments.WhatType.next:                      if (isMatch)                      {                          if (_multiline == null)                              _multiline = new List<string>();                          _multiline.Add(msg);                      }                      else // No match                      {                          if (_multiline != null)                          {                              _multiline.Add(msg);                              string single = string.Join("\n"' _multiline.ToArray());                              _multiline = null;                              JObject jo = new JObject();                              jo["message"] = single;                              jo.Add("tags"' new JArray(_codecArguments.MultilineTag));                              listener.AddDefaultFields(jo);                              listener.ProcessJson(jo);                          }                          else                          {                              JObject jo = new JObject();                              jo["message"] = msg;                              listener.AddDefaultFields(jo);                              listener.ProcessJson(jo);                          }                      }                      break;              }
Missing Default,TimberWinR.Filters,FilterBase,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Filters\FilterBase.cs,ParseBoolAttribute,The following switch statement is missing a default case: switch (a.Value)                  {                      case "ON":                      case "true":                          retValue = true;                          break;                        case "OFF":                      case "false":                          retValue = false;                          break;                  }
Missing Default,TimberWinR.Inputs,GeneratorInput,C:\repos\Cimpress-MCP_TimberWinR\TimberWinR\Inputs\GeneratorInput.cs,GeneratorInput,The following switch statement is missing a default case: switch (_params.CodecArguments.Type)                  {                      case CodecArguments.CodecType.json:                          _codec = new JsonCodec(_params.CodecArguments);                          break;                      case CodecArguments.CodecType.multiline:                          _codec = new Multiline(_params.CodecArguments);                          break;                      case CodecArguments.CodecType.plain:                          _codec = new PlainCodec(_params.CodecArguments);                          break;                  }
