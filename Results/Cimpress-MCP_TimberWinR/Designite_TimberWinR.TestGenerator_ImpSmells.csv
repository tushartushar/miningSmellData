Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The method has 122 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,NextToken,The method has 200 lines of code.
Complex Method,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,ResetTests,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseIntegerLiteral,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseAggregate,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 22
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 36
Long Parameter List,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Identifier,System.Linq.Dynamic,Res,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,TimberWinR.TestGenerator,LogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\LogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Start LogFile Generation for: {0} on Thread: {1}"' Path.GetFullPath(parms.LogFileName)' Thread.CurrentThread.ManagedThreadId); " is 167.
Long Statement,TimberWinR.TestGenerator,LogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\LogFileGenerator.cs,Generate,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("Elapsed Time for {0} was {1} seconds"' Path.GetFullPath(parms.LogFileName)' watch.Elapsed); " is 132.
Long Statement,TimberWinR.TestGenerator,LogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\LogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Finished LogFile Generation for: {0} elapsed: {1}"' Path.GetFullPath(parms.LogFileName)' watch.Elapsed); " is 145.
Long Statement,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,Main,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("Starting CPU Usage: {0}' RAM Usage: {1}"' getCurrentCpuUsage()' getAvailableRAM()); " is 124.
Long Statement,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,StartTimberWinR,The length of the statement  "            _timberWinR = new TimberWinR.Manager(configFile' logLevel' logFileDir' enableLiveMonitor' _cancellationTokenSource.Token' false); " is 129.
Long Statement,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,TimberWinROnOnConfigurationProcessed,The length of the statement  "            if (!string.IsNullOrEmpty(Options.RedisHost) && configuration.RedisOutputs != null && configuration.RedisOutputs.Count() > 0) " is 125.
Long Statement,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,RunGenerators,The length of the statement  "                                // LogManager.GetCurrentClassLogger().Info("Starting CPU Usage: {0}' RAM Usage: {1}"' getCurrentCpuUsage()' getAvailableRAM()); " is 127.
Long Statement,TimberWinR.TestGenerator,JsonLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Start JSON LogFile Generation for: {0} on Thread: {1}"' Path.GetFullPath(parms.LogFileName)' Thread.CurrentThread.ManagedThreadId); " is 172.
Long Statement,TimberWinR.TestGenerator,JsonLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("Elapsed Time for {0} was {1} seconds"' Path.GetFullPath(parms.LogFileName)' watch.Elapsed); " is 132.
Long Statement,TimberWinR.TestGenerator,JsonLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Finished JSON Log File Generation for: {0} elapsed: {1}"' Path.GetFullPath(parms.LogFileName)' watch.Elapsed); " is 151.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Start JSON RollingLogFile Generation for: {0} on Thread: {1}"' Path.GetFullPath(parms.LogFileName)' Thread.CurrentThread.ManagedThreadId); " is 179.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "                    LogManager.GetCurrentClassLogger().Info("Elapsed Time for {0} was {1} seconds for {2} logs"' Path.GetFullPath(parms.LogFileName)' lwatch.Elapsed' segments[segment]); " is 165.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("{0}: Waiting for output to catch up: {1} {2}"' Thread.CurrentThread.ManagedThreadId' logFilePath' currentTotal); " is 153.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("{0}: Rolling Log File: {1} {2}"' Thread.CurrentThread.ManagedThreadId' logFilePath' File.GetCreationTimeUtc(logFilePath)); " is 163.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "                LogManager.GetCurrentClassLogger().Info("{0}: Finished Rolling Log File: {1}"' Thread.CurrentThread.ManagedThreadId' logFilePath);            " is 130.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("Finished JSON RollingLogFile File Generation for: {0} elapsed: {1}"' Path.GetFullPath(parms.LogFileName)' watch.Elapsed); " is 162.
Long Statement,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,WaitOutputToCatchUp,The length of the statement  "            LogManager.GetCurrentClassLogger().Info("{0}:  Finished Waiting for output to catch up: {1} {2}"' Thread.CurrentThread.ManagedThreadId' logFilePath' firstPart);             " is 160.
Long Statement,TimberWinR.TestGenerator,UdpTestGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\UdpTestGenerator.cs,Generate,The length of the statement  "                    {"RenderedMessage"' "Responding to RequestSchedule message from 10.1.230.36 with Ack because: PRJ byte array is null."}' " is 120.
Long Statement,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseAggregate,The length of the statement  "            ParameterExpression innerIt = it == null ? Expression.Parameter(elementType' "") : Expression.Parameter(elementType' it.ToString()); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,FindBestMethod,The length of the statement  "                Select(m => new MethodData { MethodBase = m' Parameters = m.GetParameters().Where(p => p.ParameterType != ((MethodInfo)m).ReturnType).ToArray() }). " is 147.
Long Statement,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,PromoteExpression,The length of the statement  "            if (expr.Type == type || ((expr is LambdaExpression) && ((LambdaExpression)expr).ReturnType == type) || (expr is LambdaExpression) && type == (typeof(LambdaExpression))) return expr; " is 182.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                  token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                  token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                  token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                  token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseIdentifier,The conditional expression  "symbols.TryGetValue(token.text' out value) ||                      externals != null && externals.TryGetValue(token.text' out value) || internals.TryGetValue(token.text' out value)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                      (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                  exprType.IsInterface || type.IsInterface"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,PromoteExpression,The conditional expression  "expr.Type == type || ((expr is LambdaExpression) && ((LambdaExpression)expr).ReturnType == type) || (expr is LambdaExpression) && type == (typeof(LambdaExpression))"  is complex.
Empty Catch Block,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,RunGenerators,The method has an empty catch block.
Magic Number,TimberWinR.TestGenerator,LogFileTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\LogFileGenerator.cs,LogFileTestParameters,The following statement contains a magic number: SleepTimeMilliseconds = 30;
Magic Number,TimberWinR.TestGenerator,LogFileTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\LogFileGenerator.cs,LogFileTestParameters,The following statement contains a magic number: NumMessages = 10;
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,Main,The following statement contains a magic number: return 2;
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,WaitForOutputTransmission,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,StartTimberWinR,The following statement contains a magic number: Diagnostics = new Diagnostics.Diagnostics(_timberWinR' _cancellationTokenSource.Token' 5141);
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR.TestGenerator"' "TimberWinRTestGen.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR-TestGenerator_log-{#######}.log")'              };
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR.TestGenerator"' "TimberWinRTestGen.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR-TestGenerator_log-{#######}.log")'              };
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR.TestGenerator"' "TimberWinRTestGen.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR-TestGenerator_log-{#######}.log")'              };
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR.TestGenerator"' "TimberWinRTestGen.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR-TestGenerator_log-{#######}.log")'              };
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,CreateDefaultFileTarget,The following statement contains a magic number: return new FileTarget              {                  ArchiveEvery = FileArchivePeriod.None'                  ArchiveAboveSize = 5 * 1024 * 1024'                  MaxArchiveFiles = 5'                  BufferSize = 10'                  FileName = Path.Combine(logPath' "TimberWinR.TestGenerator"' "TimberWinRTestGen.log")'                  ArchiveFileName = Path.Combine(logPath' "TimberWinR-TestGenerator_log-{#######}.log")'              };
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,StartJson,The following statement contains a magic number: _tasks.Add(Task.Factory.StartNew(() =>                      {                          var p = new JsonLogFileTestParameters()                          {                              NumMessages = options.NumMessages'                              LogFileDir = options.JsonLogDir'                              LogFileName = logFile'                              SleepTimeMilliseconds = options.JsonRate                          };                          JsonLogFileGenerator.Generate(p);                          Thread.Sleep(250);                      }));
Magic Number,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,StartJsonRolling,The following statement contains a magic number: _tasks.Add(Task.Factory.StartNew(() =>                      {                          var p = new JsonLogFileTestParameters()                          {                              NumMessages = options.NumMessages'                              LogFileDir = options.JsonLogDir'                              LogFileName = logFile'                              SleepTimeMilliseconds = options.JsonRate                          };                          JsonRollingLogFileGenerator.Generate(p);                          Thread.Sleep(250);                      }));
Magic Number,TimberWinR.TestGenerator,RedisTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\RedisTestGenerator.cs,RedisTestParameters,The following statement contains a magic number: NumMessages = 100;
Magic Number,TimberWinR.TestGenerator,RedisTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\RedisTestGenerator.cs,RedisTestParameters,The following statement contains a magic number: Port = 6379;
Magic Number,TimberWinR.TestGenerator,TcpTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\TcpTestGenerator.cs,TcpTestParameters,The following statement contains a magic number: NumMessages = 100;
Magic Number,TimberWinR.TestGenerator,TcpTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\TcpTestGenerator.cs,TcpTestParameters,The following statement contains a magic number: Port = 5140;
Magic Number,TimberWinR.TestGenerator,TcpTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\TcpTestGenerator.cs,TcpTestParameters,The following statement contains a magic number: SleepTimeMilliseconds = 10;
Magic Number,TimberWinR.TestGenerator,JsonLogFileTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,JsonLogFileTestParameters,The following statement contains a magic number: SleepTimeMilliseconds = 30;
Magic Number,TimberWinR.TestGenerator,JsonLogFileTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,JsonLogFileTestParameters,The following statement contains a magic number: NumMessages = 10;
Magic Number,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The following statement contains a magic number: int quarters = parms.NumMessages/4;
Magic Number,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The following statement contains a magic number: int[] segments = new int[] {quarters' quarters' quarters' quarters + parms.NumMessages%4};
Magic Number,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,Generate,The following statement contains a magic number: segment < 4
Magic Number,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,WaitOutputToCatchUp,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,TimberWinR.TestGenerator,JsonRollingLogFileGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\JsonLogFileGenerator.cs,RollLogFile,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TimberWinR.TestGenerator,UdpTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\UdpTestGenerator.cs,UdpTestParameters,The following statement contains a magic number: NumMessages = 100;
Magic Number,TimberWinR.TestGenerator,UdpTestParameters,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\UdpTestGenerator.cs,UdpTestParameters,The following statement contains a magic number: Port = 6379;
Magic Number,TimberWinR.TestGenerator,UdpTestGenerator,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\UdpTestGenerator.cs,Generate,The following statement contains a magic number: i % 1000 == 0
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseIif,The following statement contains a magic number: args.Length != 3
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Missing Default,TimberWinR.TestGenerator,Program,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Program.cs,VerifyResults,The following switch statement is missing a default case: switch (inputProp.Name)                  {                      case "udp":                          if (VerifyConditions(json' new string[] { "udp" }' inputProp' jresult) != 0)                              return 1;                          break;                      case "tcp":                          if (VerifyConditions(json' new string[] { "tcp" }' inputProp' jresult) != 0)                              return 1;                          break;                      case "log":                      case "taillog":                          if (VerifyConditions(json' new string[] { "log"' "taillog" }' inputProp' jresult) != 0)                              return 1;                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Plus:                          if (left.Type == typeof(string) || right.Type == typeof(string))                              goto case TokenId.Amphersand;                          CheckAndPromoteOperands(typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateAdd(left' right);                          break;                      case TokenId.Minus:                          CheckAndPromoteOperands(typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateSubtract(left' right);                          break;                      case TokenId.Amphersand:                          left = GenerateStringConcat(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Asterisk:                          left = Expression.Multiply(left' right);                          break;                      case TokenId.Slash:                          left = Expression.Divide(left' right);                          break;                      case TokenId.Percent:                      case TokenId.Identifier:                          left = Expression.Modulo(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof(decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type)))              {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,D:\research\architectureSmells\repos\Cimpress-MCP_TimberWinR\TimberWinR.TestGenerator\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
