Implementation smell,Namespace,Class,File,Method,Description
Long Method,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The method has 101 lines of code.
Complex Method,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,Cyclomatic complexity of the method is 8
Complex Method,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,Cyclomatic complexity of the method is 10
Complex Method,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,OnNavigatedTo,Cyclomatic complexity of the method is 8
Long Identifier,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the parameter lowResolutionToHighResolutionCropScale is 38.
Long Identifier,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the parameter previewToLowResolutionCropScale is 31.
Long Identifier,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the parameter previewToHighResolutionCropScale is 32.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneContrastForegroundBrush"]).Color = (Color)Resources["MagnifierAppContrastForegroundColor"]; " is 125.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneContrastBackgroundBrush"]).Color = (Color)Resources["MagnifierAppContrastBackgroundColor"]; " is 125.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxForegroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxForegroundColor"]; " is 123.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxEditBackgroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxEditBackgroundColor"]; " is 131.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextBoxSelectionForegroundBrush"]).Color = (Color)Resources["MagnifierAppTextBoxSelectionForegroundColor"]; " is 141.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneButtonBasePressedForegroundBrush"]).Color = (Color)Resources["MagnifierAppButtonBasePressedForegroundColor"]; " is 143.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneProgressBarBackgroundBrush"]).Color = (Color)Resources["MagnifierAppProgressBarBackgroundColor"]; " is 131.
Long Statement,MagnifierApp,App,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "            ((SolidColorBrush)Resources["PhoneTextHighContrastBrush"]).Color = (Color)Resources["MagnifierAppTextHighContrastColor"]; " is 121.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the statement  "            var lowResolutionToHighResolutionCropScale = _info.ImageSize.Width / _lowResolutionBitmap.PixelWidth / screenScaleFactor * DIGITAL_MAGNIFICATION; " is 145.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the statement  "            // Adjust scale transform coordinate and translate image brush coordinate so that the correct low resolution image area is displayed in the lense " is 145.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 128.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 129.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 132.
Long Statement,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "                    var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 133.
Long Statement,MagnifierApp.Models,PhotoModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,SaveAsync,The length of the statement  "                    using (var target = await KnownFolders.CameraRoll.OpenStreamForWriteAsync(filename' CreationCollisionOption.GenerateUniqueName)) " is 128.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "            var topLeftFoundationPoint = new Windows.Foundation.Point(Math.Round(topLeftWindowsPoint.X)' Math.Round(topLeftWindowsPoint.Y)); " is 128.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "            var bottomRightFoundationPoint = new Windows.Foundation.Point(Math.Round(bottomRightWindowsPoint.X)' Math.Round(bottomRightWindowsPoint.Y)); " is 140.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "                Size = new Windows.Foundation.Size(bottomRightFoundationPoint.X - topLeftFoundationPoint.X' bottomRightFoundationPoint.Y - topLeftFoundationPoint.Y) " is 148.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The length of the statement  "            Viewport.Bounds = new Rect(0' 0' Image.Width + Image.Margin.Left + Image.Margin.Right' Image.Height + Image.Margin.Top + Image.Margin.Bottom); " is 142.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "                Viewport.Bounds = new Rect(0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom); " is 121.
Long Statement,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "                    //System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"' " is 130.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The length of the statement  "                            Value = String.Format(AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round(exposureTime' 2).ToString()) " is 122.
Complex Conditional,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The conditional expression  "reader.GetTagValue(ExifLib.ExifTags.PixelXDimension' out x) && x > 0 &&                      reader.GetTagValue(ExifLib.ExifTags.PixelYDimension' out y) && y > 0"  is complex.
Complex Conditional,MagnifierApp.Pages,PhotosPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,PopulatePhotos,The conditional expression  "path.Contains(KnownFolders.CameraRoll.Path) &&                      path.Contains(PhotoModel.HIGH_RESOLUTION_PHOTO_SUFFIX) &&                      path.Contains("photoinspector") &&                      !Mapping.HasCrop(path)"  is complex.
Complex Conditional,MagnifierApp.Pages,PhotosPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,PopulatePhotos,The conditional expression  "(path.Contains(KnownFolders.SavedPictures.Name) && !path.Contains(PhotoModel.REFRAME_PHOTO_SUFFIX))                      || !path.Contains(".jpg")                      || path.Contains(PhotoModel.HIGH_RESOLUTION_PHOTO_SUFFIX)"  is complex.
Empty Catch Block,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Models,PhotoModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,FromLibraryPath,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Models,PhotoModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Models\PhotoModel.cs,StreamToBuffer,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,PopulateInfos,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,PrintSupportedExifInfo,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,PhotosPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\PhotosPageViewModel.cs,DeletePhoto,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,SetFlashState,The method has an empty catch block.
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry()              {                  Rect = new Rect(0' 0' LenseContent.Width' LenseContent.Height)'                  RadiusX = 360'                  RadiusY = 360              };
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry()              {                  Rect = new Rect(0' 0' LenseContent.Width' LenseContent.Height)'                  RadiusX = 360'                  RadiusY = 360              };
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: _lowResolutionBitmap.DecodePixelWidth = 1536;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMinX = Lense.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMaxX = ContentPanel.ActualWidth - Lense.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseCandidateX = clampedCenter.X + (ContentPanel.ActualWidth - PreviewImage.ActualWidth) / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMinY = Lense.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseMaxY = ContentPanel.ActualHeight - Lense.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: var lenseCandidateY = clampedCenter.Y + (ContentPanel.ActualHeight - PreviewImage.ActualHeight) / 2 - LENSE_OFFSET;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateX = -clampedCenter.X * previewToLowResolutionCropScale + LenseContent.Width / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateY = -clampedCenter.Y * previewToLowResolutionCropScale + LenseContent.Height / 2;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;
Magic Number,MagnifierApp,MagnifierPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: _bitmap.DecodePixelWidth = 1536;
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness()              {                  Left = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Right = Math.Max(0' (ContentPanel.ActualWidth - Crop.Width) / 2)'                  Top = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)'                  Bottom = Math.Max(0' (ContentPanel.ActualHeight - Crop.Height) / 2)              };
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin(new Point(                  Viewport.Bounds.Width / 2 - Crop.Width / 2'                  Viewport.Bounds.Height / 2 - Crop.Height / 2));
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: w = Math.Min(w' 4096);
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: var scaler = 4096.0 / h;
Magic Number,MagnifierApp.Pages,CropPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: h > 4096
Magic Number,MagnifierApp.Pages,InfoPageViewModel,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The following statement contains a magic number: Infos.Add(new Info()                          {                              Title = AppResources.InfoPage_ExposureTimeTitleTextBlock_Text'                              Value = String.Format(AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round(exposureTime' 2).ToString())                          });
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.Width = 853;
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: FreezeImage.Width = 853;
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: App.Current.Host.Content.ScaleFactor == 225
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: canvasAngle = _device.SensorRotationInDegrees - 90;
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform()              {                  CenterX = Canvas.Width / 2.0'                  CenterY = Canvas.Height / 2.0'                  Angle = canvasAngle              };
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform()              {                  CenterX = Canvas.Width / 2.0'                  CenterY = Canvas.Height / 2.0'                  Angle = canvasAngle              };
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size(7712' 4352);
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\research\architectureSmells\repos\Microsoft_photo-inspector\PhotoInspectorWP81\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size(7712' 4352);
