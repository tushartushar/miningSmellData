Implementation smell,Namespace,Class,File,Method,Description
Long Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,SaveAsync,The method has 63 lines of code.
Long Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The method has 61 lines of code.
Long Method,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The method has 79 lines of code.
Complex Method,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,OnNavigatedTo,Cyclomatic complexity of the method is 7
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,FromLibraryImage,Cyclomatic complexity of the method is 8
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,FromLibraryImage,Cyclomatic complexity of the method is 12
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,RevertOriginal,Cyclomatic complexity of the method is 10
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,SaveAsync,Cyclomatic complexity of the method is 24
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,Cyclomatic complexity of the method is 27
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,Tombstone,Cyclomatic complexity of the method is 16
Complex Method,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,Untombstone,Cyclomatic complexity of the method is 15
Complex Method,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,Cyclomatic complexity of the method is 8
Complex Method,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,Cyclomatic complexity of the method is 12
Complex Method,MagnifierApp.Pages,PhotosPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\PhotosPage.xaml.cs,Thumbnail_Tap,Cyclomatic complexity of the method is 11
Complex Method,MagnifierApp.Pages,PhotosPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\PhotosPageViewModel.cs,PopulatePhotos,Cyclomatic complexity of the method is 12
Complex Method,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,OnNavigatedTo,Cyclomatic complexity of the method is 8
Complex Method,MagnifierApp.Utilities,Mapping,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Utilities\Mapping.cs,MatchLocalPathWithLibraryPath,Cyclomatic complexity of the method is 9
Long Identifier,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the parameter lowResolutionToHighResolutionCropScale is 38.
Long Identifier,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the parameter previewToLowResolutionCropScale is 31.
Long Identifier,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the parameter previewToHighResolutionCropScale is 32.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneContrastForegroundBrush"]).Color = (Color)Resources ["MagnifierAppContrastForegroundColor"]; " is 127.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneContrastBackgroundBrush"]).Color = (Color)Resources ["MagnifierAppContrastBackgroundColor"]; " is 127.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxForegroundBrush"]).Color = (Color)Resources ["MagnifierAppTextBoxForegroundColor"]; " is 125.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxEditBackgroundBrush"]).Color = (Color)Resources ["MagnifierAppTextBoxEditBackgroundColor"]; " is 133.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxReadOnlyBrush"]).Color = (Color)Resources ["MagnifierAppTextBoxReadOnlyColor"]; " is 121.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxSelectionForegroundBrush"]).Color = (Color)Resources ["MagnifierAppTextBoxSelectionForegroundColor"]; " is 143.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneButtonBasePressedForegroundBrush"]).Color = (Color)Resources ["MagnifierAppButtonBasePressedForegroundColor"]; " is 145.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneRadioCheckBoxBorderBrush"]).Color = (Color)Resources ["MagnifierAppForegroundColor"]; " is 120.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneSemitransparentBrush"]).Color = (Color)Resources ["MagnifierAppSemitransparentColor"]; " is 121.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneProgressBarBackgroundBrush"]).Color = (Color)Resources ["MagnifierAppProgressBarBackgroundColor"]; " is 133.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextHighContrastBrush"]).Color = (Color)Resources ["MagnifierAppTextHighContrastColor"]; " is 123.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextMidContrastBrush"]).Color = (Color)Resources ["MagnifierAppTextMidContrastColor"]; " is 121.
Long Statement,MagnifierApp,App,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextLowContrastBrush"]).Color = (Color)Resources ["MagnifierAppTextLowContrastColor"]; " is 121.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,PhotoModel_PropertyChanged,The length of the statement  "	if (e.PropertyName == PhotoModel.LocalPathPropertyName || e.PropertyName == PhotoModel.LibraryPathPropertyName || e.PropertyName == PhotoModel.OriginalPathPropertyName) { " is 170.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The length of the statement  "	var lowResolutionToHighResolutionCropScale = _info.ImageSize.Width / _lowResolutionBitmap.PixelWidth / screenScaleFactor * DIGITAL_MAGNIFICATION; " is 145.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,SetupInformationPanel,The length of the statement  "	if (PhotoModel.Singleton.LocalPath != null && PhotoModel.Singleton.OriginalPath != null && PhotoModel.Singleton.LibraryPath != null) { " is 134.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,SaveButton_Click,The length of the statement  "			MessageBox.Show (AppResources.MagnifierPage_SavePhotoErrorMessageBox_Text' AppResources.MagnifierPage_SavePhotoErrorMessageBox_Caption' MessageBoxButton.OK); " is 157.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,ShareButton_Click,The length of the statement  "			MessageBox.Show (AppResources.MagnifierPage_SavePhotoErrorMessageBox_Text' AppResources.MagnifierPage_SavePhotoErrorMessageBox_Caption' MessageBoxButton.OK); " is 157.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,PhotoChooserTask_Completed,The length of the statement  "			var result = MessageBox.Show (AppResources.MagnifierPage_GalleryReadErrorMessageBox_Text' AppResources.MagnifierPage_GalleryReadErrorMessageBox_Caption' MessageBoxButton.OKCancel); " is 180.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The length of the statement  "	// Adjust scale transform coordinate and translate image brush coordinate so that the correct low resolution image area is displayed in the lense " is 145.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "			var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 128.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "			var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 129.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "			var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 132.
Long Statement,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The length of the statement  "			var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION; " is 133.
Long Statement,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,SaveAsync,The length of the statement  "				resizeConfiguration = new AutoResizeConfiguration (LibraryMaxBytes' compactedSize' new Size (0' 0)' AutoResizeMode.Automatic' 0' ColorSpace.Yuv420); " is 148.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "	var topLeftFoundationPoint = new Windows.Foundation.Point (Math.Round (topLeftWindowsPoint.X)' Math.Round (topLeftWindowsPoint.Y)); " is 131.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "	var bottomRightFoundationPoint = new Windows.Foundation.Point (Math.Round (bottomRightWindowsPoint.X)' Math.Round (bottomRightWindowsPoint.Y)); " is 143.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,CropButton_Click,The length of the statement  "		Size = new Windows.Foundation.Size (bottomRightFoundationPoint.X - topLeftFoundationPoint.X' bottomRightFoundationPoint.Y - topLeftFoundationPoint.Y) " is 149.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The length of the statement  "	Viewport.Bounds = new Rect (0' 0' Image.Width + Image.Margin.Left + Image.Margin.Right' Image.Height + Image.Margin.Top + Image.Margin.Bottom); " is 143.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The length of the statement  "	Viewport.SetViewportOrigin (new Point (Viewport.Bounds.Width / 2 - Crop.Width / 2' Viewport.Bounds.Height / 2 - Crop.Height / 2)); " is 130.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "			_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height); " is 136.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "		Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom); " is 122.
Long Statement,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The length of the statement  "			//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"' " is 130.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The length of the statement  "				Value = String.Format (AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round (exposureTime' 2).ToString ()) " is 125.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The length of the statement  "				Value = (bytes [0] & 0x01) != 0x00 ? AppResources.InfoPage_FlashValueFiredTextBlock_Text : AppResources.InfoPage_FlashValueNotFiredTextBlock_Text " is 145.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The length of the statement  "		if (reader.GetTagValue (ExifLib.ExifTags.PixelXDimension' out x) && x > 0 && reader.GetTagValue (ExifLib.ExifTags.PixelYDimension' out y) && y > 0) { " is 149.
Long Statement,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,PrintSupportedExifInfo,The length of the statement  "				System.Diagnostics.Debug.WriteLine (t.ToString () + " = " + value.ToString () + " (" + value.GetType ().ToString () + ")"); " is 123.
Long Statement,MagnifierApp.Pages,PhotosPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\PhotosPage.xaml.cs,DeleteAllMenuItem_Click,The length of the statement  "	var result = MessageBox.Show (AppResources.PhotosPage_DeleteAllMessageBox_Text' AppResources.PhotosPage_DeleteAllMessageBox_Caption' MessageBoxButton.OKCancel); " is 160.
Long Statement,MagnifierApp.Pages,PhotosPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\PhotosPage.xaml.cs,PhotoChooserTask_Completed,The length of the statement  "			var result = MessageBox.Show (AppResources.ViewfinderPage_GalleryReadErrorMessageBox_Text' AppResources.ViewfinderPage_GalleryReadErrorMessageBox_Caption' MessageBoxButton.OKCancel); " is 182.
Long Statement,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,PhotoChooserTask_Completed,The length of the statement  "			var result = MessageBox.Show (AppResources.ViewfinderPage_GalleryReadErrorMessageBox_Text' AppResources.ViewfinderPage_GalleryReadErrorMessageBox_Caption' MessageBoxButton.OKCancel); " is 182.
Complex Conditional,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The conditional expression  "reader.GetTagValue (ExifLib.ExifTags.PixelXDimension' out x) && x > 0 && reader.GetTagValue (ExifLib.ExifTags.PixelYDimension' out y) && y > 0"  is complex.
Empty Catch Block,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,StreamToBuffer,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,PopulateInfos,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,PrintSupportedExifInfo,The method has an empty catch block.
Empty Catch Block,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,SetFlashState,The method has an empty catch block.
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry () {  	Rect = new Rect (0' 0' LenseContent.Width' LenseContent.Height)'  	RadiusX = 360'  	RadiusY = 360  };  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,MagnifierPage,The following statement contains a magic number: HighResolutionCropImage.Clip = new RectangleGeometry () {  	Rect = new Rect (0' 0' LenseContent.Width' LenseContent.Height)'  	RadiusX = 360'  	RadiusY = 360  };  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height) {  	_lowResolutionBitmap.DecodePixelWidth = 1536;  	_lowResolutionBitmap.DecodePixelHeight = 0;  } else {  	_lowResolutionBitmap.DecodePixelWidth = 0;  	_lowResolutionBitmap.DecodePixelHeight = 1536;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height) {  	_lowResolutionBitmap.DecodePixelWidth = 1536;  	_lowResolutionBitmap.DecodePixelHeight = 0;  } else {  	_lowResolutionBitmap.DecodePixelWidth = 0;  	_lowResolutionBitmap.DecodePixelHeight = 1536;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: _lowResolutionBitmap.DecodePixelWidth = 1536;  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,BeginSession,The following statement contains a magic number: _lowResolutionBitmap.DecodePixelHeight = 1536;  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateX = -clampedCenter.X * previewToLowResolutionCropScale + LenseContent.Width / 2;  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,Magnificate,The following statement contains a magic number: _lowResolutionBrushTransform.TranslateY = -clampedCenter.Y * previewToLowResolutionCropScale + LenseContent.Height / 2;  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent) {  	_renderingLenseContent = true;  	HighResolutionCropImage.Visibility = Visibility.Collapsed;  	do {  		center = _lastLenseCenterForRendering;  		// Scale between the rendered image element and the bitmap displayed in it  		var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  		var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  		// Find crop area top left coordinate in the actual high resolution image  		var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		// Find crop area bottom right coordinate in the actual high resolution image  		var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  		var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  		_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  		await _renderer.RenderAsync ();  	} while (_lastLenseCenterForRendering != center);  	_highResolutionCropBitmap.Invalidate ();  	HighResolutionCropImage.Visibility = Visibility.Visible;  	_renderingLenseContent = false;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent) {  	_renderingLenseContent = true;  	HighResolutionCropImage.Visibility = Visibility.Collapsed;  	do {  		center = _lastLenseCenterForRendering;  		// Scale between the rendered image element and the bitmap displayed in it  		var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  		var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  		// Find crop area top left coordinate in the actual high resolution image  		var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		// Find crop area bottom right coordinate in the actual high resolution image  		var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  		var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  		_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  		await _renderer.RenderAsync ();  	} while (_lastLenseCenterForRendering != center);  	_highResolutionCropBitmap.Invalidate ();  	HighResolutionCropImage.Visibility = Visibility.Visible;  	_renderingLenseContent = false;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent) {  	_renderingLenseContent = true;  	HighResolutionCropImage.Visibility = Visibility.Collapsed;  	do {  		center = _lastLenseCenterForRendering;  		// Scale between the rendered image element and the bitmap displayed in it  		var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  		var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  		// Find crop area top left coordinate in the actual high resolution image  		var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		// Find crop area bottom right coordinate in the actual high resolution image  		var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  		var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  		_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  		await _renderer.RenderAsync ();  	} while (_lastLenseCenterForRendering != center);  	_highResolutionCropBitmap.Invalidate ();  	HighResolutionCropImage.Visibility = Visibility.Visible;  	_renderingLenseContent = false;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent) {  	_renderingLenseContent = true;  	HighResolutionCropImage.Visibility = Visibility.Collapsed;  	do {  		center = _lastLenseCenterForRendering;  		// Scale between the rendered image element and the bitmap displayed in it  		var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  		var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  		// Find crop area top left coordinate in the actual high resolution image  		var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		// Find crop area bottom right coordinate in the actual high resolution image  		var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  		var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  		_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  		await _renderer.RenderAsync ();  	} while (_lastLenseCenterForRendering != center);  	_highResolutionCropBitmap.Invalidate ();  	HighResolutionCropImage.Visibility = Visibility.Visible;  	_renderingLenseContent = false;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: if (!_renderingLenseContent) {  	_renderingLenseContent = true;  	HighResolutionCropImage.Visibility = Visibility.Collapsed;  	do {  		center = _lastLenseCenterForRendering;  		// Scale between the rendered image element and the bitmap displayed in it  		var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  		var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  		// Find crop area top left coordinate in the actual high resolution image  		var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		// Find crop area bottom right coordinate in the actual high resolution image  		var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  		var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  		var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  		_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  		await _renderer.RenderAsync ();  	} while (_lastLenseCenterForRendering != center);  	_highResolutionCropBitmap.Invalidate ();  	HighResolutionCropImage.Visibility = Visibility.Visible;  	_renderingLenseContent = false;  }  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: do {  	center = _lastLenseCenterForRendering;  	// Scale between the rendered image element and the bitmap displayed in it  	var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  	var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  	// Find crop area top left coordinate in the actual high resolution image  	var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	// Find crop area bottom right coordinate in the actual high resolution image  	var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  	var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  	_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  	await _renderer.RenderAsync ();  } while (_lastLenseCenterForRendering != center);  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: do {  	center = _lastLenseCenterForRendering;  	// Scale between the rendered image element and the bitmap displayed in it  	var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  	var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  	// Find crop area top left coordinate in the actual high resolution image  	var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	// Find crop area bottom right coordinate in the actual high resolution image  	var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  	var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  	_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  	await _renderer.RenderAsync ();  } while (_lastLenseCenterForRendering != center);  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: do {  	center = _lastLenseCenterForRendering;  	// Scale between the rendered image element and the bitmap displayed in it  	var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  	var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  	// Find crop area top left coordinate in the actual high resolution image  	var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	// Find crop area bottom right coordinate in the actual high resolution image  	var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  	var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  	_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  	await _renderer.RenderAsync ();  } while (_lastLenseCenterForRendering != center);  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: do {  	center = _lastLenseCenterForRendering;  	// Scale between the rendered image element and the bitmap displayed in it  	var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  	var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  	// Find crop area top left coordinate in the actual high resolution image  	var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	// Find crop area bottom right coordinate in the actual high resolution image  	var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  	var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  	_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  	await _renderer.RenderAsync ();  } while (_lastLenseCenterForRendering != center);  
Magic Number,MagnifierApp,MagnifierPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\MagnifierPage.xaml.cs,RenderLenseContentAsync,The following statement contains a magic number: do {  	center = _lastLenseCenterForRendering;  	// Scale between the rendered image element and the bitmap displayed in it  	var previewToHighResolutionCropScale = _info.ImageSize.Width / PreviewImage.ActualWidth;  	var screenScaleFactor = App.Current.Host.Content.ScaleFactor / 100.0;  	// Find crop area top left coordinate in the actual high resolution image  	var topLeftX = center.X * previewToHighResolutionCropScale - LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeftY = center.Y * previewToHighResolutionCropScale - LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	// Find crop area bottom right coordinate in the actual high resolution image  	var bottomRightX = center.X * previewToHighResolutionCropScale + LenseContent.Width / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var bottomRightY = center.Y * previewToHighResolutionCropScale + LenseContent.Height / 2 * screenScaleFactor / DIGITAL_MAGNIFICATION;  	var topLeft = new Windows.Foundation.Point (topLeftX' topLeftY);  	var bottomRight = new Windows.Foundation.Point (bottomRightX' bottomRightY);  	_reframingFilter.ReframingArea = new Windows.Foundation.Rect (topLeft' bottomRight);  	await _renderer.RenderAsync ();  } while (_lastLenseCenterForRendering != center);  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: using (var store = IsolatedStorageFile.GetUserStoreForApplication ()) {  	if (store.DirectoryExists (Mapping.LOCALS_PATH)) {  		var localsArray = store.GetFileNames (Mapping.LOCALS_PATH + @"\*");  		using (var library = new MediaLibrary ()) {  			using (var pictures = library.Pictures) {  				foreach (var localFilename in localsArray) {  					var found = false;  					for (int i = 0; i < pictures.Count && !found; i++) {  						using (var picture = pictures [i]) {  							var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  							if (localFilename == libraryFilename) {  								found = true;  							}  						}  					}  					if (!found) {  						var localPath = Mapping.LOCALS_PATH + @"\" + localFilename;  						store.DeleteFile (localPath);  						System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted local \"" + localPath + "\"");  						if (LocalPath == localPath) {  							// current image was deleted from library  							LibraryPath = null;  							LocalPath = null;  						}  					}  				}  			}  		}  	}  	if (store.DirectoryExists (Mapping.ORIGINALS_PATH)) {  		var originalsArray = store.GetFileNames (Mapping.ORIGINALS_PATH + @"\*");  		using (var library = new MediaLibrary ()) {  			using (var pictures = library.Pictures) {  				foreach (var originalFilename in originalsArray) {  					var found = false;  					for (int i = 0; i < pictures.Count && !found; i++) {  						using (var picture = pictures [i]) {  							var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  							var libraryFilenameParts = libraryFilename.Split (new char[] {  								'_'  							}' StringSplitOptions.RemoveEmptyEntries);  							if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  								libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  							}  							if (originalFilename == libraryFilename) {  								found = true;  							}  						}  					}  					if (!found) {  						var originalPath = Mapping.ORIGINALS_PATH + @"\" + originalFilename;  						store.DeleteFile (originalPath);  						System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted original \"" + originalPath + "\"");  					}  				}  			}  		}  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: if (store.DirectoryExists (Mapping.ORIGINALS_PATH)) {  	var originalsArray = store.GetFileNames (Mapping.ORIGINALS_PATH + @"\*");  	using (var library = new MediaLibrary ()) {  		using (var pictures = library.Pictures) {  			foreach (var originalFilename in originalsArray) {  				var found = false;  				for (int i = 0; i < pictures.Count && !found; i++) {  					using (var picture = pictures [i]) {  						var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  						var libraryFilenameParts = libraryFilename.Split (new char[] {  							'_'  						}' StringSplitOptions.RemoveEmptyEntries);  						if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  							libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  						}  						if (originalFilename == libraryFilename) {  							found = true;  						}  					}  				}  				if (!found) {  					var originalPath = Mapping.ORIGINALS_PATH + @"\" + originalFilename;  					store.DeleteFile (originalPath);  					System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted original \"" + originalPath + "\"");  				}  			}  		}  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: using (var library = new MediaLibrary ()) {  	using (var pictures = library.Pictures) {  		foreach (var originalFilename in originalsArray) {  			var found = false;  			for (int i = 0; i < pictures.Count && !found; i++) {  				using (var picture = pictures [i]) {  					var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  					var libraryFilenameParts = libraryFilename.Split (new char[] {  						'_'  					}' StringSplitOptions.RemoveEmptyEntries);  					if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  						libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  					}  					if (originalFilename == libraryFilename) {  						found = true;  					}  				}  			}  			if (!found) {  				var originalPath = Mapping.ORIGINALS_PATH + @"\" + originalFilename;  				store.DeleteFile (originalPath);  				System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted original \"" + originalPath + "\"");  			}  		}  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: using (var pictures = library.Pictures) {  	foreach (var originalFilename in originalsArray) {  		var found = false;  		for (int i = 0; i < pictures.Count && !found; i++) {  			using (var picture = pictures [i]) {  				var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  				var libraryFilenameParts = libraryFilename.Split (new char[] {  					'_'  				}' StringSplitOptions.RemoveEmptyEntries);  				if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  					libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  				}  				if (originalFilename == libraryFilename) {  					found = true;  				}  			}  		}  		if (!found) {  			var originalPath = Mapping.ORIGINALS_PATH + @"\" + originalFilename;  			store.DeleteFile (originalPath);  			System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted original \"" + originalPath + "\"");  		}  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: foreach (var originalFilename in originalsArray) {  	var found = false;  	for (int i = 0; i < pictures.Count && !found; i++) {  		using (var picture = pictures [i]) {  			var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  			var libraryFilenameParts = libraryFilename.Split (new char[] {  				'_'  			}' StringSplitOptions.RemoveEmptyEntries);  			if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  				libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  			}  			if (originalFilename == libraryFilename) {  				found = true;  			}  		}  	}  	if (!found) {  		var originalPath = Mapping.ORIGINALS_PATH + @"\" + originalFilename;  		store.DeleteFile (originalPath);  		System.Diagnostics.Debug.WriteLine ("PhotoModel.CleanLocalStorage deleted original \"" + originalPath + "\"");  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: for (int i = 0; i < pictures.Count && !found; i++) {  	using (var picture = pictures [i]) {  		var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  		var libraryFilenameParts = libraryFilename.Split (new char[] {  			'_'  		}' StringSplitOptions.RemoveEmptyEntries);  		if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  			libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  		}  		if (originalFilename == libraryFilename) {  			found = true;  		}  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: using (var picture = pictures [i]) {  	var libraryFilename = Mapping.FilenameFromPath (picture.GetPath ());  	var libraryFilenameParts = libraryFilename.Split (new char[] {  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  		libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  	}  	if (originalFilename == libraryFilename) {  		found = true;  	}  }  
Magic Number,MagnifierApp.Models,PhotoModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Models\PhotoModel.cs,CleanLocalStorage,The following statement contains a magic number: if (libraryFilenameParts.Length == 3 && libraryFilenameParts [0] == @"photoinspector") {  	libraryFilename = libraryFilenameParts [0] + '_' + libraryFilenameParts [1] + @".jpg";  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: using (var memoryStream = new MemoryStream ()) {  	image.Position = 0;  	image.CopyTo (memoryStream);  	try {  		// Some streams do not support flushing  		image.Flush ();  	} catch (Exception ex) {  	}  	memoryStream.Position = 0;  	// Initialize image source  	_source = new StreamImageSource (memoryStream);  	// Get image info  	Task.Run (async () => {  		_info = await _source.GetInfoAsync ();  	}).Wait ();  	// Set _lowResolutionBitmap decoding to a quite low resolution and initialize it with image  	if (_info.ImageSize.Width >= _info.ImageSize.Height) {  		_bitmap.DecodePixelWidth = 1536;  		_bitmap.DecodePixelHeight = 0;  	} else {  		_bitmap.DecodePixelWidth = 0;  		_bitmap.DecodePixelHeight = 1536;  	}  	image.Position = 0;  	_bitmap.SetSource (image);  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: using (var memoryStream = new MemoryStream ()) {  	image.Position = 0;  	image.CopyTo (memoryStream);  	try {  		// Some streams do not support flushing  		image.Flush ();  	} catch (Exception ex) {  	}  	memoryStream.Position = 0;  	// Initialize image source  	_source = new StreamImageSource (memoryStream);  	// Get image info  	Task.Run (async () => {  		_info = await _source.GetInfoAsync ();  	}).Wait ();  	// Set _lowResolutionBitmap decoding to a quite low resolution and initialize it with image  	if (_info.ImageSize.Width >= _info.ImageSize.Height) {  		_bitmap.DecodePixelWidth = 1536;  		_bitmap.DecodePixelHeight = 0;  	} else {  		_bitmap.DecodePixelWidth = 0;  		_bitmap.DecodePixelHeight = 1536;  	}  	image.Position = 0;  	_bitmap.SetSource (image);  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height) {  	_bitmap.DecodePixelWidth = 1536;  	_bitmap.DecodePixelHeight = 0;  } else {  	_bitmap.DecodePixelWidth = 0;  	_bitmap.DecodePixelHeight = 1536;  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: if (_info.ImageSize.Width >= _info.ImageSize.Height) {  	_bitmap.DecodePixelWidth = 1536;  	_bitmap.DecodePixelHeight = 0;  } else {  	_bitmap.DecodePixelWidth = 0;  	_bitmap.DecodePixelHeight = 1536;  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: _bitmap.DecodePixelWidth = 1536;  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,BeginSession,The following statement contains a magic number: _bitmap.DecodePixelHeight = 1536;  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness () {  	Left = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Right = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Top = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)'  	Bottom = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)  };  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness () {  	Left = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Right = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Top = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)'  	Bottom = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)  };  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness () {  	Left = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Right = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Top = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)'  	Bottom = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)  };  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Image.Margin = new Thickness () {  	Left = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Right = Math.Max (0' (ContentPanel.ActualWidth - Crop.Width) / 2)'  	Top = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)'  	Bottom = Math.Max (0' (ContentPanel.ActualHeight - Crop.Height) / 2)  };  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin (new Point (Viewport.Bounds.Width / 2 - Crop.Width / 2' Viewport.Bounds.Height / 2 - Crop.Height / 2));  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin (new Point (Viewport.Bounds.Width / 2 - Crop.Width / 2' Viewport.Bounds.Height / 2 - Crop.Height / 2));  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin (new Point (Viewport.Bounds.Width / 2 - Crop.Width / 2' Viewport.Bounds.Height / 2 - Crop.Height / 2));  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,ConfigureViewport,The following statement contains a magic number: Viewport.SetViewportOrigin (new Point (Viewport.Bounds.Width / 2 - Crop.Width / 2' Viewport.Bounds.Height / 2 - Crop.Height / 2));  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (e.PinchManipulation != null) {  	e.Handled = true;  	if (!_pinching) {  		_pinching = true;  		_relativeCenter = new Point (e.PinchManipulation.Original.Center.X / Image.Width' e.PinchManipulation.Original.Center.Y / Image.Height);  	}  	double w' h;  	if (_info.ImageSize.Width < _info.ImageSize.Height) {  		w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  		w = Math.Max (Crop.Width' w);  		w = Math.Min (w' _info.ImageSize.Width);  		w = Math.Min (w' 4096);  		h = w * _info.ImageSize.Height / _info.ImageSize.Width;  		if (h > 4096) {  			var scaler = 4096.0 / h;  			h *= scaler;  			w *= scaler;  		}  	} else {  		h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  		h = Math.Max (Crop.Height' h);  		h = Math.Min (h' _info.ImageSize.Height);  		h = Math.Min (h' 4096);  		w = h * _info.ImageSize.Width / _info.ImageSize.Height;  		if (w > 4096) {  			var scaler = 4096.0 / w;  			w *= scaler;  			h *= scaler;  		}  	}  	Image.Width = w;  	Image.Height = h;  	Viewport.Bounds = new Rect (0' 0' w + Image.Margin.Left + Image.Margin.Right' h + Image.Margin.Top + Image.Margin.Bottom);  	GeneralTransform transform = Image.TransformToVisual (Viewport);  	Point p = transform.Transform (e.PinchManipulation.Original.Center);  	double x = _relativeCenter.X * w - p.X + Image.Margin.Left;  	double y = _relativeCenter.Y * h - p.Y + Image.Margin.Top;  	if (w < _info.ImageSize.Width && h < _info.ImageSize.Height) {  		//System.Diagnostics.Debug.WriteLine("Viewport.ActualWidth={0} .ActualHeight={1} Origin.X={2} .Y={3} Image.Width={4} .Height={5}"'  		//    Viewport.ActualWidth' Viewport.ActualHeight' x' y' Image.Width' Image.Height);  		Viewport.SetViewportOrigin (new Point (x' y));  	}  } else if (_pinching) {  	e.Handled = true;  	CompletePinching ();  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (_info.ImageSize.Width < _info.ImageSize.Height) {  	w = _info.ImageSize.Width * _scale * e.PinchManipulation.CumulativeScale;  	w = Math.Max (Crop.Width' w);  	w = Math.Min (w' _info.ImageSize.Width);  	w = Math.Min (w' 4096);  	h = w * _info.ImageSize.Height / _info.ImageSize.Width;  	if (h > 4096) {  		var scaler = 4096.0 / h;  		h *= scaler;  		w *= scaler;  	}  } else {  	h = _info.ImageSize.Height * _scale * e.PinchManipulation.CumulativeScale;  	h = Math.Max (Crop.Height' h);  	h = Math.Min (h' _info.ImageSize.Height);  	h = Math.Min (h' 4096);  	w = h * _info.ImageSize.Width / _info.ImageSize.Height;  	if (w > 4096) {  		var scaler = 4096.0 / w;  		w *= scaler;  		h *= scaler;  	}  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: w = Math.Min (w' 4096);  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (h > 4096) {  	var scaler = 4096.0 / h;  	h *= scaler;  	w *= scaler;  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (h > 4096) {  	var scaler = 4096.0 / h;  	h *= scaler;  	w *= scaler;  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: h = Math.Min (h' 4096);  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (w > 4096) {  	var scaler = 4096.0 / w;  	w *= scaler;  	h *= scaler;  }  
Magic Number,MagnifierApp.Pages,CropPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\CropPage.xaml.cs,Viewport_ManipulationDelta,The following statement contains a magic number: if (w > 4096) {  	var scaler = 4096.0 / w;  	w *= scaler;  	h *= scaler;  }  
Magic Number,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The following statement contains a magic number: using (var reader = new ExifLib.ExifReader (stream)) {  	PrintSupportedExifInfo (reader);  	// Aperture  	double aperture;  	if (reader.GetTagValue (ExifLib.ExifTags.FNumber' out aperture)) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_ApertureTitleTextBlock_Text'  			Value = "F" + Math.Round (aperture' 1).ToString ().Replace ('''' '.')  		});  	}  	// Exposure time  	double exposureTime;  	if (reader.GetTagValue (ExifLib.ExifTags.ExposureTime' out exposureTime)) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_ExposureTimeTitleTextBlock_Text'  			Value = String.Format (AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round (exposureTime' 2).ToString ())  		});  	}  	// ISO  	UInt16 iso;  	if (reader.GetTagValue (ExifLib.ExifTags.ISOSpeedRatings' out iso) && iso > 0) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_IsoTitleTextBlock_Text'  			Value = iso.ToString ()  		});  	}  	// Flash (simplified)  	UInt16 flash;  	if (reader.GetTagValue (ExifLib.ExifTags.Flash' out flash)) {  		var bytes = BitConverter.GetBytes (flash);  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_FlashTitleTextBlock_Text'  			Value = (bytes [0] & 0x01) != 0x00 ? AppResources.InfoPage_FlashValueFiredTextBlock_Text : AppResources.InfoPage_FlashValueNotFiredTextBlock_Text  		});  	}  	// Date and time  	DateTime dateTime;  	if (reader.GetTagValue (ExifLib.ExifTags.DateTimeOriginal' out dateTime)) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_DateTimeTitleTextBlock_Text'  			Value = dateTime.ToLocalTime ().ToString ()  		});  	}  	// Dimensions  	UInt32 x;  	UInt32 y;  	if (reader.GetTagValue (ExifLib.ExifTags.PixelXDimension' out x) && x > 0 && reader.GetTagValue (ExifLib.ExifTags.PixelYDimension' out y) && y > 0) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_DimensionsTitleTextBlock_Text'  			Value = x + " x " + y  		});  	}  	// Make  	string make;  	if (reader.GetTagValue (ExifLib.ExifTags.Make' out make) && make.Length > 0) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_MakeTitleTextBlock_Text'  			Value = make  		});  	}  	// Model  	string model;  	if (reader.GetTagValue (ExifLib.ExifTags.Model' out model) && model.Length > 0) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_ModelTitleTextBlock_Text'  			Value = model  		});  	}  	// Software  	string software;  	if (reader.GetTagValue (ExifLib.ExifTags.Software' out software) && software.Length > 0) {  		Infos.Add (new Info () {  			Title = AppResources.InfoPage_SoftwareTitleTextBlock_Text'  			Value = software  		});  	}  }  
Magic Number,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The following statement contains a magic number: if (reader.GetTagValue (ExifLib.ExifTags.ExposureTime' out exposureTime)) {  	Infos.Add (new Info () {  		Title = AppResources.InfoPage_ExposureTimeTitleTextBlock_Text'  		Value = String.Format (AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round (exposureTime' 2).ToString ())  	});  }  
Magic Number,MagnifierApp.Pages,InfoPageViewModel,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\InfoPageViewModel.cs,TryReadExifInfo,The following statement contains a magic number: Infos.Add (new Info () {  	Title = AppResources.InfoPage_ExposureTimeTitleTextBlock_Text'  	Value = String.Format (AppResources.InfoPage_ExposureTimeValueFormatTextBlock_Text' Math.Round (exposureTime' 2).ToString ())  });  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 100) {  	// WVGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.Width = 800;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: FreezeImage.Width = 800;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 160) {  	// WXGA  	Canvas.Width = 800;  	FreezeImage.Width = 800;  } else if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.Width = 800;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: FreezeImage.Width = 800;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	// 720p  	Canvas.Width = 853;  	FreezeImage.Width = 853;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.Width = 853;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: FreezeImage.Width = 853;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (Orientation.HasFlag (PageOrientation.LandscapeLeft)) {  	canvasAngle = _device.SensorRotationInDegrees - 90;  } else if (Orientation.HasFlag (PageOrientation.LandscapeRight)) {  	canvasAngle = _device.SensorRotationInDegrees + 90;  } else// PageOrientation.PortraitUp   {  	canvasAngle = _device.SensorRotationInDegrees;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (Orientation.HasFlag (PageOrientation.LandscapeLeft)) {  	canvasAngle = _device.SensorRotationInDegrees - 90;  } else if (Orientation.HasFlag (PageOrientation.LandscapeRight)) {  	canvasAngle = _device.SensorRotationInDegrees + 90;  } else// PageOrientation.PortraitUp   {  	canvasAngle = _device.SensorRotationInDegrees;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: canvasAngle = _device.SensorRotationInDegrees - 90;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: if (Orientation.HasFlag (PageOrientation.LandscapeRight)) {  	canvasAngle = _device.SensorRotationInDegrees + 90;  } else// PageOrientation.PortraitUp   {  	canvasAngle = _device.SensorRotationInDegrees;  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: canvasAngle = _device.SensorRotationInDegrees + 90;  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform () {  	CenterX = Canvas.Width / 2.0'  	CenterY = Canvas.Height / 2.0'  	Angle = canvasAngle  };  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,AdaptToOrientation,The following statement contains a magic number: Canvas.RenderTransform = new RotateTransform () {  	CenterX = Canvas.Width / 2.0'  	CenterY = Canvas.Height / 2.0'  	Angle = canvasAngle  };  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-875") || deviceName.Contains ("RM-876") || deviceName.Contains ("RM-877")) {  	captureResolution = new Windows.Foundation.Size (7712' 4352);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3  } else if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-875") || deviceName.Contains ("RM-876") || deviceName.Contains ("RM-877")) {  	captureResolution = new Windows.Foundation.Size (7712' 4352);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3  } else if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-875") || deviceName.Contains ("RM-876") || deviceName.Contains ("RM-877")) {  	captureResolution = new Windows.Foundation.Size (7712' 4352);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3  } else if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-875") || deviceName.Contains ("RM-876") || deviceName.Contains ("RM-877")) {  	captureResolution = new Windows.Foundation.Size (7712' 4352);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(7136' 5360); // 4:3  } else if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size (7712' 4352);  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size (7712' 4352);  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (deviceName.Contains ("RM-937") || deviceName.Contains ("RM-938") || deviceName.Contains ("RM-939")) {  	captureResolution = new Windows.Foundation.Size (5376' 3024);  	// 16:9  	//captureResolution = new Windows.Foundation.Size(4992' 3744); // 4:3  } else {  	captureResolution = PhotoCaptureDevice.GetAvailableCaptureResolutions (SENSOR_LOCATION).First ();  }  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size (5376' 3024);  
Magic Number,MagnifierApp.Pages,ViewfinderPage,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Pages\ViewfinderPage.xaml.cs,InitializeCamera,The following statement contains a magic number: captureResolution = new Windows.Foundation.Size (5376' 3024);  
Magic Number,MagnifierApp.Utilities,Mapping,D:\newReposJune17\Microsoft_photo-inspector\PhotoInspectorWP80\MagnifierApp\Utilities\Mapping.cs,MatchPathWithOriginalPath,The following statement contains a magic number: if (originalFilenameParts.Length == 3 && originalFilenameParts [0] == @"photoinspector") {  	originalFilename = originalFilenameParts [0] + '_' + originalFilenameParts [1] + @".jpg";  }  
