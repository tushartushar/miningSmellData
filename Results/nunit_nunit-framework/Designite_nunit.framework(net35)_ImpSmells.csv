Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The method has 122 lines of code.
Long Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,GetDisplayString,The method has 174 lines of code.
Complex Method,NUnit.Framework,ParallelizableAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\ParallelizableAttribute.cs,ApplyToTest,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,Cyclomatic complexity of the method is 15
Complex Method,NUnit.Framework,RandomDataConverter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,GetParametersForTestCase,Cyclomatic complexity of the method is 15
Complex Method,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,GetTestCasesFor,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,GetDataSourceValue,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Api,DefaultTestAssemblyBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\DefaultTestAssemblyBuilder.cs,Build,Cyclomatic complexity of the method is 12
Complex Method,System.Collections.Concurrent,ConcurrentQueue<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Collections.Concurrent\ConcurrentQueue.cs,GetEnumerator,Cyclomatic complexity of the method is 11
Complex Method,System.Threading,SpinWait,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Threading\SpinWait.cs,SpinUntil,Cyclomatic complexity of the method is 8
Complex Method,System,Lazy<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System\Lazy.cs,InitValue,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Constraints,CollectionOrderedConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\CollectionOrderedConstraint.cs,Matches,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,FormatCollection,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,FormatArray,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,EscapeControlChars,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,IsFixedPointNumeric,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Constraints,NUnitComparer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\NUnitComparer.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\PathConstraint.cs,Canonicalize,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,Tolerance,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Tolerance.cs,LinearRange,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints.Comparers,StreamsComparer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Comparers\StreamsComparer.cs,Equal,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\TNode.cs,EscapeInvalidXmlCharacters,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Internal,ParamAttributeTypeConversions,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ParamAttributeTypeConversions.cs,TryConvert,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,Cyclomatic complexity of the method is 32
Complex Method,NUnit.Framework.Internal,TestResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Results\TestResult.cs,AddToXml,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal,TestSuiteResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Results\TestSuiteResult.cs,UpdateResultState,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromFrameworkVersion,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,TestFilter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestFilter.cs,FromXml,Cyclomatic complexity of the method is 14
Complex Method,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,Cyclomatic complexity of the method is 19
Complex Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,GetDisplayString,Cyclomatic complexity of the method is 52
Complex Method,NUnit.Framework.Internal,NameFragment,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,EscapeControlChar,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal,TestSuite,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Tests\TestSuite.cs,CheckSetUpTearDownMethods,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeHelper.cs,GetDisplayName,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeHelper.cs,GetDisplayName,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeHelper.cs,TryGetBestCommonType,Cyclomatic complexity of the method is 29
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeHelper.cs,ConvertArgumentList,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Internal,TypeHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeHelper.cs,CanDeduceTypeArgsFromArgs,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal,ValueGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.ByteValueGenerator.cs,Create,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Internal,ValueGenerator<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.cs,GenerateRange,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,GetDataFor,Cyclomatic complexity of the method is 19
Complex Method,NUnit.Framework.Internal.Builders,DefaultSuiteBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\DefaultSuiteBuilder.cs,GetFixtureBuilderAttributes,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,Cyclomatic complexity of the method is 23
Complex Method,NUnit.Framework.Internal.Builders,NUnitTestFixtureBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\NUnitTestFixtureBuilder.cs,BuildFrom,Cyclomatic complexity of the method is 18
Complex Method,NUnit.Framework.Internal.Execution,CompositeWorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\CompositeWorkItem.cs,PerformWork,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Internal.Execution,SimpleWorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\SimpleWorkItem.cs,MakeTestCommand,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Framework.Internal.Execution,WorkItemBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItemBuilder.cs,CreateWorkItem,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Internal.Execution,WorkItemQueue,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItemQueue.cs,DumpContents,Cyclomatic complexity of the method is 8
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Assert.Comparisons.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Assert.Comparisons.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Assert.Comparisons.cs,AssertDoublesAreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\CollectionAssert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\CollectionAssert.cs,AreNotEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\FrameworkController.cs,FrameworkController,The method has 5 parameters. Parameters: assemblyNameOrPath' idPrefix' settings' runnerType' builderType
Long Parameter List,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\FrameworkController.cs,FrameworkController,The method has 5 parameters. Parameters: assembly' idPrefix' settings' runnerType' builderType
Long Parameter List,NUnit.Framework.Constraints,EqualConstraintResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\EqualConstraintResult.cs,DisplayFailurePoint,The method has 5 parameters. Parameters: writer' expected' actual' failurePoint' indent
Long Parameter List,NUnit.Framework.Constraints,ExactCountConstraintResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\ExactCountConstraintResult.cs,ExactCountConstraintResult,The method has 5 parameters. Parameters: constraint' actualValue' isSuccess' matchCount' itemList
Long Parameter List,NUnit.Framework.Constraints,MessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Parameter List,NUnit.Framework.Internal,DecimalParts,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\DecimalParts.cs,DecimalParts,The method has 5 parameters. Parameters: low' mid' high' isNegative' scale
Long Parameter List,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Identifier,System.Threading,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Threading\SpinWait.cs,,The length of the parameter PROCESSOR_COUNT_REFRESH_INTERVAL_MS is 35.
Long Identifier,System.Threading,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Threading\SpinWait.cs,,The length of the parameter s_lastProcessorCountRefreshTicks is 32.
Long Identifier,System.Threading,TimeoutHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Threading\SpinWait.cs,UpdateTimeOut,The length of the parameter originalWaitMillisecondsTimeout is 31.
Long Identifier,NUnit.Framework.Constraints,DictionaryContainsKeyConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DictionaryContainsKeyConstraint.cs,,The length of the parameter ComparerMemberObsoletionMessage is 31.
Long Identifier,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\PathConstraint.cs,,The length of the parameter NonWindowsDirectorySeparatorChar is 32.
Long Identifier,NUnit.Framework.Internal,AwaitShapeInfo,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\CSharpPatternBasedAwaitAdapter.AwaitShapeInfo.cs,TryCreate,The length of the parameter criticalNotifyCompletionInterface is 33.
Long Identifier,NUnit.Framework.Internal,StackFilter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\StackFilter.cs,,The length of the parameter DEFAULT_BOTTOM_OF_STACK_PATTERN is 31.
Long Identifier,NUnit.Framework.Internal.Execution,WorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItem.cs,Execute,The length of the parameter needsNewThreadToSetApartmentState is 33.
Long Statement,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,WeConvert,The length of the statement  "            if (targetType == typeof(short) || targetType == typeof(ushort) || targetType == typeof(byte) || targetType == typeof(sbyte)) " is 125.
Long Statement,NUnit.Framework,RandomDataSource<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,The length of the statement  "                Guard.OperationValid(!(Distinct && _inRange && !CanBeDistinct(_min' _max' _count))' $"The range of values is [{_min}' {_max}[ and the random value count is {_count} so the values cannot be distinct."); " is 201.
Long Statement,NUnit.Framework,EnumDataSource,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,The length of the statement  "                Guard.ArgumentValid(parameter.ParameterType.GetTypeInfo().IsEnum' "EnumDataSource requires an enum parameter"' nameof(parameter)); " is 130.
Long Statement,NUnit.Framework,EnumDataSource,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,GetData,The length of the statement  "                Guard.OperationValid(!(Distinct && _count > valueCount)' $"The enum \"{DataType.Name}\" has {valueCount} values and the random value count is {_count} so the values cannot be distinct."); " is 187.
Long Statement,NUnit.Framework,RetryCommand,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RetryAttribute.cs,Execute,The length of the statement  "                        context.CurrentRepeatCount++; // increment Retry count for next iteration. will only happen if we are guaranteed another iteration " is 130.
Long Statement,NUnit.Framework,TestCaseAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestCaseAttribute.cs,GetParametersForTestCase,The length of the statement  "                    && ParamAttributeTypeConversions.TryConvert(parms.ExpectedResult' method.ReturnType.Type' out var expectedResultInTargetType)) " is 126.
Long Statement,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,BuildFrom,The length of the statement  "                parms.Properties.Set(PropertyNames.SkipReason' "TestCaseSourceAttribute may not be used on a method without parameters"); " is 121.
Long Statement,NUnit.Framework,TestCaseSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestCaseSourceAttribute.cs,GetTestCaseSource,The length of the statement  "                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy); " is 124.
Long Statement,NUnit.Framework,TestFixtureSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\TestFixtureSourceAttribute.cs,GetTestFixtureSource,The length of the statement  "                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy); " is 124.
Long Statement,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,GetDataSource,The length of the statement  "                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy); " is 124.
Long Statement,NUnit.Framework,ValueSourceAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\ValueSourceAttribute.cs,ThrowInvalidDataSourceException,The length of the statement  "            throw new InvalidDataSourceException("The sourceName specified on a ValueSourceAttribute must refer to a non-null static field' property or method."); " is 150.
Long Statement,NUnit.Framework,CollectionAssert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\CollectionAssert.cs,Equals,The length of the statement  "            throw new InvalidOperationException("CollectionAssert.Equals should not be used. Use CollectionAssert.AreEqual instead."); " is 122.
Long Statement,NUnit.Framework,DirectoryAssert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\DirectoryAssert.cs,Equals,The length of the statement  "            throw new InvalidOperationException("DirectoryAssert.Equals should not be used. Use DirectoryAssert.AreEqual instead."); " is 120.
Long Statement,NUnit.Framework,StringAssert,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\StringAssert.cs,Equals,The length of the statement  "            throw new InvalidOperationException("StringAssert.Equals should not be used. Use StringAssert.AreEqualIgnoringCase or Assert.AreEqual instead."); " is 145.
Long Statement,NUnit.Framework.Api,DefaultTestAssemblyBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\DefaultTestAssemblyBuilder.cs,Build,The length of the statement  "                    var testParametersDictionary = options[FrameworkPackageSettings.TestParametersDictionary] as IDictionary<string' string>; " is 121.
Long Statement,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\FrameworkController.cs,Initialize,The length of the statement  "                var traceLevel = (InternalTraceLevel)Enum.Parse(typeof(InternalTraceLevel)' (string)Settings[FrameworkPackageSettings.InternalTraceLevel]' true); " is 145.
Long Statement,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\FrameworkController.cs,InsertSettingsElement,The length of the statement  "                AddSetting(settingsNode' FrameworkPackageSettings.NumberOfTestWorkers' NUnitTestAssemblyRunner.DefaultLevelOfParallelism); " is 122.
Long Statement,NUnit.Framework.Api,NUnitTestAssemblyRunner,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\NUnitTestAssemblyRunner.cs,StartRun,The length of the statement  "            if (!Settings.ContainsKey(FrameworkPackageSettings.SynchronousEvents) || !(bool)Settings[FrameworkPackageSettings.SynchronousEvents]) " is 133.
Long Statement,NUnit.Framework.Api,NUnitTestAssemblyRunner,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\NUnitTestAssemblyRunner.cs,StartRun,The length of the statement  "                    TopLevelWorkItem.MarkNotRunnable("System.Security.Permissions.UIPermission must be granted in order to launch the debugger."); " is 126.
Long Statement,NUnit.Framework.Api,NUnitTestAssemblyRunner,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\NUnitTestAssemblyRunner.cs,PauseBeforeRun,The length of the statement  "                $"Pausing as requested. If you would like to attach a debugger' the process name and ID are {process.ProcessName}.exe and {process.Id}." + Environment.NewLine " is 158.
Long Statement,System.Collections.Concurrent,ConcurrentQueue<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Collections.Concurrent\ConcurrentQueue.cs,InitializeFromCollection,The length of the statement  "            Segment localTail = new Segment(0' this);//use this local variable to avoid the extra volatile read/write. this is safe because it is only called from ctor " is 155.
Long Statement,System.Threading,SpinWait,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Threading\SpinWait.cs,SpinOnce,The length of the statement  "                    // http://joeduffyblog.com/2006/08/22/priorityinduced-starvation-why-sleep1-is-better-than-sleep0-and-the-windows-balance-set-manager/ " is 134.
Long Statement,NUnit.Framework.Constraints,CollectionContainsConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\CollectionContainsConstraint.cs,Using,The length of the statement  "            Func<TMemberType' TCollectionType' bool> invertedComparison = (actual' expected) => comparison.Invoke(expected' actual); " is 120.
Long Statement,NUnit.Framework.Constraints,CollectionOrderedConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\CollectionOrderedConstraint.cs,ExtractValue,The length of the statement  "            throw new ArgumentException($"No property or field with name {propertyName} was found at index {index}"' nameof(actual)); " is 121.
Long Statement,NUnit.Framework.Constraints,DictionaryContainsKeyConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DictionaryContainsKeyConstraint.cs,Matches,The length of the statement  "            throw new ArgumentException($"The {TypeHelper.GetDisplayName(actual.GetType())} value must have a ContainsKey or Contains(TKey) method."); " is 138.
Long Statement,NUnit.Framework.Constraints,DictionaryContainsKeyConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DictionaryContainsKeyConstraint.cs,Using,The length of the statement  "            Func<TMemberType' TCollectionType' bool> invertedComparison = (actual' expected) => comparison.Invoke(expected' actual); " is 120.
Long Statement,NUnit.Framework.Constraints,DictionaryContainsValueConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DictionaryContainsValueConstraint.cs,Using,The length of the statement  "            Func<TMemberType' TCollectionType' bool> invertedComparison = (actual' expected) => comparison.Invoke(expected' actual); " is 120.
Long Statement,NUnit.Framework.Constraints,EmptyConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\EmptyConstraint.cs,ApplyTo,The length of the statement  "                throw new System.ArgumentException($"The actual value must be a string' non-null IEnumerable or DirectoryInfo. The value passed was of type {actualType}."' nameof(actual)); " is 172.
Long Statement,NUnit.Framework.Constraints,PathConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\PathConstraint.cs,GetStringRepresentation,The length of the statement  "            return string.Format("<{0} \"{1}\" {2}>"' DisplayName.ToLower()' expected' caseInsensitive ? "ignorecase" : "respectcase"); " is 123.
Long Statement,NUnit.Framework.Internal,AsyncToSyncAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\AsyncToSyncAdapter.cs,IsAsyncOperation,The length of the statement  "                || method.GetCustomAttributes(false).Any(attr => attr.GetType().FullName == "System.Runtime.CompilerServices.AsyncStateMachineAttribute"); " is 138.
Long Statement,NUnit.Framework.Internal,AwaitAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\AwaitAdapter.cs,FromAwaitable,The length of the statement  "            throw new NotSupportedException("NUnit can only await objects which follow the C# specification for awaitable expressions."); " is 125.
Long Statement,NUnit.Framework.Internal,AwaitShapeInfo,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\CSharpPatternBasedAwaitAdapter.AwaitShapeInfo.cs,TryCreate,The length of the statement  "                // See https://docs.microsoft.com/dotnet/csharp/language-reference/language-specification/expressions#awaitable-expressions " is 123.
Long Statement,NUnit.Framework.Internal,AwaitShapeInfo,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\CSharpPatternBasedAwaitAdapter.AwaitShapeInfo.cs,TryCreate,The length of the statement  "                var onCompletedMethod = notifyCompletionInterface.GetNonGenericPublicInstanceMethod("OnCompleted"' new[] { typeof(Action) }); " is 125.
Long Statement,NUnit.Framework.Internal,AwaitShapeInfo,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\CSharpPatternBasedAwaitAdapter.AwaitShapeInfo.cs,TryCreate,The length of the statement  "                var criticalNotifyCompletionInterface = awaiterType.GetInterface("System.Runtime.CompilerServices.ICriticalNotifyCompletion"); " is 126.
Long Statement,NUnit.Framework.Internal,AwaitShapeInfo,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\CSharpPatternBasedAwaitAdapter.AwaitShapeInfo.cs,TryCreate,The length of the statement  "                var unsafeOnCompletedMethod = criticalNotifyCompletionInterface?.GetNonGenericPublicInstanceMethod("UnsafeOnCompleted"' new[] { typeof(Action) }); " is 146.
Long Statement,NUnit.Framework.Internal,DefaultBlockingAwaitAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\DefaultBlockingAwaitAdapter.cs,BlockUntilCompleted,The length of the statement  "#pragma warning disable 420 // Taking a ref to a volatile field is fine if the ref is only used by Interlocked or Volatile methods. " is 131.
Long Statement,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayDifferences,The length of the statement  "            if (expected != null && actual != null && expected.GetType() != actual.GetType() && MsgUtils.FormatValue(expected) == MsgUtils.FormatValue(actual)) " is 147.
Long Statement,NUnit.Framework.Internal,FSharpAsyncAwaitAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\FSharpAsyncAwaitAdapter.cs,TryCreate,The length of the statement  "                var asyncHelperMethodsType = info.FSharpAsyncTypeDefinition.GetTypeInfo().Assembly.GetType("Microsoft.FSharp.Control.FSharpAsync"); " is 131.
Long Statement,NUnit.Framework.Internal,FSharpAsyncAwaitAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\FSharpAsyncAwaitAdapter.cs,TryCreate,The length of the statement  "                    throw new InvalidOperationException("Cannot find non-generic FSharpAsync type in the same assembly as the generic one."); " is 121.
Long Statement,NUnit.Framework.Internal,GenericMethodHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\GenericMethodHelper.cs,TryGetTypeArguments,The length of the statement  "            Guard.ArgumentValid(argList.Length == ParmTypes.Length' "Supplied arguments do not match required method parameters"' nameof(argList)); " is 135.
Long Statement,NUnit.Framework.Internal,SingleThreadedTestMessagePumpStrategy,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\MessagePumpStrategy.cs,WaitForCompletion,The length of the statement  "                    throw new InvalidOperationException("This strategy must only be used from a SingleThreadedTestSynchronizationContext."); " is 120.
Long Statement,NUnit.Framework.Internal,ParamAttributeTypeConversions,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ParamAttributeTypeConversions.cs,TryConvert,The length of the statement  "            if (underlyingTargetType == typeof(short) || underlyingTargetType == typeof(byte) || underlyingTargetType == typeof(sbyte)" is 122.
Long Statement,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsNetCoreRuntimeSupported,The length of the statement  "                throw new PlatformNotSupportedException($"Detecting versions of .NET Core is not supported - {runtime.ToString()}-{versionSpecification}"); " is 139.
Long Statement,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextBool,The length of the statement  "            Guard.ArgumentInRange(probability >= 0.0 && probability <= 1.0' "Probability must be from 0.0 to 1.0"' nameof(probability)); " is 124.
Long Statement,NUnit.Framework.Internal,Reflect,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Reflect.cs,GetUltimateShadowingProperty,The length of the statement  "                // because chances are if there is a public property' it would be very surprising to detect the private shadowing property. " is 123.
Long Statement,NUnit.Framework.Internal,Reflect,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Reflect.cs,GetUltimateShadowingProperty,The length of the statement  "                    var property = publicSearchType.GetProperty(name' (bindingFlags | BindingFlags.DeclaredOnly) & ~BindingFlags.NonPublic); " is 120.
Long Statement,NUnit.Framework.Internal,Reflect,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Reflect.cs,IsNullable,The length of the statement  "            // Compare with https://github.com/dotnet/coreclr/blob/bb01fb0d954c957a36f3f8c7aad19657afc2ceda/src/mscorlib/src/System/Nullable.cs#L152-L157 " is 141.
Long Statement,NUnit.Framework.Internal,TestSuiteResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Results\TestSuiteResult.cs,MergeChildResult,The length of the statement  "            _totalCount += childResult.PassCount + childResult.FailCount + childResult.SkipCount + childResult.InconclusiveCount + childResult.WarningCount; " is 144.
Long Statement,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,Supports,The length of the statement  "            return FrameworkVersion.Major == target.FrameworkVersion.Major && FrameworkVersion.Minor >= target.FrameworkVersion.Minor; " is 122.
Long Statement,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,IsNetCore,The length of the statement  "            // Mono versions will throw a TypeLoadException when attempting to run the internal method' so we wrap it in a try/catch " is 120.
Long Statement,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,IsNetCore,The length of the statement  "            Type runtimeInfoType = Type.GetType("System.Runtime.InteropServices.RuntimeInformation'System.Runtime.InteropServices.RuntimeInformation"' false); " is 146.
Long Statement,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,IsNetCore_Internal,The length of the statement  "            if (System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription.StartsWith(".NET Core"' StringComparison.OrdinalIgnoreCase)) " is 135.
Long Statement,NUnit.Framework.Internal,TypeNameDifferenceResolver,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TypeNameDifferenceResolver.cs,GetShortenedGenericParams,The length of the statement  "                ResolveTypeNameDifference(templateParamsExpected[0]' templateParamsActual[0]' out var shortenedExpected' out var shortenedActual); " is 130.
Long Statement,NUnit.Framework.Internal,ValueGenerator<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.cs,CreateNotSupportedException,The length of the statement  "            return new NotSupportedException($"{typeof(T)} is using the default value generator which does not support {description}.");" is 124.
Long Statement,NUnit.Framework.Internal,DoubleValueGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.DoubleValueGenerator.cs,TryCreateStep,The length of the statement  "                            throw new ArithmeticException($"Not enough precision to represent the next step; {prev:r} + {stepValue:r} = {next:r}."); " is 120.
Long Statement,NUnit.Framework.Internal,SingleValueGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.SingleValueGenerator.cs,TryCreateStep,The length of the statement  "                            throw new ArithmeticException($"Not enough precision to represent the next step; {prev:r} + {stepValue:r} = {next:r}."); " is 120.
Long Statement,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,HasDataFor,The length of the statement  "            foreach (MemberInfo member in containingType.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy)) " is 180.
Long Statement,NUnit.Framework.Internal.Builders,DatapointProvider,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\DatapointProvider.cs,GetDataFor,The length of the statement  "            foreach (MemberInfo member in fixtureType.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy)) " is 177.
Long Statement,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The length of the statement  "                return MarkAsNotRunnable(testMethod' string.Format("Not enough arguments provided' provide at least {0} arguments."' minArgsNeeded));" is 133.
Long Statement,NUnit.Framework.Internal.Builders,NUnitTestCaseBuilder,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\NUnitTestCaseBuilder.cs,CheckTestMethodSignature,The length of the statement  "                return MarkAsNotRunnable(testMethod' string.Format("Too many arguments provided' provide at most {0} arguments."' maxArgsNeeded));" is 130.
Long Statement,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,SelfTest,The length of the statement  "                                    throw new InvalidOperationException( string.Format( "PairwiseStrategy : Not all pairs are covered : {0}"' tuple.ToString() ) ); " is 127.
Long Statement,NUnit.Framework.Internal.Execution,EventPump,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\EventPump.cs,Start,The length of the statement  "            if ( Interlocked.CompareExchange (ref _pumpState' (int)EventPumpState.Pumping' (int)EventPumpState.Stopped) == (int)EventPumpState.Stopped)  // Ignore if already started " is 169.
Long Statement,NUnit.Framework.Internal.Execution,EventPump,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\EventPump.cs,Stop,The length of the statement  "            if (Interlocked.CompareExchange (ref _pumpState' (int)EventPumpState.Stopping' (int)EventPumpState.Pumping) == (int)EventPumpState.Pumping) " is 139.
Long Statement,NUnit.Framework.Internal.Execution,SimpleWorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\SimpleWorkItem.cs,MakeTestCommand,The length of the statement  "                var setUpMethods = parentFixture?.SetUpMethods ?? Reflect.GetMethodsWithAttribute(Test.TypeInfo.Type' typeof(SetUpAttribute)' true); " is 132.
Long Statement,NUnit.Framework.Internal.Execution,SimpleWorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\SimpleWorkItem.cs,MakeTestCommand,The length of the statement  "                var tearDownMethods = parentFixture?.TearDownMethods ?? Reflect.GetMethodsWithAttribute(Test.TypeInfo.Type' typeof(TearDownAttribute)' true); " is 141.
Long Statement,NUnit.Framework.Internal.Execution,WorkItemQueue,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItemQueue.cs,Start,The length of the statement  "            if (Interlocked.CompareExchange(ref _state' (int)WorkItemQueueState.Running' (int)WorkItemQueueState.Paused) == (int)WorkItemQueueState.Paused)" is 143.
Long Statement,NUnit.Framework.Internal.Execution,WorkItemQueue,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItemQueue.cs,Restore,The length of the statement  "            //Guard.OperationValid(State != WorkItemQueueState.Running' $"Attempted to restore state of {Name} while queue was running.");" is 126.
Complex Conditional,NUnit.Framework,RandomAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\RandomAttribute.cs,WeConvert,The conditional expression  "targetType == typeof(short) || targetType == typeof(ushort) || targetType == typeof(byte) || targetType == typeof(sbyte)"  is complex.
Complex Conditional,System.Collections.Concurrent,ConcurrentQueue<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Compatibility\System.Collections.Concurrent\ConcurrentQueue.cs,GetHeadTailPositions,The conditional expression  "head != m_head || tail != m_tail                  //if low and high pointers' retry                  || headLow != head.Low || tailHigh != tail.High                  //if head jumps ahead of tail because of concurrent grow and dequeue' retry                  || head.m_index > tail.m_index"  is complex.
Complex Conditional,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\TNode.cs,EscapeInvalidXmlCharacters,The conditional expression  "!(0x0 <= c && c <= 0x8) &&                      c != 0xB &&                      c != 0xC &&                      !(0xE <= c && c <= 0x1F) &&                      !(0x7F <= c && c <= 0x84) &&                      !(0x86 <= c && c <= 0x9F) &&                      !(0xD800 <= c && c <= 0xDFFF) &&                      c != 0xFFFE &&                      c != 0xFFFF"  is complex.
Complex Conditional,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayDifferences,The conditional expression  "expected != null && actual != null && expected.GetType() != actual.GetType() && MsgUtils.FormatValue(expected) == MsgUtils.FormatValue(actual)"  is complex.
Complex Conditional,NUnit.Framework.Internal,ParamAttributeTypeConversions,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ParamAttributeTypeConversions.cs,TryConvert,The conditional expression  "underlyingTargetType == typeof(short) || underlyingTargetType == typeof(byte) || underlyingTargetType == typeof(sbyte)                 || underlyingTargetType == typeof(long) || underlyingTargetType == typeof(double)"  is complex.
Complex Conditional,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The conditional expression  "token.Length >= 5 && token[2] == ':' && (c == 'a' || c == 'p' || char.IsDigit(c))"  is complex.
Complex Conditional,NUnit.Framework.Internal,ValueGenerator<T>,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ValueGenerator.cs,GenerateRange,The conditional expression  "(startToEnd < 0 && !step.IsPositive) || (startToEnd > 0 && !step.IsNegative)"  is complex.
Virtual Method Call from Constructor,NUnit.Framework.Internal,AdhocContext,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestExecutionContext.cs,AdhocContext,The constructor "AdhocContext" calls a virtual method "MakeTestResult".
Virtual Method Call from Constructor,NUnit.Framework.Internal,TestSuite,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Tests\TestSuite.cs,TestSuite,The constructor "TestSuite" calls a virtual method "Copy".
Virtual Method Call from Constructor,NUnit.Framework.Internal.Execution,WorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\WorkItem.cs,WorkItem,The constructor "WorkItem" calls a virtual method "MakeTestResult".
Empty Catch Block,NUnit.Framework.Constraints,BinarySerializableConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\BinarySerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,DelayedConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DelayedConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,DelayedConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\DelayedConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,XmlSerializableConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\XmlSerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Constraints,XmlSerializableConstraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\XmlSerializableConstraint.cs,ApplyTo,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Internal,ExceptionHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ExceptionHelper.cs,ExceptionHelper,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Internal,ThreadUtility,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ThreadUtility.cs,SetCurrentThreadPrincipal,The method has an empty catch block.
Empty Catch Block,NUnit.Framework.Internal.Execution,TestWorker,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TestWorker.cs,Start,The method has an empty catch block.
Magic Number,NUnit.Framework,CategoryAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\CategoryAttribute.cs,CategoryAttribute,The following statement contains a magic number: categoryName = categoryName.Substring( 0' categoryName.Length - 9 );
Magic Number,NUnit.Framework,CombiningStrategyAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\CombiningStrategyAttribute.cs,ApplyToTest,The following statement contains a magic number: joinType = joinType.Substring(0' joinType.Length - 8);
Magic Number,NUnit.Framework,PropertyAttribute,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Attributes\PropertyAttribute.cs,PropertyAttribute,The following statement contains a magic number: propertyName = propertyName.Substring( 0' propertyName.Length - 9 );
Magic Number,NUnit.Framework.Api,FrameworkController,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Api\FrameworkController.cs,GetProcessorArchitecture,The following statement contains a magic number: return IntPtr.Size == 8 ? "x64" : "x86";
Magic Number,NUnit.Framework.Constraints,CollectionOrderedConstraintResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\CollectionOrderedConstraint.cs,WriteActualValueTo,The following statement contains a magic number: int startIndex = Math.Max(0' _breakingIndex - MaxDisplayedItems + 2);
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: _displayName = new Lazy<string>(() =>              {                  var type = this.GetType();                  var displayName = type.Name;                  if (type.GetTypeInfo().IsGenericType)                      displayName = displayName.Substring(0' displayName.Length - 2);                  if (displayName.EndsWith("Constraint"' StringComparison.Ordinal))                      displayName = displayName.Substring(0' displayName.Length - 10);                  return displayName;              });
Magic Number,NUnit.Framework.Constraints,Constraint,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: _displayName = new Lazy<string>(() =>              {                  var type = this.GetType();                  var displayName = type.Name;                  if (type.GetTypeInfo().IsGenericType)                      displayName = displayName.Substring(0' displayName.Length - 2);                  if (displayName.EndsWith("Constraint"' StringComparison.Ordinal))                      displayName = displayName.Substring(0' displayName.Length - 10);                  return displayName;              });
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint leftSignMask = (leftUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint rightSignMask = (rightUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong leftSignMask = (leftUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong rightSignMask = (rightUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,MsgUtils,The following statement contains a magic number: AddFormatter(next => val => val is IEnumerable ? FormatCollection((IEnumerable)val' 0' 10) : next(val));
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,FormatTuple,The following statement contains a magic number: bool notLastElement = i < 7;
Magic Number,NUnit.Framework.Constraints,MsgUtils,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\MsgUtils.cs,ClipExpectedAndActual,The following statement contains a magic number: clipStart = Math.Max(0' mismatch - clipLength / 2);
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Amount);                    case ToleranceMode.Percent:                      if (expected == 0.0)                          return expected.Equals(actual);                        double relativeError = Math.Abs((expected - actual) / expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    case ToleranceMode.Ulps:                      return FloatingPointNumerics.AreAlmostEqualUlps(                          expected' actual' Convert.ToInt64(tolerance.Amount));                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Amount);                    case ToleranceMode.Percent:                      if (expected == 0.0f)                          return expected.Equals(actual);                      float relativeError = Math.Abs((expected - actual) / expected);                      return (relativeError <= Convert.ToSingle(tolerance.Amount) / 100.0f);                    case ToleranceMode.Ulps:                      return FloatingPointNumerics.AreAlmostEqualUlps(                          expected' actual' Convert.ToInt32(tolerance.Amount));                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      decimal decimalTolerance = Convert.ToDecimal(tolerance.Amount);                      if (decimalTolerance > 0m)                          return Math.Abs(expected - actual) <= decimalTolerance;                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0m)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      ulong ulongTolerance = Convert.ToUInt64(tolerance.Amount);                      if (ulongTolerance > 0ul)                      {                          ulong diff = expected >= actual ? expected - actual : actual - expected;                          return diff <= ulongTolerance;                      }                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0ul)                          return expected.Equals(actual);                        // Can't do a simple Math.Abs() here since it's unsigned                      ulong difference = Math.Max(expected' actual) - Math.Min(expected' actual);                      double relativeError = Math.Abs((double)difference / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      long longTolerance = Convert.ToInt64(tolerance.Amount);                      if (longTolerance > 0L)                          return Math.Abs(expected - actual) <= longTolerance;                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0L)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      uint uintTolerance = Convert.ToUInt32(tolerance.Amount);                      if (uintTolerance > 0)                      {                          uint diff = expected >= actual ? expected - actual : actual - expected;                          return diff <= uintTolerance;                      }                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0u)                          return expected.Equals(actual);                        // Can't do a simple Math.Abs() here since it's unsigned                      uint difference = Math.Max(expected' actual) - Math.Min(expected' actual);                      double relativeError = Math.Abs((double)difference / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.Unset:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      int intTolerance = Convert.ToInt32(tolerance.Amount);                      if (intTolerance > 0)                          return Math.Abs(expected - actual) <= intTolerance;                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Amount) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,AndOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\AndOperator.cs,AndOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 2;
Magic Number,NUnit.Framework.Constraints,CollectionOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\CollectionOperator.cs,CollectionOperator,The following statement contains a magic number: this.right_precedence = 10;
Magic Number,NUnit.Framework.Constraints,ExactCountOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\ExactCountOperator.cs,ExactCountOperator,The following statement contains a magic number: this.right_precedence = 10;
Magic Number,NUnit.Framework.Constraints,OrOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\OrOperator.cs,OrOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 3;
Magic Number,NUnit.Framework.Constraints,ThrowsOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\ThrowsOperator.cs,ThrowsOperator,The following statement contains a magic number: this.right_precedence = 100;
Magic Number,NUnit.Framework.Constraints,WithOperator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Operators\WithOperator.cs,WithOperator,The following statement contains a magic number: this.right_precedence = 4;
Magic Number,NUnit.Framework.Constraints,Tolerance,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Tolerance.cs,PercentRange,The following statement contains a magic number: var offset = v * Convert.ToDouble(Amount) / 100.0;
Magic Number,NUnit.Framework.Constraints.Comparers,TupleComparerBase,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Constraints\Comparers\TupleComparerBase.cs,Equal,The following statement contains a magic number: string propertyName = i < 7 ? "Item" + (i + 1) : "Rest";
Magic Number,NUnit.Framework.Interfaces,AssertionResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\AssertionResult.cs,GetHashCode,The following statement contains a magic number: var hashCode = -783279553;
Magic Number,NUnit.Framework.Interfaces,AssertionResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\AssertionResult.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + Status.GetHashCode();
Magic Number,NUnit.Framework.Interfaces,AssertionResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\AssertionResult.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Message);
Magic Number,NUnit.Framework.Interfaces,AssertionResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\AssertionResult.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(StackTrace);
Magic Number,NUnit.Framework.Interfaces,ResultState,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\ResultState.cs,GetHashCode,The following statement contains a magic number: var hashCode = -665355758;
Magic Number,NUnit.Framework.Interfaces,ResultState,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\ResultState.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + Status.GetHashCode();
Magic Number,NUnit.Framework.Interfaces,ResultState,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\ResultState.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Label);
Magic Number,NUnit.Framework.Interfaces,ResultState,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\ResultState.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + Site.GetHashCode();
Magic Number,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\TNode.cs,WriteCDataTo,The following statement contains a magic number: writer.WriteCData(text.Substring(start' illegal - start + 2));
Magic Number,NUnit.Framework.Interfaces,TNode,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\TNode.cs,WriteCDataTo,The following statement contains a magic number: start = illegal + 2;
Magic Number,NUnit.Framework.Interfaces,NodeFilter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Interfaces\TNode.cs,NodeFilter,The following statement contains a magic number: string filter = xpath.Substring(lbrack+1' xpath.Length - lbrack - 2);
Magic Number,NUnit.Framework.Internal,AssemblyHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\AssemblyHelper.cs,GetAssemblyPathFromCodeBase,The following statement contains a magic number: codeBase[start + 2] == ':'
Magic Number,NUnit.Framework.Internal,AsyncToSyncAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\AsyncToSyncAdapter.cs,InitializeExecutionEnvironment,The following statement contains a magic number: var singleThreadedContext = new SingleThreadedTestSynchronizationContext(                          shutdownTimeout: TimeSpan.FromSeconds(10));
Magic Number,NUnit.Framework.Internal,DecimalParts,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\DecimalParts.cs,FromValue,The following statement contains a magic number: var flags = (uint)parts[3];
Magic Number,NUnit.Framework.Internal,DecimalParts,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\DecimalParts.cs,FromValue,The following statement contains a magic number: return new DecimalParts(                      low: (uint)parts[0]'                      mid: (uint)parts[1]'                      high: (uint)parts[2]'                      isNegative: (flags & 0x80000000) != 0'                      scale: (byte)(flags >> 16));
Magic Number,NUnit.Framework.Internal,DecimalParts,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\DecimalParts.cs,FromValue,The following statement contains a magic number: return new DecimalParts(                      low: (uint)parts[0]'                      mid: (uint)parts[1]'                      high: (uint)parts[2]'                      isNegative: (flags & 0x80000000) != 0'                      scale: (byte)(flags >> 16));
Magic Number,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,DisplayStringDifferences,The following statement contains a magic number: int maxDisplayLength = MaxLineLength                  - PrefixLength   // Allow for prefix                  - 2;
Magic Number,NUnit.Framework.Internal,TextMessageWriter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\TextMessageWriter.cs,WriteCaretLine,The following statement contains a magic number: WriteLine("  {0}^"' new string('-'' PrefixLength + mismatch - 2 + 1));
Magic Number,NUnit.Framework.Internal,FSharpAsyncAwaitAdapter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\FSharpAsyncAwaitAdapter.cs,TryCreate,The following statement contains a magic number: _startImmediateAsTaskMethod = asyncHelperMethodsType                     .GetMethods(BindingFlags.Public | BindingFlags.Static)                     .Single(method =>                     {                         if (method.Name != "StartImmediateAsTask") return false;                         var typeArguments = method.GetGenericArguments();                         if (typeArguments.Length != 1) return false;                           var parameters = method.GetParameters();                         if (parameters.Length != 2) return false;                           if (parameters[0].ParameterType != info.FSharpAsyncTypeDefinition.MakeGenericType(typeArguments[0])) return false;                           Type someType;                         return parameters[1].ParameterType.IsFSharpOption(out someType)                             && someType.FullName == "System.Threading.CancellationToken";                     });
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The following statement contains a magic number: return new Version(6' 3' build);
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\OSPlatform.cs,GetWindows81PlusVersion,The following statement contains a magic number: return new Version(6' 3' build);
Magic Number,NUnit.Framework.Internal,OSPlatform,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\OSPlatform.cs,CheckIfIsMacOSX,The following statement contains a magic number: IntPtr buf = Marshal.AllocHGlobal(8192);
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )              {                  case "WIN":                  case "WIN32":                      isSupported = _os.IsWindows;                      break;                  case "WIN32S":                      isSupported = _os.IsWin32S;                      break;                  case "WIN32WINDOWS":                      isSupported = _os.IsWin32Windows;                      break;                  case "WIN32NT":                      isSupported = _os.IsWin32NT;                      break;                  case "WIN95":                      isSupported = _os.IsWin95;                      break;                  case "WIN98":                      isSupported = _os.IsWin98;                      break;                  case "WINME":                      isSupported = _os.IsWinME;                      break;                  case "NT3":                      isSupported = _os.IsNT3;                      break;                  case "NT4":                      isSupported = _os.IsNT4;                      break;                  case "NT5":                      isSupported = _os.IsNT5;                      break;                  case "WIN2K":                      isSupported = _os.IsWin2K;                      break;                  case "WINXP":                      isSupported = _os.IsWinXP;                      break;                  case "WIN2003SERVER":                      isSupported = _os.IsWin2003Server;                      break;                  case "NT6":                      isSupported = _os.IsNT6;                      break;                  case "VISTA":                      isSupported = _os.IsVista;                      break;                  case "WIN2008SERVER":                      isSupported = _os.IsWin2008Server;                      break;                  case "WIN2008SERVERR2":                      isSupported = _os.IsWin2008ServerR2;                      break;                  case "WIN2012SERVER":                      isSupported = _os.IsWin2012ServerR1 || _os.IsWin2012ServerR2;                      break;                  case "WIN2012SERVERR2":                      isSupported = _os.IsWin2012ServerR2;                      break;                  case "WIN7":                  case "WINDOWS7":                      isSupported = _os.IsWindows7;                      break;                  case "WINDOWS8":                  case "WIN8":                      isSupported = _os.IsWindows8;                      break;                  case "WINDOWS8.1":                  case "WIN8.1":                      isSupported = _os.IsWindows81;                      break;                  case "WINDOWS10":                  case "WIN10":                      isSupported = _os.IsWindows10;                      break;                  case "WINDOWSSERVER10":                      isSupported = _os.IsWindowsServer10;                      break;                  case "UNIX":                  case "LINUX":                      isSupported = _os.IsUnix;                      break;                  case "XBOX":                      isSupported = _os.IsXbox;                      break;                  case "MACOSX":                      isSupported = _os.IsMacOSX;                      break;                  // These bitness tests relate to the process' not the OS.                  // We can't use Environment.Is64BitProcess because it's                  // only supported in NET 4.0 and higher.                  case "64-BIT":                  case "64-BIT-PROCESS":                      isSupported = IntPtr.Size == 8;                      break;                  case "32-BIT":                  case "32-BIT-PROCESS":                      isSupported = IntPtr.Size == 4;                      break;    #if NET40 || NET45 || NETSTANDARD2_0                  // We only support bitness tests of the OS in .NET 4.0 and up                  case "64-BIT-OS":                      isSupported = Environment.Is64BitOperatingSystem;                      break;                  case "32-BIT-OS":                      isSupported = !Environment.Is64BitOperatingSystem;                      break;  #endif                    default:                      isSupported = IsRuntimeSupported(platformName);                      break;              }
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsPlatformSupported,The following statement contains a magic number: switch( platformName.ToUpper() )              {                  case "WIN":                  case "WIN32":                      isSupported = _os.IsWindows;                      break;                  case "WIN32S":                      isSupported = _os.IsWin32S;                      break;                  case "WIN32WINDOWS":                      isSupported = _os.IsWin32Windows;                      break;                  case "WIN32NT":                      isSupported = _os.IsWin32NT;                      break;                  case "WIN95":                      isSupported = _os.IsWin95;                      break;                  case "WIN98":                      isSupported = _os.IsWin98;                      break;                  case "WINME":                      isSupported = _os.IsWinME;                      break;                  case "NT3":                      isSupported = _os.IsNT3;                      break;                  case "NT4":                      isSupported = _os.IsNT4;                      break;                  case "NT5":                      isSupported = _os.IsNT5;                      break;                  case "WIN2K":                      isSupported = _os.IsWin2K;                      break;                  case "WINXP":                      isSupported = _os.IsWinXP;                      break;                  case "WIN2003SERVER":                      isSupported = _os.IsWin2003Server;                      break;                  case "NT6":                      isSupported = _os.IsNT6;                      break;                  case "VISTA":                      isSupported = _os.IsVista;                      break;                  case "WIN2008SERVER":                      isSupported = _os.IsWin2008Server;                      break;                  case "WIN2008SERVERR2":                      isSupported = _os.IsWin2008ServerR2;                      break;                  case "WIN2012SERVER":                      isSupported = _os.IsWin2012ServerR1 || _os.IsWin2012ServerR2;                      break;                  case "WIN2012SERVERR2":                      isSupported = _os.IsWin2012ServerR2;                      break;                  case "WIN7":                  case "WINDOWS7":                      isSupported = _os.IsWindows7;                      break;                  case "WINDOWS8":                  case "WIN8":                      isSupported = _os.IsWindows8;                      break;                  case "WINDOWS8.1":                  case "WIN8.1":                      isSupported = _os.IsWindows81;                      break;                  case "WINDOWS10":                  case "WIN10":                      isSupported = _os.IsWindows10;                      break;                  case "WINDOWSSERVER10":                      isSupported = _os.IsWindowsServer10;                      break;                  case "UNIX":                  case "LINUX":                      isSupported = _os.IsUnix;                      break;                  case "XBOX":                      isSupported = _os.IsXbox;                      break;                  case "MACOSX":                      isSupported = _os.IsMacOSX;                      break;                  // These bitness tests relate to the process' not the OS.                  // We can't use Environment.Is64BitProcess because it's                  // only supported in NET 4.0 and higher.                  case "64-BIT":                  case "64-BIT-PROCESS":                      isSupported = IntPtr.Size == 8;                      break;                  case "32-BIT":                  case "32-BIT-PROCESS":                      isSupported = IntPtr.Size == 4;                      break;    #if NET40 || NET45 || NETSTANDARD2_0                  // We only support bitness tests of the OS in .NET 4.0 and up                  case "64-BIT-OS":                      isSupported = Environment.Is64BitOperatingSystem;                      break;                  case "32-BIT-OS":                      isSupported = !Environment.Is64BitOperatingSystem;                      break;  #endif                    default:                      isSupported = IsRuntimeSupported(platformName);                      break;              }
Magic Number,NUnit.Framework.Internal,PlatformHelper,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\PlatformHelper.cs,IsRuntimeSupported,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextBool,The following statement contains a magic number: return NextDouble() < 0.5;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,MaskToRemoveBitsGuaranteedToExceedMaximum,The following statement contains a magic number: value |= value >> 2;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,MaskToRemoveBitsGuaranteedToExceedMaximum,The following statement contains a magic number: value |= value >> 4;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,MaskToRemoveBitsGuaranteedToExceedMaximum,The following statement contains a magic number: value |= value >> 8;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,MaskToRemoveBitsGuaranteedToExceedMaximum,The following statement contains a magic number: value |= value >> 16;
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextGuid,The following statement contains a magic number: var b = new byte[16];
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextGuid,The following statement contains a magic number: b[7] = (byte)((b[7] & 0x0f) | 0x40);
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextGuid,The following statement contains a magic number: b[7] = (byte)((b[7] & 0x0f) | 0x40);
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextGuid,The following statement contains a magic number: b[8] = (byte)((b[8] & 0x3f) | 0x80);
Magic Number,NUnit.Framework.Internal,Randomizer,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Randomizer.cs,NextGuid,The following statement contains a magic number: b[8] = (byte)((b[8] & 0x3f) | 0x80);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: ClrVersion = new Version(4' 0' 30319);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: ClrVersion = new Version(4' 0' 30319);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: Runtime == RuntimeType.Net && version.Major == 4 && version.Minor == 5
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: Runtime == RuntimeType.Net && version.Major == 4 && version.Minor == 5
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: ClrVersion = new Version(4' 0' 30319);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,InitFromClrVersion,The following statement contains a magic number: ClrVersion = new Version(4' 0' 30319);
Magic Number,NUnit.Framework.Internal,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\RuntimeFramework.cs,Parse,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                  {                      case "{m}":                          fragments.Add(new MethodNameFragment());                          break;                      case "{i}":                          fragments.Add(new TestIDFragment());                          break;                      case "{n}":                          fragments.Add(new NamespaceFragment());                          break;                      case "{c}":                          fragments.Add(new ClassNameFragment());                          break;                      case "{C}":                          fragments.Add(new ClassFullNameFragment());                          break;                      case "{M}":                          fragments.Add(new MethodFullNameFragment());                          break;                      case "{a}":                          fragments.Add(new ArgListFragment(0));                          break;                      case "{p}":                          fragments.Add(new ParamArgListFragment(0));                          break;                      case "{0}":                      case "{1}":                      case "{2}":                      case "{3}":                      case "{4}":                      case "{5}":                      case "{6}":                      case "{7}":                      case "{8}":                      case "{9}":                          int index = token[1] - '0';                          fragments.Add(new ArgumentFragment(index' 0));                          break;                      default:                          char c = token[1];                          if (token.Length >= 5 && token[2] == ':' && (c == 'a' || c == 'p' || char.IsDigit(c)))                          {                              if (int.TryParse(token.Substring(3' token.Length - 4)' out var length) && length > 0)                              {                                  if (c == 'a')                                      fragments.Add(new ArgListFragment(length));                                  else if (c == 'p')                                      fragments.Add(new ParamArgListFragment(length));                                  else // It's a digit                                      fragments.Add(new ArgumentFragment(c - '0'' length));                                  break;                              }                          }                            // Output the erroneous token to aid user in debugging                          fragments.Add(new FixedTextFragment(token));                          break;                  }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                  {                      case "{m}":                          fragments.Add(new MethodNameFragment());                          break;                      case "{i}":                          fragments.Add(new TestIDFragment());                          break;                      case "{n}":                          fragments.Add(new NamespaceFragment());                          break;                      case "{c}":                          fragments.Add(new ClassNameFragment());                          break;                      case "{C}":                          fragments.Add(new ClassFullNameFragment());                          break;                      case "{M}":                          fragments.Add(new MethodFullNameFragment());                          break;                      case "{a}":                          fragments.Add(new ArgListFragment(0));                          break;                      case "{p}":                          fragments.Add(new ParamArgListFragment(0));                          break;                      case "{0}":                      case "{1}":                      case "{2}":                      case "{3}":                      case "{4}":                      case "{5}":                      case "{6}":                      case "{7}":                      case "{8}":                      case "{9}":                          int index = token[1] - '0';                          fragments.Add(new ArgumentFragment(index' 0));                          break;                      default:                          char c = token[1];                          if (token.Length >= 5 && token[2] == ':' && (c == 'a' || c == 'p' || char.IsDigit(c)))                          {                              if (int.TryParse(token.Substring(3' token.Length - 4)' out var length) && length > 0)                              {                                  if (c == 'a')                                      fragments.Add(new ArgListFragment(length));                                  else if (c == 'p')                                      fragments.Add(new ParamArgListFragment(length));                                  else // It's a digit                                      fragments.Add(new ArgumentFragment(c - '0'' length));                                  break;                              }                          }                            // Output the erroneous token to aid user in debugging                          fragments.Add(new FixedTextFragment(token));                          break;                  }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                  {                      case "{m}":                          fragments.Add(new MethodNameFragment());                          break;                      case "{i}":                          fragments.Add(new TestIDFragment());                          break;                      case "{n}":                          fragments.Add(new NamespaceFragment());                          break;                      case "{c}":                          fragments.Add(new ClassNameFragment());                          break;                      case "{C}":                          fragments.Add(new ClassFullNameFragment());                          break;                      case "{M}":                          fragments.Add(new MethodFullNameFragment());                          break;                      case "{a}":                          fragments.Add(new ArgListFragment(0));                          break;                      case "{p}":                          fragments.Add(new ParamArgListFragment(0));                          break;                      case "{0}":                      case "{1}":                      case "{2}":                      case "{3}":                      case "{4}":                      case "{5}":                      case "{6}":                      case "{7}":                      case "{8}":                      case "{9}":                          int index = token[1] - '0';                          fragments.Add(new ArgumentFragment(index' 0));                          break;                      default:                          char c = token[1];                          if (token.Length >= 5 && token[2] == ':' && (c == 'a' || c == 'p' || char.IsDigit(c)))                          {                              if (int.TryParse(token.Substring(3' token.Length - 4)' out var length) && length > 0)                              {                                  if (c == 'a')                                      fragments.Add(new ArgListFragment(length));                                  else if (c == 'p')                                      fragments.Add(new ParamArgListFragment(length));                                  else // It's a digit                                      fragments.Add(new ArgumentFragment(c - '0'' length));                                  break;                              }                          }                            // Output the erroneous token to aid user in debugging                          fragments.Add(new FixedTextFragment(token));                          break;                  }
Magic Number,NUnit.Framework.Internal,TestNameGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestNameGenerator.cs,BuildFragmentList,The following statement contains a magic number: switch (token)                  {                      case "{m}":                          fragments.Add(new MethodNameFragment());                          break;                      case "{i}":                          fragments.Add(new TestIDFragment());                          break;                      case "{n}":                          fragments.Add(new NamespaceFragment());                          break;                      case "{c}":                          fragments.Add(new ClassNameFragment());                          break;                      case "{C}":                          fragments.Add(new ClassFullNameFragment());                          break;                      case "{M}":                          fragments.Add(new MethodFullNameFragment());                          break;                      case "{a}":                          fragments.Add(new ArgListFragment(0));                          break;                      case "{p}":                          fragments.Add(new ParamArgListFragment(0));                          break;                      case "{0}":                      case "{1}":                      case "{2}":                      case "{3}":                      case "{4}":                      case "{5}":                      case "{6}":                      case "{7}":                      case "{8}":                      case "{9}":                          int index = token[1] - '0';                          fragments.Add(new ArgumentFragment(index' 0));                          break;                      default:                          char c = token[1];                          if (token.Length >= 5 && token[2] == ':' && (c == 'a' || c == 'p' || char.IsDigit(c)))                          {                              if (int.TryParse(token.Substring(3' token.Length - 4)' out var length) && length > 0)                              {                                  if (c == 'a')                                      fragments.Add(new ArgListFragment(length));                                  else if (c == 'p')                                      fragments.Add(new ParamArgListFragment(length));                                  else // It's a digit                                      fragments.Add(new ArgumentFragment(c - '0'' length));                                  break;                              }                          }                            // Output the erroneous token to aid user in debugging                          fragments.Add(new FixedTextFragment(token));                          break;                  }
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,FleaRand,The following statement contains a magic number: i < 10
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,Batch,The following statement contains a magic number: d = ( c << 19 ) + ( c >> 13 ) + b;
Magic Number,NUnit.Framework.Internal.Builders,FleaRand,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,Batch,The following statement contains a magic number: d = ( c << 19 ) + ( c >> 13 ) + b;
Magic Number,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,GetTestCases,The following statement contains a magic number: _prng = new FleaRand( 15485863 );
Magic Number,NUnit.Framework.Internal.Builders,PairwiseTestCaseGenerator,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Builders\PairwiseStrategy.cs,CreateTestCase,The following statement contains a magic number: i < 7
Magic Number,NUnit.Framework.Internal.Commands,MaxTimeCommand,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Commands\MaxTimeCommand.cs,MaxTimeCommand,The following statement contains a magic number: AfterTest = (context) =>              {                  // TODO: This command duplicates the calculation of the                  // duration of the test because that calculation is                   // normally performed at a higher level. Most likely'                  // we should move the maxtime calculation to the                  // higher level eventually.                    long tickCount = Stopwatch.GetTimestamp() - context.StartTicks;                  double seconds = (double)tickCount / Stopwatch.Frequency;                  TestResult result = context.CurrentResult;                    result.Duration = seconds;                    if (result.ResultState == ResultState.Success)                  {                      double elapsedTime = result.Duration * 1000d;                        if (elapsedTime > maxTime)                          result.SetResult(ResultState.Failure'                              string.Format("Elapsed time of {0}ms exceeds maximum of {1}ms"'                                  elapsedTime' maxTime));                  }              };
Missing Default,NUnit.Framework.Internal,TestResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Results\TestResult.cs,AddToXml,The following switch statement is missing a default case: switch (ResultState.Status)              {                  case TestStatus.Failed:                      AddFailureElement(thisNode);                      break;                  case TestStatus.Skipped:                  case TestStatus.Passed:                  case TestStatus.Inconclusive:                  case TestStatus.Warning:                      if (Message != null && Message.Trim().Length > 0)                          AddReasonElement(thisNode);                      break;              }
Missing Default,NUnit.Framework.Internal,TestSuiteResult,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Results\TestSuiteResult.cs,UpdateResultState,The following switch statement is missing a default case: switch (childResultState.Status)              {                  case TestStatus.Passed:                      if (ResultState.Status == TestStatus.Inconclusive)                          SetResult(ResultState.Success);                      break;                    case TestStatus.Warning:                      if (ResultState.Status == TestStatus.Inconclusive || ResultState.Status == TestStatus.Passed)                          SetResult(ResultState.ChildWarning' CHILD_WARNINGS_MESSAGE);                      break;                    case TestStatus.Failed:                      if (childResultState.Label == "Cancelled")                          SetResult(ResultState.Cancelled' USER_CANCELLED_MESSAGE);                      else if (ResultState.Status != TestStatus.Failed)                          SetResult(ResultState.ChildFailure' CHILD_ERRORS_MESSAGE);                      break;                    case TestStatus.Skipped:                      if (childResultState.Label == "Ignored")                          if (ResultState.Status == TestStatus.Inconclusive || ResultState.Status == TestStatus.Passed)                              SetResult(ResultState.ChildIgnored' CHILD_IGNORE_MESSAGE);                      break;              }
Missing Default,NUnit.Framework.Internal,SingleThreadedTestSynchronizationContext,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\SingleThreadedSynchronizationContext.cs,AddWork,The following switch statement is missing a default case: switch (_status)                  {                      case Status.ShuttingDown:                          if (_timeSinceShutdown.Elapsed < _shutdownTimeout) break;                          goto case Status.ShutDown;                        case Status.ShutDown:                          throw ErrorAndGetExceptionForShutdownTimeout();                  }
Missing Default,NUnit.Framework.Internal,SingleThreadedTestSynchronizationContext,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\SingleThreadedSynchronizationContext.cs,ShutDown,The following switch statement is missing a default case: switch (_status)                  {                      case Status.ShuttingDown:                      case Status.ShutDown:                          return;                  }
Missing Default,NUnit.Framework.Internal,SingleThreadedTestSynchronizationContext,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\SingleThreadedSynchronizationContext.cs,Run,The following switch statement is missing a default case: switch (_status)                  {                      case Status.Running:                          throw new InvalidOperationException("SingleThreadedTestSynchronizationContext.Run may not be reentered.");                        case Status.ShuttingDown:                      case Status.ShutDown:                          throw new InvalidOperationException("This SingleThreadedTestSynchronizationContext has been shut down.");                  }
Missing Default,NUnit.Framework.Internal,TestFilter,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\TestFilter.cs,FromXml,The following switch statement is missing a default case: switch (node.Name)              {                  case "filter":                  case "and":                      var andFilter = new AndFilter();                      foreach (var childNode in node.ChildNodes)                          andFilter.Add(FromXml(childNode));                      return andFilter;                    case "or":                      var orFilter = new OrFilter();                      foreach (var childNode in node.ChildNodes)                          orFilter.Add(FromXml(childNode));                      return orFilter;                    case "not":                      return new NotFilter(FromXml(node.FirstChild));                    case "id":                      return new IdFilter(node.Value);                    case "test":                      return new FullNameFilter(node.Value) { IsRegex = isRegex };                    case "name":                      return new TestNameFilter(node.Value) { IsRegex = isRegex };                    case "method":                      return new MethodNameFilter(node.Value) { IsRegex = isRegex };                    case "class":                      return new ClassNameFilter(node.Value) { IsRegex = isRegex };                    case "namespace":                      return new NamespaceFilter(node.Value) { IsRegex = isRegex };                    case "cat":                      return new CategoryFilter(node.Value) { IsRegex = isRegex };                    case "prop":                      string name = node.Attributes["name"];                      if (name != null)                          return new PropertyFilter(name' node.Value) { IsRegex = isRegex };                      break;              }
Missing Default,NUnit.Framework.Internal,ThreadUtility,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\ThreadUtility.cs,CheckOnAbortingThread,The following switch statement is missing a default case: switch (context.Thread.ThreadState)              {                  case ThreadState.Aborted:                      return;                  case ThreadState.AbortRequested:                      PostThreadCloseMessage(context.NativeId);                      break;              }
Missing Default,NUnit.Framework.Internal.Execution,CompositeWorkItem,C:\research\architectureSmells\repos\nunit_nunit-framework\src\NUnitFramework\framework\Internal\Execution\CompositeWorkItem.cs,PerformWork,The following switch statement is missing a default case: switch (Result.ResultState.Status)                                      {                                          case TestStatus.Passed:                                          case TestStatus.Warning:                                              RunChildren();                                              return;                                          // Just return: completion event will take care                                          // of OneTimeTearDown when all tests are done.                                            case TestStatus.Skipped:                                          case TestStatus.Inconclusive:                                          case TestStatus.Failed:                                              SkipChildren(this' Result.ResultState.WithSite(FailureSite.Parent)' "OneTimeSetUp: " + Result.Message);                                              break;                                      }
