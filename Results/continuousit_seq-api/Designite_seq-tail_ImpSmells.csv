Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SeqTail,Program,C:\repos\continuousit_seq-api\example\SeqTail\Program.cs,Run,Cyclomatic complexity of the method is 18
Long Parameter List,SeqTail,Program,C:\repos\continuousit_seq-api\example\SeqTail\Program.cs,Run,The method has 7 parameters.
Magic Number,SeqTail,Program,C:\repos\continuousit_seq-api\example\SeqTail\Program.cs,Run,The following statement contains a magic number: while (!cancel.IsCancellationRequested) {  	if (result.Count == 0) {  		await Task.Delay (TimeSpan.FromSeconds (1));  	}  	else {  		var noOverlap = result.All (e => e.Id != lastReturnedId);  		if (noOverlap && lastReturnedId != null)  			Console.WriteLine ("<window exceeded>");  		foreach (var eventEntity in ((IEnumerable<EventEntity>)result).Reverse ()) {  			if (lastPrintedBatch.Contains (eventEntity.Id)) {  				continue;  			}  			lastReturnedId = eventEntity.Id;  			var exception = "";  			if (eventEntity.Exception != null)  				exception = Environment.NewLine + eventEntity.Exception;  			var ts = DateTimeOffset.Parse (eventEntity.Timestamp).ToLocalTime ();  			var color = ConsoleColor.White;  			switch (eventEntity.Level) {  			case "Verbose":  			case "Debug":  				color = ConsoleColor.Gray;  				break;  			case "Warning":  				color = ConsoleColor.Yellow;  				break;  			case "Error":  			case "Fatal":  				color = ConsoleColor.Red;  				break;  			}  			Console.ForegroundColor = color;  			Console.WriteLine ("{0:G} [{1}] {2}{3}"' ts' eventEntity.Level' eventEntity.RenderedMessage' exception);  			Console.ResetColor ();  		}  		lastPrintedBatch = new HashSet<string> (result.Select (e => e.Id));  	}  	var fromDateUtc = lastReturnedId == null ? startedAt : DateTime.UtcNow.AddMinutes (-3);  	result = await connection.Events.ListAsync (count: window' render: true' fromDateUtc: fromDateUtc' filter: strict);  }  
Missing Default,SeqTail,Program,C:\repos\continuousit_seq-api\example\SeqTail\Program.cs,Run,The following switch statement is missing a default case: switch (eventEntity.Level) {  case "Verbose":  case "Debug":  	color = ConsoleColor.Gray;  	break;  case "Warning":  	color = ConsoleColor.Yellow;  	break;  case "Error":  case "Fatal":  	color = ConsoleColor.Red;  	break;  }  
