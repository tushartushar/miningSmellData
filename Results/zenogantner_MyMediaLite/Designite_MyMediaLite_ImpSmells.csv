Implementation smell,Namespace,Class,File,Method,Description
Long Method,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,IterateBatch,The method has 101 lines of code.
Complex Method,MyMediaLite,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Extensions.cs,SetProperty,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,ComputeCorrelations,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.Data,RatingCrossValidationSplit,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\RatingCrossValidationSplit.cs,RatingCrossValidationSplit,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.Data,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Ratings.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,MyMediaLite.Data,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Ratings.cs,UpdateCountsAndIndices,Cyclomatic complexity of the method is 21
Complex Method,MyMediaLite.Data,TimedRatings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\TimedRatings.cs,Add,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.DataType,SparseBooleanMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\SparseBooleanMatrix.cs,Resize,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.DataType,SparseMatrix<T>,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\SparseMatrix.cs,Resize,Cyclomatic complexity of the method is 10
Complex Method,MyMediaLite.RatingPrediction,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ItemKNN.cs,Predict,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ItemKNN.cs,Predict,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.RatingPrediction,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\UserKNN.cs,Predict,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\UserKNN.cs,Predict,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,SVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SVDPlusPlus.cs,Iterate,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,Iterate,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,IterateBatch,Cyclomatic complexity of the method is 23
Complex Method,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,Cyclomatic complexity of the method is 11
Complex Method,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,Iterate,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,Iterate,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,Iterate,Cyclomatic complexity of the method is 11
Complex Method,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.RatingPrediction,GSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\GSVDPlusPlus.cs,Iterate,Cyclomatic complexity of the method is 13
Complex Method,MyMediaLite.RatingPrediction,GSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\GSVDPlusPlus.cs,Predict,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.ItemRecommendation,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\ItemKNN.cs,Predict,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.ItemRecommendation,WRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\WRMF.cs,Optimize,Cyclomatic complexity of the method is 11
Complex Method,MyMediaLite.ItemRecommendation,SoftMarginRankingMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SoftMarginRankingMF.cs,UpdateFactors,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,MyMediaLite.Eval,ItemsOnline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsOnline.cs,EvaluateOnline,Cyclomatic complexity of the method is 9
Complex Method,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,FindMinimum,Cyclomatic complexity of the method is 9
Long Parameter List,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,ComputeCorrelation,The method has 6 parameters. Parameters: i_sum' j_sum' ii_sum' jj_sum' ij_sum' n
Long Parameter List,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,GetDenominator,The method has 5 parameters. Parameters: i_sum' j_sum' ii_sum' jj_sum' n
Long Parameter List,MyMediaLite.Correlation,RatingCosine,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\RatingCosine.cs,GetDenominator,The method has 5 parameters. Parameters: i_sum' j_sum' ii_sum' jj_sum' n
Long Parameter List,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The method has 5 parameters. Parameters: train' test' user_attributes' item_attributes' display_overlap
Long Parameter List,MyMediaLite.Data,KDDCupItems,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\KDDCupItems.cs,Insert,The method has 5 parameters. Parameters: item_id' type' album' artist' genres
Long Parameter List,MyMediaLite.DataType,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\MatrixExtensions.cs,RowScalarProductWithRowDifference,The method has 6 parameters. Parameters: matrix1' i' matrix2' j' matrix3' k
Long Parameter List,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The method has 5 parameters. Parameters: u' i' day' bin' err
Long Parameter List,MyMediaLite.RatingPrediction,TimeAwareBaselineWithFrequencies,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaselineWithFrequencies.cs,UpdateParameters,The method has 5 parameters. Parameters: u' i' day' bin' err
Long Parameter List,MyMediaLite.RatingPrediction,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\Extensions.cs,WritePredictions,The method has 7 parameters. Parameters: recommender' ratings' writer' user_mapping' item_mapping' line_format' header
Long Parameter List,MyMediaLite.RatingPrediction,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\Extensions.cs,WritePredictions,The method has 7 parameters. Parameters: recommender' ratings' filename' user_mapping' item_mapping' line_format' header
Long Parameter List,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,UpdateFactors,The method has 6 parameters. Parameters: user_id' item_id' other_item_id' update_u' update_i' update_j
Long Parameter List,MyMediaLite.ItemRecommendation,WRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\WRMF.cs,Optimize,The method has 5 parameters. Parameters: u' data' W' H' HH
Long Parameter List,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The method has 9 parameters. Parameters: recommender' train' candidate_items' num_predictions' filename' users' user_mapping' item_mapping' repeated_items
Long Parameter List,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The method has 9 parameters. Parameters: recommender' train' candidate_items' num_predictions' writer' users' user_mapping' item_mapping' repeated_items
Long Parameter List,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The method has 8 parameters. Parameters: recommender' user_id' candidate_items' ignore_items' num_predictions' writer' user_mapping' item_mapping
Long Parameter List,MyMediaLite.ItemRecommendation,SoftMarginRankingMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SoftMarginRankingMF.cs,UpdateFactors,The method has 6 parameters. Parameters: u' i' j' update_u' update_i' update_j
Long Parameter List,MyMediaLite.ItemRecommendation,BPRSLIM,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRSLIM.cs,UpdateFactors,The method has 6 parameters. Parameters: u' i' j' update_u' update_i' update_j
Long Parameter List,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The method has 5 parameters. Parameters: filename' rating_threshold' user_mapping' item_mapping' ignore_first_line
Long Parameter List,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The method has 5 parameters. Parameters: reader' rating_threshold' user_mapping' item_mapping' ignore_first_line
Long Parameter List,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The method has 6 parameters. Parameters: filename' user_mapping' item_mapping' rating_type' test_rating_format' ignore_first_line
Long Parameter List,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The method has 7 parameters. Parameters: reader' size' user_mapping' item_mapping' rating_type' test_rating_format' ignore_first_line
Long Parameter List,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The method has 5 parameters. Parameters: filename' user_mapping' item_mapping' test_rating_format' ignore_first_line
Long Parameter List,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The method has 5 parameters. Parameters: reader' user_mapping' item_mapping' test_rating_format' ignore_first_line
Long Parameter List,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The method has 8 parameters. Parameters: recommender' test' training' test_users' candidate_items' candidate_item_mode' repeated_events' n
Long Parameter List,MyMediaLite.Eval,ItemsOnline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsOnline.cs,EvaluateOnline,The method has 6 parameters. Parameters: recommender' test' training' test_users' candidate_items' candidate_item_mode
Long Parameter List,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoCrossValidation,The method has 7 parameters. Parameters: recommender' num_folds' test_users' candidate_items' candidate_item_mode' compute_fit' show_results
Long Parameter List,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoCrossValidation,The method has 7 parameters. Parameters: recommender' split' test_users' candidate_items' candidate_item_mode' compute_fit' show_results
Long Parameter List,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The method has 9 parameters. Parameters: recommender' num_folds' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The method has 9 parameters. Parameters: recommender' split' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.Eval,RatingsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingsCrossValidation.cs,DoIterativeCrossValidation,The method has 5 parameters. Parameters: recommender' num_folds' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.Eval,RatingsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingsCrossValidation.cs,DoIterativeCrossValidation,The method has 5 parameters. Parameters: recommender' split' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingCrossValidation,The method has 6 parameters. Parameters: recommender' num_folds' candidate_items' candidate_item_mode' compute_fit' show_results
Long Parameter List,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingCrossValidation,The method has 6 parameters. Parameters: recommender' split' candidate_items' candidate_item_mode' compute_fit' show_results
Long Parameter List,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The method has 9 parameters. Parameters: recommender' num_folds' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The method has 9 parameters. Parameters: recommender' split' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter' show_fold_results
Long Parameter List,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,Read,The method has 5 parameters. Parameters: tracks_filename' albums_filename' artists_filename' genres_filename' track_no
Long Statement,MyMediaLite,Handlers,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Handlers.cs,UnhandledExceptionHandler,The length of the statement  "				Console.Error.WriteLine("  *** MyMediaLite {0}.{1:00}                                                               ***"' version.Major' version.Minor); " is 152.
Long Statement,MyMediaLite,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Extensions.cs,SetProperty,The length of the statement  "				report_error(string.Format("Recommender {0} does not have a parameter named '{1}'.\n{2}"' type.ToString()' key' recommender)); " is 126.
Long Statement,MyMediaLite,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Extensions.cs,ListRecommenders,The length of the statement  "				if (!type.IsAbstract && !type.IsInterface && !type.IsEnum && !type.IsGenericType && type.GetInterface("IRecommender") != null) " is 126.
Long Statement,MyMediaLite,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Extensions.cs,ListRecommenders,The length of the statement  "					IRecommender recommender = prefix.Equals("MyMediaLite.RatingPrediction") ? (IRecommender) type.CreateRatingPredictor() : (IRecommender) type.CreateItemRecommender(); " is 165.
Long Statement,MyMediaLite.Correlation,BinaryDataAsymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataAsymmetricCorrelationMatrix.cs,ComputeCorrelationsUIntOverlap,The length of the statement  "					this[x' y] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(x)' entity_data.NumEntriesByRow(y)); " is 122.
Long Statement,MyMediaLite.Correlation,BinaryDataAsymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataAsymmetricCorrelationMatrix.cs,ComputeCorrelationsUIntOverlap,The length of the statement  "					this[y' x] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(y)' entity_data.NumEntriesByRow(x)); " is 122.
Long Statement,MyMediaLite.Correlation,BinaryDataAsymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataAsymmetricCorrelationMatrix.cs,ComputeCorrelationsUShortOverlap,The length of the statement  "					this[x' y] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(x)' entity_data.NumEntriesByRow(y)); " is 122.
Long Statement,MyMediaLite.Correlation,BinaryDataAsymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataAsymmetricCorrelationMatrix.cs,ComputeCorrelationsUShortOverlap,The length of the statement  "					this[y' x] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(y)' entity_data.NumEntriesByRow(x)); " is 122.
Long Statement,MyMediaLite.Correlation,BinaryDataSymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataSymmetricCorrelationMatrix.cs,ComputeCorrelationsUIntOverlap,The length of the statement  "					this[x' y] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(x)' entity_data.NumEntriesByRow(y)); " is 122.
Long Statement,MyMediaLite.Correlation,BinaryDataSymmetricCorrelationMatrix,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\BinaryDataSymmetricCorrelationMatrix.cs,ComputeCorrelationsUShortOverlap,The length of the statement  "					this[x' y] = ComputeCorrelationFromOverlap(overlap[x' y]' entity_data.NumEntriesByRow(x)' entity_data.NumEntriesByRow(y)); " is 122.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "			string s = string.Format(CultureInfo.InvariantCulture' "training data: {0} users' {1} items' {2} ratings' sparsity {3'0:0.#####}\n"' num_users' num_items' train.Count' sparsity); " is 178.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "				s += string.Format(CultureInfo.InvariantCulture' "rating period: {0} to {1}\n"' time_train.EarliestTime' time_train.LatestTime); " is 128.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "				s += string.Format(CultureInfo.InvariantCulture' "test data:     {0} users' {1} items' {2} ratings' sparsity {3'0:0.#####}\n"' num_users' num_items' test.Count' sparsity); " is 171.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "					s += string.Format(CultureInfo.InvariantCulture' "rating period: {0} to {1}\n"' time_test.EarliestTime' time_test.LatestTime); " is 126.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "			string s = string.Format(CultureInfo.InvariantCulture' "training data: {0} users' {1} items' {2} events' sparsity {3'0:0.#####}\n"' num_users' num_items' training_data.Count' sparsity); " is 185.
Long Statement,MyMediaLite.Data,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Extensions.cs,Statistics,The length of the statement  "				s += string.Format(CultureInfo.InvariantCulture' "test data:     {0} users' {1} items' {2} events' sparsity {3'0:0.#####}\n"' num_users' num_items' test_data.Count' sparsity); " is 175.
Long Statement,MyMediaLite.Data,KDDCupItems,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\KDDCupItems.cs,ToString,The length of the statement  "			return string.Format("{0} tracks' {1} albums' {2} artists' {3} genres"' num_tracks' num_albums' num_artists' num_genres); " is 121.
Long Statement,MyMediaLite.RatingPrediction,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ItemKNN.cs,RetrainItem,The length of the statement  "							correlation_matrix[item_id' other_item_id] = bin_cor.ComputeCorrelation(item_users' new HashSet<int>(BinaryDataMatrix[other_item_id])); " is 135.
Long Statement,MyMediaLite.RatingPrediction,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ItemKNN.cs,RetrainItem,The length of the statement  "						correlation_matrix[item_id' other_item_id] = rat_cor.ComputeCorrelation(ratings' EntityType.ITEM' item_id' other_item_id); " is 122.
Long Statement,MyMediaLite.RatingPrediction,KNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\KNN.cs,ToString,The length of the statement  "				this.GetType().Name' K == uint.MaxValue ? "inf" : K.ToString()' Correlation' WeightedBinary' Alpha' RegU' RegI' NumIter); " is 121.
Long Statement,MyMediaLite.RatingPrediction,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\UserKNN.cs,RetrainUser,The length of the statement  "							correlation_matrix[user_id' other_user_id] = bin_cor.ComputeCorrelation(user_items' new HashSet<int>(BinaryDataMatrix[other_user_id])); " is 135.
Long Statement,MyMediaLite.RatingPrediction,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\UserKNN.cs,RetrainUser,The length of the statement  "						correlation_matrix[user_id' other_user_id] = rat_cor.ComputeCorrelation(ratings' EntityType.USER' user_id' other_user_id); " is 122.
Long Statement,MyMediaLite.RatingPrediction,IncrementalRatingPredictor,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\IncrementalRatingPredictor.cs,UpdateRatings,The length of the statement  "					throw new Exception(string.Format("Cannot update rating for user {0} and item {1}: No such rating exists."' user_id' item_id)); " is 127.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The length of the statement  "			user_bias_by_day[u' day] += (float) (UserBiasByDayLearnRate * (err         - RegUserBiasByDay * user_bias_by_day[u' day])); " is 123.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The length of the statement  "			item_bias[i]                  += (float) (ItemBiasLearnRate          * (err * (c_u + c_ud) - RegI                 * b_i)); " is 122.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The length of the statement  "			item_bias_by_time_bin[i' bin] += (float) (ItemBiasByTimeBinLearnRate * (err * (c_u + c_ud) - RegItemBiasByTimeBin * b_ib)); " is 123.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The length of the statement  "			user_scaling[u]               += (float) (UserScalingLearnRate       * (err * (b_i + b_ib) - RegUserScaling       * (c_u - 1))); " is 128.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,UpdateParameters,The length of the statement  "			user_scaling_by_day[u' day]   += (float) (UserScalingByDayLearnRate  * (err * (b_i + b_ib) - RegUserScalingByDay  * c_ud)); " is 123.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,Predict,The length of the statement  "			result += (item_bias[item_id] + item_bias_by_time_bin[item_id' bin]) * (user_scaling[user_id] + user_scaling_by_day[user_id' day]); " is 131.
Long Statement,MyMediaLite.RatingPrediction,TimeAwareBaselineWithFrequencies,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaselineWithFrequencies.cs,UpdateParameters,The length of the statement  "			item_bias_at_frequency[i' f] += (float) (ItemBiasAtFrequencyLearnRate * (err * b_i_f_ui - RegItemBiasAtFrequency * b_i_f_ui)); " is 126.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,UpdateLearnRate,The length of the statement  "				Console.Error.WriteLine(string.Format(CultureInfo.InvariantCulture' "objective {0} learn_rate {1} "' loss' current_learnrate)); " is 127.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,SetupLoss,The length of the statement  "					compute_gradient_common = (sig_score' err) => (float) (Math.Sign(err) * sig_score * (1 - sig_score) * rating_range_size); " is 121.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,Iterate,The length of the statement  "				double score = global_bias + user_bias[u] + item_bias[i] + DataType.MatrixExtensions.RowScalarProduct(user_factors' u' item_factors' i); " is 136.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,FoldIn,The length of the statement  "					double score = global_bias + user_bias + item_bias[item_id] + DataType.MatrixExtensions.RowScalarProduct(item_factors' item_id' factors); " is 137.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The length of the statement  "						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2); " is 121.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The length of the statement  "						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2); " is 121.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ToString,The length of the statement  "				"{0} num_factors={1} bias_reg={2} reg_u={3} reg_i={4} frequency_regularization={5} learn_rate={6} bias_learn_rate={7} learn_rate_decay={8} num_iter={9} bold_driver={10} loss={11} max_threads={12} naive_parallelization={13}"' " is 224.
Long Statement,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' BiasReg' RegU' RegI' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter' BoldDriver' Loss' MaxThreads' NaiveParallelization); " is 173.
Long Statement,MyMediaLite.RatingPrediction,SVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SVDPlusPlus.cs,Train,The length of the statement  "					y_reg[item_id] = FrequencyRegularization ? (float) (Regularization / Math.Sqrt(feedback_count_by_item[item_id])) : Regularization; " is 130.
Long Statement,MyMediaLite.RatingPrediction,SVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SVDPlusPlus.cs,ToString,The length of the statement  "				"{0} num_factors={1} regularization={2} bias_reg={3} frequency_regularization={4} learn_rate={5} bias_learn_rate={6} learn_rate_decay={7} num_iter={8}"' " is 152.
Long Statement,MyMediaLite.RatingPrediction,SVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SVDPlusPlus.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' Regularization' BiasReg' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter); " is 125.
Long Statement,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,SetupLoss,The length of the statement  "					compute_gradient_common = (sig_score' err) => (float) (Math.Sign(err) * sig_score * (1 - sig_score) * rating_range_size); " is 121.
Long Statement,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,ToString,The length of the statement  "				"{0} num_factors={1} regularization={2} bias_reg={3} frequency_regularization={4} learn_rate={5} bias_learn_rate={6} learn_rate_decay={7} num_iter={8} loss={9}"' " is 161.
Long Statement,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' Regularization' BiasReg' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter' Loss); " is 131.
Long Statement,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ToString,The length of the statement  "				"{0} num_factors={1} reg_u={2} reg_i={3} bias_reg={4} social_regularization={5} learn_rate={6} bias_learn_rate={7} num_iter={8} bold_driver={9} loss={10}"' " is 155.
Long Statement,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' RegU' RegI' BiasReg' SocialRegularization' LearnRate' BiasLearnRate' NumIter' BoldDriver' Loss); " is 129.
Long Statement,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The length of the statement  "					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2); " is 121.
Long Statement,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ToString,The length of the statement  "				"{0} num_factors={1} regularization={2} bias_reg={3} frequency_regularization={4} learn_rate={5} bias_learn_rate={6} learn_rate_decay={7} num_iter={7} loss={8}"' " is 161.
Long Statement,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' Regularization' BiasReg' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter' Loss); " is 131.
Long Statement,MyMediaLite.RatingPrediction,TransductiveRatingPredictorExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ITransductiveRatingPredictor.cs,UsersWhoRated,The length of the statement  "				var training_users = item_id <= ratings.MaxItemID             ? from index in             ratings.ByItem[item_id] select             ratings.Users[index] : new int[0]; " is 167.
Long Statement,MyMediaLite.RatingPrediction,TransductiveRatingPredictorExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ITransductiveRatingPredictor.cs,UsersWhoRated,The length of the statement  "				var test_users     = item_id <= additional_feedback.MaxItemID ? from index in additional_feedback.ByItem[item_id] select additional_feedback.Users[index] : new int[0]; " is 167.
Long Statement,MyMediaLite.RatingPrediction,TransductiveRatingPredictorExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ITransductiveRatingPredictor.cs,ItemsRatedByUser,The length of the statement  "				var training_items = user_id <= ratings.MaxUserID             ? from index in             ratings.ByUser[user_id] select             ratings.Items[index] : new int[0]; " is 167.
Long Statement,MyMediaLite.RatingPrediction,TransductiveRatingPredictorExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\ITransductiveRatingPredictor.cs,ItemsRatedByUser,The length of the statement  "				var test_items     = user_id <= additional_feedback.MaxUserID ? from index in additional_feedback.ByUser[user_id] select additional_feedback.Items[index] : new int[0]; " is 167.
Long Statement,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The length of the statement  "					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2); " is 121.
Long Statement,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ToString,The length of the statement  "				"{0} num_factors={1} regularization={2} bias_reg={3} frequency_regularization={4} learn_rate={5} bias_learn_rate={6} learn_rate_decay={7} num_iter={8} loss={9}"' " is 161.
Long Statement,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' Regularization' BiasReg' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter' Loss); " is 131.
Long Statement,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ToString,The length of the statement  "				"{0} num_factors={1} regularization={2} bias_reg={3} frequency_regularization={4} learn_rate={5} bias_learn_rate={6} learn_rate_decay={7} num_iter={8} loss={9}"' " is 161.
Long Statement,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ToString,The length of the statement  "				this.GetType().Name' NumFactors' Regularization' BiasReg' FrequencyRegularization' LearnRate' BiasLearnRate' Decay' NumIter' Loss); " is 131.
Long Statement,MyMediaLite.RatingPrediction,GSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\GSVDPlusPlus.cs,Train,The length of the statement  "				x_reg[attribute_id] = FrequencyRegularization ? (float) (Regularization / item_attributes.NumEntriesByColumn(attribute_id)) : Regularization; " is 141.
Long Statement,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,UpdateFactors,The length of the statement  "			double x_uij = item_bias[item_id] - item_bias[other_item_id] + DataType.MatrixExtensions.RowScalarProductWithRowDifference(user_factors' user_id' item_factors' item_id' item_factors' other_item_id); " is 198.
Long Statement,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,IterateUser,The length of the statement  "					double x_uij = item_bias[pos_item_id] - item_bias[neg_item_id] + DataType.VectorExtensions.ScalarProduct(user_factors' DataType.MatrixExtensions.RowDifference(item_factors' pos_item_id' item_factors' neg_item_id)); " is 214.
Long Statement,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,ToString,The length of the statement  "				"{0} num_factors={1} bias_reg={2} reg_u={3} reg_i={4} reg_j={5} num_iter={6} LearnRate={7} uniform_user_sampling={8} with_replacement={9} update_j={10}"' " is 153.
Long Statement,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,ToString,The length of the statement  "				this.GetType().Name' num_factors' BiasReg' RegU' RegI' RegJ' NumIter' LearnRate' UniformUserSampling' WithReplacement' UpdateJ); " is 128.
Long Statement,MyMediaLite.ItemRecommendation,ItemKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\ItemKNN.cs,Update,The length of the statement  "					correlation_matrix[i' j] = correlation_matrix.ComputeCorrelation(DataMatrix.GetEntriesByRow(i)' DataMatrix.GetEntriesByRow(j)); " is 127.
Long Statement,MyMediaLite.ItemRecommendation,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\UserKNN.cs,FoldIn,The length of the statement  "				user_similarities[user_id] = correlation_matrix.ComputeCorrelation(Feedback.UserMatrix[user_id]' new HashSet<int>(items)); " is 122.
Long Statement,MyMediaLite.ItemRecommendation,UserKNN,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\UserKNN.cs,Update,The length of the statement  "					correlation_matrix[i' j] = correlation_matrix.ComputeCorrelation(DataMatrix.GetEntriesByRow(i)' DataMatrix.GetEntriesByRow(j)); " is 127.
Long Statement,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The length of the statement  "				WritePredictions(recommender' train' candidate_items' num_predictions' writer' users' user_mapping' item_mapping' repeated_items); " is 130.
Long Statement,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The length of the statement  "				WritePredictions(recommender' user_id' candidate_items' ignore_items' num_predictions' writer' user_mapping' item_mapping); " is 123.
Long Statement,MyMediaLite.ItemRecommendation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\Extensions.cs,WritePredictions,The length of the statement  "				writer.Write("{0}:{1}"' item_mapping.ToOriginalID(ordered_items[0].Item1)' ordered_items[0].Item2.ToString(CultureInfo.InvariantCulture)); " is 138.
Long Statement,MyMediaLite.ItemRecommendation,MultiCoreBPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\MultiCoreBPRMF.cs,ToString,The length of the statement  "				"{0} num_factors={1} bias_reg={2} reg_u={3} reg_i={4} reg_j={5} num_iter={6} learn_rate={7} uniform_user_sampling={8} with_replacement={9} update_j={10} max_threads={11}"' " is 171.
Long Statement,MyMediaLite.ItemRecommendation,MultiCoreBPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\MultiCoreBPRMF.cs,ToString,The length of the statement  "				this.GetType().Name' num_factors' BiasReg' RegU' RegI' RegJ' NumIter' LearnRate' UniformUserSampling' WithReplacement' UpdateJ' MaxThreads); " is 140.
Long Statement,MyMediaLite.ItemRecommendation,SoftMarginRankingMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SoftMarginRankingMF.cs,UpdateFactors,The length of the statement  "			double x_uij = item_bias[i] - item_bias[j] + MatrixExtensions.RowScalarProductWithRowDifference(user_factors' u' item_factors' i' item_factors' j); " is 147.
Long Statement,MyMediaLite.ItemRecommendation,SoftMarginRankingMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SoftMarginRankingMF.cs,ToString,The length of the statement  "				"{0} num_factors={1} bias_reg={2} reg_u={3} reg_i={4} reg_j={5} num_iter={6} LearnRate={7} uniform_user_sampling={8} with_replacement={9} update_j={10}"' " is 153.
Long Statement,MyMediaLite.ItemRecommendation,SoftMarginRankingMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SoftMarginRankingMF.cs,ToString,The length of the statement  "				this.GetType().Name' num_factors' BiasReg' RegU' RegI' RegJ' NumIter' LearnRate' UniformUserSampling' WithReplacement' UpdateJ); " is 128.
Long Statement,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The length of the statement  "			string binary_filename = string.Format(CultureInfo.InvariantCulture' "{0}.bin.PosOnlyFeedbackThreshold-{1}"' filename' rating_threshold); " is 137.
Long Statement,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The length of the statement  "				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0; " is 130.
Long Statement,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The length of the statement  "				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;" is 130.
Long Statement,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The length of the statement  "				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0; " is 130.
Long Statement,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The length of the statement  "				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\"")) " is 133.
Long Statement,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,WriteSparseMatrix,The length of the statement  "				writer.WriteLine(index_pair.Item1 + " " + index_pair.Item2 + " " + matrix[index_pair.Item1' index_pair.Item2].ToString(CultureInfo.InvariantCulture)); " is 150.
Long Statement,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,WriteSparseMatrix,The length of the statement  "				writer.WriteLine(index_pair.Item1 + " " + index_pair.Item2 + " " + matrix[index_pair.Item1' index_pair.Item2].ToString()); " is 122.
Long Statement,MyMediaLite.IO,EntityMappingExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\EntityMappingExtensions.cs,LoadMapping,The length of the statement  "						throw new FormatException(string.Format("Expected ID {0}' not {1}' in line '{2}'"' mapping.NumberOfEntities' internal_id' line)); " is 129.
Long Statement,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The length of the statement  "						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id] " is 123.
Long Statement,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The length of the statement  "					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user); " is 127.
Long Statement,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,Evaluate,The length of the statement  "				                        where test_ratings.Users[index] > training_ratings.MaxUserID || training_ratings.CountByUser[test_ratings.Users[index]] == 0 " is 124.
Long Statement,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,Evaluate,The length of the statement  "				                        where test_ratings.Items[index] > training_ratings.MaxItemID || training_ratings.CountByItem[test_ratings.Items[index]] == 0 select index).ToArray(); " is 149.
Long Statement,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,Evaluate,The length of the statement  "				results.NewUserNewItemResults = Evaluate(recommender' test_ratings' Enumerable.Intersect(new_user_indices' new_item_indices).ToArray()); " is 136.
Long Statement,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,Evaluate,The length of the statement  "					float prediction = time_aware_recommender.Predict(timed_ratings.Users[index]' timed_ratings.Items[index]' timed_ratings.Times[index]); " is 134.
Long Statement,MyMediaLite.Eval,ItemsOnline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsOnline.cs,EvaluateOnline,The length of the statement  "				var current_result = Items.Evaluate(recommender' current_test_data' training' current_test_data.AllUsers' candidate_items' CandidateItems.EXPLICIT); " is 148.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoCrossValidation,The length of the statement  "			var split = new PosOnlyFeedbackCrossValidationSplit<PosOnlyFeedback<SparseBooleanMatrix>>(((ItemRecommender) recommender).Feedback' num_folds); " is 143.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoCrossValidation,The length of the statement  "			return recommender.DoCrossValidation(split' test_users' candidate_items' candidate_item_mode' compute_fit' show_results); " is 121.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoCrossValidation,The length of the statement  "					var fold_results = Items.Evaluate(split_recommender' split.Test[fold]' split.Train[fold]' test_users' candidate_items' candidate_item_mode); " is 140.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "			var split = new PosOnlyFeedbackCrossValidationSplit<PosOnlyFeedback<SparseBooleanMatrix>>(((ItemRecommender) recommender).Feedback' num_folds); " is 143.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "			recommender.DoIterativeCrossValidation(split' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter); " is 134.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "					fold_results[i] = Items.Evaluate(split_recommenders[i]' split.Test[i]' split.Train[i]' test_users' candidate_items' candidate_item_mode' repeated_events); " is 154.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "			Console.WriteLine("{0} iteration {1}"' new ItemRecommendationEvaluationResults(fold_results)' iterative_recommenders[0].NumIter); " is 129.
Long Statement,MyMediaLite.Eval,ItemsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\ItemsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "							fold_results[i] = Items.Evaluate(split_recommenders[i]' split.Test[i]' split.Train[i]' test_users' candidate_items' candidate_item_mode' repeated_events); " is 154.
Long Statement,MyMediaLite.Eval,RatingsCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingsCrossValidation.cs,DoIterativeCrossValidation,The length of the statement  "			Console.WriteLine("{0} iteration {1}"' new RatingPredictionEvaluationResults(fold_results)' iterative_recommenders[0].NumIter); " is 127.
Long Statement,MyMediaLite.Eval,EvaluationResults,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\EvaluationResults.cs,ToString,The length of the statement  "			var metrics = (from m in MeasuresToShow select string.Format("{0} {1:" + FloatingPointFormat + "}"' m' this[m])).ToList(); " is 122.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingCrossValidation,The length of the statement  "			return recommender.DoRatingBasedRankingCrossValidation(split' candidate_items' candidate_item_mode' compute_fit' show_results); " is 127.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingCrossValidation,The length of the statement  "					var fold_results = Items.Evaluate(split_recommender' test_data_posonly' training_data_posonly' test_users' candidate_items' candidate_item_mode); " is 145.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The length of the statement  "			recommender.DoRatingBasedRankingIterativeCrossValidation(split' test_users' candidate_items' candidate_item_mode' repeated_events' max_iter' find_iter); " is 152.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The length of the statement  "					fold_results[i] = Items.Evaluate(split_recommenders[i]' test_data_posonly' training_data_posonly' test_users' candidate_items' candidate_item_mode' repeated_events); " is 165.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The length of the statement  "			Console.WriteLine("{0} iteration {1}"' new ItemRecommendationEvaluationResults(fold_results)' iterative_recommenders[0].NumIter); " is 129.
Long Statement,MyMediaLite.Eval,RatingBasedRankingCrossValidation,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\RatingBasedRankingCrossValidation.cs,DoRatingBasedRankingIterativeCrossValidation,The length of the statement  "							fold_results[i] = Items.Evaluate(split_recommenders[i]' test_data_posonly' training_data_posonly' test_users' candidate_items' candidate_item_mode' repeated_events); " is 165.
Long Statement,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,FindMinimum,The length of the statement  "				Console.Error.WriteLine(string.Format(CultureInfo.InvariantCulture' "Nelder-Mead: iteration {0} ({1})"' i' results[min_key])); " is 126.
Complex Conditional,MyMediaLite,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Extensions.cs,ListRecommenders,The conditional expression  "!type.IsAbstract && !type.IsInterface && !type.IsEnum && !type.IsGenericType && type.GetInterface("IRecommender") != null"  is complex.
Complex Conditional,MyMediaLite.Data,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\Ratings.cs,UpdateCountsAndIndices,The conditional expression  "(count_by_user != null || count_by_item != null) && (by_user == null || by_item == null)"  is complex.
Magic Number,MyMediaLite,RecommenderParameters,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RecommenderParameters.cs,RecommenderParameters,The following statement contains a magic number: for (int i = start; i < args.Count; i++)  			{  				if (args[i].Length == 0)  					continue;    				string[] pair = args[i].Split('=');  				if (pair.Length != 2)  					throw new ArgumentException("Too many '=' in argument '" + args[i] + "'.");    				string arg_name  = pair[0];  				string arg_value = pair[1];    				if (this.ContainsKey(arg_name))  					throw new ArgumentException(arg_name + " is used twice as an argument.");    				if (arg_value.Length == 0)  					throw new ArgumentException(arg_name + " has an empty value.");    				this.Add(arg_name' arg_value);  			}
Magic Number,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,ComputeCorrelation,The following statement contains a magic number: if (n < 2)  				return 0;
Magic Number,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,ComputeCorrelation,The following statement contains a magic number: if (n < 2)  				return 0;
Magic Number,MyMediaLite.Correlation,Pearson,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Pearson.cs,ComputeCorrelations,The following statement contains a magic number: for (int i = 0; i < num_entities; i++)  				for (int j = i + 1; j < num_entities; j++)  					if (freqs[i' j] < 2)  						this[i' j] = 0;  					else  						this[i' j] = ComputeCorrelation (i_sums[i' j]' j_sums[i' j]' ii_sums[i' j]' jj_sums[i' j]' ij_sums[i' j]' freqs[i' j]);
Magic Number,MyMediaLite.Correlation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Extensions.cs,ReadSymmetricCorrelationMatrix,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] numbers = line.Split(Constants.SPLIT_CHARS);  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				float c = float.Parse(numbers[2]' CultureInfo.InvariantCulture);    				if (i >= num_entities)  					throw new IOException("Row index is too big: i = " + i);  				if (j >= num_entities)  					throw new IOException("Column index is too big: j = " + j);    				correlation[i' j] = c;  			}
Magic Number,MyMediaLite.Correlation,Extensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Extensions.cs,ReadAsymmetricCorrelationMatrix,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] numbers = line.Split(Constants.SPLIT_CHARS);  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				float c = float.Parse(numbers[2]' CultureInfo.InvariantCulture);    				if (i >= num_entities)  					throw new IOException("Row index is too big: i = " + i);  				if (j >= num_entities)  					throw new IOException("Column index is too big: j = " + j);    				correlation[i' j] = c;  			}
Magic Number,MyMediaLite.Correlation,Overlap,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Overlap.cs,ComputeWeighted,The following statement contains a magic number: for (int row_id = 0; row_id < transpose.NumberOfRows; row_id++)  			{  				int freq = transpose.GetEntriesByRow(row_id).Count;  				other_entity_weights[row_id] = 1f / (float) Math.Log(3 + freq' 2); // TODO make configurable  			}
Magic Number,MyMediaLite.Correlation,Overlap,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Correlation\Overlap.cs,ComputeWeighted,The following statement contains a magic number: for (int row_id = 0; row_id < transpose.NumberOfRows; row_id++)  			{  				int freq = transpose.GetEntriesByRow(row_id).Count;  				other_entity_weights[row_id] = 1f / (float) Math.Log(3 + freq' 2); // TODO make configurable  			}
Magic Number,MyMediaLite.Data,PosOnlyFeedbackCrossValidationSplit<T>,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\PosOnlyFeedbackCrossValidationSplit.cs,PosOnlyFeedbackCrossValidationSplit,The following statement contains a magic number: if (num_folds < 2)  				throw new ArgumentException("num_folds must be at least 2.");
Magic Number,MyMediaLite.Data,RatingCrossValidationSplit,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\RatingCrossValidationSplit.cs,RatingCrossValidationSplit,The following statement contains a magic number: if (num_folds < 2)  				throw new ArgumentOutOfRangeException("num_folds must be at least 2.");
Magic Number,MyMediaLite.DataType,VectorExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\VectorExtensions.cs,EuclideanNorm,The following statement contains a magic number: foreach (double v in vector)  				sum += Math.Pow(v' 2);
Magic Number,MyMediaLite.DataType,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\MatrixExtensions.cs,FrobeniusNorm,The following statement contains a magic number: for (int i = 0; i < matrix.data.Length; i++)  				squared_entry_sum += Math.Pow(matrix.data[i]' 2);
Magic Number,MyMediaLite.DataType,SparseMatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\DataType\SparseMatrixExtensions.cs,FrobeniusNorm,The following statement contains a magic number: foreach (var entry in matrix.NonEmptyEntryIDs)  				squared_entry_sum += Math.Pow(matrix[entry.Item1' entry.Item2]' 2);
Magic Number,MyMediaLite.RatingPrediction,MatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\MatrixFactorization.cs,MatrixFactorization,The following statement contains a magic number: NumIter = 30;
Magic Number,MyMediaLite.RatingPrediction,MatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\MatrixFactorization.cs,MatrixFactorization,The following statement contains a magic number: InitStdDev = 0.1;
Magic Number,MyMediaLite.RatingPrediction,MatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\MatrixFactorization.cs,MatrixFactorization,The following statement contains a magic number: NumFactors = 10;
Magic Number,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,TimeAwareBaseline,The following statement contains a magic number: NumIter = 30;
Magic Number,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,TimeAwareBaseline,The following statement contains a magic number: BinSize = 70;
Magic Number,MyMediaLite.RatingPrediction,TimeAwareBaseline,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaseline.cs,TimeAwareBaseline,The following statement contains a magic number: RegAlpha = 50;
Magic Number,MyMediaLite.RatingPrediction,TimeAwareBaselineWithFrequencies,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaselineWithFrequencies.cs,TimeAwareBaselineWithFrequencies,The following statement contains a magic number: NumIter = 40;
Magic Number,MyMediaLite.RatingPrediction,TimeAwareBaselineWithFrequencies,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\TimeAwareBaselineWithFrequencies.cs,TimeAwareBaselineWithFrequencies,The following statement contains a magic number: BinSize = 70;
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					if (ratings.CountByUser[u] > 0)  					{  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  					}  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					if (ratings.CountByItem[i] > 0)  					{  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  					}  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += ratings.CountByUser[u] * RegU * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += ratings.CountByItem[i] * RegI * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int user_id = 0; user_id <= MaxUserID; user_id++)  				if (ratings.CountByUser.Count > user_id)  				{  					user_complexity += Math.Pow(VectorExtensions.EuclideanNorm(user_factors.GetRow(user_id))' 2);  					user_complexity += BiasReg * Math.Pow(user_bias[user_id]' 2);  				}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int user_id = 0; user_id <= MaxUserID; user_id++)  				if (ratings.CountByUser.Count > user_id)  				{  					user_complexity += Math.Pow(VectorExtensions.EuclideanNorm(user_factors.GetRow(user_id))' 2);  					user_complexity += BiasReg * Math.Pow(user_bias[user_id]' 2);  				}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int item_id = 0; item_id <= MaxItemID; item_id++)  				if (ratings.CountByItem.Count > item_id)  				{  					item_complexity += Math.Pow(VectorExtensions.EuclideanNorm(item_factors.GetRow(item_id))' 2);  					item_complexity += BiasReg * Math.Pow(item_bias[item_id]' 2);  				}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int item_id = 0; item_id <= MaxItemID; item_id++)  				if (ratings.CountByItem.Count > item_id)  				{  					item_complexity += Math.Pow(VectorExtensions.EuclideanNorm(item_factors.GetRow(item_id))' 2);  					item_complexity += BiasReg * Math.Pow(item_bias[item_id]' 2);  				}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int user_id = 0; user_id <= MaxUserID; user_id++)  			{  				double bias_diff = 0;  				var factor_diffs = new double[NumFactors];  				foreach (int v in user_connections[user_id])  				{  					bias_diff -= user_bias[v];  					for (int f = 0; f < factor_diffs.Length; f++)  						factor_diffs[f] -= user_factors[v' f];  				}    				if (user_connections[user_id].Count > 0)  					bias_diff /= user_connections[user_id].Count;  				bias_diff += user_bias[user_id];  				social_regularization += Math.Pow(bias_diff' 2);    				for (int f = 0; f < factor_diffs.Length; f++)  				{  					if (user_connections[user_id].Count > 0)  						factor_diffs[f] /= user_connections[user_id].Count;  					factor_diffs[f] += user_factors[user_id' f];  					social_regularization += Math.Pow(factor_diffs[f]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SocialMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SocialMF.cs,ComputeObjective,The following statement contains a magic number: for (int user_id = 0; user_id <= MaxUserID; user_id++)  			{  				double bias_diff = 0;  				var factor_diffs = new double[NumFactors];  				foreach (int v in user_connections[user_id])  				{  					bias_diff -= user_bias[v];  					for (int f = 0; f < factor_diffs.Length; f++)  						factor_diffs[f] -= user_factors[v' f];  				}    				if (user_connections[user_id].Count > 0)  					bias_diff /= user_connections[user_id].Count;  				bias_diff += user_bias[user_id];  				social_regularization += Math.Pow(bias_diff' 2);    				for (int f = 0; f < factor_diffs.Length; f++)  				{  					if (user_connections[user_id].Count > 0)  						factor_diffs[f] /= user_connections[user_id].Count;  					factor_diffs[f] += user_factors[user_id' f];  					social_regularization += Math.Pow(factor_diffs[f]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidItemAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidItemAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID || ratings.CountByItem[i] == 0)  						continue;  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i]))           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += (RegU / ratings.CountByUser[u]) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  				{  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  					if (i > ratings.MaxItemID)  						continue;  					complexity += (RegI / ratings.CountByItem[i])           * Math.Pow(item_factors.GetRow(i).EuclideanNorm()' 2);  					complexity += (RegI / ratings.CountByItem[i]) * BiasReg * Math.Pow(item_bias[i]' 2);  				}  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidUserAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidUserAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID || ratings.CountByUser[u] == 0)  						continue;    					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u]))           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += (RegU / Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI / Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  				{  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  					if (u > ratings.MaxUserID)  						continue;    					complexity += ratings.CountByUser[u] * RegU           * Math.Pow(user_factors.GetRow(u).EuclideanNorm()' 2);  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				}  				for (int i = 0; i <= MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.RatingPrediction,SigmoidCombinedAsymmetricFactorModel,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidCombinedAsymmetricFactorModel.cs,ComputeObjective,The following statement contains a magic number: if (FrequencyRegularization)  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += x_reg[u] * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					if (ratings.CountByUser[u] > 0)  						complexity += (RegU * Math.Sqrt(ratings.CountByUser[u])) * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += y_reg[i] * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					if (ratings.CountByItem[i] > 0)  						complexity += (RegI * Math.Sqrt(ratings.CountByItem[i])) * BiasReg * Math.Pow(item_bias[i]' 2);  			}  			else  			{  				for (int u = 0; u <= MaxUserID; u++)  					complexity += feedback_count_by_user[u] * RegU * Math.Pow(x.GetRow(u).EuclideanNorm()' 2);  				for (int u = 0; u <= ratings.MaxUserID; u++)  					complexity += ratings.CountByUser[u] * RegU * BiasReg * Math.Pow(user_bias[u]' 2);  				for (int i = 0; i <= MaxItemID; i++)  					complexity += feedback_count_by_item[i] * RegI * Math.Pow(y.GetRow(i).EuclideanNorm()' 2);  				for (int i = 0; i <= ratings.MaxItemID; i++)  					complexity += ratings.CountByItem[i] * RegI * BiasReg * Math.Pow(item_bias[i]' 2);  			}
Magic Number,MyMediaLite.ItemRecommendation,BPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\BPRMF.cs,Train,The following statement contains a magic number: {  				int num_sample_triples = (int) Math.Sqrt(MaxUserID) * 100;  				Console.Error.WriteLine("loss_num_sample_triples={0}"' num_sample_triples);  				// create the sample to estimate loss from  				loss_sample_u = new int[num_sample_triples];  				loss_sample_i = new int[num_sample_triples];  				loss_sample_j = new int[num_sample_triples];  				int user_id' item_id' other_item_id;  				for (int c = 0; c < num_sample_triples; c++)  				{  					SampleTriple(out user_id' out item_id' out other_item_id);  					loss_sample_u[c] = user_id;  					loss_sample_i[c] = item_id;  					loss_sample_j[c] = other_item_id;  				}  			}
Magic Number,MyMediaLite.ItemRecommendation,WRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\WRMF.cs,WRMF,The following statement contains a magic number: NumIter = 15;
Magic Number,MyMediaLite.ItemRecommendation,MultiCoreBPRMF,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\MultiCoreBPRMF.cs,MultiCoreBPRMF,The following statement contains a magic number: MaxThreads = 100;
Magic Number,MyMediaLite.ItemRecommendation,SLIM,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SLIM.cs,SLIM,The following statement contains a magic number: NumIter = 15;
Magic Number,MyMediaLite.ItemRecommendation,SLIM,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\ItemRecommendation\SLIM.cs,SLIM,The following statement contains a magic number: InitStdDev = 0.1;
Magic Number,MyMediaLite.IO,AttributeData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\AttributeData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				// ignore empty lines  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length != 2)  					throw new FormatException("Expected exactly 2 columns: " + line);    				int entity_id = mapping.ToInternalID(tokens[0]);  				int attr_id   = int.Parse(tokens[1]);    				matrix[entity_id' attr_id] = true;  			}
Magic Number,MyMediaLite.IO,AttributeData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\AttributeData.cs,Read,The following statement contains a magic number: if (reader.FieldCount < 2)  				throw new Exception("Expected at least 2 columns.");
Magic Number,MyMediaLite.IO,ItemData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Trim().Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length < 2)  					throw new FormatException("Expected at least 2 columns: " + line);    				try  				{  					int user_id = user_mapping.ToInternalID(tokens[0]);  					int item_id = item_mapping.ToInternalID(tokens[1]);  					feedback.Add(user_id' item_id);  				}  				catch (Exception)  				{  					throw new FormatException(string.Format("Could not read line '{0}'"' line));  				}  			}
Magic Number,MyMediaLite.IO,ItemData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemData.cs,Read,The following statement contains a magic number: if (reader.FieldCount < 2)  				throw new FormatException("Expected at least 2 columns.");
Magic Number,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Trim().Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id   = user_mapping.ToInternalID(tokens[0]);  				int item_id   = item_mapping.ToInternalID(tokens[1]);  				float rating  = float.Parse(tokens[2]' CultureInfo.InvariantCulture);    				if (rating >= rating_threshold)  					feedback.Add(user_id' item_id);  			}
Magic Number,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Trim().Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id   = user_mapping.ToInternalID(tokens[0]);  				int item_id   = item_mapping.ToInternalID(tokens[1]);  				float rating  = float.Parse(tokens[2]' CultureInfo.InvariantCulture);    				if (rating >= rating_threshold)  					feedback.Add(user_id' item_id);  			}
Magic Number,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The following statement contains a magic number: if (reader.FieldCount < 3)  				throw new FormatException("Expected at least 3 columns.");
Magic Number,MyMediaLite.IO,ItemDataRatingThreshold,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\ItemDataRatingThreshold.cs,Read,The following statement contains a magic number: Func<float>  get_rating  = reader.GetFloatGetter(2);
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: int seconds_pos = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? 3 : 2;
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: int seconds_pos = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? 3 : 2;
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] tokens = line.Split(separators' StringSplitOptions.None);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				long seconds = uint.Parse(tokens[seconds_pos]);    				var time = new DateTime(seconds * 10000000L).AddYears(1969);  				var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  				time -= offset;    				ratings.Add(user_id' item_id' rating' time);  			}
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] tokens = line.Split(separators' StringSplitOptions.None);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				long seconds = uint.Parse(tokens[seconds_pos]);    				var time = new DateTime(seconds * 10000000L).AddYears(1969);  				var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  				time -= offset;    				ratings.Add(user_id' item_id' rating' time);  			}
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] tokens = line.Split(separators' StringSplitOptions.None);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				long seconds = uint.Parse(tokens[seconds_pos]);    				var time = new DateTime(seconds * 10000000L).AddYears(1969);  				var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  				time -= offset;    				ratings.Add(user_id' item_id' rating' time);  			}
Magic Number,MyMediaLite.IO,MovieLensRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MovieLensRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				string[] tokens = line.Split(separators' StringSplitOptions.None);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				long seconds = uint.Parse(tokens[seconds_pos]);    				var time = new DateTime(seconds * 10000000L).AddYears(1969);  				var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  				time -= offset;    				ratings.Add(user_id' item_id' rating' time);  			}
Magic Number,MyMediaLite.IO,RatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RatingData.cs,Read,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = float.Parse(tokens[2]' CultureInfo.InvariantCulture);    				ratings.Add(user_id' item_id' rating);  			}
Magic Number,MyMediaLite.IO,RatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RatingData.cs,Read,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = float.Parse(tokens[2]' CultureInfo.InvariantCulture);    				ratings.Add(user_id' item_id' rating);  			}
Magic Number,MyMediaLite.IO,RatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RatingData.cs,Read,The following statement contains a magic number: if (reader.FieldCount < 3)  				throw new FormatException("Expected at least 3 columns.");
Magic Number,MyMediaLite.IO,RatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RatingData.cs,Read,The following statement contains a magic number: Func<float>  get_rating  = reader.GetFloatGetter(2);
Magic Number,MyMediaLite.IO,RelationData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RelationData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				// ignore empty lines  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (tokens.Length != 2)  					throw new FormatException("Expected exactly 2 columns: " + line);    				int entity1_id = mapping.ToInternalID(tokens[0]);  				int entity2_id = mapping.ToInternalID(tokens[1]);    				matrix[entity1_id' entity2_id] = true;  			}
Magic Number,MyMediaLite.IO,RelationData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\RelationData.cs,Read,The following statement contains a magic number: if (reader.FieldCount < 2)  				throw new FormatException("Expected at least 2 columns.");
Magic Number,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null) 			{ 				if (line.Length == 0) 					continue;  				string[] tokens = line.Split(Constants.SPLIT_CHARS);  				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 3) 					throw new FormatException("Expected at least 3 columns: " + line); 				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 2) 					throw new FormatException("Expected at least 2 columns: " + line);  				int user_id = user_mapping.ToInternalID(tokens[0]); 				int item_id = item_mapping.ToInternalID(tokens[1]); 				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				ratings.Add(user_id' item_id' rating); 			}
Magic Number,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null) 			{ 				if (line.Length == 0) 					continue;  				string[] tokens = line.Split(Constants.SPLIT_CHARS);  				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 3) 					throw new FormatException("Expected at least 3 columns: " + line); 				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 2) 					throw new FormatException("Expected at least 2 columns: " + line);  				int user_id = user_mapping.ToInternalID(tokens[0]); 				int item_id = item_mapping.ToInternalID(tokens[1]); 				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				ratings.Add(user_id' item_id' rating); 			}
Magic Number,MyMediaLite.IO,StaticRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\StaticRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null) 			{ 				if (line.Length == 0) 					continue;  				string[] tokens = line.Split(Constants.SPLIT_CHARS);  				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 3) 					throw new FormatException("Expected at least 3 columns: " + line); 				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 2) 					throw new FormatException("Expected at least 2 columns: " + line);  				int user_id = user_mapping.ToInternalID(tokens[0]); 				int item_id = item_mapping.ToInternalID(tokens[1]); 				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				ratings.Add(user_id' item_id' rating); 			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: int date_time_offset = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? 3 : 2;
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: int date_time_offset = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? 3 : 2;
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,TimedRatingData,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\TimedRatingData.cs,Read,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)  			{  				if (line.Length == 0)  					continue;    				string[] tokens = line.Split(Constants.SPLIT_CHARS);    				if (test_rating_format == TestRatingFileFormat.WITH_RATINGS && tokens.Length < 4)  					throw new FormatException("Expected at least 4 columns: " + line);  				if (test_rating_format == TestRatingFileFormat.WITHOUT_RATINGS && tokens.Length < 3)  					throw new FormatException("Expected at least 3 columns: " + line);    				int user_id = user_mapping.ToInternalID(tokens[0]);  				int item_id = item_mapping.ToInternalID(tokens[1]);  				float rating = test_rating_format == TestRatingFileFormat.WITH_RATINGS ? float.Parse(tokens[2]' CultureInfo.InvariantCulture) : 0;  				string date_string = tokens[date_time_offset];  				if (tokens[date_time_offset].StartsWith("\"") && tokens.Length > date_time_offset + 1 && tokens[date_time_offset + 1].EndsWith("\""))  				{  					date_string = tokens[date_time_offset] + " " + tokens[date_time_offset + 1];  					date_string = date_string.Substring(1' date_string.Length - 2);  				}    				uint seconds;  				if (date_string.Length == 19) // format "yyyy-mm-dd hh:mm:ss"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])'  							int.Parse(date_time_tokens[3])'  							int.Parse(date_time_tokens[4])'  							int.Parse(date_time_tokens[5])));  				}  				else if (date_string.Length == 10 && date_string[4] == '-') // format "yyyy-mm-dd"  				{  					var date_time_tokens = date_string.Split(time_split_chars);  					ratings.Add(  						user_id' item_id' rating'  						new DateTime(  							int.Parse(date_time_tokens[0])'  							int.Parse(date_time_tokens[1])'  							int.Parse(date_time_tokens[2])));  				}  				else if (uint.TryParse(date_string' out seconds)) // unsigned integer value' interpreted as seconds since Unix epoch  				{  					var time = new DateTime(seconds * 10000000L).AddYears(1969);  					var offset = TimeZone.CurrentTimeZone.GetUtcOffset(time);  					ratings.Add(user_id' item_id' rating' time - offset);  				}  				else  					ratings.Add(user_id' item_id' rating' DateTime.Parse(date_string' CultureInfo.InvariantCulture));    				if (ratings.Count % 200000 == 199999)  					Console.Error.Write(".");  				if (ratings.Count % 12000000 == 11999999)  					Console.Error.WriteLine();  			}
Magic Number,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,ReadMatrix,The following statement contains a magic number: while ((numbers = reader.ReadLine().Split(' ')).Length == 3)  			{  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				float v = float.Parse(numbers[2]' CultureInfo.InvariantCulture);    				if (i >= dim1)  					throw new IOException("i = " + i + " >= " + dim1);  				if (j >= dim2)  					throw new IOException("j = " + j + " >= " + dim2);    				matrix[i' j] = v;  			}
Magic Number,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,ReadMatrix,The following statement contains a magic number: while ((numbers = reader.ReadLine().Split(' ')).Length == 3)  			{  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				float v = float.Parse(numbers[2]' CultureInfo.InvariantCulture);    				if (i >= dim1)  					throw new IOException("i = " + i + " >= " + dim1);  				if (j >= dim2)  					throw new IOException("j = " + j + " >= " + dim2);    				matrix[i' j] = v;  			}
Magic Number,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,ReadMatrix,The following statement contains a magic number: while ((numbers = reader.ReadLine().Split(' ')).Length == 3)  			{  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				int v = int.Parse(numbers[2]);    				if (i >= dim1)  					throw new IOException("i = " + i + " >= " + dim1);  				if (j >= dim2)  					throw new IOException("j = " + j + " >= " + dim2);    				matrix[i' j] = v;  			}
Magic Number,MyMediaLite.IO,MatrixExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\MatrixExtensions.cs,ReadMatrix,The following statement contains a magic number: while ((numbers = reader.ReadLine().Split(' ')).Length == 3)  			{  				int i = int.Parse(numbers[0]);  				int j = int.Parse(numbers[1]);  				int v = int.Parse(numbers[2]);    				if (i >= dim1)  					throw new IOException("i = " + i + " >= " + dim1);  				if (j >= dim2)  					throw new IOException("j = " + j + " >= " + dim2);    				matrix[i' j] = v;  			}
Magic Number,MyMediaLite.IO,EntityMappingExtensions,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\EntityMappingExtensions.cs,LoadMapping,The following statement contains a magic number: using ( var reader = new StreamReader(filename) )  			{  				string line;  				while ( (line = reader.ReadLine()) != null )  				{  					if (line.Length == 0)  						continue;    					string[] tokens = line.Split('\t');    					if (tokens.Length != 2)  						throw new FormatException("Expected exactly 2 columns: " + line);    					int internal_id    = int.Parse(tokens[0]);  					string external_id = tokens[1];    					if (internal_id != mapping.NumberOfEntities)  						throw new FormatException(string.Format("Expected ID {0}' not {1}' in line '{2}'"' mapping.NumberOfEntities' internal_id' line));    					mapping.internal_to_original.Add(external_id);  					mapping.original_to_internal[external_id] = internal_id;  				}  			}
Magic Number,MyMediaLite.IO,FileSystem,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\FileSystem.cs,RunningOnUnix,The following statement contains a magic number: return p == 4 || p == 6 || p == 128;
Magic Number,MyMediaLite.IO,FileSystem,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\FileSystem.cs,RunningOnUnix,The following statement contains a magic number: return p == 4 || p == 6 || p == 128;
Magic Number,MyMediaLite.IO,FileSystem,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\FileSystem.cs,RunningOnUnix,The following statement contains a magic number: return p == 4 || p == 6 || p == 128;
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Items.cs,Evaluate,The following statement contains a magic number: Parallel.ForEach(test_users' user_id => {  				try  				{  					var correct_items = new HashSet<int>(test_user_matrix[user_id]);  					correct_items.IntersectWith(candidate_items);  					if (correct_items.Count == 0)  						return;    					var ignore_items_for_this_user = new HashSet<int>(  						repeated_events == RepeatedEvents.Yes || training_user_matrix[user_id] == null ? new int[0] : training_user_matrix[user_id]  					);    					ignore_items_for_this_user.IntersectWith(candidate_items);  					int num_candidates_for_this_user = candidate_items.Count - ignore_items_for_this_user.Count;  					if (correct_items.Count == num_candidates_for_this_user)  						return;    					var prediction = recommender.Recommend(user_id' candidate_items:candidate_items' n:n' ignore_items:ignore_items_for_this_user);  					var prediction_list = (from t in prediction select t.Item1).ToArray();    					int num_dropped_items = num_candidates_for_this_user - prediction.Count;  					double auc  = AUC.Compute(prediction_list' correct_items' num_dropped_items);  					double map  = PrecisionAndRecall.AP(prediction_list' correct_items);  					double ndcg = NDCG.Compute(prediction_list' correct_items);  					double rr   = ReciprocalRank.Compute(prediction_list' correct_items);  					var positions = new int[] { 5' 10 };  					var prec   = PrecisionAndRecall.PrecisionAt(prediction_list' correct_items' positions);  					var recall = PrecisionAndRecall.RecallAt(prediction_list' correct_items' positions);    					// thread-safe incrementing  					lock (result)  					{  						num_users++;  						result["AUC"]       += (float) auc;  						result["MAP"]       += (float) map;  						result["NDCG"]      += (float) ndcg;  						result["MRR"]       += (float) rr;  						result["prec@5"]    += (float) prec[5];  						result["prec@10"]   += (float) prec[10];  						result["recall@5"]  += (float) recall[5];  						result["recall@10"] += (float) recall[10];  					}    					if (num_users % 1000 == 0)  						Console.Error.Write(".");  					if (num_users % 60000 == 0)  						Console.Error.WriteLine();  				}  				catch (Exception e)  				{  					Console.Error.WriteLine("===> ERROR: " + e.Message + e.StackTrace);  					throw;  				}  			});
Magic Number,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,ComputeCBD,The following statement contains a magic number: if (prediction < 0.01)  				prediction = 0.01;
Magic Number,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,ComputeCBD,The following statement contains a magic number: if (prediction < 0.01)  				prediction = 0.01;
Magic Number,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,ComputeCBD,The following statement contains a magic number: if (prediction > 0.99)  				prediction = 0.99;
Magic Number,MyMediaLite.Eval,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Ratings.cs,ComputeCBD,The following statement contains a magic number: if (prediction > 0.99)  				prediction = 0.99;
Magic Number,MyMediaLite.Eval.Measures,NDCG,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Measures\NDCG.cs,Compute,The following statement contains a magic number: for (int i = 0; i < ranked_items.Count; i++)  			{  				int item_id = ranked_items[i];    				if (!correct_items.Contains(item_id))  					continue;    				// compute NDCG part  				int rank = i + 1;  				dcg += 1 / Math.Log(rank + 1' 2);  			}
Magic Number,MyMediaLite.Eval.Measures,NDCG,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Measures\NDCG.cs,ComputeIDCG,The following statement contains a magic number: for (int i = 0; i < n; i++)  				idcg += 1 / Math.Log(i + 2' 2);
Magic Number,MyMediaLite.Eval.Measures,NDCG,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Measures\NDCG.cs,ComputeIDCG,The following statement contains a magic number: for (int i = 0; i < n; i++)  				idcg += 1 / Math.Log(i + 2' 2);
Magic Number,MyMediaLite.Eval.Measures,AUC,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Measures\AUC.cs,Compute,The following statement contains a magic number: if (num_eval_pairs == 0)  				return 0.5;
Magic Number,MyMediaLite.Eval.Measures,RMSE,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Eval\Measures\RMSE.cs,ComputeSquaredErrorSum,The following statement contains a magic number: for (int i = 0; i < ratings.Count; i++)  				sum += Math.Pow(recommender.Predict(ratings.Users[i]' ratings.Items[i]) - ratings[i]' 2);
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,Read,The following statement contains a magic number: KDDCupItems items = new KDDCupItems(track_no == 1 ? 624961 : 296111);
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,Read,The following statement contains a magic number: KDDCupItems items = new KDDCupItems(track_no == 1 ? 624961 : 296111);
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadTracks,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int track_id  = int.Parse(tokens[0]);  				int album_id  = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);  				int artist_id = tokens[2] == "None" ? -1 : int.Parse(tokens[2]);    				var genres = new int[tokens.Length - 3];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[3 + i]);    				items.Insert(track_id' KDDCupItemType.Track' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadTracks,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int track_id  = int.Parse(tokens[0]);  				int album_id  = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);  				int artist_id = tokens[2] == "None" ? -1 : int.Parse(tokens[2]);    				var genres = new int[tokens.Length - 3];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[3 + i]);    				items.Insert(track_id' KDDCupItemType.Track' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadTracks,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int track_id  = int.Parse(tokens[0]);  				int album_id  = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);  				int artist_id = tokens[2] == "None" ? -1 : int.Parse(tokens[2]);    				var genres = new int[tokens.Length - 3];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[3 + i]);    				items.Insert(track_id' KDDCupItemType.Track' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadTracks,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int track_id  = int.Parse(tokens[0]);  				int album_id  = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);  				int artist_id = tokens[2] == "None" ? -1 : int.Parse(tokens[2]);    				var genres = new int[tokens.Length - 3];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[3 + i]);    				items.Insert(track_id' KDDCupItemType.Track' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadAlbums,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int album_id  = int.Parse(tokens[0]);  				int artist_id = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);    				var genres = new int[tokens.Length - 2];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[2 + i]);    				items.Insert(album_id' KDDCupItemType.Album' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Items,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Items.cs,ReadAlbums,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int album_id  = int.Parse(tokens[0]);  				int artist_id = tokens[1] == "None" ? -1 : int.Parse(tokens[1]);    				var genres = new int[tokens.Length - 2];  				for (int i = 0; i < genres.Length; i++)  					genres[i] = int.Parse(tokens[2 + i]);    				items.Insert(album_id' KDDCupItemType.Album' album_id' artist_id' genres);  			}
Magic Number,MyMediaLite.IO.KDDCup2011,Ratings,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\IO\KDDCup2011\Ratings.cs,Read80Plus,The following statement contains a magic number: while ( (line = reader.ReadLine()) != null )  			{  				string[] tokens = line.Split('|');    				int user_id          = int.Parse(tokens[0]);  				int num_user_ratings = int.Parse(tokens[1]); // number of ratings for this user    				for (int i = 0; i < num_user_ratings; i++)  				{  					line = reader.ReadLine();    					tokens = line.Split('\t');    					int item_id = int.Parse(tokens[0]);  					byte rating = byte.Parse(tokens[1]);    					ratings.Add(user_id' item_id' rating >= 80 ? 1 : 0);  				}  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Magic Number,MyMediaLite.HyperParameter,NelderMead,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\HyperParameter\NelderMead.cs,Init,The following statement contains a magic number: if (recommender is UserItemBaseline) {  				this.hp_names = new string[] { "reg_u"' "reg_i" };  				this.initial_hp_values = CreateInitialValues(  					new double[][] {  						new double[] { 25' 10 }'  						new double[] { 10' 25 }'  						new double[] { 2' 5 }'  						new double[] { 5' 2 }'  						new double[] { 1' 4 }'  						new double[] { 4' 1 }'  						new double[] { 3' 3 }'  					}  				);  			}  			else if (recommender is BiasedMatrixFactorization)  			{  				this.hp_names = new string[] { "regularization"' "bias_reg" };  				this.initial_hp_values = CreateInitialValues(  					// TODO reg_u and reg_i (in a second step?)  					new double[][]  					{  						new double[] { 0.1'     0 }'  						new double[] { 0.01'    0 }'  						new double[] { 0.0001'  0 }'  						new double[] { 0.00001' 0 }'  						new double[] { 0.1'     0.0001 }'  						new double[] { 0.01'    0.0001 }'  						new double[] { 0.0001'  0.0001 }'  						new double[] { 0.00001' 0.0001 }'  					}  				);  			}  			else if (recommender is MatrixFactorization)  			{  				this.hp_names = new string[] { "regularization" };  				// TODO normal interval search could be more efficient  				this.initial_hp_values = CreateInitialValues(  					new double[][]  					{  						new double[] { 0.1 }'  						new double[] { 0.01 }'  						new double[] { 0.0001 }'  						new double[] { 0.00001 }'  					}  				);  			}  			// TODO kNN-based methods  			else  			{  				throw new Exception("not prepared for type " + recommender.GetType().ToString());  			}
Missing Default,MyMediaLite.Data,KDDCupItems,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\Data\KDDCupItems.cs,ToString,The following switch statement is missing a default case: switch (type)  				{  					case KDDCupItemType.Track:	num_tracks++;  break;  					case KDDCupItemType.Album: 	num_albums++;  break;  					case KDDCupItemType.Artist: num_artists++; break;  					case KDDCupItemType.Genre:  num_genres++;  break;  				}
Missing Default,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,SetupLoss,The following switch statement is missing a default case: switch (Loss)  			{  				case OptimizationTarget.MAE:  					compute_gradient_common = (sig_score' err) => (float) (Math.Sign(err) * sig_score * (1 - sig_score) * rating_range_size);  					break;  				case OptimizationTarget.RMSE:  					compute_gradient_common = (sig_score' err) => (float) (err * sig_score * (1 - sig_score) * rating_range_size);  					break;  				case OptimizationTarget.LogisticLoss:  					compute_gradient_common = (sig_score' err) => (float) err;  					break;  			}
Missing Default,MyMediaLite.RatingPrediction,BiasedMatrixFactorization,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\BiasedMatrixFactorization.cs,ComputeLoss,The following switch statement is missing a default case: switch (Loss)  			{  				case OptimizationTarget.MAE:  					loss += Eval.Measures.MAE.ComputeAbsoluteErrorSum(this' ratings);  					break;  				case OptimizationTarget.RMSE:  					loss += Eval.Measures.RMSE.ComputeSquaredErrorSum(this' ratings);  					break;  				case OptimizationTarget.LogisticLoss:  					loss += Eval.Measures.LogisticLoss.ComputeSum(this' ratings' min_rating' rating_range_size);  					break;  			}
Missing Default,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,SetupLoss,The following switch statement is missing a default case: switch (Loss)  			{  				case OptimizationTarget.MAE:  					compute_gradient_common = (sig_score' err) => (float) (Math.Sign(err) * sig_score * (1 - sig_score) * rating_range_size);  					break;  				case OptimizationTarget.RMSE:  					compute_gradient_common = (sig_score' err) => (float) (err * sig_score * (1 - sig_score) * rating_range_size);  					break;  				case OptimizationTarget.LogisticLoss:  					compute_gradient_common = (sig_score' err) => (float) err;  					break;  			}
Missing Default,MyMediaLite.RatingPrediction,SigmoidSVDPlusPlus,C:\repos\zenogantner_MyMediaLite\src\MyMediaLite\RatingPrediction\SigmoidSVDPlusPlus.cs,ComputeLoss,The following switch statement is missing a default case: switch (Loss)  			{  				case OptimizationTarget.MAE:  					loss += Eval.Measures.MAE.ComputeAbsoluteErrorSum(this' ratings);  					break;  				case OptimizationTarget.RMSE:  					loss += Eval.Measures.RMSE.ComputeSquaredErrorSum(this' ratings);  					break;  				case OptimizationTarget.LogisticLoss:  					loss += Eval.Measures.LogisticLoss.ComputeSum(this' ratings' min_rating' rating_range_size);  					break;  			}
