Implementation smell,Namespace,Class,File,Method,Description
Complex Method,jQueryTmpl.Templates,ExpressionEvaluator,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\ExpressionEvaluator.cs,EvaluateValue,Cyclomatic complexity of the method is 8
Complex Method,jQueryTmpl.Templates,ExpressionEvaluator,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\ExpressionEvaluator.cs,InvokeBestMatch,Cyclomatic complexity of the method is 18
Long Statement,jQueryTmpl.Templates,TemplateCompiler,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\TemplateCompiler.cs,BuildIf,The length of the statement  "                Else = elseFound && remaining.Count > 0 && remaining.Peek().Name == "else" ? BuildElse(remaining.Dequeue()' remaining) : new LiteralTemplate()' " is 143.
Long Statement,jQueryTmpl.Templates,TemplateCompiler,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\TemplateCompiler.cs,BuildElse,The length of the statement  "                Else = remaining.Count > 0 && remaining.Peek().Name == "else" ? BuildElse(remaining.Dequeue()' remaining) : new LiteralTemplate()' " is 130.
Complex Conditional,jQueryTmpl.Templates,ExpressionEvaluator,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\ExpressionEvaluator.cs,EvaluateLiteral,The conditional expression  "(expression.Member.StartsWith("\"") && expression.Member.EndsWith("\"")) ||                      (expression.Member.StartsWith("'") && expression.Member.EndsWith("'"))"  is complex.
Missing Default,jQueryTmpl.Templates,BinaryEvaluator,D:\research\architectureSmells\repos\awhatley_jquery-tmpl.net\jQueryTmpl\Templates\BinaryEvaluator.cs,Evaluate,The following switch statement is missing a default case: switch(operation.Trim())              {                  case "==":                      return Equals(a' b);                    case "!=":                      return !Equals(a' b);                    case ">":                      return GreaterThan(a' b);                    case ">=":                      return GreaterThanEqual(a' b);                    case "<":                      return LessThan(a' b);                    case "<=":                      return LessThanEqual(a' b);                    case "!":                      return Negate(b);              }
