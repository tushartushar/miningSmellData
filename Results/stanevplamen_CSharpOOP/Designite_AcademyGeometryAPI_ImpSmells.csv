Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureInstanceCommand,Cyclomatic complexity of the method is 10
Complex Method,AcademyGeometryAPI,FigureControllerExtended,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureControllerExtended.cs,ExecuteFigureInstanceCommand,Cyclomatic complexity of the method is 9
Long Statement,AcademyGeometryAPI,Figure,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Figures\Figure.cs,RotateInXY,The length of the statement  "		Vector3D rotatedCenteredCurrent = new Vector3D (centeredCurrent.X * Math.Cos (angleRads) - centeredCurrent.Y * Math.Sin (angleRads)' centeredCurrent.X * Math.Sin (angleRads) + centeredCurrent.Y * Math.Cos (angleRads)' centeredCurrent.Z); " is 237.
Long Statement,AcademyGeometryAPI,Vector3D,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Vectors\Vector3D.cs,Parse,The length of the statement  "	return new Vector3D (double.Parse (componentStrings [0])' double.Parse (componentStrings [1])' double.Parse (componentStrings [2])); " is 132.
Magic Number,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	currentFigure = new Triangle (a' b' c);  	break;  }  }  
Magic Number,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureInstanceCommand,The following statement contains a magic number: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
Magic Number,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureInstanceCommand,The following statement contains a magic number: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
Magic Number,AcademyGeometryAPI,FigureControllerExtended,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureControllerExtended.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D c = Vector3D.Parse (splitFigString [1]);  	double r = double.Parse (splitFigString [2]);  	currentFigure = new Circle (c' r);  	break;  }  case "cylinder": {  	Vector3D bot = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	double r = double.Parse (splitFigString [3]);  	currentFigure = new Cylinder (bot' top' r);  	break;  }  default:  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  
Magic Number,AcademyGeometryAPI,FigureControllerExtended,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureControllerExtended.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D c = Vector3D.Parse (splitFigString [1]);  	double r = double.Parse (splitFigString [2]);  	currentFigure = new Circle (c' r);  	break;  }  case "cylinder": {  	Vector3D bot = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	double r = double.Parse (splitFigString [3]);  	currentFigure = new Cylinder (bot' top' r);  	break;  }  default:  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  
Magic Number,AcademyGeometryAPI,FigureControllerExtended,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureControllerExtended.cs,ExecuteFigureCreationCommand,The following statement contains a magic number: switch (splitFigString [0]) {  case "circle": {  	Vector3D c = Vector3D.Parse (splitFigString [1]);  	double r = double.Parse (splitFigString [2]);  	currentFigure = new Circle (c' r);  	break;  }  case "cylinder": {  	Vector3D bot = Vector3D.Parse (splitFigString [1]);  	Vector3D top = Vector3D.Parse (splitFigString [2]);  	double r = double.Parse (splitFigString [3]);  	currentFigure = new Cylinder (bot' top' r);  	break;  }  default:  	base.ExecuteFigureCreationCommand (splitFigString);  	break;  }  
Magic Number,AcademyGeometryAPI,Cylinder,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Figures\Cylinder.cs,GetArea,The following statement contains a magic number: return 2 * Math.PI * this.Radius * (this.Radius + height);  
Magic Number,AcademyGeometryAPI,Figure,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Figures\Figure.cs,RotateInXY,The following statement contains a magic number: for (int i = 0; i < this.vertices.Count; i++) {  	Vector3D centeredCurrent = this.vertices [i] - rotCenter;  	double angleRads = angleDegrees * Math.PI / 180.0;  	Vector3D rotatedCenteredCurrent = new Vector3D (centeredCurrent.X * Math.Cos (angleRads) - centeredCurrent.Y * Math.Sin (angleRads)' centeredCurrent.X * Math.Sin (angleRads) + centeredCurrent.Y * Math.Cos (angleRads)' centeredCurrent.Z);  	this.vertices [i] = rotatedCenteredCurrent + rotCenter;  }  
Magic Number,AcademyGeometryAPI,Triangle,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Figures\Triangle.cs,GetArea,The following statement contains a magic number: return Math.Abs (Vector3D.CrossProduct (AB' AC).Magnitude) / 2;  
Magic Number,AcademyGeometryAPI,Vector3D,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Vectors\Vector3D.cs,DotProduct,The following statement contains a magic number: for (int d = 0; d < 3; d++) {  	result += a [d] * b [d];  }  
Magic Number,AcademyGeometryAPI,Vector3D,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\Vectors\Vector3D.cs,Parse,The following statement contains a magic number: return new Vector3D (double.Parse (componentStrings [0])' double.Parse (componentStrings [1])' double.Parse (componentStrings [2]));  
Missing Default,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureCreationCommand,The following switch statement is missing a default case: switch (splitFigString [0]) {  case "vertex": {  	Vector3D location = Vector3D.Parse (splitFigString [1]);  	currentFigure = new Vertex (location);  	break;  }  case "segment": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	currentFigure = new LineSegment (a' b);  	break;  }  case "triangle": {  	Vector3D a = Vector3D.Parse (splitFigString [1]);  	Vector3D b = Vector3D.Parse (splitFigString [2]);  	Vector3D c = Vector3D.Parse (splitFigString [3]);  	currentFigure = new Triangle (a' b' c);  	break;  }  }  
Missing Default,AcademyGeometryAPI,FigureController,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureController.cs,ExecuteFigureInstanceCommand,The following switch statement is missing a default case: switch (splitCommand [0]) {  case "translate": {  	Vector3D transVector = Vector3D.Parse (splitCommand [1]);  	this.currentFigure.Translate (transVector);  	break;  }  case "rotate": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double degrees = double.Parse (splitCommand [2]);  	this.currentFigure.RotateInXY (center' degrees);  	break;  }  case "scale": {  	Vector3D center = Vector3D.Parse (splitCommand [1]);  	double factor = double.Parse (splitCommand [2]);  	this.currentFigure.Scale (center' factor);  	break;  }  case "center": {  	Vector3D figCenter = this.currentFigure.GetCenter ();  	Console.WriteLine (figCenter.ToString ());  	break;  }  case "measure": {  	Console.WriteLine ("{0:0.00}"' this.currentFigure.GetPrimaryMeasure ());  	break;  }  }  
Missing Default,AcademyGeometryAPI,FigureControllerExtended,C:\repos\stanevplamen_CSharpOOP\Homeworks\10-OldExams\DocumentGeometry\AcademyGeometryAPI\Objects\FigureControllerExtended.cs,ExecuteFigureInstanceCommand,The following switch statement is missing a default case: switch (splitCommand [0]) {  case "area": {  	IAreaMeasurable areaMeasurableFigure = currentFigure as IAreaMeasurable;  	if (areaMeasurableFigure != null) {  		Console.WriteLine (areaMeasurableFigure.GetArea ().ToString ("F2"));  	}  	else {  		Console.WriteLine ("undefined");  	}  	break;  }  case "volume": {  	IVolumeMeasurable volumeMeasurableFigure = currentFigure as IVolumeMeasurable;  	if (volumeMeasurableFigure != null) {  		Console.WriteLine (volumeMeasurableFigure.GetVolume ().ToString ("F2"));  	}  	else {  		Console.WriteLine ("undefined");  	}  	break;  }  case "normal": {  	IFlat flatFigure = currentFigure as IFlat;  	if (flatFigure != null) {  		Console.WriteLine (flatFigure.GetNormal ());  	}  	else {  		Console.WriteLine ("undefined");  	}  	break;  }  }  
