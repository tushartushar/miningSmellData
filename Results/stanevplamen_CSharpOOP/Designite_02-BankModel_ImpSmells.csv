Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BankModel,DepositAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\DepositAccount.cs,TellRate,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current interest {2:C2}"' Owner.FirstName' Owner.LastName' CalculateInterest (mouthInterestRateDeposit)); " is 147.
Long Statement,BankModel,DepositAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\DepositAccount.cs,TellBalance,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current balance {2:C2}"' Owner.FirstName' Owner.LastName' Balance + CalculateInterest (mouthInterestRateDeposit)); " is 156.
Long Statement,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,TellRate,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current interest {2:C2}"' Owner.FirstName' Owner.LastName' CalculateInterest (mouthInterestRateLoad)); " is 144.
Long Statement,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,TellBalance,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current balance {2:C2}"' Owner.FirstName' Owner.LastName' Balance + CalculateInterest (mouthInterestRateLoad)); " is 153.
Long Statement,BankModel,MainDemo,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\MainDemo.cs,Main,The length of the statement  "	DepositAccount myDeposit = new DepositAccount (PeshoOOD' 4670.50m' new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day)); " is 139.
Long Statement,BankModel,MainDemo,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\MainDemo.cs,Main,The length of the statement  "	LoanAccount myLoan = new LoanAccount (PeshoPerson' 1000m' new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day)); " is 130.
Long Statement,BankModel,MainDemo,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\MainDemo.cs,Main,The length of the statement  "	MortgageAccount myMortgage = new MortgageAccount (EkyOOD' 45000m' new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day)); " is 138.
Long Statement,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,TellRate,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current interest {2:C2}"' Owner.FirstName' Owner.LastName' CalculateInterest (mouthInterestRateMortgage)); " is 148.
Long Statement,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,TellBalance,The length of the statement  "	return string.Format ("Customer: {0} {1}' Current balance {2:C2}"' Owner.FirstName' Owner.LastName' Balance + CalculateInterest (mouthInterestRateMortgage)); " is 157.
Empty Catch Block,BankModel,Customer,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Customers\Customer.cs,CompareTo,The method has an empty catch block.
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is IndividualCustomer && months > 2) {  	months = months - 2;  	decimal rate = Balance * interestRate * months;  	return rate;  }  
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is IndividualCustomer && months > 2) {  	months = months - 2;  	decimal rate = Balance * interestRate * months;  	return rate;  }  
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: months = months - 2;  
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer && months > 3) {  	months = months - 3;  	decimal rate = Balance * interestRate * months;  	return rate;  }  else {  	return 0.00m;  }  
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer && months > 3) {  	months = months - 3;  	decimal rate = Balance * interestRate * months;  	return rate;  }  else {  	return 0.00m;  }  
Magic Number,BankModel,LoanAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: months = months - 3;  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (Owner is CompanyCustomer) {  	if (months <= 12) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  		return rate;  	}  	//Balance += rate;  }  else {  	if (months <= 6) {  		rate = Balance * interestRate * months / 2;  		return rate;  	}  	else {  		rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  		return rate;  	}  	//Balance += rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 12) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 12) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 12) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 12) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 12) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * months / 2;  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 12 / 2 + Balance * interestRate * (months - 12);  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 6) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 6) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 6) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 6) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (months <= 6) {  	rate = Balance * interestRate * months / 2;  	return rate;  }  else {  	rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  	return rate;  }  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * months / 2;  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  
Magic Number,BankModel,MortgageAccount,C:\repos\stanevplamen_CSharpOOP\Homeworks\05-OOP-Principles-Part2\02-BankModel\Accounts\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: rate = Balance * interestRate * 6 / 2 + Balance * interestRate * (months - 6);  
