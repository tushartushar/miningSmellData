Implementation smell,Namespace,Class,File,Method,Description
Long Method,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,Draw,The method has 197 lines of code.
Long Method,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The method has 112 lines of code.
Long Method,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The method has 129 lines of code.
Long Method,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthCalendar,The method has 112 lines of code.
Long Method,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The method has 101 lines of code.
Complex Method,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnMouseDown,Cyclomatic complexity of the method is 11
Complex Method,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,Draw,Cyclomatic complexity of the method is 25
Complex Method,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,MouseClick,Cyclomatic complexity of the method is 16
Complex Method,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,MouseMove,Cyclomatic complexity of the method is 16
Complex Method,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,Cyclomatic complexity of the method is 12
Complex Method,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaySelect,Cyclomatic complexity of the method is 9
Complex Method,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusMoved,Cyclomatic complexity of the method is 8
Complex Method,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,RemoveSelection,Cyclomatic complexity of the method is 8
Complex Method,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,Cyclomatic complexity of the method is 14
Complex Method,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectArea,Cyclomatic complexity of the method is 10
Complex Method,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectRange,Cyclomatic complexity of the method is 10
Long Parameter List,Pabo.Calendar,DayClickEventArgs,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,DayClickEventArgs,The method has 7 parameters. Parameters: date' button' dayX' dayY' x' y' rect
Long Parameter List,Pabo.Calendar,DayMouseMoveEventArgs,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,DayMouseMoveEventArgs,The method has 6 parameters. Parameters: date' dayX' dayY' x' y' rect
Long Parameter List,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,Init,The method has 5 parameters. Parameters: imageList' horizontal' vertical' columns' defaultImage
Long Parameter List,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DrawGradient,The method has 5 parameters. Parameters: e' rect' color1' color2' mode
Long Parameter List,Pabo.Calendar,NativeMethods,C:\repos\yyoon_Journaley\MonthCalendar\NativeMethods.cs,ToAscii,The method has 5 parameters. Parameters: uVirtKey' uScanCode' lpbKeyState' lpwTransKey' fuState
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_topLeft' (m_default != mcItemAlign.TopLeft) ? ButtonState.Normal : ButtonState.Checked); " is 125.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_center'(m_default != mcItemAlign.Center) ? ButtonState.Normal : ButtonState.Checked); " is 122.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_topRight'(m_default != mcItemAlign.TopRight) ? ButtonState.Normal : ButtonState.Checked); " is 126.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_bottomLeft'(m_default != mcItemAlign.BottomLeft) ? ButtonState.Normal : ButtonState.Checked); " is 130.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_bottomRight'(m_default != mcItemAlign.BottomRight) ? ButtonState.Normal : ButtonState.Checked); " is 132.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_leftCenter'(m_default != mcItemAlign.LeftCenter) ? ButtonState.Normal : ButtonState.Checked); " is 130.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_rightCenter'(m_default != mcItemAlign.RightCenter) ? ButtonState.Normal : ButtonState.Checked); " is 132.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_topCenter'(m_default != mcItemAlign.TopCenter) ? ButtonState.Normal : ButtonState.Checked); " is 128.
Long Statement,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,OnPaintBackground,The length of the statement  "			ControlPaint.DrawButton(e.Graphics'm_bottomCenter'(m_default != mcItemAlign.BottomCenter) ? ButtonState.Normal : ButtonState.Checked); " is 134.
Long Statement,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,KeyboardHookProc,The length of the statement  "				NativeMethods.KeyboardHookStruct MyKeyboardHookStruct = (NativeMethods.KeyboardHookStruct) Marshal.PtrToStructure(lParam' typeof(NativeMethods.KeyboardHookStruct)); " is 164.
Long Statement,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,The length of the statement  "				currentMonth = m_calendar.Month.SelectedMonth.Year.ToString()+"-"+m_calendar.Month.SelectedMonth.Month.ToString()+"-01"; " is 120.
Long Statement,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,The length of the statement  "				DateTime minDate = DateTime.Parse(m_calendar.MinDate.Year.ToString()+"-"+m_calendar.MinDate.Month.ToString()+"-"+days.ToString()); " is 130.
Long Statement,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,The length of the statement  "				DateTime maxDate = DateTime.Parse(m_calendar.MaxDate.Year.ToString()+"-"+m_calendar.MaxDate.Month.ToString()+"-"+days.ToString()); " is 130.
Long Statement,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,The length of the statement  "			month = m_calendar.m_dateTimeFormat.GetMonthName(m_calendar.Month.SelectedMonth.Month)+" "+m_calendar.Month.SelectedMonth.Year.ToString();   " is 138.
Long Statement,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The length of the statement  "				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1); " is 149.
Long Statement,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The length of the statement  "				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight); " is 122.
Long Statement,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaySelect,The length of the statement  "                                DayStateChangedEventArgs args = new DayStateChangedEventArgs(m_days[i].Date.ToShortDateString()' mcDayState.Selected' mcDayState.Normal); " is 137.
Long Statement,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaySelect,The length of the statement  "                                DayStateChangedEventArgs args = new DayStateChangedEventArgs(m_days[i].Date.ToShortDateString()' mcDayState.Normal' mcDayState.Selected); " is 137.
Long Statement,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusMoved,The length of the statement  "                    args = new DayStateChangedEventArgs(m_days[m_dayInFocus].Date.ToShortDateString()' mcDayState.Selected' mcDayState.Normal); " is 123.
Long Statement,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,OnDragDrop,The length of the statement  "					DayDragDrop(this'new DayDragDropEventArgs(drgevent.Data'drgevent.KeyState'm_month.m_days[day].Date.ToShortDateString()));    " is 121.
Long Statement,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The length of the statement  "                                else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y)) " is 141.
Long Statement,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The length of the statement  "                                else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))    " is 141.
Long Statement,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,MouseClick,The length of the statement  "				week = gCalendar.GetWeekOfYear(m_calendar.Month.m_days[i*7].Date'm_calendar.m_dateTimeFormat.CalendarWeekRule'm_calendar.m_dateTimeFormat.FirstDayOfWeek); " is 154.
Long Statement,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,CalcWeek,The length of the statement  "				weeknr = gCalendar.GetWeekOfYear(dt'm_calendar.m_dateTimeFormat.CalendarWeekRule' m_calendar.m_dateTimeFormat.FirstDayOfWeek); " is 126.
Complex Conditional,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,Draw,The conditional expression  "((m_date.DayOfWeek == DayOfWeek.Saturday) && (m_month.Colors.Weekend.Saturday)) ||                   ((m_date.DayOfWeek == DayOfWeek.Sunday) && (m_month.Colors.Weekend.Sunday))"  is complex.
Complex Conditional,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,KeyboardHookProc,The conditional expression  "(nCode >= 0) && (KeyDown!=null || KeyUp!=null || KeyPress!=null)"  is complex.
Complex Conditional,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaySelect,The conditional expression  "((m_calendar.SelectTrailingDates) || (SelectedMonth.Month == m_days[i].Date.Month)) &&                              ((m_calendar.MinDate <= m_days[i].Date) && (m_calendar.MaxDate >= m_days[i].Date)) && (dayEnabled)"  is complex.
Complex Conditional,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusMoved,The conditional expression  "((m_calendar.SelectTrailingDates) || (SelectedMonth.Month == m_days[i].Date.Month)) &&                      ((m_calendar.MinDate <= m_days[i].Date) && (m_calendar.MaxDate >= m_days[i].Date)) && (dayEnabled) && (!args.Cancel)"  is complex.
Complex Conditional,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaysInArea,The conditional expression  "(m_days[t].Rectangle.Left >= m_selLeft) &&  					(m_days[t].Rectangle.Right <= m_selRight) &&  					(m_days[t].Rectangle.Top >= m_selTop) &&  					(m_days[t].Rectangle.Bottom <= m_selBottom)"  is complex.
Complex Conditional,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The conditional expression  "(m_calendar.ShowToday) && (today !=-1) &&   					((m_calendar.ShowTrailingDates) || (m_days[today].Date.Month == m_calendar.ActiveMonth.Month))"  is complex.
Complex Conditional,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectRange,The conditional expression  "(From>= m_minDate) && (From<=m_maxDate) &&   				(To>= m_minDate) && (To<=m_maxDate) &&  				(SelectionMode==mcSelectionMode.MultiExtended)"  is complex.
Complex Conditional,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectArea,The conditional expression  "(topLeft>= m_minDate) && (topLeft<=m_maxDate) &&   				(bottomRight>= m_minDate) && (bottomRight<=m_maxDate) &&  				(SelectionMode>=mcSelectionMode.MultiSimple)"  is complex.
Complex Conditional,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectArea,The conditional expression  "(topLeft>= m_minDate) && (topLeft<=m_maxDate) &&   				(bottomRight>= m_minDate) && (bottomRight<=m_maxDate) &&  				(SelectionMode==mcSelectionMode.MultiExtended)"  is complex.
Complex Conditional,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectRange,The conditional expression  "((fromDate>= m_minDate) && (toDate<=m_maxDate) &&  				(toDate>= m_minDate) && (toDate<=m_maxDate)) &&  				( (SelectionMode>=mcSelectionMode.MultiSimple) ||  				( (fromDate == toDate) &&  				(SelectionMode==mcSelectionMode.One)) )"  is complex.
Complex Conditional,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,PreProcessMessage,The conditional expression  "(keyCode == m_keyboard.Up) ||                               (keyCode == m_keyboard.Down) ||                               (keyCode == m_keyboard.Left) ||                               (keyCode == m_keyboard.Right) ||                               (keyCode == m_keyboard.Select) ||                               (keyCode == m_keyboard.NextMonth) ||                               (keyCode == m_keyboard.NextYear) ||                               (keyCode == m_keyboard.PreviousMonth) ||                               (keyCode == m_keyboard.PreviousYear)"  is complex.
Empty Catch Block,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,InstallKeyboardHook,The method has an empty catch block.
Empty Catch Block,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,RemoveKeyboardHook,The method has an empty catch block.
Empty Catch Block,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnMouseMove,The method has an empty catch block.
Empty Catch Block,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,PaintValue,The method has an empty catch block.
Empty Catch Block,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The method has an empty catch block.
Empty Catch Block,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,Copy,The method has an empty catch block.
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,AlignControl,The following statement contains a magic number: this.Width = 75;
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,AlignControl,The following statement contains a magic number: this.Height = 75;
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: w = this.Width/3;
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: h = this.Height/3;
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_center = new Rectangle(w'h'System.Math.Max(this.Width-2*w'w)'h);
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_bottomLeft = new Rectangle(0'2*h'w'h);
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_bottomRight = new Rectangle(this.Width-w'2*h'w'h);
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_topCenter = new Rectangle(w'0'System.Math.Max(this.Width-2*w'w)'h);
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_bottomCenter = new Rectangle(w'2*h'System.Math.Max(this.Width-2*w'w)'h);
Magic Number,Pabo.Calendar,AlignControl,C:\repos\yyoon_Journaley\MonthCalendar\AlignControl.cs,SetupButtons,The following statement contains a magic number: m_bottomCenter = new Rectangle(w'2*h'System.Math.Max(this.Width-2*w'w)'h);
Magic Number,Pabo.Calendar,DateItemCollection,C:\repos\yyoon_Journaley\MonthCalendar\DateItemCollection.cs,DateInfo,The following statement contains a magic number: for (int i = 0;i<this.Count;i++)  			{  				if ( ((this[i].Date <= dt) && (this[i].Range >=dt)) )  				{  					switch (this[i].Pattern)  					{  						case mcDayInfoRecurrence.None:  						{  							if (this[i].Date.ToShortDateString()  == dt.ToShortDateString())  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}    						case mcDayInfoRecurrence.Daily:  						{  							this[i].Index = i;  							ret = AddInfo(this[i]'ret);  							break;  						}  						case mcDayInfoRecurrence.Weekly:  						{  							if ( (this[i].Date.DayOfWeek == dt.DayOfWeek) )  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Monthly:  						{  							if ( (this[i].Date.Day == dt.Day))  							{  								this[i].Index = i;																			  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Yearly:  						{  							if (this[i].Date.ToShortDateString().Substring(5) ==                                  dt.ToShortDateString().Substring(5))                           		{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  					}    				}  			}
Magic Number,Pabo.Calendar,DateItemCollection,C:\repos\yyoon_Journaley\MonthCalendar\DateItemCollection.cs,DateInfo,The following statement contains a magic number: for (int i = 0;i<this.Count;i++)  			{  				if ( ((this[i].Date <= dt) && (this[i].Range >=dt)) )  				{  					switch (this[i].Pattern)  					{  						case mcDayInfoRecurrence.None:  						{  							if (this[i].Date.ToShortDateString()  == dt.ToShortDateString())  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}    						case mcDayInfoRecurrence.Daily:  						{  							this[i].Index = i;  							ret = AddInfo(this[i]'ret);  							break;  						}  						case mcDayInfoRecurrence.Weekly:  						{  							if ( (this[i].Date.DayOfWeek == dt.DayOfWeek) )  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Monthly:  						{  							if ( (this[i].Date.Day == dt.Day))  							{  								this[i].Index = i;																			  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Yearly:  						{  							if (this[i].Date.ToShortDateString().Substring(5) ==                                  dt.ToShortDateString().Substring(5))                           		{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  					}    				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,Draw,The following statement contains a magic number: Color boldDateColor = Color.FromArgb(0' 127' 223);
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,Draw,The following statement contains a magic number: Color boldDateColor = Color.FromArgb(0' 127' 223);
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following statement contains a magic number: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Magic Number,Pabo.Calendar,Footer,C:\repos\yyoon_Journaley\MonthCalendar\Footer.cs,Footer,The following statement contains a magic number: m_font = new Font("Microsoft Sans Serif"'(float)8.25'FontStyle.Bold);
Magic Number,Pabo.Calendar,Footer,C:\repos\yyoon_Journaley\MonthCalendar\Footer.cs,Draw,The following statement contains a magic number: txtRect = new Rectangle(m_rect.Left + 2'm_rect.Top'm_rect.Width - (2*2)'m_rect.Height);
Magic Number,Pabo.Calendar,Footer,C:\repos\yyoon_Journaley\MonthCalendar\Footer.cs,Draw,The following statement contains a magic number: txtRect = new Rectangle(m_rect.Left + 2'm_rect.Top'm_rect.Width - (2*2)'m_rect.Height);
Magic Number,Pabo.Calendar,Footer,C:\repos\yyoon_Journaley\MonthCalendar\Footer.cs,Draw,The following statement contains a magic number: txtRect = new Rectangle(m_rect.Left + 2'm_rect.Top'm_rect.Width - (2*2)'m_rect.Height);
Magic Number,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown!=null || KeyUp!=null || KeyPress!=null))  			{  				NativeMethods.KeyboardHookStruct MyKeyboardHookStruct = (NativeMethods.KeyboardHookStruct) Marshal.PtrToStructure(lParam' typeof(NativeMethods.KeyboardHookStruct));  				// KeyDown  				if (  (KeyDown!=null) && ( wParam ==NativeMethods.WM_KEYDOWN || wParam==NativeMethods.WM_SYSKEYDOWN ))  				{  					Keys keyData=(Keys)MyKeyboardHookStruct.vkCode;  					KeyEventArgs e = new KeyEventArgs(keyData);  					this.KeyDown(this' e);  				}  				  				// KeyPress  				if ( (KeyPress!=null) && (wParam ==NativeMethods.WM_KEYDOWN) )  				{  					byte[] keyState = new byte[256];  					NativeMethods.GetKeyboardState(keyState);    					byte[] inBuffer= new byte[2];  					if (NativeMethods.ToAscii(MyKeyboardHookStruct.vkCode'  						MyKeyboardHookStruct.scanCode'  						keyState'  						inBuffer'  						MyKeyboardHookStruct.flags)==1)   					{  						KeyPressEventArgs e = new KeyPressEventArgs((char)inBuffer[0]);  						KeyPress(this' e);  					}  				}  				  				// KeyUp  				if ( (KeyUp!=null) && ( wParam ==NativeMethods.WM_KEYUP || wParam==NativeMethods.WM_SYSKEYUP ))  				{  					Keys keyData=(Keys)MyKeyboardHookStruct.vkCode;  					KeyEventArgs e = new KeyEventArgs(keyData);  					KeyUp(this' e);  				}    			}
Magic Number,Pabo.Calendar,GlobalHook,C:\repos\yyoon_Journaley\MonthCalendar\GlobalHook.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown!=null || KeyUp!=null || KeyPress!=null))  			{  				NativeMethods.KeyboardHookStruct MyKeyboardHookStruct = (NativeMethods.KeyboardHookStruct) Marshal.PtrToStructure(lParam' typeof(NativeMethods.KeyboardHookStruct));  				// KeyDown  				if (  (KeyDown!=null) && ( wParam ==NativeMethods.WM_KEYDOWN || wParam==NativeMethods.WM_SYSKEYDOWN ))  				{  					Keys keyData=(Keys)MyKeyboardHookStruct.vkCode;  					KeyEventArgs e = new KeyEventArgs(keyData);  					this.KeyDown(this' e);  				}  				  				// KeyPress  				if ( (KeyPress!=null) && (wParam ==NativeMethods.WM_KEYDOWN) )  				{  					byte[] keyState = new byte[256];  					NativeMethods.GetKeyboardState(keyState);    					byte[] inBuffer= new byte[2];  					if (NativeMethods.ToAscii(MyKeyboardHookStruct.vkCode'  						MyKeyboardHookStruct.scanCode'  						keyState'  						inBuffer'  						MyKeyboardHookStruct.flags)==1)   					{  						KeyPressEventArgs e = new KeyPressEventArgs((char)inBuffer[0]);  						KeyPress(this' e);  					}  				}  				  				// KeyUp  				if ( (KeyUp!=null) && ( wParam ==NativeMethods.WM_KEYUP || wParam==NativeMethods.WM_SYSKEYUP ))  				{  					Keys keyData=(Keys)MyKeyboardHookStruct.vkCode;  					KeyEventArgs e = new KeyEventArgs(keyData);  					KeyUp(this' e);  				}    			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Header,The following statement contains a magic number: m_backColor1 = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Header,The following statement contains a magic number: m_backColor1 = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Header,The following statement contains a magic number: m_font = new Font("Microsoft Sans Serif"'(float)8.25'FontStyle.Bold);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Header,The following statement contains a magic number: for(int k=0;k<12;k++)  			{  				monthMenu.MenuItems.Add(monthMenu.MenuItems.Count'   					new MenuItem(""));   				monthMenu.MenuItems[monthMenu.MenuItems.Count-1].Click+=new EventHandler(MonthContextMenu_Click);   			  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: int x = 10;
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_yearSelector)  			{  				  				m_prevYearBtnRect = new Rectangle(x'5'20'20);  				m_nextYearBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevYearBtnRect = new Rectangle(0'0'0'0);  				m_nextYearBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: if (m_monthSelector)  			{  				  				m_prevBtnRect = new Rectangle(x'5'20'20);  				m_nextBtnRect = new Rectangle(m_rect.Width-x-20'5'20'20);  				x+=20;  			}  			else  			{  				m_prevBtnRect = new Rectangle(0'0'0'0);  				m_nextBtnRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: m_textRect = new Rectangle(x + 2'0'm_rect.Width - (2*x)-8'm_rect.Height);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: m_textRect = new Rectangle(x + 2'0'm_rect.Width - (2*x)-8'm_rect.Height);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Setup,The following statement contains a magic number: m_textRect = new Rectangle(x + 2'0'm_rect.Width - (2*x)-8'm_rect.Height);
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following statement contains a magic number: if (Application.RenderWithVisualStyles)              {                  VisualStyleElement element = VisualStyleElement.Button.PushButton.Normal;                    if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          element = VisualStyleElement.Button.PushButton.Hot;                      else if (state == mcButtonState.Inactive)                          element = VisualStyleElement.Button.PushButton.Disabled;                      else if (state == mcButtonState.Pushed)                          element = VisualStyleElement.Button.PushButton.Pressed;                  }                  else element = VisualStyleElement.Button.PushButton.Disabled;                    VisualStyleRenderer renderer = new VisualStyleRenderer(element);                  renderer.DrawBackground(e' rect);                  switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }                                    if ((m_calendar.Enabled) && (state!=mcButtonState.Inactive))                        e.DrawImageUnscaled(image' new Point(x'y));                  else                      ControlPaint.DrawImageDisabled(e' image' x' y' Color.Transparent);                                }              else              {                  ButtonState btnState = ButtonState.Normal;                  if (m_calendar.Enabled)                  {                      if (state == mcButtonState.Hot)                          btnState = ButtonState.Normal;                      else if (state == mcButtonState.Inactive)                          btnState = ButtonState.Inactive;                      else if (state == mcButtonState.Pushed)                          btnState = ButtonState.Pushed;                  }                  else btnState = ButtonState.Inactive;                    switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }                                }
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,Init,The following statement contains a magic number: if (imageList!=null)  			{  				Brush bgBrush = new SolidBrush(BackgroundColor);  				Pen vPen = new Pen(VLinesColor);  				Pen hPen = new Pen(HLinesColor);  				Pen borderPen = new Pen(BorderColor);  						  				_imageList = imageList;  				_nColumns = columns;    				_defaultImage = defaultImage;  				if (_defaultImage > _imageList.Images.Count)  					_defaultImage = _imageList.Images.Count;  				if (_defaultImage < 0) _defaultImage = -1;  			  			  				nRows = imageList.Images.Count / _nColumns;  				if (imageList.Images.Count % _nColumns > 0) nRows++;    				_nRows = nRows;  				_nHSpace = horizontal;  				_nVSpace = vertical;  				_nItemWidth = _imageList.ImageSize.Width + horizontal;  				_nItemHeight = _imageList.ImageSize.Height + vertical;  				_nBitmapWidth = _nColumns * _nItemWidth + 1;  				_nBitmapHeight = _nRows * _nItemHeight + 1;  				this.Width = _nBitmapWidth;  				this.Height = _nBitmapHeight;      				_Bitmap = new Bitmap(_nBitmapWidth'_nBitmapHeight);  				Graphics grfx =	Graphics.FromImage(_Bitmap);  				grfx.FillRectangle(bgBrush' 0' 0' _nBitmapWidth' _nBitmapHeight);  				for (int i=0;i<_nColumns;i++)  					grfx.DrawLine(vPen' i*_nItemWidth' 0' i*_nItemWidth' _nBitmapHeight-1);  				for (int i=0;i<_nRows;i++)  					grfx.DrawLine(hPen' 0' i*_nItemHeight' _nBitmapWidth-1' i*_nItemHeight);  			  				grfx.DrawRectangle(borderPen' 0 '0 ' _nBitmapWidth-1' _nBitmapHeight-1);    				for (int i=0;i<_nColumns;i++)  					for (int j=0;j<_nRows ;j++)  					{  						if ((j*_nColumns+i) < imageList.Images.Count)  							imageList.Draw(grfx'  								i*_nItemWidth+_nHSpace/2'  								j*_nItemHeight+vertical/2'  								imageList.ImageSize.Width'  								imageList.ImageSize.Height'  								j*_nColumns+i);  	  					}    				/*	int a = (_defaultImage / _nColumns);  // rad  					int b = (_defaultImage % _nColumns); // kolumn;    					_nCoordX = b*(_nItemWidth+_nHSpace/2)-1;  					_nCoordY = a*(_nItemHeight+nVSpace/2)-1;  				*/	  			  				// Clean up  				bgBrush.Dispose();  				vPen.Dispose();  				hPen.Dispose();  				borderPen.Dispose();  								  				Invalidate();  				return true;  			}  			else throw new System.ArgumentNullException("imageList");
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,Init,The following statement contains a magic number: if (imageList!=null)  			{  				Brush bgBrush = new SolidBrush(BackgroundColor);  				Pen vPen = new Pen(VLinesColor);  				Pen hPen = new Pen(HLinesColor);  				Pen borderPen = new Pen(BorderColor);  						  				_imageList = imageList;  				_nColumns = columns;    				_defaultImage = defaultImage;  				if (_defaultImage > _imageList.Images.Count)  					_defaultImage = _imageList.Images.Count;  				if (_defaultImage < 0) _defaultImage = -1;  			  			  				nRows = imageList.Images.Count / _nColumns;  				if (imageList.Images.Count % _nColumns > 0) nRows++;    				_nRows = nRows;  				_nHSpace = horizontal;  				_nVSpace = vertical;  				_nItemWidth = _imageList.ImageSize.Width + horizontal;  				_nItemHeight = _imageList.ImageSize.Height + vertical;  				_nBitmapWidth = _nColumns * _nItemWidth + 1;  				_nBitmapHeight = _nRows * _nItemHeight + 1;  				this.Width = _nBitmapWidth;  				this.Height = _nBitmapHeight;      				_Bitmap = new Bitmap(_nBitmapWidth'_nBitmapHeight);  				Graphics grfx =	Graphics.FromImage(_Bitmap);  				grfx.FillRectangle(bgBrush' 0' 0' _nBitmapWidth' _nBitmapHeight);  				for (int i=0;i<_nColumns;i++)  					grfx.DrawLine(vPen' i*_nItemWidth' 0' i*_nItemWidth' _nBitmapHeight-1);  				for (int i=0;i<_nRows;i++)  					grfx.DrawLine(hPen' 0' i*_nItemHeight' _nBitmapWidth-1' i*_nItemHeight);  			  				grfx.DrawRectangle(borderPen' 0 '0 ' _nBitmapWidth-1' _nBitmapHeight-1);    				for (int i=0;i<_nColumns;i++)  					for (int j=0;j<_nRows ;j++)  					{  						if ((j*_nColumns+i) < imageList.Images.Count)  							imageList.Draw(grfx'  								i*_nItemWidth+_nHSpace/2'  								j*_nItemHeight+vertical/2'  								imageList.ImageSize.Width'  								imageList.ImageSize.Height'  								j*_nColumns+i);  	  					}    				/*	int a = (_defaultImage / _nColumns);  // rad  					int b = (_defaultImage % _nColumns); // kolumn;    					_nCoordX = b*(_nItemWidth+_nHSpace/2)-1;  					_nCoordY = a*(_nItemHeight+nVSpace/2)-1;  				*/	  			  				// Clean up  				bgBrush.Dispose();  				vPen.Dispose();  				hPen.Dispose();  				borderPen.Dispose();  								  				Invalidate();  				return true;  			}  			else throw new System.ArgumentNullException("imageList");
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.Calendar,ImageMapEditor,C:\repos\yyoon_Journaley\MonthCalendar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Month,The following statement contains a magic number: m_dateFont = new Font("Segoe UI"' (float)8.25);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Month,The following statement contains a magic number: m_textFont = new Font("Segoe UI"'(float)8.25);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Month,The following statement contains a magic number: m_days = new Day[42];
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Month,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				m_days[i] = new Day();  				m_days[i].Month = this;  				m_days[i].Calendar = m_calendar;              }
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaysInSelection,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				if ( (sel == m_days[i].SelectionArea) || ((sel==NO_AREA) && (m_days[i].State == mcDayState.Selected)) )  				{  					days = AddDate(m_days[i].Date.ToShortDateString()'days);    				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectionDayCount,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				if (sel == m_days[i].SelectionArea)  					nr++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,RemoveDay,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				// We dont want to add the day we are removing  				if (i!=day)  				{  					// Check if day belong to the same area as the day we are removing  					if (m_days[i].SelectionArea == sel)  					{  						// Create new selected day  						m_days[i].State = mcDayState.Normal;  						NewSelectedDay(i);  					}  				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DoubleClick,The following statement contains a magic number: if (monthRgn.IsVisible(mouseLocation))  			{  				for (int i = 0;i<42;i++)  				{  					if (m_days[i].HitTest(mouseLocation))  					{  						if (this.DayDoubleClick!=null)  							this.DayDoubleClick(this'new DayClickEventArgs(m_days[i].Date.ToShortDateString() 'button'                                                  mouseLocation.X - m_days[i].Rectangle.Left' mouseLocation.Y - m_days[i].Rectangle.Top'                                                  mouseLocation.X'mouseLocation.Y'm_days[i].Rectangle));  					}  				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Click,The following statement contains a magic number: if (m_region.IsVisible(mouseLocation))  			{  				for (int i = 0;i<42;i++)  				{  					if (m_days[i].HitTest(mouseLocation))  					{                            DaySelect(i' button' mouseLocation);                          break;  					}  				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,MouseMove,The following statement contains a magic number: if (mouseLocation != oldMouseLocation)              {                  oldMouseLocation = mouseLocation;                  // is mouse pointer inside month region                  if (m_region.IsVisible(mouseLocation))                  {                      m_calendar.ActiveRegion = mcCalendarRegion.Month;                      // Check which day has focus                      for (int i = 0; i < 42; i++)                      {                          if (m_days[i].HitTest(mouseLocation))                          {                                // Raise DayMouseMove event                              if (this.DayMouseMove != null)                                  this.DayMouseMove(this' new DayMouseMoveEventArgs(m_days[i].Date.ToShortDateString()'                                                mouseLocation.X - m_days[i].Rectangle.Left' mouseLocation.Y - m_days[i].Rectangle.Top'                                                mouseLocation.X' mouseLocation.Y' m_days[i].Rectangle));                                // check if its a new day                              if (m_dayInFocus != i)                              {                                  FocusMoved(i);                                                          }                              break;                          }                      }                  }                  else                  {                      RemoveFocus();                  }              }
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,GetDay,The following statement contains a magic number: for (int i = 0;i<42;i++)  				if (m_days[i].HitTest(mouseLocation))  					day = i;
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,RemoveFocus,The following statement contains a magic number: for (int i = 0;i<42;i++)  				if (m_days[i].State != mcDayState.Selected)  					m_days[i].State = mcDayState.Normal;
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DaysInArea,The following statement contains a magic number: for (int t = 0;t<42;t++)  			{  				if ((m_days[t].Rectangle.Left >= m_selLeft) &&  					(m_days[t].Rectangle.Right <= m_selRight) &&  					(m_days[t].Rectangle.Top >= m_selTop) &&  					(m_days[t].Rectangle.Bottom <= m_selBottom))  				{  					days.Add(t);  				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,RemoveSelection,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				// Reset all days or days within a selection to "Normal"  				if ( (m_days[i].SelectionArea == sel) || (sel == NO_AREA) && (m_days[i].State == mcDayState.Selected)  )  				{  					m_days[i].State = mcDayState.Normal;  					m_days[i].SelectionArea = -1;  				}  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Setup,The following statement contains a magic number: if (startPos == 0) startPos = 7;
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Setup,The following statement contains a magic number: for (i = startPos;i<42;i++)  			{  				m_days[i].Date = currentDate;  				currentDate = currentDate.AddDays(1);   			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The following statement contains a magic number: Brush selBrush = new SolidBrush(Color.FromArgb(25'Colors.Selected.BackColor));
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The following statement contains a magic number: Brush focusBrush = new SolidBrush(Color.FromArgb(35'Colors.Focus.BackColor));
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The following statement contains a magic number: Brush todayBrush = new SolidBrush(Color.FromArgb(50' Calendar.TodayColor));
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The following statement contains a magic number: try  			{                  if (BackgroundImage != null)                      e.DrawImage(BackgroundImage' Rect);                  else                  {                      if (Colors.GradientMode != mcGradientMode.None)                          m_calendar.DrawGradient(e' m_rect' Colors.BackColor1' Colors.BackColor2' Colors.GradientMode);                      else                          e.FillRectangle(bgBrush' m_rect);                  }  				// Draw days  				                  for (int i = 0;i<42;i++)  				{  					                      // only draw days that are visible...                      if ((m_days[i].Rectangle.Height > 0) && (m_days[i].Rectangle.Width > 0))                      {                          // Create new graphics object                          Graphics d = m_calendar.CreateGraphics();                          // Create bitmap..                                                Bitmap bmp = new Bitmap(m_days[i].Rectangle.Width' m_days[i].Rectangle.Height' d);                          // link graphics object to bitmap                          d = Graphics.FromImage(bmp);                          DayRenderEventArgs args = new DayRenderEventArgs(d' m_days[i].Rectangle' m_days[i].Date' m_days[i].State);                          DayRender(this' args);                          if (!args.OwnerDraw)                          {                              // day is not user drawn                              m_days[i].UserDrawn = false;                              DateItem dayInfo = new DateItem();                              dayInfo.Calendar = m_calendar;                              DayQueryInfoEventArgs info = new DayQueryInfoEventArgs(dayInfo' m_days[i].Date' m_days[i].State);                              DayQueryInfo(this' info);                              if (!info.OwnerDraw)                                  dayInfo = null;                              m_days[i].Draw(e' dayInfo);                              if (dayInfo != null)                                  dayInfo.Dispose();                          }                          else                          {                              // Draw user rendered day                              m_days[i].UserDrawn = true;                              e.DrawImage(bmp' m_days[i].Rectangle);                          }                            // Check if day has focus and if focus should be drawn                          if ((m_days[i].State == mcDayState.Focus) && (m_calendar.ShowFocus))                          {                              e.FillRectangle(focusBrush' m_days[i].Rectangle);                              ControlPaint.DrawBorder(e' m_days[i].Rectangle' Colors.Focus.Border' BorderStyles.Focus);                          }                            if ((m_days[i].Date == DateTime.Today) && (!args.OwnerDraw))                              today = i;                            d.Dispose();                          bmp.Dispose();                      }  				}  			  				// check if date is "today" and if it should be marked..  				if ( (m_calendar.ShowToday) && (today !=-1) &&   					((m_calendar.ShowTrailingDates) || (m_days[today].Date.Month == m_calendar.ActiveMonth.Month)) )    				{                        RectangleF dateRect = m_days[today].Rectangle;                        e.FillRectangle(todayBrush' dateRect);                  }    				// Check if a selection exist  			  				selectedDays = DaysInSelection(NO_AREA);  				if (selectedDays.Length>0)  				{  					// Check how many selection areas there are  					if (m_selArea.Count<=1)   					{  						for (int i = 0;i<m_selArea.Count;i++)  						{  							SelectionArea area = (SelectionArea)m_selArea[i];  							if ((area.Begin!=-1) && (area.End !=-1))  							{  								// Get Coordinates for selection rectangle  						  								m_selRight = System.Math.Max(m_days[area.End].Rectangle.Right'm_days[area.Begin].Rectangle.Right);   								m_selLeft = System.Math.Min(m_days[area.End].Rectangle.Left'm_days[area.Begin].Rectangle.Left);  								m_selTop = System.Math.Min(m_days[area.End].Rectangle.Top'm_days[area.Begin].Rectangle.Top);   								m_selBottom = System.Math.Max(m_days[area.End].Rectangle.Bottom'm_days[area.Begin].Rectangle.Bottom); 	  				  								// Draw selection  								Rectangle selRect = new Rectangle(m_selLeft'm_selTop'm_selRight-m_selLeft'm_selBottom-m_selTop);  								e.FillRectangle(selBrush'selRect);   								ControlPaint.DrawBorder(e'selRect'Colors.Selected.Border'BorderStyles.Selected);  	  							}  						  						}  					}  						// Multiple selection areas' we dont use border so we   						// draw each day individually to not overlap regions  					else  					{  						for (int i =0;i<42;i++)  						{  							if ((m_days[i].State==mcDayState.Selected) && (m_days[i].SelectionArea!=-1))  							{  								e.FillRectangle(selBrush'm_days[i].Rectangle);  							}  						}  					}  			  				}  			}  			catch (Exception)  			{    			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,Draw,The following statement contains a magic number: try  			{                  if (BackgroundImage != null)                      e.DrawImage(BackgroundImage' Rect);                  else                  {                      if (Colors.GradientMode != mcGradientMode.None)                          m_calendar.DrawGradient(e' m_rect' Colors.BackColor1' Colors.BackColor2' Colors.GradientMode);                      else                          e.FillRectangle(bgBrush' m_rect);                  }  				// Draw days  				                  for (int i = 0;i<42;i++)  				{  					                      // only draw days that are visible...                      if ((m_days[i].Rectangle.Height > 0) && (m_days[i].Rectangle.Width > 0))                      {                          // Create new graphics object                          Graphics d = m_calendar.CreateGraphics();                          // Create bitmap..                                                Bitmap bmp = new Bitmap(m_days[i].Rectangle.Width' m_days[i].Rectangle.Height' d);                          // link graphics object to bitmap                          d = Graphics.FromImage(bmp);                          DayRenderEventArgs args = new DayRenderEventArgs(d' m_days[i].Rectangle' m_days[i].Date' m_days[i].State);                          DayRender(this' args);                          if (!args.OwnerDraw)                          {                              // day is not user drawn                              m_days[i].UserDrawn = false;                              DateItem dayInfo = new DateItem();                              dayInfo.Calendar = m_calendar;                              DayQueryInfoEventArgs info = new DayQueryInfoEventArgs(dayInfo' m_days[i].Date' m_days[i].State);                              DayQueryInfo(this' info);                              if (!info.OwnerDraw)                                  dayInfo = null;                              m_days[i].Draw(e' dayInfo);                              if (dayInfo != null)                                  dayInfo.Dispose();                          }                          else                          {                              // Draw user rendered day                              m_days[i].UserDrawn = true;                              e.DrawImage(bmp' m_days[i].Rectangle);                          }                            // Check if day has focus and if focus should be drawn                          if ((m_days[i].State == mcDayState.Focus) && (m_calendar.ShowFocus))                          {                              e.FillRectangle(focusBrush' m_days[i].Rectangle);                              ControlPaint.DrawBorder(e' m_days[i].Rectangle' Colors.Focus.Border' BorderStyles.Focus);                          }                            if ((m_days[i].Date == DateTime.Today) && (!args.OwnerDraw))                              today = i;                            d.Dispose();                          bmp.Dispose();                      }  				}  			  				// check if date is "today" and if it should be marked..  				if ( (m_calendar.ShowToday) && (today !=-1) &&   					((m_calendar.ShowTrailingDates) || (m_days[today].Date.Month == m_calendar.ActiveMonth.Month)) )    				{                        RectangleF dateRect = m_days[today].Rectangle;                        e.FillRectangle(todayBrush' dateRect);                  }    				// Check if a selection exist  			  				selectedDays = DaysInSelection(NO_AREA);  				if (selectedDays.Length>0)  				{  					// Check how many selection areas there are  					if (m_selArea.Count<=1)   					{  						for (int i = 0;i<m_selArea.Count;i++)  						{  							SelectionArea area = (SelectionArea)m_selArea[i];  							if ((area.Begin!=-1) && (area.End !=-1))  							{  								// Get Coordinates for selection rectangle  						  								m_selRight = System.Math.Max(m_days[area.End].Rectangle.Right'm_days[area.Begin].Rectangle.Right);   								m_selLeft = System.Math.Min(m_days[area.End].Rectangle.Left'm_days[area.Begin].Rectangle.Left);  								m_selTop = System.Math.Min(m_days[area.End].Rectangle.Top'm_days[area.Begin].Rectangle.Top);   								m_selBottom = System.Math.Max(m_days[area.End].Rectangle.Bottom'm_days[area.Begin].Rectangle.Bottom); 	  				  								// Draw selection  								Rectangle selRect = new Rectangle(m_selLeft'm_selTop'm_selRight-m_selLeft'm_selBottom-m_selTop);  								e.FillRectangle(selBrush'selRect);   								ControlPaint.DrawBorder(e'selRect'Colors.Selected.Border'BorderStyles.Selected);  	  							}  						  						}  					}  						// Multiple selection areas' we dont use border so we   						// draw each day individually to not overlap regions  					else  					{  						for (int i =0;i<42;i++)  						{  							if ((m_days[i].State==mcDayState.Selected) && (m_days[i].SelectionArea!=-1))  							{  								e.FillRectangle(selBrush'm_days[i].Rectangle);  							}  						}  					}  			  				}  			}  			catch (Exception)  			{    			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: m_dayHeight = (float)((m_rect.Height - (m_padding.Vertical*7))  / 6);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: m_dayHeight = (float)((m_rect.Height - (m_padding.Vertical*7))  / 6);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: m_dayWidth =  (float)((m_rect.Width - (m_padding.Horizontal*8)) / 7);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: m_dayWidth =  (float)((m_rect.Width - (m_padding.Horizontal*8)) / 7);
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,Month,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SetupDays,The following statement contains a magic number: for (int i = 0;i<6;i++)  // rows  			{  				col = 0;  				for (int j = 0;j<7;j++)  // colums  				{  					dayRect.X = (int)(m_dayWidth * col)+(col+1)*m_padding.Horizontal+ m_rect.Left;  					dayRect.Y = (int)(m_dayHeight *row)+(row+1)*m_padding.Vertical + m_rect.Top;  					if (j ==6)  						dayRect.Width = m_rect.Width - (int)(m_padding.Horizontal*8) - (int)(m_dayWidth*6)-1;  					else  						dayRect.Width = (int)m_dayWidth;  					if ( i==5)  						dayRect.Height = m_rect.Height - (int)(m_padding.Vertical*7) - (int)(m_dayHeight*5)-1;  					else  						dayRect.Height = (int)m_dayHeight;  									  					m_days[index].Rectangle = dayRect;  					index++;  					col++;  				}  				row++;  			}
Magic Number,Pabo.Calendar,DisabledColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DisabledColors,The following statement contains a magic number: m_backColor1 = Color.FromArgb(233' 233' 233);
Magic Number,Pabo.Calendar,DisabledColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DisabledColors,The following statement contains a magic number: m_backColor1 = Color.FromArgb(233' 233' 233);
Magic Number,Pabo.Calendar,DisabledColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,DisabledColors,The following statement contains a magic number: m_backColor1 = Color.FromArgb(233' 233' 233);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(49' 106' 197);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(49' 106' 197);
Magic Number,Pabo.Calendar,SelectedColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,SelectedColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(49' 106' 197);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_backColor = Color.FromArgb(200' 200' 200);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(152' 180' 226);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(152' 180' 226);
Magic Number,Pabo.Calendar,FocusColors,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,FocusColors,The following statement contains a magic number: m_borderColor = Color.FromArgb(152' 180' 226);
Magic Number,Pabo.Calendar,MonthPadding,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,MonthPadding,The following statement contains a magic number: m_horizontal = 2;
Magic Number,Pabo.Calendar,MonthPadding,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,MonthPadding,The following statement contains a magic number: m_vertical = 2;
Magic Number,Pabo.Calendar,TransparencyCollection,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,TransparencyCollection,The following statement contains a magic number: m_background = 175;
Magic Number,Pabo.Calendar,TransparencyCollection,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,TransparencyCollection,The following statement contains a magic number: m_text = 255;
Magic Number,Pabo.Calendar,MonthPaddingTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  				{  					// Parse property string  					string[] ss = value.ToString().Split(new char[] {';'}' 2);  					if (ss.Length==2)  					{  						// Create new PaddingCollection  						MonthPadding item = new MonthPadding((Month)context.Instance);   						// Set properties  						item.Horizontal = int.Parse(ss[0]);  						item.Vertical = int.Parse(ss[1]);   						return item;				  					}  				}
Magic Number,Pabo.Calendar,MonthPaddingTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  				{  					// Parse property string  					string[] ss = value.ToString().Split(new char[] {';'}' 2);  					if (ss.Length==2)  					{  						// Create new PaddingCollection  						MonthPadding item = new MonthPadding((Month)context.Instance);   						// Set properties  						item.Horizontal = int.Parse(ss[0]);  						item.Vertical = int.Parse(ss[1]);   						return item;				  					}  				}
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))                  {                      // Parse property string                      string[] ss = value.ToString().Split(new char[] { ';' }' 2);                      if (ss.Length == 2)                      {                          // Create new PaddingCollection                          TransparencyCollection item = new TransparencyCollection((Month)context.Instance);                          // Set properties                          item.Background = int.Parse(ss[0]);                          item.Text = int.Parse(ss[1]);                                                                            if (item.Text > 255)                              item.Text = 255;                          if (item.Text < 0)                              item.Text = 0;                          if (item.Background > 255)                              item.Background = 255;                          if (item.Background < 0)                              item.Background = 0;                            return item;                      }                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string) && (dest != null))                  {                      // create property string                      if (dest.Text > 255)                          dest.Text = 255;                      if (dest.Text < 0)                          dest.Text = 0;                      if (dest.Background > 255)                          dest.Background = 255;                      if (dest.Background < 0)                          dest.Background = 0;                        return dest.Background.ToString() + "; " + dest.Text.ToString();                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string) && (dest != null))                  {                      // create property string                      if (dest.Text > 255)                          dest.Text = 255;                      if (dest.Text < 0)                          dest.Text = 0;                      if (dest.Background > 255)                          dest.Background = 255;                      if (dest.Background < 0)                          dest.Background = 0;                        return dest.Background.ToString() + "; " + dest.Text.ToString();                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string) && (dest != null))                  {                      // create property string                      if (dest.Text > 255)                          dest.Text = 255;                      if (dest.Text < 0)                          dest.Text = 0;                      if (dest.Background > 255)                          dest.Background = 255;                      if (dest.Background < 0)                          dest.Background = 0;                        return dest.Background.ToString() + "; " + dest.Text.ToString();                  }
Magic Number,Pabo.Calendar,TransparencyTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\Month.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string) && (dest != null))                  {                      // create property string                      if (dest.Text > 255)                          dest.Text = 255;                      if (dest.Text < 0)                          dest.Text = 0;                      if (dest.Background > 255)                          dest.Background = 255;                      if (dest.Background < 0)                          dest.Background = 0;                        return dest.Background.ToString() + "; " + dest.Text.ToString();                  }
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthCalendar,The following statement contains a magic number: m_minDate = DateTime.Now.AddYears(-10);
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthCalendar,The following statement contains a magic number: m_maxDate = DateTime.Now.AddYears(10);
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthCalendar,The following statement contains a magic number: this.Width = 176;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthCalendar,The following statement contains a magic number: this.Height = 184;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IsSelected,The following statement contains a magic number: for (int i = 0;i<42;i++)  			{  				if (m_month.m_days[i].Date.ToShortDateString() == dt.ToShortDateString())     				{  					if (m_month.m_days[i].State == mcDayState.Selected)  						sel = true;  					break;  				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectRange,The following statement contains a magic number: if ( (From>= m_minDate) && (From<=m_maxDate) &&   				(To>= m_minDate) && (To<=m_maxDate) &&  				(SelectionMode==mcSelectionMode.MultiExtended) )  			{  				for (int i = 0;i<42;i++)  				{  					if (m_month.m_days[i].Date.ToShortDateString() == From.ToShortDateString())  						from = i;  					if (m_month.m_days[i].Date.ToShortDateString() == To.ToShortDateString())  						to = i;  					if ((from!=-1) && (to!=-1))  						break;  				}  				if ((from!=-1) && (to!=-1))  				{  					m_month.DeselectRange(from'to);   					this.Invalidate();   				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectArea,The following statement contains a magic number: if ( (topLeft>= m_minDate) && (topLeft<=m_maxDate) &&   				(bottomRight>= m_minDate) && (bottomRight<=m_maxDate) &&  				(SelectionMode>=mcSelectionMode.MultiSimple) )  			{                    if ( (topLeft.Year.ToString()+topLeft.Month.ToString() == bottomRight.Year.ToString()+ bottomRight.Month.ToString()) &&                       (ActiveMonth.Year.ToString() + ActiveMonth.Month.ToString() != topLeft.Year.ToString() + topLeft.Month.ToString()))                  {                      // Change month                      if (ActiveMonth.Year!=topLeft.Year)                           ActiveMonth.Year = topLeft.Year;                      if (ActiveMonth.Month != topLeft.Month)                          ActiveMonth.Month = topLeft.Month;                    }                                        for (int i = 0;i<42;i++)  				{  					if (m_month.m_days[i].Date.ToShortDateString() == topLeft.ToShortDateString())  						topleft = i;  					if (m_month.m_days[i].Date.ToShortDateString() == bottomRight.ToShortDateString())  						bottomright = i;  					if ((topleft!=-1) && (bottomright!=-1))  						break;  				}  				if ((topleft!=-1) && (bottomright!=-1))  				{  					m_month.SelectArea(topleft'bottomright);   					this.Invalidate();   				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectArea,The following statement contains a magic number: if ( (topLeft>= m_minDate) && (topLeft<=m_maxDate) &&   				(bottomRight>= m_minDate) && (bottomRight<=m_maxDate) &&  				(SelectionMode==mcSelectionMode.MultiExtended) )  			{  				for (int i = 0;i<42;i++)  				{  					if (m_month.m_days[i].Date.ToShortDateString() == topLeft.ToShortDateString())  						topleft = i;  					if (m_month.m_days[i].Date.ToShortDateString() == bottomRight.ToShortDateString())  						bottomright = i;  					if ((topleft!=-1) && (bottomright!=-1))  						break;  				}  				if ((topleft!=-1) && (bottomright!=-1))  				{  					m_month.DeselectArea(topleft'bottomright);   					this.Invalidate();   				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectRange,The following statement contains a magic number: if ( ((fromDate>= m_minDate) && (toDate<=m_maxDate) &&  				(toDate>= m_minDate) && (toDate<=m_maxDate)) &&  				( (SelectionMode>=mcSelectionMode.MultiSimple) ||  				( (fromDate == toDate) &&  				(SelectionMode==mcSelectionMode.One)) ) )  			{                    if ((fromDate.Year.ToString() + fromDate.Month.ToString() == toDate.Year.ToString() + toDate.Month.ToString()) &&                       (ActiveMonth.Year.ToString() + ActiveMonth.Month.ToString() != fromDate.Year.ToString() + fromDate.Month.ToString()))                  {                      // Change month                      if (ActiveMonth.Year != fromDate.Year)                          ActiveMonth.Year = fromDate.Year;                      if (ActiveMonth.Month != fromDate.Month)                          ActiveMonth.Month = fromDate.Month;                    }                                                      for (int i = 0;i<42;i++)  				{  					if (m_month.m_days[i].Date.ToShortDateString() == fromDate.ToShortDateString())  						from = i;  					if (m_month.m_days[i].Date.ToShortDateString() == toDate.ToShortDateString())  						to = i;  					if ((to!=-1) && (from!=-1))  						break;  				}  				if ((from!=-1) && (to!=-1))  				{  					m_month.SelectRange(from'to);   					this.Invalidate();   				}  			  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeekday,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i = 0;i<=6;i++)  				{  					if ((int)m_month.m_days[i].Weekday == (int)day)  					{  						m_month.SelectArea(i'i+35);  						this.Invalidate();  						break;  					}  				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeekday,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i = 0;i<=6;i++)  				{  					if ((int)m_month.m_days[i].Weekday == (int)day)  					{  						m_month.SelectArea(i'i+35);  						this.Invalidate();  						break;  					}  				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeekday,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i = 0;i<=6;i++)  				{  					if ((int)m_month.m_days[i].Weekday == (int)day)  					{  						m_month.DeselectArea(i'i+35);  						this.Invalidate();  						break;  					}  				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeekday,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i = 0;i<=6;i++)  				{  					if ((int)m_month.m_days[i].Weekday == (int)day)  					{  						m_month.DeselectArea(i'i+35);  						this.Invalidate();  						break;  					}  				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeek,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.SelectRange(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeek,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.SelectRange(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeek,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.SelectRange(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeek,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.SelectRange(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,SelectWeek,The following statement contains a magic number: if (m_selectionMode>=mcSelectionMode.MultiSimple)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.SelectRange(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeek,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.DeselectArea(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeek,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.DeselectArea(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeek,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.DeselectArea(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeek,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.DeselectArea(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DeselectWeek,The following statement contains a magic number: if (m_selectionMode==mcSelectionMode.MultiExtended)  			{  				for (int i=0;i<6;i++)  				{  					if (m_month.m_days[i*7].Week == week)  					{  						m_month.DeselectArea(i*7'(i*7)+6);  						this.Invalidate();  						break;  					}     				}  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IntToDayOfWeek,The following statement contains a magic number: switch (d)  			{  				case 0 : return DayOfWeek.Sunday;  				case 1 : return DayOfWeek.Monday;  				case 2 : return DayOfWeek.Tuesday;  				case 3 : return DayOfWeek.Wednesday;  				case 4 : return DayOfWeek.Thursday;  				case 5 : return DayOfWeek.Friday;  				case 6 : return DayOfWeek.Saturday;  				default : return DayOfWeek.Friday; // should never be used.  	   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IntToDayOfWeek,The following statement contains a magic number: switch (d)  			{  				case 0 : return DayOfWeek.Sunday;  				case 1 : return DayOfWeek.Monday;  				case 2 : return DayOfWeek.Tuesday;  				case 3 : return DayOfWeek.Wednesday;  				case 4 : return DayOfWeek.Thursday;  				case 5 : return DayOfWeek.Friday;  				case 6 : return DayOfWeek.Saturday;  				default : return DayOfWeek.Friday; // should never be used.  	   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IntToDayOfWeek,The following statement contains a magic number: switch (d)  			{  				case 0 : return DayOfWeek.Sunday;  				case 1 : return DayOfWeek.Monday;  				case 2 : return DayOfWeek.Tuesday;  				case 3 : return DayOfWeek.Wednesday;  				case 4 : return DayOfWeek.Thursday;  				case 5 : return DayOfWeek.Friday;  				case 6 : return DayOfWeek.Saturday;  				default : return DayOfWeek.Friday; // should never be used.  	   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IntToDayOfWeek,The following statement contains a magic number: switch (d)  			{  				case 0 : return DayOfWeek.Sunday;  				case 1 : return DayOfWeek.Monday;  				case 2 : return DayOfWeek.Tuesday;  				case 3 : return DayOfWeek.Wednesday;  				case 4 : return DayOfWeek.Thursday;  				case 5 : return DayOfWeek.Friday;  				case 6 : return DayOfWeek.Saturday;  				default : return DayOfWeek.Friday; // should never be used.  	   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,IntToDayOfWeek,The following statement contains a magic number: switch (d)  			{  				case 0 : return DayOfWeek.Sunday;  				case 1 : return DayOfWeek.Monday;  				case 2 : return DayOfWeek.Tuesday;  				case 3 : return DayOfWeek.Wednesday;  				case 4 : return DayOfWeek.Thursday;  				case 5 : return DayOfWeek.Friday;  				case 6 : return DayOfWeek.Saturday;  				default : return DayOfWeek.Friday; // should never be used.  	   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,AllowedMonths,The following statement contains a magic number: string[] monthList = new string[12];
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,AllowedMonths,The following statement contains a magic number: for (int i = 0;i<12;i++)  				monthList[i] = months[i];
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DayNames,The following statement contains a magic number: string[] dayList = new string[8];
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DayNames,The following statement contains a magic number: for (int i = 1;i<=7;i++)  				dayList[i] = days[i-1];
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthNumber,The following statement contains a magic number: if ((Convert.ToInt32(m)>=1) && (Convert.ToInt32(m)<=12))  			{  				ret = Convert.ToInt32(m);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DayNumber,The following statement contains a magic number: if ((Convert.ToInt32(m)>=0) && (Convert.ToInt32(m)<8))  			{  				ret = Convert.ToInt32(m);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MonthName,The following statement contains a magic number: if ((m >=1) && (m <=12))    			{  				name = validNames[m-1];   			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowHeader)  			{  				if (m_header.Font.Height > 31)  					y = 2 + this.Font.Height + 2;  				else   					y = 31;  				  				m_headerRect = new Rectangle(0'0'this.Width'y);  			}  			else  			{  				m_headerRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowHeader)  			{  				if (m_header.Font.Height > 31)  					y = 2 + this.Font.Height + 2;  				else   					y = 31;  				  				m_headerRect = new Rectangle(0'0'this.Width'y);  			}  			else  			{  				m_headerRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowHeader)  			{  				if (m_header.Font.Height > 31)  					y = 2 + this.Font.Height + 2;  				else   					y = 31;  				  				m_headerRect = new Rectangle(0'0'this.Width'y);  			}  			else  			{  				m_headerRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowHeader)  			{  				if (m_header.Font.Height > 31)  					y = 2 + this.Font.Height + 2;  				else   					y = 31;  				  				m_headerRect = new Rectangle(0'0'this.Width'y);  			}  			else  			{  				m_headerRect = new Rectangle(0'0'0'0);  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowWeeknumbers)  				x = 2 + (int)weekSize.Width + 2;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowWeeknumbers)  				x = 2 + (int)weekSize.Width + 2;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: m_weekdaysRect.Height = 2 + m_weekday.Font.Height + 2;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: m_weekdaysRect.Height = 2 + m_weekday.Font.Height + 2;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowFooter)  			{  				m_footerRect.Height = 2 + m_footer.Font.Height + 2 ;  				m_footerRect.Y = this.Height - m_footerRect.Height;  				m_footerRect.X = 0;  				m_footerRect.Width = this.Width;  				m_monthRect.Height = this.Height - m_footerRect.Height - y;  				m_weeknumbersRect.Height -= m_footerRect.Height;  			}  			else  			{  				m_footerRect = new Rectangle(0'0'0'0);  				m_monthRect.Height = this.Height - y;	  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,DoLayout,The following statement contains a magic number: if (ShowFooter)  			{  				m_footerRect.Height = 2 + m_footer.Font.Height + 2 ;  				m_footerRect.Y = this.Height - m_footerRect.Height;  				m_footerRect.X = 0;  				m_footerRect.Width = this.Width;  				m_monthRect.Height = this.Height - m_footerRect.Height - y;  				m_weeknumbersRect.Height -= m_footerRect.Height;  			}  			else  			{  				m_footerRect = new Rectangle(0'0'0'0);  				m_monthRect.Height = this.Height - y;	  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,OnEnter,The following statement contains a magic number: if ((m_month.DayInFocus==-1) && (m_activeRegion!=mcCalendarRegion.Month))              {                  for (int i = 0; i < 42; i++)                  {                      if (m_month.m_days[i].State == mcDayState.Normal)                      {                          m_month.DayInFocus = i;                          m_month.m_days[m_month.DayInFocus].State = mcDayState.Focus;                          Invalidate();                          break;                      }                  }                              }
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_hook_KeyDown,The following statement contains a magic number: switch(e.KeyCode)  			{  				case Keys.LControlKey:  				case Keys.RControlKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Ctrl)  						m_ctrlKey = true;  					break;  				}            		case Keys.LShiftKey:  				case Keys.RShiftKey:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Shift)  						m_ctrlKey = true;  					break;  				}  				case Keys.LMenu:  				{  					if (m_extendedKey == mcExtendedSelectionKey.Alt)  						m_ctrlKey = true;  					break;  				}                                    default:                  {                      if (m_keyboardEnabled)                      {                          if (Focused)                          {                              m_keyHandled = false;                              if (e.KeyCode == m_keyboard.Left)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-1);                                  else if ((m_month.DayInFocus-1 >=0) && (m_month.m_days[m_month.DayInFocus -1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                      m_month.FocusMoved(m_month.DayInFocus -1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Right)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(1);                                  else if ((m_month.DayInFocus+1 <=41) && (m_month.m_days[m_month.DayInFocus+1].Rectangle.Y == m_month.m_days[m_month.DayInFocus].Rectangle.Y))                                          m_month.FocusMoved(m_month.DayInFocus + 1);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.Up)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(-7);                                  else if (m_month.DayInFocus-7 >=0)                                      m_month.FocusMoved(m_month.DayInFocus -7);                                  m_keyHandled = true;                                 }                              if (e.KeyCode == m_keyboard.Down)                              {                                  if (!m_selectKeyDown)                                      MoveFocus(7);                                  else if (m_month.DayInFocus + 7 <=41)                                      m_month.FocusMoved(m_month.DayInFocus + 7);                                  m_keyHandled = true;                              }                              if (e.KeyCode == m_keyboard.NextMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(1);                              }                              if (e.KeyCode == m_keyboard.PreviousMonth)                              {                                  m_keyHandled = true;                                  ChangeMonth(-1);                              }                              if (e.KeyCode == m_keyboard.NextYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(12);                              }                              if (e.KeyCode == m_keyboard.PreviousYear)                              {                                  m_keyHandled = true;                                  ChangeMonth(-12);                              }                              if ((e.KeyCode == m_keyboard.Select) && (m_month.DayInFocus != -1))                              {                                  m_keyHandled = true;                                  if (!m_selectKeyDown)                                  {                                      m_selectKeyDown = true;                                          m_month.DaySelect(m_month.DayInFocus' m_selectButton'                                                        new Point(m_month.m_days[m_month.DayInFocus].Rectangle.X + 1'                                                                  m_month.m_days[m_month.DayInFocus].Rectangle.Y + 1));                                  }                                }                            }                      }                        break;                  }  			}
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MoveFocus,The following statement contains a magic number: if ((focus + step >= 0) && (focus +step <=41))              {                  m_keyHandled = true;                  m_month.DayInFocus = focus + step;                  if (m_month.m_days[focus+step].State == mcDayState.Normal)                      m_month.m_days[focus+step].State = mcDayState.Focus;                  if ((focus <= 41) && (focus>=0) && (m_month.m_days[focus].State == mcDayState.Focus))                      m_month.m_days[focus].State = mcDayState.Normal;                    Invalidate();              }              else m_keyHandled = false;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,MoveFocus,The following statement contains a magic number: if ((focus + step >= 0) && (focus +step <=41))              {                  m_keyHandled = true;                  m_month.DayInFocus = focus + step;                  if (m_month.m_days[focus+step].State == mcDayState.Normal)                      m_month.m_days[focus+step].State = mcDayState.Focus;                  if ((focus <= 41) && (focus>=0) && (m_month.m_days[focus].State == mcDayState.Focus))                      m_month.m_days[focus].State = mcDayState.Normal;                    Invalidate();              }              else m_keyHandled = false;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,UpdateSelectedCollection,The following statement contains a magic number: for (int i = 0; i < 42; i++)              {                  if (m_month.m_days[i].State == mcDayState.Selected)                  {                      m_selectedDates.Add(m_month.m_days[i].Date);                  }              }
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ChangeMonth,The following statement contains a magic number: if (oldMonth == month)                  // if so ' make sure the BeforeMonthChanged event will trigger for month                  if (month + 1 < 12)                      m_activeMonth.Month = month + 1;                  else                      m_activeMonth.Month = month - 1;
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_header_PrevYearButtonClick,The following statement contains a magic number: ChangeMonth(-12);
Magic Number,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,m_header_NextYearButtonClick,The following statement contains a magic number: ChangeMonth(12);
Magic Number,Pabo.Calendar,FirstDayOfWeekConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))  			{  				string[] validNames = new string[8];  				string[] dayNames = culture.DateTimeFormat.DayNames;  				validNames.Initialize();   			  	  				validNames[0] = "Default";  			  				for (int i = 1;i<=7;i++)  					validNames[i] = dayNames[i-1];  				  				if (value.GetType() == typeof(string))  				{  					for (int i = 0;i<validNames.Length;i++)  					{  						if (value.ToString().CompareTo(validNames[i])==0) 	  							return validNames[i];  					}  				}  				else if (value.GetType() == typeof(int))  				{  					int m = Convert.ToInt32(value);   					  					if ((m >=0) && (m <=7))    					{  						return validNames[m];   					}  				}  			}
Magic Number,Pabo.Calendar,FirstDayOfWeekConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))  			{  				string[] validNames = new string[8];  				string[] dayNames = culture.DateTimeFormat.DayNames;  				validNames.Initialize();   			  	  				validNames[0] = "Default";  			  				for (int i = 1;i<=7;i++)  					validNames[i] = dayNames[i-1];  				  				if (value.GetType() == typeof(string))  				{  					for (int i = 0;i<validNames.Length;i++)  					{  						if (value.ToString().CompareTo(validNames[i])==0) 	  							return validNames[i];  					}  				}  				else if (value.GetType() == typeof(int))  				{  					int m = Convert.ToInt32(value);   					  					if ((m >=0) && (m <=7))    					{  						return validNames[m];   					}  				}  			}
Magic Number,Pabo.Calendar,FirstDayOfWeekConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))  			{  				string[] validNames = new string[8];  				string[] dayNames = culture.DateTimeFormat.DayNames;  				validNames.Initialize();   			  	  				validNames[0] = "Default";  			  				for (int i = 1;i<=7;i++)  					validNames[i] = dayNames[i-1];  				  				if (value.GetType() == typeof(string))  				{  					for (int i = 0;i<validNames.Length;i++)  					{  						if (value.ToString().CompareTo(validNames[i])==0) 	  							return validNames[i];  					}  				}  				else if (value.GetType() == typeof(int))  				{  					int m = Convert.ToInt32(value);   					  					if ((m >=0) && (m <=7))    					{  						return validNames[m];   					}  				}  			}
Magic Number,Pabo.Calendar,FirstDayOfWeekConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))  			{  				MonthCalendar m = (MonthCalendar)context.Instance;  				ret = m.DayNumber(value.ToString());   				if ((ret >=0) && (ret<=7))  					return ret;  			}
Magic Number,Pabo.Calendar,MonthConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))  			{  				  				string[] validNames;  				validNames = culture.DateTimeFormat.MonthNames;  				if (value.GetType() == typeof(string))  				{  					for (int i = 0;i<validNames.Length;i++)  					{  						if (value.ToString().CompareTo(validNames[i])==0) 						  						//if ((value.ToString().ToLower() == validNames[i].ToLower()))   							return validNames[i];  					}  				}  				else if (value.GetType() == typeof(int))  				{  					int m = Convert.ToInt32(value);   					  					if ((m >=1) && (m <=12))    					{  						return validNames[m-1];   					}  				}  			}
Magic Number,Pabo.Calendar,MonthConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertFrom,The following statement contains a magic number: if (value.GetType() == typeof(string))  			{  				ActiveMonth m = (ActiveMonth)context.Instance;  				ret = m.Calendar.MonthNumber(value.ToString());   				if ((ret >=1) && (ret<=12))  					return ret;  			}
Magic Number,Pabo.Calendar,ActiveMonthTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  			{  				// Parse property string  				string[] ss = value.ToString().Split(new char[] {';'}' 2);  				if (ss.Length==2)  				{  					// Create new ActiveMonth  					ActiveMonth item;  					MonthCalendar m = (MonthCalendar)context.Instance;   					item = m.ActiveMonth;   					// Set properties  					item.Month = item.Calendar.MonthNumber(ss[0]);    					if (item.Calendar.IsYearValid(ss[1].Trim()))  					{  						item.Year= Convert.ToInt32(ss[1].Trim());   						return item;  					}  									  				}  			}
Magic Number,Pabo.Calendar,ActiveMonthTypeConverter,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  			{  				// Parse property string  				string[] ss = value.ToString().Split(new char[] {';'}' 2);  				if (ss.Length==2)  				{  					// Create new ActiveMonth  					ActiveMonth item;  					MonthCalendar m = (MonthCalendar)context.Instance;   					item = m.ActiveMonth;   					// Set properties  					item.Month = item.Calendar.MonthNumber(ss[0]);    					if (item.Calendar.IsYearValid(ss[1].Trim()))  					{  						item.Year= Convert.ToInt32(ss[1].Trim());   						return item;  					}  									  				}  			}
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Weekday,The following statement contains a magic number: m_textColor = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Weekday,The following statement contains a magic number: m_textColor = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Weekday,The following statement contains a magic number: m_font = new Font("Microsoft Sans Serif"'(float)8.25);
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,GetWeekDays,The following statement contains a magic number: string[] weekdays = new string[7] ;
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Draw,The following statement contains a magic number: for (int i = 0;i<7;i++)  			{  				dayRect.Y = m_rect.Y;  				dayRect.Width = dayWidth;   				dayRect.Height = m_rect.Height;  				dayRect.X =(dayWidth*i) + m_rect.X;                  dayRect.X += (i + 1) * m_calendar.Month.Padding.Horizontal;                  if (i==6)                      dayRect.Width = m_rect.Width - (int)(m_calendar.Month.Padding.Horizontal * 8) - (int)(dayWidth * 6) - 1;           		  				e.DrawString(weekdays[i]'this.Font'headerTextBrush'dayRect'textFormat);  			}
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Draw,The following statement contains a magic number: for (int i = 0;i<7;i++)  			{  				dayRect.Y = m_rect.Y;  				dayRect.Width = dayWidth;   				dayRect.Height = m_rect.Height;  				dayRect.X =(dayWidth*i) + m_rect.X;                  dayRect.X += (i + 1) * m_calendar.Month.Padding.Horizontal;                  if (i==6)                      dayRect.Width = m_rect.Width - (int)(m_calendar.Month.Padding.Horizontal * 8) - (int)(dayWidth * 6) - 1;           		  				e.DrawString(weekdays[i]'this.Font'headerTextBrush'dayRect'textFormat);  			}
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Draw,The following statement contains a magic number: for (int i = 0;i<7;i++)  			{  				dayRect.Y = m_rect.Y;  				dayRect.Width = dayWidth;   				dayRect.Height = m_rect.Height;  				dayRect.X =(dayWidth*i) + m_rect.X;                  dayRect.X += (i + 1) * m_calendar.Month.Padding.Horizontal;                  if (i==6)                      dayRect.Width = m_rect.Width - (int)(m_calendar.Month.Padding.Horizontal * 8) - (int)(dayWidth * 6) - 1;           		  				e.DrawString(weekdays[i]'this.Font'headerTextBrush'dayRect'textFormat);  			}
Magic Number,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Draw,The following statement contains a magic number: for (int i = 0;i<7;i++)  			{  				dayRect.Y = m_rect.Y;  				dayRect.Width = dayWidth;   				dayRect.Height = m_rect.Height;  				dayRect.X =(dayWidth*i) + m_rect.X;                  dayRect.X += (i + 1) * m_calendar.Month.Padding.Horizontal;                  if (i==6)                      dayRect.Width = m_rect.Width - (int)(m_calendar.Month.Padding.Horizontal * 8) - (int)(dayWidth * 6) - 1;           		  				e.DrawString(weekdays[i]'this.Font'headerTextBrush'dayRect'textFormat);  			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Weeknumber,The following statement contains a magic number: m_textColor = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Weeknumber,The following statement contains a magic number: m_textColor = Color.FromArgb(0'84'227);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Weeknumber,The following statement contains a magic number: m_font = new Font("Microsoft Sans Serif"'(float)8.25);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,MouseClick,The following statement contains a magic number: if (m_region.IsVisible(mouseLocation))  			{  				int week = 0;  				  				int i = ((mouseLocation.Y-m_rect.Top) / (int)m_calendar.Month.DayHeight);				  				week = gCalendar.GetWeekOfYear(m_calendar.Month.m_days[i*7].Date'm_calendar.m_dateTimeFormat.CalendarWeekRule'm_calendar.m_dateTimeFormat.FirstDayOfWeek);  				if (mode == mcClickMode.Single)  				{  					if (this.Click!=null)  						this.Click(this'new WeeknumberClickEventArgs(week'button));  				}  				else  				{  					if (this.DoubleClick!=null)  						this.DoubleClick(this'new WeeknumberClickEventArgs(week'button));  				}  		  			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following statement contains a magic number: for (int i = 0;i<6;i++)  			{  				weekRect.Y = m_rect.Y + dayHeight*i;                  weekRect.Y += (i+1)* m_calendar.Month.Padding.Vertical;                      weekRect.Width = m_rect.Width;   				weekRect.X =0;                  if (i == 5)                      weekRect.Height = m_rect.Height - (m_calendar.Month.Padding.Vertical*7) - (int)(dayHeight*5)-1;                  else                      weekRect.Height = dayHeight;  				  				weeknr = GetWeek(m_calendar.Month.m_days[i*7].Date);  				  				e.DrawString(weeknr.ToString()'this.Font'weekTextBrush'weekRect'textFormat);  					    			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following statement contains a magic number: for (int i = 0;i<6;i++)  			{  				weekRect.Y = m_rect.Y + dayHeight*i;                  weekRect.Y += (i+1)* m_calendar.Month.Padding.Vertical;                      weekRect.Width = m_rect.Width;   				weekRect.X =0;                  if (i == 5)                      weekRect.Height = m_rect.Height - (m_calendar.Month.Padding.Vertical*7) - (int)(dayHeight*5)-1;                  else                      weekRect.Height = dayHeight;  				  				weeknr = GetWeek(m_calendar.Month.m_days[i*7].Date);  				  				e.DrawString(weeknr.ToString()'this.Font'weekTextBrush'weekRect'textFormat);  					    			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following statement contains a magic number: for (int i = 0;i<6;i++)  			{  				weekRect.Y = m_rect.Y + dayHeight*i;                  weekRect.Y += (i+1)* m_calendar.Month.Padding.Vertical;                      weekRect.Width = m_rect.Width;   				weekRect.X =0;                  if (i == 5)                      weekRect.Height = m_rect.Height - (m_calendar.Month.Padding.Vertical*7) - (int)(dayHeight*5)-1;                  else                      weekRect.Height = dayHeight;  				  				weeknr = GetWeek(m_calendar.Month.m_days[i*7].Date);  				  				e.DrawString(weeknr.ToString()'this.Font'weekTextBrush'weekRect'textFormat);  					    			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following statement contains a magic number: for (int i = 0;i<6;i++)  			{  				weekRect.Y = m_rect.Y + dayHeight*i;                  weekRect.Y += (i+1)* m_calendar.Month.Padding.Vertical;                      weekRect.Width = m_rect.Width;   				weekRect.X =0;                  if (i == 5)                      weekRect.Height = m_rect.Height - (m_calendar.Month.Padding.Vertical*7) - (int)(dayHeight*5)-1;                  else                      weekRect.Height = dayHeight;  				  				weeknr = GetWeek(m_calendar.Month.m_days[i*7].Date);  				  				e.DrawString(weeknr.ToString()'this.Font'weekTextBrush'weekRect'textFormat);  					    			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following statement contains a magic number: for (int i = 0;i<6;i++)  			{  				weekRect.Y = m_rect.Y + dayHeight*i;                  weekRect.Y += (i+1)* m_calendar.Month.Padding.Vertical;                      weekRect.Width = m_rect.Width;   				weekRect.X =0;                  if (i == 5)                      weekRect.Height = m_rect.Height - (m_calendar.Month.Padding.Vertical*7) - (int)(dayHeight*5)-1;                  else                      weekRect.Height = dayHeight;  				  				weeknr = GetWeek(m_calendar.Month.m_days[i*7].Date);  				  				e.DrawString(weeknr.ToString()'this.Font'weekTextBrush'weekRect'textFormat);  					    			}
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetISO8601Weeknumber,The following statement contains a magic number: if (dt >= new DateTime(IsoYear' 12' 29))              {                  week1 = GetIsoWeekOne(IsoYear + 1);                  if (dt < week1)                  {                      week1 = GetIsoWeekOne(IsoYear);                  }                  else                  {                      IsoYear++;                  }              }              else              {                  week1 = GetIsoWeekOne(IsoYear);                  if (dt < week1)                  {                      week1 = GetIsoWeekOne(--IsoYear);                  }              }
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetISO8601Weeknumber,The following statement contains a magic number: if (dt >= new DateTime(IsoYear' 12' 29))              {                  week1 = GetIsoWeekOne(IsoYear + 1);                  if (dt < week1)                  {                      week1 = GetIsoWeekOne(IsoYear);                  }                  else                  {                      IsoYear++;                  }              }              else              {                  week1 = GetIsoWeekOne(IsoYear);                  if (dt < week1)                  {                      week1 = GetIsoWeekOne(--IsoYear);                  }              }
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetISO8601Weeknumber,The following statement contains a magic number: IsoWeek = (IsoYear * 100) + ((dt - week1).Days / 7 + 1);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetISO8601Weeknumber,The following statement contains a magic number: IsoWeek = (IsoYear * 100) + ((dt - week1).Days / 7 + 1);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetISO8601Weeknumber,The following statement contains a magic number: return IsoWeek % 100;
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetIsoWeekOne,The following statement contains a magic number: DateTime dt = new DateTime(Year' 1' 4);
Magic Number,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,GetIsoWeekOne,The following statement contains a magic number: if (dayNumber == 0)              {                  dayNumber = 7;              }
Missing Default,Pabo.Calendar,DateItemCollection,C:\repos\yyoon_Journaley\MonthCalendar\DateItemCollection.cs,DateInfo,The following switch statement is missing a default case: switch (this[i].Pattern)  					{  						case mcDayInfoRecurrence.None:  						{  							if (this[i].Date.ToShortDateString()  == dt.ToShortDateString())  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}    						case mcDayInfoRecurrence.Daily:  						{  							this[i].Index = i;  							ret = AddInfo(this[i]'ret);  							break;  						}  						case mcDayInfoRecurrence.Weekly:  						{  							if ( (this[i].Date.DayOfWeek == dt.DayOfWeek) )  							{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Monthly:  						{  							if ( (this[i].Date.Day == dt.Day))  							{  								this[i].Index = i;																			  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  						case mcDayInfoRecurrence.Yearly:  						{  							if (this[i].Date.ToShortDateString().Substring(5) ==                                  dt.ToShortDateString().Substring(5))                           		{  								this[i].Index = i;  								ret = AddInfo(this[i]'ret);  							}  							break;  						}  					}
Missing Default,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,GetStringAlignment,The following switch statement is missing a default case: switch (align)  			{  				case mcItemAlign.LeftCenter:  				{  					sf.Alignment = StringAlignment.Near;     					sf.LineAlignment = StringAlignment.Center;  					break;  				}  				case mcItemAlign.RightCenter:  				{  					sf.Alignment = StringAlignment.Far;     					sf.LineAlignment = StringAlignment.Center;  					break;  				}  				case mcItemAlign.TopCenter:  				{  					sf.Alignment = StringAlignment.Center;     					sf.LineAlignment = StringAlignment.Near;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					sf.Alignment = StringAlignment.Center;     					sf.LineAlignment = StringAlignment.Far;  					break;  				}  				case mcItemAlign.TopLeft:  				{  					sf.Alignment = StringAlignment.Near;     					sf.LineAlignment = StringAlignment.Near;  					break;  				}  				case mcItemAlign.TopRight:  				{  					sf.Alignment = StringAlignment.Far;     					sf.LineAlignment = StringAlignment.Near;  					break;  				}  				case mcItemAlign.Center:  				{  					sf.Alignment = StringAlignment.Center;     					sf.LineAlignment = StringAlignment.Center;  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					sf.Alignment = StringAlignment.Near;     					sf.LineAlignment = StringAlignment.Far;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					sf.Alignment = StringAlignment.Far;     					sf.LineAlignment = StringAlignment.Far;  					break;  				}  			}
Missing Default,Pabo.Calendar,Day,C:\repos\yyoon_Journaley\MonthCalendar\Day.cs,ImageRect,The following switch statement is missing a default case: switch (align)  			{  				  				case mcItemAlign.LeftCenter:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.RightCenter:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.TopCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.BottomCenter:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				  				case mcItemAlign.TopLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.TopRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Y + 2;  					break;  				}  				case mcItemAlign.Center:  				{  					imageRect.X = m_rect.X +((m_rect.Width/2) - (m_dayImage.Width/2));  					imageRect.Y = m_rect.Top +((m_rect.Height/2) - (m_dayImage.Height/2));  					break;  				}  				case mcItemAlign.BottomLeft:  				{  					imageRect.X = m_rect.X + 2;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;  					break;  				}  				case mcItemAlign.BottomRight:  				{  					imageRect.X = m_rect.Right - 2 - m_dayImage.Width;  					imageRect.Y = m_rect.Bottom -2 - m_dayImage.Height;	  					break;  				}  			}
Missing Default,Pabo.Calendar,Footer,C:\repos\yyoon_Journaley\MonthCalendar\Footer.cs,Draw,The following switch statement is missing a default case: switch (Align)  			{  				case mcTextAlign.Left:  				{  					textFormat.Alignment = StringAlignment.Near;  					break;  				}  				case mcTextAlign.Center:  				{  					textFormat.Alignment = StringAlignment.Center;  					break;  				}  				case mcTextAlign.Right:  				{  					textFormat.Alignment = StringAlignment.Far;  					break;  				}  			}
Missing Default,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,Draw,The following switch statement is missing a default case: switch (m_align)  			{  				case mcTextAlign.Center:  				{  					textFormat.Alignment = StringAlignment.Center;  					break;  				}  				case mcTextAlign.Left:  				{  					textFormat.Alignment = StringAlignment.Near;  					break;  				}  				case mcTextAlign.Right:  				{  					textFormat.Alignment = StringAlignment.Far;  					break;  				}  			}
Missing Default,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following switch statement is missing a default case: switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          image = m_prevMonthVs;                          x = rect.Left + 5;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.PreviousYear:                      {                          image = m_prevYearVs;                          x = rect.Left + 4;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          image = m_nextMonthVs;                          x = rect.Right - 13;                          y = rect.Top + 5;                          break;                      }                      case mcHeaderButtons.NextYear:                      {                          image = m_nextYearVs;                          x = rect.Right - 16;                           y = rect.Top + 5;                          break;                      }                                    }
Missing Default,Pabo.Calendar,Header,C:\repos\yyoon_Journaley\MonthCalendar\Header.cs,DrawButton,The following switch statement is missing a default case: switch (button)                  {                      case mcHeaderButtons.PreviousMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Left' btnState);                          break;                      }                      case mcHeaderButtons.NextMonth:                      {                          ControlPaint.DrawScrollButton(e' rect' ScrollButton.Right' btnState);                          break;                      }                      case mcHeaderButtons.NextYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_nextYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_nextYear' new Point(rect.Left + 3' rect.Top + 2 + corr));                          else                              e.DrawImage(m_nextYearDisabled' new Point(rect.Left + 3' rect.Top + 2 + corr));                                            break;                      }                      case mcHeaderButtons.PreviousYear:                      {                            ControlPaint.DrawButton(e' rect' btnState);                          if (state == mcButtonState.Pushed)                              corr = 1;                          if ((m_calendar.Enabled) && (m_prevYearBtnState != mcButtonState.Inactive))                              e.DrawImage(m_prevYear' new Point(rect.Left' rect.Top + 2 + corr));                          else                              e.DrawImage(m_prevYearDisabled' new Point(rect.Left' rect.Top + 2 + corr));                                              break;                      }                  }
Missing Default,Pabo.Calendar,ImageListPanel,C:\repos\yyoon_Journaley\MonthCalendar\ImageListPanel.cs,OnKeyDown,The following switch statement is missing a default case: switch(e.KeyCode)  				{  					case Keys.Down:  						if (_nCoordY<_nRows-1)  						{  							_nCoordY++;  							Invalidate();  						}  						break;  					case Keys.Up:  						if (_nCoordY>0)  						{  							_nCoordY--;  							Invalidate();  						}  						break;  					case Keys.Right:  						if (_nCoordX<_nColumns-1)  						{  							_nCoordX++;  							Invalidate();  						}  						break;  					case Keys.Left:  						if (_nCoordX>0)  						{  							_nCoordX--;  							Invalidate();  						}  						break;  					case Keys.Enter:  					case Keys.Space:  						// We fire the event only when the mouse is released  						int nImageId = _nCoordY*_nColumns + _nCoordX;  						if (ItemClick != null && nImageId>=0 && nImageId<_imageList.Images.Count)  						{  							ItemClick(this' new ImageListPanelEventArgs(nImageId));  							_nCoordX = -1;  							_nCoordY = -1;  							Hide();  						}  						break;  					case Keys.Escape:  						_nCoordX = -1;  						_nCoordY = -1;  						Hide();  						break;  				}
Missing Default,Pabo.Calendar,MonthCalendar,C:\repos\yyoon_Journaley\MonthCalendar\MonthCalendar.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)  			{  				case NativeMethods.WM_THEMECHANGED:  				{  					// Theme has changed ' get new colors if Theme = true  					if (Theme)  						GetThemeColors();  					break;  				}  			}
Missing Default,Pabo.Calendar,Weekday,C:\repos\yyoon_Journaley\MonthCalendar\Weekday.cs,Draw,The following switch statement is missing a default case: switch (Align)  			{  				case mcTextAlign.Left:  				{  					textFormat.Alignment = StringAlignment.Near;  					break;  				}  				case mcTextAlign.Center:  				{  					textFormat.Alignment = StringAlignment.Center;  					break;  				}  				case mcTextAlign.Right:  				{  					textFormat.Alignment = StringAlignment.Far;  					break;  				}  			}
Missing Default,Pabo.Calendar,Weeknumber,C:\repos\yyoon_Journaley\MonthCalendar\Weeknumber.cs,Draw,The following switch statement is missing a default case: switch (m_align)              {                  case mcWeeknumberAlign.Top:                  {                        textFormat.LineAlignment = StringAlignment.Near;                      break;                  }                  case mcWeeknumberAlign.Center:                  {                        textFormat.LineAlignment = StringAlignment.Center;                      break;                  }                  case mcWeeknumberAlign.Bottom:                  {                        textFormat.LineAlignment = StringAlignment.Far;                      break;                  }                    }
