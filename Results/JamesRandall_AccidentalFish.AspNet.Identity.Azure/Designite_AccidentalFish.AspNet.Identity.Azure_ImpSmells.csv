Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,Cyclomatic complexity of the method is 10
Complex Method,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,Cyclomatic complexity of the method is 8
Complex Method,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,Cyclomatic complexity of the method is 8
Long Parameter List,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,TableUserStore,The method has 9 parameters. Parameters: storageAccount' createIfNotExist' userTableName' userIndexTableName' loginsTableName' loginProviderKeyIndexTableName' claimsTable' rolesTable' userEmailIndexTableName
Long Parameter List,Microsoft.WindowsAzure.ActiveDirectory,User,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateUser,The method has 8 parameters. Parameters: objectId' assignedLicenses' assignedPlans' otherMails' provisionedPlans' provisioningErrors' proxyAddresses' thumbnailPhoto
Long Parameter List,Microsoft.WindowsAzure.ActiveDirectory,Application,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateApplication,The method has 6 parameters. Parameters: objectId' identifierUris' keyCredentials' mainLogo' passwordCredentials' replyUrls
Long Parameter List,Microsoft.WindowsAzure.ActiveDirectory,ServicePrincipal,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateServicePrincipal,The method has 6 parameters. Parameters: objectId' keyCredentials' passwordCredentials' replyUrls' servicePrincipalNames' tags
Long Parameter List,Microsoft.WindowsAzure.ActiveDirectory,TenantDetail,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateTenantDetail,The method has 7 parameters. Parameters: objectId' assignedPlans' marketingNotificationEmails' provisionedPlans' provisioningErrors' technicalNotificationMails' verifiedDomains
Long Parameter List,Graph.Extensions.Service,User,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateUser,The method has 8 parameters. Parameters: objectId' assignedLicenses' assignedPlans' otherMails' provisionedPlans' provisioningErrors' proxyAddresses' thumbnailPhoto
Long Parameter List,Graph.Extensions.Service,Application,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateApplication,The method has 6 parameters. Parameters: objectId' identifierUris' keyCredentials' mainLogo' passwordCredentials' replyUrls
Long Parameter List,Graph.Extensions.Service,ServicePrincipal,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateServicePrincipal,The method has 6 parameters. Parameters: objectId' keyCredentials' passwordCredentials' replyUrls' servicePrincipalNames' tags
Long Parameter List,Graph.Extensions.Service,TenantDetail,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,CreateTenantDetail,The method has 7 parameters. Parameters: objectId' assignedPlans' marketingNotificationEmails' provisionedPlans' provisioningErrors' technicalNotificationMails' verifiedDomains
Long Identifier,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,TableUserStore,The length of the parameter loginProviderKeyIndexTableName is 30.
Long Identifier,Microsoft.WindowsAzure.ActiveDirectory,Device,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,,The length of the parameter _approximateLastLogonTimestamp is 30.
Long Identifier,Graph.Extensions.Service,Device,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryServiceReference.cs,,The length of the parameter _approximateLastLogonTimestamp is 30.
Long Statement,AccidentalFish.AspNet.Identity.Azure,GraphRoleClaimsAuthenticationManager,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphRoleClaimsAuthenticationManager.cs,Authenticate,The length of the statement  "// ReSharper disable once ReplaceWithSingleCallToSingleOrDefault - SingleOrDefault not supported on directory service directly " is 126.
Long Statement,AccidentalFish.AspNet.Identity.Azure,GraphRoleClaimsAuthenticationManager,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphRoleClaimsAuthenticationManager.cs,Authenticate,The length of the statement  "                User currentUser = graphService.directoryObjects.OfType<User>().Where(it => (it.objectId == currentUserObjectId)).SingleOrDefault(); " is 132.
Long Statement,AccidentalFish.AspNet.Identity.Azure,GraphRoleClaimsAuthenticationManager,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphRoleClaimsAuthenticationManager.cs,Authenticate,The length of the statement  "                    ((ClaimsIdentity) incomingPrincipal.Identity).AddClaim(new Claim(ClaimTypes.Role' role.displayName' ClaimValueTypes.String' _issuer)); " is 134.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserIndexBuilder,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserIndexBuilder.cs,BuildIndexes,The length of the statement  "                querySegment = await _userTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 128.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,CreateAsync,The length of the statement  "                        TableUserLoginProviderKeyIndex loginIndexItem = new TableUserLoginProviderKeyIndex(user.Id' login.ProviderKey' login.LoginProvider); " is 132.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveLoginAsync,The length of the statement  "            TableUserLoginProviderKeyIndex loginIndexItem = new TableUserLoginProviderKeyIndex(user.Id' login.ProviderKey' login.LoginProvider); " is 132.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The length of the statement  "                querySegment = await _loginTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 129.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The length of the statement  "                TableUserLoginProviderKeyIndex providerKeyIndex = new TableUserLoginProviderKeyIndex(user.Id' login.ProviderKey' login.LoginProvider); " is 134.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,FindAsync,The length of the statement  "            TableUserLoginProviderKeyIndex candidateIndex = new TableUserLoginProviderKeyIndex(""' login.ProviderKey' login.LoginProvider); " is 127.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,FindAsync,The length of the statement  "            TableResult loginProviderKeyIndexResult = await _loginProviderKeyIndexTable.ExecuteAsync(TableOperation.Retrieve<TableUserLoginProviderKeyIndex>(candidateIndex.PartitionKey' "")); " is 179.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,GetClaimsAsync,The length of the statement  "                querySegment = await _claimsTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 130.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,The length of the statement  "                querySegment = await _claimsTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 130.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,The length of the statement  "                querySegment = await _rolesTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 129.
Long Statement,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,GetRolesAsync,The length of the statement  "                querySegment = await _rolesTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null); " is 129.
Long Statement,Microsoft.WindowsAzure.ActiveDirectory,DirectoryDataService,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\DirectoryDataService_partial.cs,OnBuildingRequest,The length of the statement  "            string authzHeader = String.Format(CultureInfo.InvariantCulture' "{0}{1}{2}"' authenticationToken.TokenType' " "' authenticationToken.AccessToken); " is 147.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,CreateAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,DeleteAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,DeleteAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,DeleteAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,DeleteAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,The method has an empty catch block.
Empty Catch Block,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,The method has an empty catch block.
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserIndexBuilder,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserIndexBuilder.cs,BuildIndexes,The following statement contains a magic number: while (querySegment == null || querySegment.ContinuationToken != null)              {                  querySegment = await _userTable.ExecuteQuerySegmentedAsync(query' querySegment != null ? querySegment.ContinuationToken : null);                  foreach (TableUser tableUser in querySegment.Results)                  {                      TableUserIdIndex indexItem = new TableUserIdIndex(tableUser.UserName.Base64Encode()' tableUser.Id);                      insertOperation.Add(_userIndexTable.ExecuteAsync(TableOperation.InsertOrReplace(indexItem)));                      if (insertOperation.Count > 100)                      {                          await Task.WhenAll(insertOperation);                          insertOperation.Clear();                      }                  }                  if (insertOperation.Count > 0)                  {                      await Task.WhenAll(insertOperation);                      insertOperation.Clear();                  }              }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,CreateAsync,The following statement contains a magic number: try              {                  await _userIndexTable.ExecuteAsync(indexOperation);              }              catch (StorageException ex)              {                  if (ex.RequestInformation.HttpStatusCode == 409)                  {                      throw new DuplicateUsernameException();                  }                  throw;              }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,CreateAsync,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace(user.Email))              {                  TableUserEmailIndex emailIndexItem = new TableUserEmailIndex(user.Email.Base64Encode()' user.Id);                  TableOperation emailIndexOperation = TableOperation.Insert(emailIndexItem);                  try                  {                      await _userEmailIndexTable.ExecuteAsync(emailIndexOperation);                  }                  catch (StorageException ex)                  {                      try                      {                          indexItem.ETag = "*";                          TableOperation deleteOperation = TableOperation.Delete(indexItem);                          _userIndexTable.ExecuteAsync(deleteOperation).Wait();                      }                      catch (Exception)                      {                          // if we can't delete the index item throw out the exception below                      }                                              if (ex.RequestInformation.HttpStatusCode == 409)                      {                          throw new DuplicateEmailException();                      }                      throw;                  }              }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The following statement contains a magic number: foreach (TableUserLogin login in Logins)              {                  login.ETag = "*"; //Delete even if it has changed                  batch.Add(TableOperation.Delete(login));                  TableUserLoginProviderKeyIndex providerKeyIndex = new TableUserLoginProviderKeyIndex(user.Id' login.ProviderKey' login.LoginProvider);                  providerKeyIndex.ETag = "*";                  batchIndex.Add(TableOperation.Delete(providerKeyIndex));                    if (batch.Count >= 100 || batchIndex.Count >= 100)                  {                      try                      {                          //Try executing as a batch                          await _loginTable.ExecuteBatchAsync(batch);                          batch.Clear();                      }                      catch { }                        //If a batch wont work' try individually                      foreach (TableOperation op in batch)                      {                          try                          {                              await _loginTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        //Delete the index individually becase of the partition keys                      foreach (TableOperation op in batchIndex)                      {                          try                          {                              await _loginProviderKeyIndexTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        batch.Clear();                      batchIndex.Clear();                  }                }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The following statement contains a magic number: foreach (TableUserLogin login in Logins)              {                  login.ETag = "*"; //Delete even if it has changed                  batch.Add(TableOperation.Delete(login));                  TableUserLoginProviderKeyIndex providerKeyIndex = new TableUserLoginProviderKeyIndex(user.Id' login.ProviderKey' login.LoginProvider);                  providerKeyIndex.ETag = "*";                  batchIndex.Add(TableOperation.Delete(providerKeyIndex));                    if (batch.Count >= 100 || batchIndex.Count >= 100)                  {                      try                      {                          //Try executing as a batch                          await _loginTable.ExecuteBatchAsync(batch);                          batch.Clear();                      }                      catch { }                        //If a batch wont work' try individually                      foreach (TableOperation op in batch)                      {                          try                          {                              await _loginTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        //Delete the index individually becase of the partition keys                      foreach (TableOperation op in batchIndex)                      {                          try                          {                              await _loginProviderKeyIndexTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        batch.Clear();                      batchIndex.Clear();                  }                }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,The following statement contains a magic number: foreach (TableUserClaim claim in claims)              {                  claim.ETag = "*"; //Delete even it has changed                  batch.Add(TableOperation.Delete(claim));                  if (batch.Count >= 100)                  {                      try                      {                          //Try executing as a batch                          await _claimsTable.ExecuteBatchAsync(batch);                          batch.Clear();                      }                      catch {}                          //If a batch wont work' try individually                      foreach (TableOperation op in batch)                      {                          try                          {                              await _claimsTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        batch.Clear();                  }              }
Magic Number,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,The following statement contains a magic number: foreach (TableUserRole role in roles)              {                  role.ETag = "*"; //Delete even if it has changed                  batch.Add(TableOperation.Delete(role));                  if (batch.Count >= 100)                  {                      try                      {                          //Try executing as a batch                          await _rolesTable.ExecuteBatchAsync(batch);                          batch.Clear();                      }                      catch { }                        //If a batch wont work' try individually                      foreach (TableOperation op in batch)                      {                          try                          {                              await _rolesTable.ExecuteAsync(op);                          }                          catch                          {                              error = true;                          }                      }                        batch.Clear();                  }              }
Magic Number,Microsoft.WindowsAzure.ActiveDirectory.GraphHelper,AADJWTToken,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\GraphAPIHelper\AADJWTToken.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow.AddMinutes(minutes) - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Duplicate Code,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllLoginsAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 58)' (74' 100))
Duplicate Code,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveAllClaimsAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 41)' (47' 68))
Duplicate Code,AccidentalFish.AspNet.Identity.Azure,TableUserStore<T>,C:\repos\JamesRandall_AccidentalFish.AspNet.Identity.Azure\AccidentalFish.AspNet.Identity.Azure\TableUserStore.cs,RemoveFromAllRolesAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 40)' (46' 66))
